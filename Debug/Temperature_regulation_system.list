
Temperature_regulation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d144  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800d318  0800d318  0001d318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d874  0800d874  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d874  0800d874  0001d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d87c  0800d87c  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800d884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000027c  0800db00  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800db00  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a801  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fb  00000000  00000000  0003aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285cb  00000000  00000000  000409e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b60d  00000000  00000000  00068fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79cb  00000000  00000000  000845b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017bf83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070bc  00000000  00000000  0017bfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d2fc 	.word	0x0800d2fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000280 	.word	0x20000280
 800020c:	0800d2fc 	.word	0x0800d2fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fa47 	bl	80014d4 <null_ptr_check>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d117      	bne.n	8001082 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	20d0      	movs	r0, #208	; 0xd0
 800105a:	f000 f818 	bl	800108e <bmp2_get_regs>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b58      	cmp	r3, #88	; 0x58
 8001070:	d105      	bne.n	800107e <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fa79 	bl	800156a <get_calib_param>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800107e:	23fc      	movs	r3, #252	; 0xfc
 8001080:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b087      	sub	sp, #28
 8001092:	af00      	add	r7, sp, #0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	f000 fa18 	bl	80014d4 <null_ptr_check>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80010a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11e      	bne.n	80010ee <bmp2_get_regs+0x60>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d01b      	beq.n	80010ee <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68dc      	ldr	r4, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	7bf8      	ldrb	r0, [r7, #15]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	47a0      	blx	r4
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010e8:	23fe      	movs	r3, #254	; 0xfe
 80010ea:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010ec:	e001      	b.n	80010f2 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b08b      	sub	sp, #44	; 0x2c
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d901      	bls.n	8001116 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001112:	2304      	movs	r3, #4
 8001114:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f000 f9dc 	bl	80014d4 <null_ptr_check>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001126:	2b00      	cmp	r3, #0
 8001128:	d150      	bne.n	80011cc <bmp2_set_regs+0xce>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d04d      	beq.n	80011cc <bmp2_set_regs+0xce>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d04a      	beq.n	80011cc <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d043      	beq.n	80011c4 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d114      	bne.n	8001174 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]
 800114e:	e00d      	b.n	800116c <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	68f9      	ldr	r1, [r7, #12]
 800115c:	440b      	add	r3, r1
 800115e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	3301      	adds	r3, #1
 800116a:	77fb      	strb	r3, [r7, #31]
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8ed      	bhi.n	8001150 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d90b      	bls.n	8001192 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800117a:	f107 0114 	add.w	r1, r7, #20
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f000 f9c6 	bl	8001514 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3b01      	subs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e001      	b.n	8001196 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691c      	ldr	r4, [r3, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	7818      	ldrb	r0, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f107 0114 	add.w	r1, r7, #20
 80011a6:	6a3a      	ldr	r2, [r7, #32]
 80011a8:	47a0      	blx	r4
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011bc:	23fe      	movs	r3, #254	; 0xfe
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011c2:	e007      	b.n	80011d4 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011c4:	23fd      	movs	r3, #253	; 0xfd
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011ca:	e003      	b.n	80011d4 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011d2:	e000      	b.n	80011d6 <bmp2_set_regs+0xd8>
        if (len > 0)
 80011d4:	bf00      	nop
    }

    return rslt;
 80011d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80011da:	4618      	mov	r0, r3
 80011dc:	372c      	adds	r7, #44	; 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}

080011e2 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011ea:	23e0      	movs	r3, #224	; 0xe0
 80011ec:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011ee:	23b6      	movs	r3, #182	; 0xb6
 80011f0:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011f2:	f107 010d 	add.w	r1, r7, #13
 80011f6:	f107 000e 	add.w	r0, r7, #14
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f7ff ff7e 	bl	80010fe <bmp2_set_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800121c:	2300      	movs	r3, #0
 800121e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d02d      	beq.n	8001282 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001226:	f107 010c 	add.w	r1, r7, #12
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2202      	movs	r2, #2
 800122e:	20f4      	movs	r0, #244	; 0xf4
 8001230:	f7ff ff2d 	bl	800108e <bmp2_get_regs>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d122      	bne.n	8001286 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	109b      	asrs	r3, r3, #2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	109b      	asrs	r3, r3, #2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	715a      	strb	r2, [r3, #5]
 8001280:	e001      	b.n	8001286 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001282:	23ff      	movs	r3, #255	; 0xff
 8001284:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f9fd 	bl	80016a0 <conf_sensor>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012c0:	f107 010e 	add.w	r1, r7, #14
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2201      	movs	r2, #1
 80012c8:	20f3      	movs	r0, #243	; 0xf3
 80012ca:	f7ff fee0 	bl	800108e <bmp2_get_regs>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d110      	bne.n	80012fc <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	10db      	asrs	r3, r3, #3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	705a      	strb	r2, [r3, #1]
 80012f6:	e001      	b.n	80012fc <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f9bf 	bl	80016a0 <conf_sensor>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	2300      	movs	r3, #0
 8001342:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d024      	beq.n	800139e <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001354:	f107 0110 	add.w	r1, r7, #16
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2206      	movs	r2, #6
 800135c:	20f7      	movs	r0, #247	; 0xf7
 800135e:	f7ff fe96 	bl	800108e <bmp2_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fab9 	bl	80018f0 <parse_sensor_data>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10b      	bne.n	80013a2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f80b 	bl	80013ae <bmp2_compensate_data>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]
 800139c:	e001      	b.n	80013a2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800139e:	23ff      	movs	r3, #255	; 0xff
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f88a 	bl	80014d4 <null_ptr_check>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d129      	bne.n	8001420 <bmp2_compensate_data+0x72>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <bmp2_compensate_data+0x72>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3308      	adds	r3, #8
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fabb 	bl	8001978 <compensate_temperature>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10a      	bne.n	8001424 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fba7 	bl	8001b68 <compensate_pressure>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800141e:	e001      	b.n	8001424 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <bmp2_compute_meas_time+0x9c>)
 800143e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001442:	461d      	mov	r5, r3
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <bmp2_compute_meas_time+0xa0>)
 800144e:	f107 0410 	add.w	r4, r7, #16
 8001452:	461d      	mov	r5, r3
 8001454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800145c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f837 	bl	80014d4 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 800146c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001470:	2b00      	cmp	r3, #0
 8001472:	d122      	bne.n	80014ba <bmp2_compute_meas_time+0x8a>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01f      	beq.n	80014ba <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d111      	bne.n	80014a6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	3348      	adds	r3, #72	; 0x48
 800148a:	443b      	add	r3, r7
 800148c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	3348      	adds	r3, #72	; 0x48
 8001498:	443b      	add	r3, r7
 800149a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800149e:	441a      	add	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014a4:	e00c      	b.n	80014c0 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	78db      	ldrb	r3, [r3, #3]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	3348      	adds	r3, #72	; 0x48
 80014ae:	443b      	add	r3, r7
 80014b0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014b8:	e002      	b.n	80014c0 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014ba:	23ff      	movs	r3, #255	; 0xff
 80014bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80014c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	0800d318 	.word	0x0800d318
 80014d0:	0800d32c 	.word	0x0800d32c

080014d4 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <null_ptr_check+0x26>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <null_ptr_check+0x26>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <null_ptr_check+0x26>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e001      	b.n	8001504 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e015      	b.n	8001554 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	440b      	add	r3, r1
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	441a      	add	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	440b      	add	r3, r1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3e5      	bcc.n	8001528 <interleave_data+0x14>
    }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b08a      	sub	sp, #40	; 0x28
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001588:	f107 010c 	add.w	r1, r7, #12
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2219      	movs	r2, #25
 8001590:	2088      	movs	r0, #136	; 0x88
 8001592:	f7ff fd7c 	bl	800108e <bmp2_get_regs>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 800159c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d177      	bne.n	8001694 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015ca:	7c7b      	ldrb	r3, [r7, #17]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7c3b      	ldrb	r3, [r7, #16]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015dc:	7cfb      	ldrb	r3, [r7, #19]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7cbb      	ldrb	r3, [r7, #18]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7d3b      	ldrb	r3, [r7, #20]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7dbb      	ldrb	r3, [r7, #22]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21a      	sxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001614:	7e7b      	ldrb	r3, [r7, #25]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	7e3b      	ldrb	r3, [r7, #24]
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21a      	sxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7ebb      	ldrb	r3, [r7, #26]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001638:	7f7b      	ldrb	r3, [r7, #29]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	7f3b      	ldrb	r3, [r7, #28]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21a      	sxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7fbb      	ldrb	r3, [r7, #30]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 800165c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168c:	b25a      	sxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80016ae:	2300      	movs	r3, #0
 80016b0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80016b2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80016b6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d074      	beq.n	80017a8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016be:	f107 0114 	add.w	r1, r7, #20
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	20f4      	movs	r0, #244	; 0xf4
 80016c8:	f7ff fce1 	bl	800108e <bmp2_get_regs>
 80016cc:	4603      	mov	r3, r0
 80016ce:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d169      	bne.n	80017ac <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fd82 	bl	80011e2 <bmp2_soft_reset>
 80016de:	4603      	mov	r3, r0
 80016e0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d160      	bne.n	80017ac <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f861 	bl	80017b8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001710:	7d7b      	ldrb	r3, [r7, #21]
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f023 031c 	bic.w	r3, r3, #28
 8001718:	b25a      	sxtb	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	f003 031c 	and.w	r3, r3, #28
 8001726:	b25b      	sxtb	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001730:	7d7b      	ldrb	r3, [r7, #21]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	b25a      	sxtb	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	795b      	ldrb	r3, [r3, #5]
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800174e:	f107 0114 	add.w	r1, r7, #20
 8001752:	f107 0010 	add.w	r0, r7, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	f7ff fcd0 	bl	80010fe <bmp2_set_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <conf_sensor+0x10c>
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01d      	beq.n	80017ac <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001776:	7d3b      	ldrb	r3, [r7, #20]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001792:	f107 0114 	add.w	r1, r7, #20
 8001796:	f107 0010 	add.w	r0, r7, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f7ff fcae 	bl	80010fe <bmp2_set_regs>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
 80017a6:	e001      	b.n	80017ac <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017a8:	23ff      	movs	r3, #255	; 0xff
 80017aa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	f200 808b 	bhi.w	80018e2 <set_os_mode+0x12a>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <set_os_mode+0x1c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e9 	.word	0x080017e9
 80017d8:	0800181b 	.word	0x0800181b
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	080018b1 	.word	0x080018b1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 031c 	bic.w	r3, r3, #28
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            break;
 8001818:	e064      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	b25b      	sxtb	r3, r3
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	b25b      	sxtb	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f023 031c 	bic.w	r3, r3, #28
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	b25b      	sxtb	r3, r3
 8001844:	b2da      	uxtb	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	701a      	strb	r2, [r3, #0]
            break;
 800184a:	e04b      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	b25b      	sxtb	r3, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f023 031c 	bic.w	r3, r3, #28
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f043 030c 	orr.w	r3, r3, #12
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	701a      	strb	r2, [r3, #0]
            break;
 800187c:	e032      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b25b      	sxtb	r3, r3
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	b25b      	sxtb	r3, r3
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	f023 031c 	bic.w	r3, r3, #28
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	701a      	strb	r2, [r3, #0]
            break;
 80018ae:	e019      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f023 031c 	bic.w	r3, r3, #28
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	f043 0314 	orr.w	r3, r3, #20
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	701a      	strb	r2, [r3, #0]
            break;
 80018e0:	e000      	b.n	80018e4 <set_os_mode+0x12c>
        default:
            break;
 80018e2:	bf00      	nop
    }
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3302      	adds	r3, #2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3303      	adds	r3, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3305      	adds	r3, #5
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	b2db      	uxtb	r3, r3
 8001944:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	431a      	orrs	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f000 fae5 	bl	8001f30 <st_check_boundaries>
 8001966:	4603      	mov	r3, r0
 8001968:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800196a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b08c      	sub	sp, #48	; 0x30
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fde7 	bl	8000564 <__aeabi_i2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <compensate_temperature+0x1d4>)
 800199c:	f7fe ff76 	bl	800088c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4614      	mov	r4, r2
 80019a6:	461d      	mov	r5, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	8b9b      	ldrh	r3, [r3, #28]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_ui2d>
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <compensate_temperature+0x1d8>)
 80019b8:	f7fe ff68 	bl	800088c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc80 	bl	80002c8 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdc4 	bl	8000564 <__aeabi_i2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fe28 	bl	8000638 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdb5 	bl	8000564 <__aeabi_i2d>
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a02:	f7fe ff43 	bl	800088c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	8b9b      	ldrh	r3, [r3, #28]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd96 	bl	8000544 <__aeabi_ui2d>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <compensate_temperature+0x1dc>)
 8001a1e:	f7fe ff35 	bl	800088c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fc4d 	bl	80002c8 <__aeabi_dsub>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4614      	mov	r4, r2
 8001a34:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd92 	bl	8000564 <__aeabi_i2d>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a48:	f7fe ff20 	bl	800088c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4690      	mov	r8, r2
 8001a52:	4699      	mov	r9, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8b9b      	ldrh	r3, [r3, #28]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd73 	bl	8000544 <__aeabi_ui2d>
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <compensate_temperature+0x1dc>)
 8001a64:	f7fe ff12 	bl	800088c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f7fe fc2a 	bl	80002c8 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fddc 	bl	8000638 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd68 	bl	8000564 <__aeabi_i2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
    var2 =
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fdcc 	bl	8000638 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ab0:	f7fe fc0c 	bl	80002cc <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f86c 	bl	8000b98 <__aeabi_d2iz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe fbfd 	bl	80002cc <__adddf3>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <compensate_temperature+0x1e0>)
 8001ae0:	f7fe fed4 	bl	800088c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <compensate_temperature+0x1e4>)
 8001af2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001af6:	f7ff f811 	bl	8000b1c <__aeabi_dcmplt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <compensate_temperature+0x1e4>)
 8001b06:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <compensate_temperature+0x1e8>)
 8001b16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b1a:	f7ff f81d 	bl	8000b58 <__aeabi_dcmpgt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <compensate_temperature+0x1e8>)
 8001b2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3730      	adds	r7, #48	; 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4c:	40d00000 	.word	0x40d00000
 8001b50:	40900000 	.word	0x40900000
 8001b54:	40c00000 	.word	0x40c00000
 8001b58:	40b40000 	.word	0x40b40000
 8001b5c:	c0440000 	.word	0xc0440000
 8001b60:	40554000 	.word	0x40554000
 8001b64:	00000000 	.word	0x00000000

08001b68 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcea 	bl	8000564 <__aeabi_i2d>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	f7fe fe78 	bl	800088c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4bcb      	ldr	r3, [pc, #812]	; (8001ed8 <compensate_pressure+0x370>)
 8001baa:	f7fe fb8d 	bl	80002c8 <__aeabi_dsub>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bbe:	f7fe fd3b 	bl	8000638 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc7 	bl	8000564 <__aeabi_i2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fd2b 	bl	8000638 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4bbb      	ldr	r3, [pc, #748]	; (8001edc <compensate_pressure+0x374>)
 8001bf0:	f7fe fe4c 	bl	800088c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcae 	bl	8000564 <__aeabi_i2d>
 8001c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0c:	f7fe fd14 	bl	8000638 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	f7fe fb56 	bl	80002cc <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c28:	f7fe fb50 	bl	80002cc <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4ba9      	ldr	r3, [pc, #676]	; (8001ee0 <compensate_pressure+0x378>)
 8001c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3e:	f7fe fe25 	bl	800088c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	461d      	mov	r5, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc87 	bl	8000564 <__aeabi_i2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4ba2      	ldr	r3, [pc, #648]	; (8001ee4 <compensate_pressure+0x37c>)
 8001c5c:	f7fe fcec 	bl	8000638 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb30 	bl	80002cc <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc72 	bl	8000564 <__aeabi_i2d>
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	f7fe fcd8 	bl	8000638 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c94:	f7fe fcd0 	bl	8000638 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <compensate_pressure+0x380>)
 8001ca6:	f7fe fdf1 	bl	800088c <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc53 	bl	8000564 <__aeabi_i2d>
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	f7fe fcb9 	bl	8000638 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe fafd 	bl	80002cc <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <compensate_pressure+0x380>)
 8001ce0:	f7fe fdd4 	bl	800088c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <compensate_pressure+0x374>)
 8001cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf6:	f7fe fdc9 	bl	800088c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <compensate_pressure+0x384>)
 8001d08:	f7fe fae0 	bl	80002cc <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc13 	bl	8000544 <__aeabi_ui2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fc87 	bl	8000638 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3e:	f7fe feed 	bl	8000b1c <__aeabi_dcmplt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <compensate_pressure+0x1f8>
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d54:	f7fe ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80de 	beq.w	8001f1c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbed 	bl	8000544 <__aeabi_ui2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	495f      	ldr	r1, [pc, #380]	; (8001ef0 <compensate_pressure+0x388>)
 8001d74:	f7fe faa8 	bl	80002c8 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <compensate_pressure+0x38c>)
 8001d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d8a:	f7fe fd7f 	bl	800088c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d96:	f7fe fa97 	bl	80002c8 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a347      	add	r3, pc, #284	; (adr r3, 8001ec0 <compensate_pressure+0x358>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc46 	bl	8000638 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db8:	f7fe fd68 	bl	800088c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbca 	bl	8000564 <__aeabi_i2d>
 8001dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dd4:	f7fe fc30 	bl	8000638 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de4:	f7fe fc28 	bl	8000638 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <compensate_pressure+0x390>)
 8001df6:	f7fe fd49 	bl	800088c <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbab 	bl	8000564 <__aeabi_i2d>
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	f7fe fc11 	bl	8000638 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <compensate_pressure+0x374>)
 8001e24:	f7fe fd32 	bl	800088c <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e38:	f7fe fa48 	bl	80002cc <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb8a 	bl	8000564 <__aeabi_i2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa38 	bl	80002cc <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <compensate_pressure+0x394>)
 8001e6a:	f7fe fd0f 	bl	800088c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e76:	f7fe fa29 	bl	80002cc <__adddf3>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e82:	a311      	add	r3, pc, #68	; (adr r3, 8001ec8 <compensate_pressure+0x360>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e8c:	f7fe fe46 	bl	8000b1c <__aeabi_dcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e96:	a30c      	add	r3, pc, #48	; (adr r3, 8001ec8 <compensate_pressure+0x360>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001ea6:	a30a      	add	r3, pc, #40	; (adr r3, 8001ed0 <compensate_pressure+0x368>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eb0:	f7fe fe52 	bl	8000b58 <__aeabi_dcmpgt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	e022      	b.n	8001f00 <compensate_pressure+0x398>
 8001eba:	bf00      	nop
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40b86a00 	.word	0x40b86a00
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40dd4c00 	.word	0x40dd4c00
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40fadb00 	.word	0x40fadb00
 8001ed8:	40ef4000 	.word	0x40ef4000
 8001edc:	40e00000 	.word	0x40e00000
 8001ee0:	40100000 	.word	0x40100000
 8001ee4:	40f00000 	.word	0x40f00000
 8001ee8:	41200000 	.word	0x41200000
 8001eec:	3ff00000 	.word	0x3ff00000
 8001ef0:	41300000 	.word	0x41300000
 8001ef4:	40b00000 	.word	0x40b00000
 8001ef8:	41e00000 	.word	0x41e00000
 8001efc:	40300000 	.word	0x40300000
 8001f00:	d007      	beq.n	8001f12 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001f02:	a309      	add	r3, pc, #36	; (adr r3, 8001f28 <compensate_pressure+0x3c0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3730      	adds	r7, #48	; 0x30
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bdb0      	pop	{r4, r5, r7, pc}
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40fadb00 	.word	0x40fadb00

08001f30 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db03      	blt.n	8001f4c <st_check_boundaries+0x1c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	dd09      	ble.n	8001f60 <st_check_boundaries+0x30>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db06      	blt.n	8001f60 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	dc02      	bgt.n	8001f60 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f5a:	23fa      	movs	r3, #250	; 0xfa
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e023      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db03      	blt.n	8001f6e <st_check_boundaries+0x3e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	dd09      	ble.n	8001f82 <st_check_boundaries+0x52>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db06      	blt.n	8001f82 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	dc02      	bgt.n	8001f82 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f7c:	23fb      	movs	r3, #251	; 0xfb
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e012      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db03      	blt.n	8001f90 <st_check_boundaries+0x60>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	dd09      	ble.n	8001fa4 <st_check_boundaries+0x74>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db03      	blt.n	8001f9e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	dd02      	ble.n	8001fa4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f9e:	23f9      	movs	r3, #249	; 0xf9
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	000ffff0 	.word	0x000ffff0

08001fbc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff f837 	bl	8001038 <bmp2_init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f91c 	bl	8001212 <bmp2_get_config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f94e 	bl	8001292 <bmp2_set_config>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4619      	mov	r1, r3
 8002002:	2003      	movs	r0, #3
 8002004:	f7ff f980 	bl	8001308 <bmp2_set_power_mode>
 8002008:	4603      	mov	r3, r0
 800200a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 800200c:	f107 0108 	add.w	r1, r7, #8
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa0a 	bl	8001430 <bmp2_compute_meas_time>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6858      	ldr	r0, [r3, #4]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	891b      	ldrh	r3, [r3, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	f001 fdde 	bl	8003c14 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	f107 010f 	add.w	r1, r7, #15
 8002060:	2305      	movs	r3, #5
 8002062:	2201      	movs	r2, #1
 8002064:	f003 f8f5 	bl	8005252 <HAL_SPI_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2305      	movs	r3, #5
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	f003 fa59 	bl	800552e <HAL_SPI_Receive>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	7dbb      	ldrb	r3, [r7, #22]
 8002082:	4413      	add	r3, r2
 8002084:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6858      	ldr	r0, [r3, #4]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	891b      	ldrh	r3, [r3, #8]
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	f001 fdbf 	bl	8003c14 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002096:	7dbb      	ldrb	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <bmp2_spi_read+0x74>
    iError = -1;
 800209c:	23ff      	movs	r3, #255	; 0xff
 800209e:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6858      	ldr	r0, [r3, #4]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	891b      	ldrh	r3, [r3, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	f001 fd9e 	bl	8003c14 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	f107 010f 	add.w	r1, r7, #15
 80020e0:	2305      	movs	r3, #5
 80020e2:	2201      	movs	r2, #1
 80020e4:	f003 f8b5 	bl	8005252 <HAL_SPI_Transmit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2305      	movs	r3, #5
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	f003 f8ab 	bl	8005252 <HAL_SPI_Transmit>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	7dbb      	ldrb	r3, [r7, #22]
 8002102:	4413      	add	r3, r2
 8002104:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6858      	ldr	r0, [r3, #4]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	891b      	ldrh	r3, [r3, #8]
 800210e:	2201      	movs	r2, #1
 8002110:	4619      	mov	r1, r3
 8002112:	f001 fd7f 	bl	8003c14 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <bmp2_spi_write+0x74>
    iError = -1;
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <bmp2_delay_us+0x24>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	4618      	mov	r0, r3
 8002142:	f001 f9db 	bl	80034fc <HAL_Delay>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08d      	sub	sp, #52	; 0x34
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800215c:	23ff      	movs	r3, #255	; 0xff
 800215e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = -1.0;
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <BMP2_ReadTemperature_degC+0x98>)
 8002168:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = 10;
 800216c:	230a      	movs	r3, #10
 800216e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f899 	bl	80012b0 <bmp2_get_status>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f8d1 	bl	8001332 <bmp2_get_sensor_data>
 8002190:	4603      	mov	r3, r0
 8002192:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 8002196:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800219a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 800219e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021ac:	7f3b      	ldrb	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <BMP2_ReadTemperature_degC+0x66>
 80021b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dcdb      	bgt.n	8002172 <BMP2_ReadTemperature_degC+0x1e>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685c      	ldr	r4, [r3, #4]
 80021be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c2:	f7fe fd31 	bl	8000c28 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021d2:	729a      	strb	r2, [r3, #10]

  return temp;
 80021d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021dc:	eeb0 0a47 	vmov.f32	s0, s14
 80021e0:	eef0 0a67 	vmov.f32	s1, s15
 80021e4:	3734      	adds	r7, #52	; 0x34
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	bff00000 	.word	0xbff00000

080021f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002206:	4bb4      	ldr	r3, [pc, #720]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4ab3      	ldr	r2, [pc, #716]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4bb1      	ldr	r3, [pc, #708]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4bae      	ldr	r3, [pc, #696]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4aad      	ldr	r2, [pc, #692]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4bab      	ldr	r3, [pc, #684]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002236:	4ba8      	ldr	r3, [pc, #672]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4aa7      	ldr	r2, [pc, #668]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800223c:	f043 0320 	orr.w	r3, r3, #32
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4ba5      	ldr	r3, [pc, #660]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	4ba2      	ldr	r3, [pc, #648]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4aa1      	ldr	r2, [pc, #644]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a9b      	ldr	r2, [pc, #620]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b96      	ldr	r3, [pc, #600]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a8f      	ldr	r2, [pc, #572]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ae:	4b8a      	ldr	r3, [pc, #552]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a89      	ldr	r2, [pc, #548]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <MX_GPIO_Init+0x2e8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 80022c6:	2200      	movs	r2, #0
 80022c8:	f64f 5190 	movw	r1, #64912	; 0xfd90
 80022cc:	4883      	ldr	r0, [pc, #524]	; (80024dc <MX_GPIO_Init+0x2ec>)
 80022ce:	f001 fca1 	bl	8003c14 <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|COOLING_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f24e 0108 	movw	r1, #57352	; 0xe008
 80022d8:	4881      	ldr	r0, [pc, #516]	; (80024e0 <MX_GPIO_Init+0x2f0>)
 80022da:	f001 fc9b 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80022e4:	487f      	ldr	r0, [pc, #508]	; (80024e4 <MX_GPIO_Init+0x2f4>)
 80022e6:	f001 fc95 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f0:	487a      	ldr	r0, [pc, #488]	; (80024dc <MX_GPIO_Init+0x2ec>)
 80022f2:	f001 fc8f 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f244 2140 	movw	r1, #16960	; 0x4240
 80022fc:	487a      	ldr	r0, [pc, #488]	; (80024e8 <MX_GPIO_Init+0x2f8>)
 80022fe:	f001 fc89 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 8002302:	f642 0310 	movw	r3, #10256	; 0x2810
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4870      	ldr	r0, [pc, #448]	; (80024dc <MX_GPIO_Init+0x2ec>)
 800231c:	f001 fab6 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002326:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	486d      	ldr	r0, [pc, #436]	; (80024ec <MX_GPIO_Init+0x2fc>)
 8002338:	f001 faa8 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800233c:	2308      	movs	r3, #8
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002348:	2302      	movs	r3, #2
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	4863      	ldr	r0, [pc, #396]	; (80024e0 <MX_GPIO_Init+0x2f0>)
 8002354:	f001 fa9a 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8002358:	2320      	movs	r3, #32
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236a:	4619      	mov	r1, r3
 800236c:	485c      	ldr	r0, [pc, #368]	; (80024e0 <MX_GPIO_Init+0x2f0>)
 800236e:	f001 fa8d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8002372:	2301      	movs	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002376:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237c:	2301      	movs	r3, #1
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	4619      	mov	r1, r3
 8002386:	4859      	ldr	r0, [pc, #356]	; (80024ec <MX_GPIO_Init+0x2fc>)
 8002388:	f001 fa80 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800238c:	2332      	movs	r3, #50	; 0x32
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800239c:	230b      	movs	r3, #11
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4851      	ldr	r0, [pc, #324]	; (80024ec <MX_GPIO_Init+0x2fc>)
 80023a8:	f001 fa70 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 80023ac:	2304      	movs	r3, #4
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	484b      	ldr	r0, [pc, #300]	; (80024ec <MX_GPIO_Init+0x2fc>)
 80023c0:	f001 fa64 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 80023c4:	2308      	movs	r3, #8
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	4619      	mov	r1, r3
 80023d8:	4844      	ldr	r0, [pc, #272]	; (80024ec <MX_GPIO_Init+0x2fc>)
 80023da:	f001 fa57 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023de:	2386      	movs	r3, #134	; 0x86
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023ee:	230b      	movs	r3, #11
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	4619      	mov	r1, r3
 80023f8:	483d      	ldr	r0, [pc, #244]	; (80024f0 <MX_GPIO_Init+0x300>)
 80023fa:	f001 fa47 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023fe:	2310      	movs	r3, #16
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002402:	2303      	movs	r3, #3
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	4619      	mov	r1, r3
 8002410:	4837      	ldr	r0, [pc, #220]	; (80024f0 <MX_GPIO_Init+0x300>)
 8002412:	f001 fa3b 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002416:	2340      	movs	r3, #64	; 0x40
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002426:	2302      	movs	r3, #2
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242e:	4619      	mov	r1, r3
 8002430:	482f      	ldr	r0, [pc, #188]	; (80024f0 <MX_GPIO_Init+0x300>)
 8002432:	f001 fa2b 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002436:	f244 0381 	movw	r3, #16513	; 0x4081
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243c:	2301      	movs	r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	4619      	mov	r1, r3
 800244e:	4825      	ldr	r0, [pc, #148]	; (80024e4 <MX_GPIO_Init+0x2f4>)
 8002450:	f001 fa1c 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 8002454:	2302      	movs	r3, #2
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002458:	2303      	movs	r3, #3
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	481f      	ldr	r0, [pc, #124]	; (80024e4 <MX_GPIO_Init+0x2f4>)
 8002468:	f001 fa10 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = COOLING_Pin|DISP_2_Pin|DISP_4_Pin;
 800246c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	4816      	ldr	r0, [pc, #88]	; (80024e0 <MX_GPIO_Init+0x2f0>)
 8002486:	f001 fa01 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 800248a:	f24d 5380 	movw	r3, #54656	; 0xd580
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002490:	2311      	movs	r3, #17
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	480e      	ldr	r0, [pc, #56]	; (80024dc <MX_GPIO_Init+0x2ec>)
 80024a4:	f001 f9f2 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 80024a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	4619      	mov	r1, r3
 80024c0:	4806      	ldr	r0, [pc, #24]	; (80024dc <MX_GPIO_Init+0x2ec>)
 80024c2:	f001 f9e3 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e00d      	b.n	80024f4 <MX_GPIO_Init+0x304>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40021800 	.word	0x40021800
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024f6:	230b      	movs	r3, #11
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	484f      	ldr	r0, [pc, #316]	; (8002640 <MX_GPIO_Init+0x450>)
 8002502:	f001 f9c3 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATERD13_Pin;
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002518:	2302      	movs	r3, #2
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATERD13_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	4848      	ldr	r0, [pc, #288]	; (8002644 <MX_GPIO_Init+0x454>)
 8002524:	f001 f9b2 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002528:	2340      	movs	r3, #64	; 0x40
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4842      	ldr	r0, [pc, #264]	; (8002648 <MX_GPIO_Init+0x458>)
 8002540:	f001 f9a4 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	483c      	ldr	r0, [pc, #240]	; (8002648 <MX_GPIO_Init+0x458>)
 8002558:	f001 f998 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800256c:	2302      	movs	r3, #2
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	4619      	mov	r1, r3
 8002576:	4835      	ldr	r0, [pc, #212]	; (800264c <MX_GPIO_Init+0x45c>)
 8002578:	f001 f988 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800257c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800258e:	230a      	movs	r3, #10
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	482d      	ldr	r0, [pc, #180]	; (8002650 <MX_GPIO_Init+0x460>)
 800259a:	f001 f977 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800259e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b0:	4619      	mov	r1, r3
 80025b2:	4827      	ldr	r0, [pc, #156]	; (8002650 <MX_GPIO_Init+0x460>)
 80025b4:	f001 f96a 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 80025b8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025be:	2311      	movs	r3, #17
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ce:	4619      	mov	r1, r3
 80025d0:	481d      	ldr	r0, [pc, #116]	; (8002648 <MX_GPIO_Init+0x458>)
 80025d2:	f001 f95b 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025e8:	230b      	movs	r3, #11
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	4815      	ldr	r0, [pc, #84]	; (8002648 <MX_GPIO_Init+0x458>)
 80025f4:	f001 f94a 	bl	800388c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	2006      	movs	r0, #6
 80025fe:	f001 f87c 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002602:	2006      	movs	r0, #6
 8002604:	f001 f895 	bl	8003732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	2009      	movs	r0, #9
 800260e:	f001 f874 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002612:	2009      	movs	r0, #9
 8002614:	f001 f88d 	bl	8003732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2017      	movs	r0, #23
 800261e:	f001 f86c 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002622:	2017      	movs	r0, #23
 8002624:	f001 f885 	bl	8003732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2028      	movs	r0, #40	; 0x28
 800262e:	f001 f864 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002632:	2028      	movs	r0, #40	; 0x28
 8002634:	f001 f87d 	bl	8003732 <HAL_NVIC_EnableIRQ>

}
 8002638:	bf00      	nop
 800263a:	3738      	adds	r7, #56	; 0x38
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020400 	.word	0x40020400
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40021800 	.word	0x40021800
 800264c:	40020800 	.word	0x40020800
 8002650:	40020000 	.word	0x40020000

08002654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <MX_I2C1_Init+0x74>)
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <MX_I2C1_Init+0x78>)
 800265c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <MX_I2C1_Init+0x7c>)
 8002662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <MX_I2C1_Init+0x74>)
 800266c:	2201      	movs	r2, #1
 800266e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_I2C1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800268e:	480e      	ldr	r0, [pc, #56]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002690:	f001 faf2 	bl	8003c78 <HAL_I2C_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800269a:	f000 fad9 	bl	8002c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800269e:	2100      	movs	r1, #0
 80026a0:	4809      	ldr	r0, [pc, #36]	; (80026c8 <MX_I2C1_Init+0x74>)
 80026a2:	f001 fb79 	bl	8003d98 <HAL_I2CEx_ConfigAnalogFilter>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026ac:	f000 fad0 	bl	8002c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b0:	2100      	movs	r1, #0
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_I2C1_Init+0x74>)
 80026b4:	f001 fbbb 	bl	8003e2e <HAL_I2CEx_ConfigDigitalFilter>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026be:	f000 fac7 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000298 	.word	0x20000298
 80026cc:	40005400 	.word	0x40005400
 80026d0:	20404768 	.word	0x20404768

080026d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0aa      	sub	sp, #168	; 0xa8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2284      	movs	r2, #132	; 0x84
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fd4f 	bl	8008198 <memset>
  if(i2cHandle->Instance==I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_I2C_MspInit+0xb4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d13c      	bne.n	800277e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800270a:	2300      	movs	r3, #0
 800270c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4618      	mov	r0, r3
 8002714:	f002 f902 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800271e:	f000 fa97 	bl	8002c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_I2C_MspInit+0xb8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_I2C_MspInit+0xb8>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_I2C_MspInit+0xb8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800273a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800273e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002742:	2312      	movs	r3, #18
 8002744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002754:	2304      	movs	r3, #4
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800275e:	4619      	mov	r1, r3
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <HAL_I2C_MspInit+0xbc>)
 8002762:	f001 f893 	bl	800388c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_I2C_MspInit+0xb8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_I2C_MspInit+0xb8>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_I2C_MspInit+0xb8>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800277e:	bf00      	nop
 8002780:	37a8      	adds	r7, #168	; 0xa8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40005400 	.word	0x40005400
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400

08002794 <toggle_regulation>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void toggle_regulation(){
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	if(temp < (ref - HEATING_THRESHOLD)){
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <toggle_regulation+0x90>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002828 <toggle_regulation+0x94>
 80027a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <toggle_regulation+0x98>)
 80027a8:	edd3 7a00 	vldr	s15, [r3]
 80027ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	dd0c      	ble.n	80027d0 <toggle_regulation+0x3c>
		HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,1);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027bc:	481c      	ldr	r0, [pc, #112]	; (8002830 <toggle_regulation+0x9c>)
 80027be:	f001 fa29 	bl	8003c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027c8:	481a      	ldr	r0, [pc, #104]	; (8002834 <toggle_regulation+0xa0>)
 80027ca:	f001 fa23 	bl	8003c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,0);
		}else{
		HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
		HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
		}
}
 80027ce:	e027      	b.n	8002820 <toggle_regulation+0x8c>
		}else if( temp > (ref + COOLING_THRESHOLD)){
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <toggle_regulation+0x90>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002838 <toggle_regulation+0xa4>
 80027da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <toggle_regulation+0x98>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	d50c      	bpl.n	8002808 <toggle_regulation+0x74>
		HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027f4:	480e      	ldr	r0, [pc, #56]	; (8002830 <toggle_regulation+0x9c>)
 80027f6:	f001 fa0d 	bl	8003c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <toggle_regulation+0xa0>)
 8002802:	f001 fa07 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002806:	e00b      	b.n	8002820 <toggle_regulation+0x8c>
		HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280e:	4808      	ldr	r0, [pc, #32]	; (8002830 <toggle_regulation+0x9c>)
 8002810:	f001 fa00 	bl	8003c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 8002814:	2201      	movs	r2, #1
 8002816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <toggle_regulation+0xa0>)
 800281c:	f001 f9fa 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000054 	.word	0x20000054
 8002828:	3ca3d70a 	.word	0x3ca3d70a
 800282c:	200002ec 	.word	0x200002ec
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	3dcccccd 	.word	0x3dcccccd

0800283c <check_one_percent_range>:

void check_one_percent_range(){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	if(temp < (ref + ONE_PERCENT_ACC) && temp > (ref - ONE_PERCENT_ACC)){
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <check_one_percent_range+0x5c>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800289c <check_one_percent_range+0x60>
 800284a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <check_one_percent_range+0x64>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	dd14      	ble.n	8002888 <check_one_percent_range+0x4c>
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <check_one_percent_range+0x5c>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800289c <check_one_percent_range+0x60>
 8002868:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <check_one_percent_range+0x64>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	d505      	bpl.n	8002888 <check_one_percent_range+0x4c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 800287c:	2201      	movs	r2, #1
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <check_one_percent_range+0x68>)
 8002882:	f001 f9c7 	bl	8003c14 <HAL_GPIO_WritePin>
 8002886:	e005      	b.n	8002894 <check_one_percent_range+0x58>
		}else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8002888:	2200      	movs	r2, #0
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <check_one_percent_range+0x68>)
 800288e:	f001 f9c1 	bl	8003c14 <HAL_GPIO_WritePin>
		}
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000054 	.word	0x20000054
 800289c:	3eae147b 	.word	0x3eae147b
 80028a0:	200002ec 	.word	0x200002ec
 80028a4:	40020400 	.word	0x40020400

080028a8 <check_five_percent_range>:

void check_five_percent_range(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	if(temp < (ref + FIVE_PERCENT_ACC) && temp > (ref - FIVE_PERCENT_ACC)){
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <check_five_percent_range+0x60>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800290c <check_five_percent_range+0x64>
 80028b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <check_five_percent_range+0x68>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c8:	dd15      	ble.n	80028f6 <check_five_percent_range+0x4e>
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <check_five_percent_range+0x60>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800290c <check_five_percent_range+0x64>
 80028d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <check_five_percent_range+0x68>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d506      	bpl.n	80028f6 <check_five_percent_range+0x4e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <check_five_percent_range+0x6c>)
 80028f0:	f001 f990 	bl	8003c14 <HAL_GPIO_WritePin>
 80028f4:	e006      	b.n	8002904 <check_five_percent_range+0x5c>
		}else{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <check_five_percent_range+0x6c>)
 80028fe:	f001 f989 	bl	8003c14 <HAL_GPIO_WritePin>
		}
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000054 	.word	0x20000054
 800290c:	3fd9999a 	.word	0x3fd9999a
 8002910:	200002ec 	.word	0x200002ec
 8002914:	40020400 	.word	0x40020400

08002918 <update_regulator_state>:

void update_regulator_state(){
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	is_heating = HAL_GPIO_ReadPin(HEATER_GPIO_Port,HEATER_Pin);
 800291c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002920:	480b      	ldr	r0, [pc, #44]	; (8002950 <update_regulator_state+0x38>)
 8002922:	f001 f95f 	bl	8003be4 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <update_regulator_state+0x3c>)
 800292c:	601a      	str	r2, [r3, #0]
	is_cooling = !(HAL_GPIO_ReadPin(COOLING_GPIO_Port,COOLING_Pin));
 800292e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002932:	4809      	ldr	r0, [pc, #36]	; (8002958 <update_regulator_state+0x40>)
 8002934:	f001 f956 	bl	8003be4 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <update_regulator_state+0x44>)
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	20000300 	.word	0x20000300
 8002958:	40021400 	.word	0x40021400
 800295c:	200002fc 	.word	0x200002fc

08002960 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback. Changes reference value through USART command.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_UART_RxCpltCallback+0x74>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12c      	bne.n	80029cc <HAL_UART_RxCpltCallback+0x6c>
	{
		if(wiadomosc[2] == '.' && wiadomosc[5] == 'C')
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_UART_RxCpltCallback+0x78>)
 8002974:	789b      	ldrb	r3, [r3, #2]
 8002976:	2b2e      	cmp	r3, #46	; 0x2e
 8002978:	d123      	bne.n	80029c2 <HAL_UART_RxCpltCallback+0x62>
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_UART_RxCpltCallback+0x78>)
 800297c:	795b      	ldrb	r3, [r3, #5]
 800297e:	2b43      	cmp	r3, #67	; 0x43
 8002980:	d11f      	bne.n	80029c2 <HAL_UART_RxCpltCallback+0x62>
		{
			sscanf (wiadomosc,"%fC", &ref);
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_UART_RxCpltCallback+0x7c>)
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_UART_RxCpltCallback+0x80>)
 8002986:	4814      	ldr	r0, [pc, #80]	; (80029d8 <HAL_UART_RxCpltCallback+0x78>)
 8002988:	f006 faae 	bl	8008ee8 <siscanf>
			if(ref < MIN_RANGE){ref = MIN_RANGE;}
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_UART_RxCpltCallback+0x7c>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	d503      	bpl.n	80029a8 <HAL_UART_RxCpltCallback+0x48>
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_UART_RxCpltCallback+0x7c>)
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_UART_RxCpltCallback+0x84>)
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00c      	b.n	80029c2 <HAL_UART_RxCpltCallback+0x62>
			else if(ref > MAX_RANGE){ref = MAX_RANGE;}
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_UART_RxCpltCallback+0x7c>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029e8 <HAL_UART_RxCpltCallback+0x88>
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	dd02      	ble.n	80029c2 <HAL_UART_RxCpltCallback+0x62>
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_UART_RxCpltCallback+0x7c>)
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_UART_RxCpltCallback+0x8c>)
 80029c0:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 80029c2:	2206      	movs	r2, #6
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_UART_RxCpltCallback+0x78>)
 80029c6:	480a      	ldr	r0, [pc, #40]	; (80029f0 <HAL_UART_RxCpltCallback+0x90>)
 80029c8:	f004 f9b1 	bl	8006d2e <HAL_UART_Receive_IT>
	}
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004800 	.word	0x40004800
 80029d8:	200002f0 	.word	0x200002f0
 80029dc:	20000054 	.word	0x20000054
 80029e0:	0800d34c 	.word	0x0800d34c
 80029e4:	41d00000 	.word	0x41d00000
 80029e8:	42700000 	.word	0x42700000
 80029ec:	42700000 	.word	0x42700000
 80029f0:	20000404 	.word	0x20000404

080029f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  Display of reference value and regulator state on User button press.
  * @param  specified Pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin)
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a04:	d11b      	bne.n	8002a3e <HAL_GPIO_EXTI_Callback+0x4a>
	{
		dl_kom = sprintf((char *)komunikat1, "Ref: %2.2f degC Heating: %d Cooling: %d \r\n ",
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_GPIO_EXTI_Callback+0x54>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fdbc 	bl	8000588 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	490d      	ldr	r1, [pc, #52]	; (8002a4c <HAL_GPIO_EXTI_Callback+0x58>)
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a1a:	6800      	ldr	r0, [r0, #0]
 8002a1c:	9001      	str	r0, [sp, #4]
 8002a1e:	9100      	str	r1, [sp, #0]
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <HAL_GPIO_EXTI_Callback+0x60>)
 8002a22:	480d      	ldr	r0, [pc, #52]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a24:	f006 fa40 	bl	8008ea8 <siprintf>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x68>)
 8002a2e:	801a      	strh	r2, [r3, #0]
				ref,is_heating,is_cooling);
	    HAL_UART_Transmit(&huart3, komunikat1, dl_kom, 100);
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x68>)
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	2364      	movs	r3, #100	; 0x64
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002a3a:	f004 f8f5 	bl	8006c28 <HAL_UART_Transmit>
	}
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000054 	.word	0x20000054
 8002a4c:	20000300 	.word	0x20000300
 8002a50:	200002fc 	.word	0x200002fc
 8002a54:	0800d350 	.word	0x0800d350
 8002a58:	20000058 	.word	0x20000058
 8002a5c:	200002f6 	.word	0x200002f6
 8002a60:	20000404 	.word	0x20000404

08002a64 <HAL_TIM_PeriodElapsedCallback>:
  * 		TIM2 sends current measure value through USART.
  * @param  htim TIM handle.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (htim == &htim5) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d114      	bne.n	8002a9e <HAL_TIM_PeriodElapsedCallback+0x3a>
	temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002a74:	481a      	ldr	r0, [pc, #104]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a76:	f7ff fb6d 	bl	8002154 <BMP2_ReadTemperature_degC>
 8002a7a:	ec53 2b10 	vmov	r2, r3, d0
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f8d1 	bl	8000c28 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a8a:	6013      	str	r3, [r2, #0]
	}else{
	HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
	HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
	}
	*/
	toggle_regulation();
 8002a8c:	f7ff fe82 	bl	8002794 <toggle_regulation>
		}

	is_heating = HAL_GPIO_ReadPin(HEATER_GPIO_Port,HEATER_Pin);
	is_cooling = !(HAL_GPIO_ReadPin(COOLING_GPIO_Port,COOLING_Pin));
	*/
	check_one_percent_range();
 8002a90:	f7ff fed4 	bl	800283c <check_one_percent_range>
	check_five_percent_range();
 8002a94:	f7ff ff08 	bl	80028a8 <check_five_percent_range>
	update_regulator_state();
 8002a98:	f7ff ff3e 	bl	8002918 <update_regulator_state>
  }else if(htim == &htim2){
	  dl_kom2 = sprintf((char *)komunikat2, "Temp: %2.2f degC \r\n ",
	  				temp);
	  HAL_UART_Transmit(&huart3, komunikat2, dl_kom2, 100);
  }
}
 8002a9c:	e019      	b.n	8002ad2 <HAL_TIM_PeriodElapsedCallback+0x6e>
  }else if(htim == &htim2){
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d115      	bne.n	8002ad2 <HAL_TIM_PeriodElapsedCallback+0x6e>
	  dl_kom2 = sprintf((char *)komunikat2, "Temp: %2.2f degC \r\n ",
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd6c 	bl	8000588 <__aeabi_f2d>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	490d      	ldr	r1, [pc, #52]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ab8:	f006 f9f6 	bl	8008ea8 <siprintf>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ac2:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, komunikat2, dl_kom2, 100);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	2364      	movs	r3, #100	; 0x64
 8002aca:	4909      	ldr	r1, [pc, #36]	; (8002af0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002acc:	480a      	ldr	r0, [pc, #40]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002ace:	f004 f8ab 	bl	8006c28 <HAL_UART_Transmit>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200003b8 	.word	0x200003b8
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	200002ec 	.word	0x200002ec
 8002ae8:	2000036c 	.word	0x2000036c
 8002aec:	0800d37c 	.word	0x0800d37c
 8002af0:	20000084 	.word	0x20000084
 8002af4:	200002f8 	.word	0x200002f8
 8002af8:	20000404 	.word	0x20000404

08002afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b00:	f000 fc9f 	bl	8003442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b04:	f000 f836 	bl	8002b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b08:	f7ff fb72 	bl	80021f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002b0c:	f000 fbd8 	bl	80032c0 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002b10:	f000 fae8 	bl	80030e4 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002b14:	f7ff fd9e 	bl	8002654 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002b18:	f000 fa96 	bl	8003048 <MX_TIM2_Init>
  MX_SPI4_Init();
 8002b1c:	f000 f89e 	bl	8002c5c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 8002b20:	2206      	movs	r2, #6
 8002b22:	490d      	ldr	r1, [pc, #52]	; (8002b58 <main+0x5c>)
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <main+0x60>)
 8002b26:	f004 f902 	bl	8006d2e <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev_1);
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <main+0x64>)
 8002b2c:	f7ff fa46 	bl	8001fbc <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim5);
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <main+0x68>)
 8002b32:	f003 fbbb 	bl	80062ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <main+0x6c>)
 8002b38:	f003 fbb8 	bl	80062ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	480a      	ldr	r0, [pc, #40]	; (8002b6c <main+0x70>)
 8002b44:	f001 f866 	bl	8003c14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b4e:	4808      	ldr	r0, [pc, #32]	; (8002b70 <main+0x74>)
 8002b50:	f001 f860 	bl	8003c14 <HAL_GPIO_WritePin>
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <main+0x58>
 8002b56:	bf00      	nop
 8002b58:	200002f0 	.word	0x200002f0
 8002b5c:	20000404 	.word	0x20000404
 8002b60:	20000018 	.word	0x20000018
 8002b64:	200003b8 	.word	0x200003b8
 8002b68:	2000036c 	.word	0x2000036c
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400

08002b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b094      	sub	sp, #80	; 0x50
 8002b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	2230      	movs	r2, #48	; 0x30
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 fb08 	bl	8008198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b98:	f001 f996 	bl	8003ec8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <SystemClock_Config+0xd4>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <SystemClock_Config+0xd4>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <SystemClock_Config+0xd4>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <SystemClock_Config+0xd8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <SystemClock_Config+0xd8>)
 8002bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <SystemClock_Config+0xd8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002be0:	2304      	movs	r3, #4
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002be4:	23d8      	movs	r3, #216	; 0xd8
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002be8:	2302      	movs	r3, #2
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002bec:	2303      	movs	r3, #3
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 f9c7 	bl	8003f88 <HAL_RCC_OscConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002c00:	f000 f826 	bl	8002c50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c04:	f001 f970 	bl	8003ee8 <HAL_PWREx_EnableOverDrive>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c0e:	f000 f81f 	bl	8002c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c12:	230f      	movs	r3, #15
 8002c14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c16:	2302      	movs	r3, #2
 8002c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	2107      	movs	r1, #7
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fc4d 	bl	80044d0 <HAL_RCC_ClockConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002c3c:	f000 f808 	bl	8002c50 <Error_Handler>
  }
}
 8002c40:	bf00      	nop
 8002c42:	3750      	adds	r7, #80	; 0x50
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <Error_Handler+0x8>
	...

08002c5c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <MX_SPI4_Init+0x78>)
 8002c64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c6c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c7a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c7e:	2202      	movs	r2, #2
 8002c80:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c92:	2210      	movs	r2, #16
 8002c94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002caa:	2207      	movs	r2, #7
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_SPI4_Init+0x74>)
 8002cbc:	f002 fa1e 	bl	80050fc <HAL_SPI_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002cc6:	f7ff ffc3 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000304 	.word	0x20000304
 8002cd4:	40013400 	.word	0x40013400

08002cd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_SPI_MspInit+0x8c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12f      	bne.n	8002d5a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_SPI_MspInit+0x90>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002d2a:	2364      	movs	r3, #100	; 0x64
 8002d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	4809      	ldr	r0, [pc, #36]	; (8002d6c <HAL_SPI_MspInit+0x94>)
 8002d46:	f000 fda1 	bl	800388c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2054      	movs	r0, #84	; 0x54
 8002d50:	f000 fcd3 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d54:	2054      	movs	r0, #84	; 0x54
 8002d56:	f000 fcec 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40013400 	.word	0x40013400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_MspInit+0x44>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_MspInit+0x44>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_MspInit+0x44>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_MspInit+0x44>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_MspInit+0x44>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_MspInit+0x44>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f000 fb5a 	bl	80034bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f000 ff19 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 8002e1e:	2008      	movs	r0, #8
 8002e20:	f000 ff12 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 8002e2c:	2020      	movs	r0, #32
 8002e2e:	f000 ff0b 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM2_IRQHandler+0x10>)
 8002e3e:	f003 faad 	bl	800639c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000036c 	.word	0x2000036c

08002e4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <USART3_IRQHandler+0x10>)
 8002e52:	f003 ffb1 	bl	8006db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000404 	.word	0x20000404

08002e60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002e64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e68:	f000 feee 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <TIM5_IRQHandler+0x10>)
 8002e76:	f003 fa91 	bl	800639c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003b8 	.word	0x200003b8

08002e84 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <SPI4_IRQHandler+0x10>)
 8002e8a:	f002 fe93 	bl	8005bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000304 	.word	0x20000304

08002e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
	return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_kill>:

int _kill(int pid, int sig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eb2:	f005 f947 	bl	8008144 <__errno>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2216      	movs	r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
	return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_exit>:

void _exit (int status)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffe7 	bl	8002ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eda:	e7fe      	b.n	8002eda <_exit+0x12>

08002edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e00a      	b.n	8002f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eee:	f3af 8000 	nop.w
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	b2ca      	uxtb	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf0      	blt.n	8002eee <_read+0x12>
	}

return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e009      	b.n	8002f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbf1      	blt.n	8002f28 <_write+0x12>
	}
	return len;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_close>:

int _close(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
	return -1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f76:	605a      	str	r2, [r3, #4]
	return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_isatty>:

int _isatty(int file)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_sbrk+0x5c>)
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <_sbrk+0x60>)
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <_sbrk+0x64>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <_sbrk+0x64>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <_sbrk+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d207      	bcs.n	8002ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe8:	f005 f8ac 	bl	8008144 <__errno>
 8002fec:	4603      	mov	r3, r0
 8002fee:	220c      	movs	r2, #12
 8002ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	e009      	b.n	800300c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <_sbrk+0x64>)
 8003008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20050000 	.word	0x20050000
 8003018:	00000400 	.word	0x00000400
 800301c:	20000368 	.word	0x20000368
 8003020:	200004a0 	.word	0x200004a0

08003024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <SystemInit+0x20>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <SystemInit+0x20>)
 8003030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <MX_TIM2_Init+0x94>)
 8003068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800306c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_TIM2_Init+0x94>)
 8003070:	22d7      	movs	r2, #215	; 0xd7
 8003072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <MX_TIM2_Init+0x94>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_TIM2_Init+0x94>)
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <MX_TIM2_Init+0x98>)
 800307e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <MX_TIM2_Init+0x94>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_TIM2_Init+0x94>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800308c:	4813      	ldr	r0, [pc, #76]	; (80030dc <MX_TIM2_Init+0x94>)
 800308e:	f003 f8b5 	bl	80061fc <HAL_TIM_Base_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003098:	f7ff fdda 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <MX_TIM2_Init+0x94>)
 80030aa:	f003 fa97 	bl	80065dc <HAL_TIM_ConfigClockSource>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030b4:	f7ff fdcc 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_TIM2_Init+0x94>)
 80030c6:	f003 fcb5 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030d0:	f7ff fdbe 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000036c 	.word	0x2000036c
 80030e0:	0007a11f 	.word	0x0007a11f

080030e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0310 	add.w	r3, r7, #16
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <MX_TIM5_Init+0x94>)
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <MX_TIM5_Init+0x98>)
 8003106:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 215;
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <MX_TIM5_Init+0x94>)
 800310a:	22d7      	movs	r2, #215	; 0xd7
 800310c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <MX_TIM5_Init+0x94>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <MX_TIM5_Init+0x94>)
 8003116:	f242 720f 	movw	r2, #9999	; 0x270f
 800311a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <MX_TIM5_Init+0x94>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <MX_TIM5_Init+0x94>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003128:	4813      	ldr	r0, [pc, #76]	; (8003178 <MX_TIM5_Init+0x94>)
 800312a:	f003 f867 	bl	80061fc <HAL_TIM_Base_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003134:	f7ff fd8c 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4619      	mov	r1, r3
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <MX_TIM5_Init+0x94>)
 8003146:	f003 fa49 	bl	80065dc <HAL_TIM_ConfigClockSource>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003150:	f7ff fd7e 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <MX_TIM5_Init+0x94>)
 8003162:	f003 fc67 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800316c:	f7ff fd70 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200003b8 	.word	0x200003b8
 800317c:	40000c00 	.word	0x40000c00

08003180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08c      	sub	sp, #48	; 0x30
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d14d      	bne.n	800323e <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a36      	ldr	r2, [pc, #216]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 80031ea:	2320      	movs	r3, #32
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031fa:	2301      	movs	r3, #1
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	482b      	ldr	r0, [pc, #172]	; (80032b4 <HAL_TIM_Base_MspInit+0x134>)
 8003206:	f000 fb41 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 800320a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	4824      	ldr	r0, [pc, #144]	; (80032b8 <HAL_TIM_Base_MspInit+0x138>)
 8003228:	f000 fb30 	bl	800388c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	201c      	movs	r0, #28
 8003232:	f000 fa62 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003236:	201c      	movs	r0, #28
 8003238:	f000 fa7b 	bl	8003732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800323c:	e034      	b.n	80032a8 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM5)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_TIM_Base_MspInit+0x13c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d12f      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 800324e:	f043 0308 	orr.w	r3, r3, #8
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_TIM_Base_MspInit+0x130>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LD4_Pin;
 8003278:	2308      	movs	r3, #8
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003288:	2302      	movs	r3, #2
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	4808      	ldr	r0, [pc, #32]	; (80032b4 <HAL_TIM_Base_MspInit+0x134>)
 8003294:	f000 fafa 	bl	800388c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2032      	movs	r0, #50	; 0x32
 800329e:	f000 fa2c 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032a2:	2032      	movs	r0, #50	; 0x32
 80032a4:	f000 fa45 	bl	8003732 <HAL_NVIC_EnableIRQ>
}
 80032a8:	bf00      	nop
 80032aa:	3730      	adds	r7, #48	; 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40000c00 	.word	0x40000c00

080032c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <MX_USART3_UART_Init+0x5c>)
 80032c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032da:	2200      	movs	r2, #0
 80032dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032e6:	220c      	movs	r2, #12
 80032e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_USART3_UART_Init+0x58>)
 80032fe:	2200      	movs	r2, #0
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <MX_USART3_UART_Init+0x58>)
 8003304:	f003 fc42 	bl	8006b8c <HAL_UART_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800330e:	f7ff fc9f 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000404 	.word	0x20000404
 800331c:	40004800 	.word	0x40004800

08003320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0aa      	sub	sp, #168	; 0xa8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	2284      	movs	r2, #132	; 0x84
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f004 ff29 	bl	8008198 <memset>
  if(uartHandle->Instance==USART3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_UART_MspInit+0xc4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d144      	bne.n	80033da <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003354:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8003356:	2310      	movs	r3, #16
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fadc 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800336a:	f7ff fc71 	bl	8002c50 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_UART_MspInit+0xc8>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800339e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b8:	2307      	movs	r3, #7
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033c2:	4619      	mov	r1, r3
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <HAL_UART_MspInit+0xcc>)
 80033c6:	f000 fa61 	bl	800388c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	2027      	movs	r0, #39	; 0x27
 80033d0:	f000 f993 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033d4:	2027      	movs	r0, #39	; 0x27
 80033d6:	f000 f9ac 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80033da:	bf00      	nop
 80033dc:	37a8      	adds	r7, #168	; 0xa8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40004800 	.word	0x40004800
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020c00 	.word	0x40020c00

080033f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033f6:	490e      	ldr	r1, [pc, #56]	; (8003430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033f8:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800340c:	4c0b      	ldr	r4, [pc, #44]	; (800343c <LoopFillZerobss+0x26>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800341a:	f7ff fe03 	bl	8003024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341e:	f004 fe97 	bl	8008150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003422:	f7ff fb6b 	bl	8002afc <main>
  bx  lr    
 8003426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003428:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800342c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003430:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8003434:	0800d884 	.word	0x0800d884
  ldr r2, =_sbss
 8003438:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 800343c:	200004a0 	.word	0x200004a0

08003440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003440:	e7fe      	b.n	8003440 <ADC_IRQHandler>

08003442 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003446:	2003      	movs	r0, #3
 8003448:	f000 f94c 	bl	80036e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f805 	bl	800345c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003452:	f7ff fc8d 	bl	8002d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_InitTick+0x54>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_InitTick+0x58>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	4619      	mov	r1, r3
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	fbb3 f3f1 	udiv	r3, r3, r1
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f967 	bl	800374e <HAL_SYSTICK_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e00e      	b.n	80034a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0f      	cmp	r3, #15
 800348e:	d80a      	bhi.n	80034a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003490:	2200      	movs	r2, #0
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	f000 f92f 	bl	80036fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800349c:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <HAL_InitTick+0x5c>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000009c 	.word	0x2000009c
 80034b4:	200000a4 	.word	0x200000a4
 80034b8:	200000a0 	.word	0x200000a0

080034bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x20>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_IncTick+0x24>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_IncTick+0x24>)
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200000a4 	.word	0x200000a4
 80034e0:	2000048c 	.word	0x2000048c

080034e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_GetTick+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	2000048c 	.word	0x2000048c

080034fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff ffee 	bl	80034e4 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d005      	beq.n	8003522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_Delay+0x44>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003522:	bf00      	nop
 8003524:	f7ff ffde 	bl	80034e4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d8f7      	bhi.n	8003524 <HAL_Delay+0x28>
  {
  }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200000a4 	.word	0x200000a4

08003544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <__NVIC_SetPriorityGrouping+0x40>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x40>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00
 8003588:	05fa0000 	.word	0x05fa0000

0800358c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 0307 	and.w	r3, r3, #7
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db0b      	blt.n	80035d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4907      	ldr	r1, [pc, #28]	; (80035e0 <__NVIC_EnableIRQ+0x38>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2001      	movs	r0, #1
 80035ca:	fa00 f202 	lsl.w	r2, r0, r2
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	db0a      	blt.n	800360e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	490c      	ldr	r1, [pc, #48]	; (8003630 <__NVIC_SetPriority+0x4c>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	440b      	add	r3, r1
 8003608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800360c:	e00a      	b.n	8003624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4908      	ldr	r1, [pc, #32]	; (8003634 <__NVIC_SetPriority+0x50>)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	3b04      	subs	r3, #4
 800361c:	0112      	lsls	r2, r2, #4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	440b      	add	r3, r1
 8003622:	761a      	strb	r2, [r3, #24]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000e100 	.word	0xe000e100
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	2b04      	cmp	r3, #4
 8003654:	bf28      	it	cs
 8003656:	2304      	movcs	r3, #4
 8003658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3304      	adds	r3, #4
 800365e:	2b06      	cmp	r3, #6
 8003660:	d902      	bls.n	8003668 <NVIC_EncodePriority+0x30>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3b03      	subs	r3, #3
 8003666:	e000      	b.n	800366a <NVIC_EncodePriority+0x32>
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	401a      	ands	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003680:	f04f 31ff 	mov.w	r1, #4294967295
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43d9      	mvns	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	4313      	orrs	r3, r2
         );
}
 8003692:	4618      	mov	r0, r3
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d301      	bcc.n	80036b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <SysTick_Config+0x40>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036be:	210f      	movs	r1, #15
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f7ff ff8e 	bl	80035e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <SysTick_Config+0x40>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <SysTick_Config+0x40>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff29 	bl	8003544 <__NVIC_SetPriorityGrouping>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff ff3e 	bl	800358c <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff8e 	bl	8003638 <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff5d 	bl	80035e4 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff31 	bl	80035a8 <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffa2 	bl	80036a0 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff feb6 	bl	80034e4 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d008      	beq.n	8003798 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e052      	b.n	800383e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0216 	bic.w	r2, r2, #22
 80037a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <HAL_DMA_Abort+0x62>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e8:	e013      	b.n	8003812 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ea:	f7ff fe7b 	bl	80034e4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d90c      	bls.n	8003812 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2203      	movs	r2, #3
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e015      	b.n	800383e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e4      	bne.n	80037ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	223f      	movs	r2, #63	; 0x3f
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e00c      	b.n	800387e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2205      	movs	r2, #5
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e175      	b.n	8003b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 8164 	bne.w	8003b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d005      	beq.n	80038e2 <HAL_GPIO_Init+0x56>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d130      	bne.n	8003944 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0201 	and.w	r2, r3, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d017      	beq.n	8003980 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d123      	bne.n	80039d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3208      	adds	r2, #8
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	08da      	lsrs	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3208      	adds	r2, #8
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80be 	beq.w	8003b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_GPIO_Init+0x32c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d037      	beq.n	8003aca <HAL_GPIO_Init+0x23e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <HAL_GPIO_Init+0x23a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <HAL_GPIO_Init+0x236>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <HAL_GPIO_Init+0x338>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d025      	beq.n	8003abe <HAL_GPIO_Init+0x232>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_GPIO_Init+0x33c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <HAL_GPIO_Init+0x22e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <HAL_GPIO_Init+0x340>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d019      	beq.n	8003ab6 <HAL_GPIO_Init+0x22a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_GPIO_Init+0x344>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <HAL_GPIO_Init+0x348>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00d      	beq.n	8003aae <HAL_GPIO_Init+0x222>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_GPIO_Init+0x34c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <HAL_GPIO_Init+0x21e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4f      	ldr	r2, [pc, #316]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_GPIO_Init+0x21a>
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	e012      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e010      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00e      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e00c      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e00a      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f ae86 	bls.w	80038ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40021c00 	.word	0x40021c00
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022400 	.word	0x40022400
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e001      	b.n	8003c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c30:	e003      	b.n	8003c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	041a      	lsls	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fec4 	bl	80029f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07f      	b.n	8003d8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fd18 	bl	80026d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d107      	bne.n	8003cf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	e006      	b.n	8003d00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d104      	bne.n	8003d12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_I2C_Init+0x11c>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	02008000 	.word	0x02008000

08003d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d138      	bne.n	8003e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e032      	b.n	8003e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d139      	bne.n	8003eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e033      	b.n	8003eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2224      	movs	r2, #36	; 0x24
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40007000 	.word	0x40007000

08003ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f16:	f7ff fae5 	bl	80034e4 <HAL_GetTick>
 8003f1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1c:	e009      	b.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1e:	f7ff fae1 	bl	80034e4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2c:	d901      	bls.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e022      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7ff faca 	bl	80034e4 <HAL_GetTick>
 8003f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f52:	e009      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f54:	f7ff fac6 	bl	80034e4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f62:	d901      	bls.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e007      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f74:	d1ee      	bne.n	8003f54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e291      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8087 	beq.w	80040ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
 8003fc4:	4b90      	ldr	r3, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x130>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d168      	bne.n	80040b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e26b      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x7a>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x9c>
 800400a:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7e      	ldr	r2, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800401c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xc0>
 800402e:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff fa3c 	bl	80034e4 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7ff fa38 	bl	80034e4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e21f      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xe8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7ff fa28 	bl	80034e4 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7ff fa24 	bl	80034e4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e20b      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x110>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d069      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1df      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	493d      	ldr	r1, [pc, #244]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e040      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7ff f9da 	bl	80034e4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7ff f9d6 	bl	80034e4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1bd      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
 8004166:	e018      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7ff f9b6 	bl	80034e4 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7ff f9b2 	bl	80034e4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e199      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d038      	beq.n	8004218 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7ff f993 	bl	80034e4 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7ff f98f 	bl	80034e4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e176      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x23a>
 80041e0:	e01a      	b.n	8004218 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7ff f979 	bl	80034e4 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7ff f975 	bl	80034e4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d903      	bls.n	800420c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e15c      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
 8004208:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b91      	ldr	r3, [pc, #580]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a4 	beq.w	800436e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b8b      	ldr	r3, [pc, #556]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a87      	ldr	r2, [pc, #540]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b85      	ldr	r3, [pc, #532]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800425a:	4b7f      	ldr	r3, [pc, #508]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7e      	ldr	r2, [pc, #504]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7ff f93d 	bl	80034e4 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7ff f939 	bl	80034e4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e120      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b75      	ldr	r3, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x31a>
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a6e      	ldr	r2, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x33c>
 80042aa:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a69      	ldr	r2, [pc, #420]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b67      	ldr	r3, [pc, #412]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a66      	ldr	r2, [pc, #408]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x35e>
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a60      	ldr	r2, [pc, #384]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a5d      	ldr	r2, [pc, #372]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042e6:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a5a      	ldr	r2, [pc, #360]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a57      	ldr	r2, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7ff f8ed 	bl	80034e4 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7ff f8e9 	bl	80034e4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0ce      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x386>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7ff f8d7 	bl	80034e4 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7ff f8d3 	bl	80034e4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0b8      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80a4 	beq.w	80044c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d06b      	beq.n	800445c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d149      	bne.n	8004420 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a30      	ldr	r2, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7ff f8a4 	bl	80034e4 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7ff f8a0 	bl	80034e4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e087      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	4313      	orrs	r3, r2
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80043e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 80043f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7ff f874 	bl	80034e4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7ff f870 	bl	80034e4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e057      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x478>
 800441e:	e04f      	b.n	80044c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7ff f85a 	bl	80034e4 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7ff f856 	bl	80034e4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e03d      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCC_OscConfig+0x4cc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x4ac>
 8004452:	e035      	b.n	80044c0 <HAL_RCC_OscConfig+0x538>
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x544>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d028      	beq.n	80044bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d121      	bne.n	80044bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11a      	bne.n	80044bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004492:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004494:	4293      	cmp	r3, r2
 8004496:	d111      	bne.n	80044bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	3b01      	subs	r3, #1
 80044a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800

080044d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0d0      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b67      	ldr	r3, [pc, #412]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	4965      	ldr	r1, [pc, #404]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d040      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d115      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	4b41      	ldr	r3, [pc, #260]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e073      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06b      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b2:	4b39      	ldr	r3, [pc, #228]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 0203 	bic.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4936      	ldr	r1, [pc, #216]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fe ff8e 	bl	80034e4 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fe ff8a 	bl	80034e4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e053      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 020c 	and.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1eb      	bne.n	80045cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d210      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 020f 	bic.w	r2, r3, #15
 800460a:	4922      	ldr	r1, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x1cc>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1d0>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe feea 	bl	800345c <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800d3a0 	.word	0x0800d3a0
 80046a0:	2000009c 	.word	0x2000009c
 80046a4:	200000a0 	.word	0x200000a0

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b094      	sub	sp, #80	; 0x50
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	2300      	movs	r3, #0
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	2300      	movs	r3, #0
 80046ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b79      	ldr	r3, [pc, #484]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80e1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e0db      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b73      	ldr	r3, [pc, #460]	; (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e0:	e0db      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e6:	e0d8      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046f2:	4b6d      	ldr	r3, [pc, #436]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b6a      	ldr	r3, [pc, #424]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
 8004708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800472c:	0150      	lsls	r0, r2, #5
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4621      	mov	r1, r4
 8004734:	1a51      	subs	r1, r2, r1
 8004736:	6139      	str	r1, [r7, #16]
 8004738:	4629      	mov	r1, r5
 800473a:	eb63 0301 	sbc.w	r3, r3, r1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474c:	4659      	mov	r1, fp
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004756:	4651      	mov	r1, sl
 8004758:	018a      	lsls	r2, r1, #6
 800475a:	4651      	mov	r1, sl
 800475c:	ebb2 0801 	subs.w	r8, r2, r1
 8004760:	4659      	mov	r1, fp
 8004762:	eb63 0901 	sbc.w	r9, r3, r1
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477a:	4690      	mov	r8, r2
 800477c:	4699      	mov	r9, r3
 800477e:	4623      	mov	r3, r4
 8004780:	eb18 0303 	adds.w	r3, r8, r3
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	462b      	mov	r3, r5
 8004788:	eb49 0303 	adc.w	r3, r9, r3
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800479a:	4629      	mov	r1, r5
 800479c:	024b      	lsls	r3, r1, #9
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047a4:	4621      	mov	r1, r4
 80047a6:	024a      	lsls	r2, r1, #9
 80047a8:	4610      	mov	r0, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	2200      	movs	r2, #0
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b8:	f7fc fa86 	bl	8000cc8 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	e058      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	2200      	movs	r2, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	4611      	mov	r1, r2
 80047d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0159      	lsls	r1, r3, #5
 80047ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f2:	0150      	lsls	r0, r2, #5
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4641      	mov	r1, r8
 80047fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb63 0b01 	sbc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004818:	ebb2 040a 	subs.w	r4, r2, sl
 800481c:	eb63 050b 	sbc.w	r5, r3, fp
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	00eb      	lsls	r3, r5, #3
 800482a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482e:	00e2      	lsls	r2, r4, #3
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	4643      	mov	r3, r8
 8004836:	18e3      	adds	r3, r4, r3
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	464b      	mov	r3, r9
 800483c:	eb45 0303 	adc.w	r3, r5, r3
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484e:	4629      	mov	r1, r5
 8004850:	028b      	lsls	r3, r1, #10
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004858:	4621      	mov	r1, r4
 800485a:	028a      	lsls	r2, r1, #10
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004862:	2200      	movs	r2, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	61fa      	str	r2, [r7, #28]
 8004868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486c:	f7fc fa2c 	bl	8000cc8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800488a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800489c:	4618      	mov	r0, r3
 800489e:	3750      	adds	r7, #80	; 0x50
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000009c 	.word	0x2000009c

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800d3b0 	.word	0x0800d3b0

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f8:	f7ff ffdc 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0b5b      	lsrs	r3, r3, #13
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	0800d3b0 	.word	0x0800d3b0

0800491c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004944:	4b69      	ldr	r3, [pc, #420]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a68      	ldr	r2, [pc, #416]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	4b66      	ldr	r3, [pc, #408]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	4964      	ldr	r1, [pc, #400]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004976:	4b5d      	ldr	r3, [pc, #372]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004984:	4959      	ldr	r1, [pc, #356]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049b2:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	494a      	ldr	r1, [pc, #296]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d0:	d101      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 808b 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b3a      	ldr	r3, [pc, #232]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a39      	ldr	r2, [pc, #228]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0c:	4b37      	ldr	r3, [pc, #220]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a18:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a34      	ldr	r2, [pc, #208]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fe fd5e 	bl	80034e4 <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fe fd5a 	bl	80034e4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e357      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d035      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d02e      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a68:	4b20      	ldr	r3, [pc, #128]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d114      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fe fd22 	bl	80034e4 <HAL_GetTick>
 8004aa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	e00a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa4:	f7fe fd1e 	bl	80034e4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e319      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ee      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	4901      	ldr	r1, [pc, #4]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40007000 	.word	0x40007000
 8004af4:	0ffffcff 	.word	0x0ffffcff
 8004af8:	4baa      	ldr	r3, [pc, #680]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4aa9      	ldr	r2, [pc, #676]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	4ba7      	ldr	r3, [pc, #668]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b10:	49a4      	ldr	r1, [pc, #656]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b22:	4ba0      	ldr	r3, [pc, #640]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b28:	4a9e      	ldr	r2, [pc, #632]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b32:	4b9c      	ldr	r3, [pc, #624]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	4999      	ldr	r1, [pc, #612]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b50:	4b94      	ldr	r3, [pc, #592]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5e:	4991      	ldr	r1, [pc, #580]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b72:	4b8c      	ldr	r3, [pc, #560]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b80:	4988      	ldr	r1, [pc, #544]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b94:	4b83      	ldr	r3, [pc, #524]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba2:	4980      	ldr	r1, [pc, #512]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb6:	4b7b      	ldr	r3, [pc, #492]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4977      	ldr	r1, [pc, #476]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd8:	4b72      	ldr	r3, [pc, #456]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	496f      	ldr	r1, [pc, #444]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfa:	4b6a      	ldr	r3, [pc, #424]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f023 020c 	bic.w	r2, r3, #12
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	4966      	ldr	r1, [pc, #408]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1c:	4b61      	ldr	r3, [pc, #388]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	495e      	ldr	r1, [pc, #376]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c3e:	4b59      	ldr	r3, [pc, #356]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	4955      	ldr	r1, [pc, #340]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c60:	4b50      	ldr	r3, [pc, #320]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	494d      	ldr	r1, [pc, #308]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c82:	4b48      	ldr	r3, [pc, #288]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	4944      	ldr	r1, [pc, #272]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ca4:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	493c      	ldr	r1, [pc, #240]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cc6:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	4933      	ldr	r1, [pc, #204]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf6:	492b      	ldr	r1, [pc, #172]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d18:	4922      	ldr	r1, [pc, #136]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d58:	4912      	ldr	r1, [pc, #72]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7c:	4909      	ldr	r1, [pc, #36]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d006      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80d9 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d98:	4b02      	ldr	r3, [pc, #8]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a01      	ldr	r2, [pc, #4]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da2:	e001      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004daa:	f7fe fb9b 	bl	80034e4 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004db2:	f7fe fb97 	bl	80034e4 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e194      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc4:	4b6c      	ldr	r3, [pc, #432]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d021      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004de4:	4b64      	ldr	r3, [pc, #400]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004df2:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df8:	0e1b      	lsrs	r3, r3, #24
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	019a      	lsls	r2, r3, #6
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	071b      	lsls	r3, r3, #28
 8004e18:	4957      	ldr	r1, [pc, #348]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02e      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d129      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e4c:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	0f1b      	lsrs	r3, r3, #28
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	019a      	lsls	r2, r3, #6
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	071b      	lsls	r3, r3, #28
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8e:	f023 021f 	bic.w	r2, r3, #31
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4937      	ldr	r1, [pc, #220]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	0f1b      	lsrs	r3, r3, #28
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	019a      	lsls	r2, r3, #6
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	071b      	lsls	r3, r3, #28
 8004ee0:	4925      	ldr	r1, [pc, #148]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d011      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	019a      	lsls	r2, r3, #6
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	061b      	lsls	r3, r3, #24
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	4919      	ldr	r1, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f24:	f7fe fade 	bl	80034e4 <HAL_GetTick>
 8004f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f2c:	f7fe fada 	bl	80034e4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0d7      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f040 80cd 	bne.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fe fac1 	bl	80034e4 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f66:	f7fe fabd 	bl	80034e4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d903      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0ba      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f88:	d0ed      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02e      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12a      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	4944      	ldr	r1, [pc, #272]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fee:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	493d      	ldr	r1, [pc, #244]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d022      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501c:	d11d      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800501e:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800502c:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	0f1b      	lsrs	r3, r3, #28
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	019a      	lsls	r2, r3, #6
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	431a      	orrs	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	4929      	ldr	r1, [pc, #164]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d028      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005074:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	019a      	lsls	r2, r3, #6
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	4917      	ldr	r1, [pc, #92]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4911      	ldr	r1, [pc, #68]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fe fa0e 	bl	80034e4 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050cc:	f7fe fa0a 	bl	80034e4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e007      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ea:	d1ef      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e09d      	b.n	800524a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d009      	beq.n	8005134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	61da      	str	r2, [r3, #28]
 8005126:	e005      	b.n	8005134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fd fdc2 	bl	8002cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005174:	d902      	bls.n	800517c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e002      	b.n	8005182 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800517c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800518a:	d007      	beq.n	800519c <HAL_SPI_Init+0xa0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005194:	d002      	beq.n	800519c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	ea42 0103 	orr.w	r1, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 0204 	and.w	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005218:	ea42 0103 	orr.w	r1, r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b088      	sub	sp, #32
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_SPI_Transmit+0x22>
 8005270:	2302      	movs	r3, #2
 8005272:	e158      	b.n	8005526 <HAL_SPI_Transmit+0x2d4>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800527c:	f7fe f932 	bl	80034e4 <HAL_GetTick>
 8005280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d002      	beq.n	8005298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005296:	e13d      	b.n	8005514 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x52>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a8:	e134      	b.n	8005514 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f4:	d10f      	bne.n	8005316 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d007      	beq.n	8005334 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800533c:	d94b      	bls.n	80053d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_SPI_Transmit+0xfa>
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d13e      	bne.n	80053ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	881a      	ldrh	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005370:	e02b      	b.n	80053ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d112      	bne.n	80053a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a4:	e011      	b.n	80053ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a6:	f7fe f89d 	bl	80034e4 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d803      	bhi.n	80053be <HAL_SPI_Transmit+0x16c>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Transmit+0x172>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c8:	e0a4      	b.n	8005514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ce      	bne.n	8005372 <HAL_SPI_Transmit+0x120>
 80053d4:	e07c      	b.n	80054d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0x192>
 80053de:	8afb      	ldrh	r3, [r7, #22]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d170      	bne.n	80054c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d912      	bls.n	8005414 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b02      	subs	r3, #2
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005412:	e058      	b.n	80054c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800543a:	e044      	b.n	80054c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d12b      	bne.n	80054a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d912      	bls.n	800547a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	881a      	ldrh	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b02      	subs	r3, #2
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005478:	e025      	b.n	80054c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	7812      	ldrb	r2, [r2, #0]
 8005486:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a0:	e011      	b.n	80054c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a2:	f7fe f81f 	bl	80034e4 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d803      	bhi.n	80054ba <HAL_SPI_Transmit+0x268>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d102      	bne.n	80054c0 <HAL_SPI_Transmit+0x26e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054c4:	e026      	b.n	8005514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1b5      	bne.n	800543c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fe27 	bl	8006128 <SPI_EndRxTxTransaction>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e000      	b.n	8005514 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005524:	7ffb      	ldrb	r3, [r7, #31]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b088      	sub	sp, #32
 8005532:	af02      	add	r7, sp, #8
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554a:	d112      	bne.n	8005572 <HAL_SPI_Receive+0x44>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10e      	bne.n	8005572 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2204      	movs	r2, #4
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f910 	bl	800578e <HAL_SPI_TransmitReceive>
 800556e:	4603      	mov	r3, r0
 8005570:	e109      	b.n	8005786 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_SPI_Receive+0x52>
 800557c:	2302      	movs	r3, #2
 800557e:	e102      	b.n	8005786 <HAL_SPI_Receive+0x258>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005588:	f7fd ffac 	bl	80034e4 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800559e:	e0e9      	b.n	8005774 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Receive+0x7e>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055b0:	e0e0      	b.n	8005774 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2204      	movs	r2, #4
 80055b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055fc:	d908      	bls.n	8005610 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	e007      	b.n	8005620 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005628:	d10f      	bne.n	800564a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005648:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d007      	beq.n	8005668 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005670:	d867      	bhi.n	8005742 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005672:	e030      	b.n	80056d6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d117      	bne.n	80056b2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f103 020c 	add.w	r2, r3, #12
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056b0:	e011      	b.n	80056d6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b2:	f7fd ff17 	bl	80034e4 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d803      	bhi.n	80056ca <HAL_SPI_Receive+0x19c>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_Receive+0x1a2>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056d4:	e04e      	b.n	8005774 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1c8      	bne.n	8005674 <HAL_SPI_Receive+0x146>
 80056e2:	e034      	b.n	800574e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d115      	bne.n	800571e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	b292      	uxth	r2, r2
 80056fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	1c9a      	adds	r2, r3, #2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800571c:	e011      	b.n	8005742 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fd fee1 	bl	80034e4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Receive+0x208>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d102      	bne.n	800573c <HAL_SPI_Receive+0x20e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005740:	e018      	b.n	8005774 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ca      	bne.n	80056e4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fc6c 	bl	8006030 <SPI_EndRxTransaction>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	75fb      	strb	r3, [r7, #23]
 8005770:	e000      	b.n	8005774 <HAL_SPI_Receive+0x246>
  }

error :
 8005772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b08a      	sub	sp, #40	; 0x28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x26>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e1fb      	b.n	8005bac <HAL_SPI_TransmitReceive+0x41e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd fe92 	bl	80034e4 <HAL_GetTick>
 80057c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057d8:	7efb      	ldrb	r3, [r7, #27]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d00e      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x6e>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e4:	d106      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x66>
 80057ee:	7efb      	ldrb	r3, [r7, #27]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d003      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057fa:	e1cd      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_SPI_TransmitReceive+0x80>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_SPI_TransmitReceive+0x80>
 8005808:	887b      	ldrh	r3, [r7, #2]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005814:	e1c0      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b04      	cmp	r3, #4
 8005820:	d003      	beq.n	800582a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2205      	movs	r2, #5
 8005826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	887a      	ldrh	r2, [r7, #2]
 800583a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	887a      	ldrh	r2, [r7, #2]
 8005842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586c:	d802      	bhi.n	8005874 <HAL_SPI_TransmitReceive+0xe6>
 800586e:	8a3b      	ldrh	r3, [r7, #16]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d908      	bls.n	8005886 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	e007      	b.n	8005896 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d007      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058bc:	d97c      	bls.n	80059b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x13e>
 80058c6:	8a7b      	ldrh	r3, [r7, #18]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d169      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f0:	e056      	b.n	80059a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d11b      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x1aa>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x1aa>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b01      	cmp	r3, #1
 800590e:	d113      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d11c      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x1f2>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	b292      	uxth	r2, r2
 800595e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800597c:	2301      	movs	r3, #1
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005980:	f7fd fdb0 	bl	80034e4 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598c:	429a      	cmp	r2, r3
 800598e:	d807      	bhi.n	80059a0 <HAL_SPI_TransmitReceive+0x212>
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d003      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800599e:	e0fb      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1a3      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x164>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d19d      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x164>
 80059b6:	e0df      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x23a>
 80059c0:	8a7b      	ldrh	r3, [r7, #18]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f040 80cb 	bne.w	8005b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d912      	bls.n	80059f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b02      	subs	r3, #2
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f6:	e0b2      	b.n	8005b5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1e:	e09e      	b.n	8005b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d134      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x30a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02f      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x30a>
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d12c      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d912      	bls.n	8005a6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b02      	subs	r3, #2
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a6c:	e012      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d148      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x3aa>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d042      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d923      	bls.n	8005b06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b02      	subs	r3, #2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d81f      	bhi.n	8005b34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	e016      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f103 020c 	add.w	r2, r3, #12
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b34:	2301      	movs	r3, #1
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b38:	f7fd fcd4 	bl	80034e4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d803      	bhi.n	8005b50 <HAL_SPI_TransmitReceive+0x3c2>
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d102      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x3c8>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b5c:	e01c      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f47f af5b 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x292>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f af54 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fad3 	bl	8006128 <SPI_EndRxTxTransaction>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60
 8005b94:	e000      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10f      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
    return;
 8005bf6:	e0d7      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_SPI_IRQHandler+0x66>
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
    return;
 8005c18:	e0c6      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <HAL_SPI_IRQHandler+0x8c>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	099b      	lsrs	r3, r3, #6
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80b4 	beq.w	8005da8 <HAL_SPI_IRQHandler+0x1f4>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80ad 	beq.w	8005da8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d023      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d011      	beq.n	8005c8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6a:	f043 0204 	orr.w	r2, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	e00b      	b.n	8005ca2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	693b      	ldr	r3, [r7, #16]
        return;
 8005ca0:	e082      	b.n	8005da8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d014      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb2:	f043 0201 	orr.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce8:	f043 0208 	orr.w	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04f      	beq.n	8005da6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <HAL_SPI_IRQHandler+0x17e>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d034      	beq.n	8005d9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0203 	bic.w	r2, r2, #3
 8005d40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_SPI_IRQHandler+0x1fc>)
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd fd75 	bl	8003846 <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <HAL_SPI_IRQHandler+0x1fc>)
 8005d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd fd5f 	bl	8003846 <HAL_DMA_Abort_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005d9a:	e003      	b.n	8005da4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f809 	bl	8005db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005da2:	e000      	b.n	8005da6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005da4:	bf00      	nop
    return;
 8005da6:	bf00      	nop
  }
}
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08005dc9 	.word	0x08005dc9

08005db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ffe5 	bl	8005db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e04:	f7fd fb6e 	bl	80034e4 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e14:	f7fd fb66 	bl	80034e4 <HAL_GetTick>
 8005e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	015b      	lsls	r3, r3, #5
 8005e20:	0d1b      	lsrs	r3, r3, #20
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2a:	e054      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d050      	beq.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e34:	f7fd fb56 	bl	80034e4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d902      	bls.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e62:	d111      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d004      	beq.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e76:	d107      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e90:	d10f      	bne.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e017      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d19b      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000009c 	.word	0x2000009c

08005f04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f16:	f7fd fae5 	bl	80034e4 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f26:	f7fd fadd 	bl	80034e4 <HAL_GetTick>
 8005f2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f34:	4b3d      	ldr	r3, [pc, #244]	; (800602c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	0d1b      	lsrs	r3, r3, #20
 8005f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f4c:	e060      	b.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f54:	d107      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d050      	beq.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f6e:	f7fd fab9 	bl	80034e4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d902      	bls.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d13d      	bne.n	8006000 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f9c:	d111      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa6:	d004      	beq.n	8005fb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d107      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	d10f      	bne.n	8005fec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e010      	b.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3b01      	subs	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d196      	bne.n	8005f4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	2000009c 	.word	0x2000009c

08006030 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006044:	d111      	bne.n	800606a <SPI_EndRxTransaction+0x3a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d004      	beq.n	800605a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d107      	bne.n	800606a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006072:	d112      	bne.n	800609a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	2180      	movs	r1, #128	; 0x80
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff feb8 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d021      	beq.n	80060ce <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e03d      	b.n	8006116 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800609a:	4b21      	ldr	r3, [pc, #132]	; (8006120 <SPI_EndRxTransaction+0xf0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <SPI_EndRxTransaction+0xf4>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	0d5b      	lsrs	r3, r3, #21
 80060a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d0f2      	beq.n	80060b0 <SPI_EndRxTransaction+0x80>
 80060ca:	e000      	b.n	80060ce <SPI_EndRxTransaction+0x9e>
        break;
 80060cc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d6:	d11d      	bne.n	8006114 <SPI_EndRxTransaction+0xe4>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e0:	d004      	beq.n	80060ec <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ea:	d113      	bne.n	8006114 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff03 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e000      	b.n	8006116 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000009c 	.word	0x2000009c
 8006124:	165e9f81 	.word	0x165e9f81

08006128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fedf 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e046      	b.n	80061ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800615c:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <SPI_EndRxTxTransaction+0xcc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a25      	ldr	r2, [pc, #148]	; (80061f8 <SPI_EndRxTxTransaction+0xd0>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0d5b      	lsrs	r3, r3, #21
 8006168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617a:	d112      	bne.n	80061a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fe34 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e023      	b.n	80061ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d0f2      	beq.n	80061a2 <SPI_EndRxTxTransaction+0x7a>
 80061bc:	e000      	b.n	80061c0 <SPI_EndRxTxTransaction+0x98>
        break;
 80061be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fe99 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e000      	b.n	80061ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000009c 	.word	0x2000009c
 80061f8:	165e9f81 	.word	0x165e9f81

080061fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e049      	b.n	80062a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc ffac 	bl	8003180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f000 fac0 	bl	80067c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d001      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e054      	b.n	800636e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a26      	ldr	r2, [pc, #152]	; (800637c <HAL_TIM_Base_Start_IT+0xd0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d022      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ee:	d01d      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_TIM_Base_Start_IT+0xd4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_TIM_Base_Start_IT+0xd8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <HAL_TIM_Base_Start_IT+0xdc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_TIM_Base_Start_IT+0xe0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <HAL_TIM_Base_Start_IT+0xe4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_TIM_Base_Start_IT+0xe8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d115      	bne.n	8006358 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_TIM_Base_Start_IT+0xec>)
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b06      	cmp	r3, #6
 800633c:	d015      	beq.n	800636a <HAL_TIM_Base_Start_IT+0xbe>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d011      	beq.n	800636a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	e008      	b.n	800636a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e000      	b.n	800636c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40001800 	.word	0x40001800
 8006398:	00010007 	.word	0x00010007

0800639c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d122      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d11b      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0202 	mvn.w	r2, #2
 80063c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9d0 	bl	8006784 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f9c2 	bl	8006770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f9d3 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b04      	cmp	r3, #4
 8006404:	d122      	bne.n	800644c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d11b      	bne.n	800644c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0204 	mvn.w	r2, #4
 800641c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9a6 	bl	8006784 <HAL_TIM_IC_CaptureCallback>
 8006438:	e005      	b.n	8006446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f998 	bl	8006770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9a9 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	2b08      	cmp	r3, #8
 8006458:	d122      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d11b      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0208 	mvn.w	r2, #8
 8006470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2204      	movs	r2, #4
 8006476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f97c 	bl	8006784 <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f96e 	bl	8006770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f97f 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d122      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d11b      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0210 	mvn.w	r2, #16
 80064c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2208      	movs	r2, #8
 80064ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f952 	bl	8006784 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f944 	bl	8006770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f955 	bl	8006798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0201 	mvn.w	r2, #1
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fc faa2 	bl	8002a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d10e      	bne.n	800654c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d107      	bne.n	800654c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fb0c 	bl	8006b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	d10e      	bne.n	800657a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006566:	2b80      	cmp	r3, #128	; 0x80
 8006568:	d107      	bne.n	800657a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 faff 	bl	8006b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d10e      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f903 	bl	80067ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d10e      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d107      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0220 	mvn.w	r2, #32
 80065ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fabf 	bl	8006b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0b4      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x186>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4b56      	ldr	r3, [pc, #344]	; (800676c <HAL_TIM_ConfigClockSource+0x190>)
 8006614:	4013      	ands	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xa6>
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b60      	cmp	r3, #96	; 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b50      	cmp	r3, #80	; 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfa>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13a>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f000 f9af 	bl	80069f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f000 f998 	bl	80069f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 f90c 	bl	8006900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	; 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f965 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 f92b 	bl	800695e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	; 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f955 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	f000 f8ec 	bl	8006900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f945 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 f93c 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	fffeff88 	.word	0xfffeff88

08006770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a40      	ldr	r2, [pc, #256]	; (80068d4 <TIM_Base_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3d      	ldr	r2, [pc, #244]	; (80068d8 <TIM_Base_SetConfig+0x118>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <TIM_Base_SetConfig+0x11c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3b      	ldr	r2, [pc, #236]	; (80068e0 <TIM_Base_SetConfig+0x120>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a3a      	ldr	r2, [pc, #232]	; (80068e4 <TIM_Base_SetConfig+0x124>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <TIM_Base_SetConfig+0x114>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d02b      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d027      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <TIM_Base_SetConfig+0x118>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d023      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <TIM_Base_SetConfig+0x11c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01f      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <TIM_Base_SetConfig+0x120>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01b      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a29      	ldr	r2, [pc, #164]	; (80068e4 <TIM_Base_SetConfig+0x124>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d017      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a28      	ldr	r2, [pc, #160]	; (80068e8 <TIM_Base_SetConfig+0x128>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a27      	ldr	r2, [pc, #156]	; (80068ec <TIM_Base_SetConfig+0x12c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00f      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <TIM_Base_SetConfig+0x130>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00b      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <TIM_Base_SetConfig+0x134>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d007      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a24      	ldr	r2, [pc, #144]	; (80068f8 <TIM_Base_SetConfig+0x138>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a23      	ldr	r2, [pc, #140]	; (80068fc <TIM_Base_SetConfig+0x13c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d108      	bne.n	8006884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <TIM_Base_SetConfig+0x114>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0xf8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <TIM_Base_SetConfig+0x124>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d103      	bne.n	80068c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	615a      	str	r2, [r3, #20]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40010400 	.word	0x40010400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800
 80068f4:	40001800 	.word	0x40001800
 80068f8:	40001c00 	.word	0x40001c00
 80068fc:	40002000 	.word	0x40002000

08006900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 030a 	bic.w	r3, r3, #10
 800693c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0210 	bic.w	r2, r3, #16
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800699a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	f043 0307 	orr.w	r3, r3, #7
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	609a      	str	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e06d      	b.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d108      	bne.n	8006a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d022      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abe:	d01d      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1d      	ldr	r2, [pc, #116]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d018      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00e      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10c      	bne.n	8006b16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40001800 	.word	0x40001800

08006b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e040      	b.n	8006c20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fc fbb6 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	; 0x24
 8006bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fbe6 	bl	800739c <UART_SetConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e022      	b.n	8006c20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fe3e 	bl	8007864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fec5 	bl	80079a8 <UART_CheckIdleState>
 8006c1e:	4603      	mov	r3, r0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d171      	bne.n	8006d24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Transmit+0x24>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e06a      	b.n	8006d26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2221      	movs	r2, #33	; 0x21
 8006c5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5e:	f7fc fc41 	bl	80034e4 <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7c:	d108      	bne.n	8006c90 <HAL_UART_Transmit+0x68>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e003      	b.n	8006c98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c98:	e02c      	b.n	8006cf4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 feb6 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e038      	b.n	8006d26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1cc      	bne.n	8006c9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fe83 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e005      	b.n	8006d26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08a      	sub	sp, #40	; 0x28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d132      	bne.n	8006dac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_UART_Receive_IT+0x24>
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e02b      	b.n	8006dae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	613b      	str	r3, [r7, #16]
   return(result);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	6a3a      	ldr	r2, [r7, #32]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e6      	bne.n	8006d6a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fefe 	bl	8007ba4 <UART_Start_Receive_IT>
 8006da8:	4603      	mov	r3, r0
 8006daa:	e000      	b.n	8006dae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b0ba      	sub	sp, #232	; 0xe8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006de2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006de6:	4013      	ands	r3, r2
 8006de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d115      	bne.n	8006e20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00f      	beq.n	8006e20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d009      	beq.n	8006e20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8297 	beq.w	8007344 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
      }
      return;
 8006e1e:	e291      	b.n	8007344 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8117 	beq.w	8007058 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e3a:	4b85      	ldr	r3, [pc, #532]	; (8007050 <HAL_UART_IRQHandler+0x298>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 810a 	beq.w	8007058 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d011      	beq.n	8006e74 <HAL_UART_IRQHandler+0xbc>
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2201      	movs	r2, #1
 8006e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6a:	f043 0201 	orr.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d011      	beq.n	8006ea4 <HAL_UART_IRQHandler+0xec>
 8006e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2202      	movs	r2, #2
 8006e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d011      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x11c>
 8006eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eca:	f043 0202 	orr.w	r2, r3, #2
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2208      	movs	r2, #8
 8006efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f06:	f043 0208 	orr.w	r2, r3, #8
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d012      	beq.n	8006f42 <HAL_UART_IRQHandler+0x18a>
 8006f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 81fd 	beq.w	8007348 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d04f      	beq.n	800703a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fec8 	bl	8007d30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d141      	bne.n	8007032 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1d9      	bne.n	8006fae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d013      	beq.n	800702a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007006:	4a13      	ldr	r2, [pc, #76]	; (8007054 <HAL_UART_IRQHandler+0x29c>)
 8007008:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700e:	4618      	mov	r0, r3
 8007010:	f7fc fc19 	bl	8003846 <HAL_DMA_Abort_IT>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	e00f      	b.n	800704a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9a0 	bl	8007370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e00b      	b.n	800704a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f99c 	bl	8007370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	e007      	b.n	800704a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f998 	bl	8007370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007048:	e17e      	b.n	8007348 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704a:	bf00      	nop
    return;
 800704c:	e17c      	b.n	8007348 <HAL_UART_IRQHandler+0x590>
 800704e:	bf00      	nop
 8007050:	04000120 	.word	0x04000120
 8007054:	08007df9 	.word	0x08007df9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 814c 	bne.w	80072fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8145 	beq.w	80072fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 813e 	beq.w	80072fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2210      	movs	r2, #16
 8007084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b40      	cmp	r3, #64	; 0x40
 8007092:	f040 80b6 	bne.w	8007202 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8150 	beq.w	800734c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070b6:	429a      	cmp	r2, r3
 80070b8:	f080 8148 	bcs.w	800734c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d0:	f000 8086 	beq.w	80071e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007102:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800710a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1da      	bne.n	80070d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800712e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800714a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e1      	bne.n	800711e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800716a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3308      	adds	r3, #8
 800717a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800717e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800718c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e3      	bne.n	800715a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b0:	f023 0310 	bic.w	r3, r3, #16
 80071b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80071c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e4      	bne.n	80071a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fc fac3 	bl	8003766 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8c2 	bl	8007384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007200:	e0a4      	b.n	800734c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800720e:	b29b      	uxth	r3, r3
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8096 	beq.w	8007350 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8091 	beq.w	8007350 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007250:	647b      	str	r3, [r7, #68]	; 0x44
 8007252:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800725e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e4      	bne.n	800722e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	623b      	str	r3, [r7, #32]
   return(result);
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007288:	633a      	str	r2, [r7, #48]	; 0x30
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e3      	bne.n	8007264 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2220      	movs	r2, #32
 80072a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f023 0310 	bic.w	r3, r3, #16
 80072c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	617b      	str	r3, [r7, #20]
   return(result);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e4      	bne.n	80072b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f846 	bl	8007384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072f8:	e02a      	b.n	8007350 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d008      	beq.n	8007324 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01c      	beq.n	8007354 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
    }
    return;
 8007322:	e017      	b.n	8007354 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d012      	beq.n	8007356 <HAL_UART_IRQHandler+0x59e>
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fd71 	bl	8007e24 <UART_EndTransmit_IT>
    return;
 8007342:	e008      	b.n	8007356 <HAL_UART_IRQHandler+0x59e>
      return;
 8007344:	bf00      	nop
 8007346:	e006      	b.n	8007356 <HAL_UART_IRQHandler+0x59e>
    return;
 8007348:	bf00      	nop
 800734a:	e004      	b.n	8007356 <HAL_UART_IRQHandler+0x59e>
      return;
 800734c:	bf00      	nop
 800734e:	e002      	b.n	8007356 <HAL_UART_IRQHandler+0x59e>
      return;
 8007350:	bf00      	nop
 8007352:	e000      	b.n	8007356 <HAL_UART_IRQHandler+0x59e>
    return;
 8007354:	bf00      	nop
  }

}
 8007356:	37e8      	adds	r7, #232	; 0xe8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4ba6      	ldr	r3, [pc, #664]	; (8007660 <UART_SetConfig+0x2c4>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	430a      	orrs	r2, r1
 800740c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a94      	ldr	r2, [pc, #592]	; (8007664 <UART_SetConfig+0x2c8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d120      	bne.n	800745a <UART_SetConfig+0xbe>
 8007418:	4b93      	ldr	r3, [pc, #588]	; (8007668 <UART_SetConfig+0x2cc>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b03      	cmp	r3, #3
 8007424:	d816      	bhi.n	8007454 <UART_SetConfig+0xb8>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x90>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007449 	.word	0x08007449
 8007434:	08007443 	.word	0x08007443
 8007438:	0800744f 	.word	0x0800744f
 800743c:	2301      	movs	r3, #1
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e150      	b.n	80076e4 <UART_SetConfig+0x348>
 8007442:	2302      	movs	r3, #2
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e14d      	b.n	80076e4 <UART_SetConfig+0x348>
 8007448:	2304      	movs	r3, #4
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e14a      	b.n	80076e4 <UART_SetConfig+0x348>
 800744e:	2308      	movs	r3, #8
 8007450:	77fb      	strb	r3, [r7, #31]
 8007452:	e147      	b.n	80076e4 <UART_SetConfig+0x348>
 8007454:	2310      	movs	r3, #16
 8007456:	77fb      	strb	r3, [r7, #31]
 8007458:	e144      	b.n	80076e4 <UART_SetConfig+0x348>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a83      	ldr	r2, [pc, #524]	; (800766c <UART_SetConfig+0x2d0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d132      	bne.n	80074ca <UART_SetConfig+0x12e>
 8007464:	4b80      	ldr	r3, [pc, #512]	; (8007668 <UART_SetConfig+0x2cc>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	2b0c      	cmp	r3, #12
 8007470:	d828      	bhi.n	80074c4 <UART_SetConfig+0x128>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0xdc>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074c5 	.word	0x080074c5
 8007484:	080074c5 	.word	0x080074c5
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074c5 	.word	0x080074c5
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074b3 	.word	0x080074b3
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074c5 	.word	0x080074c5
 80074a8:	080074bf 	.word	0x080074bf
 80074ac:	2300      	movs	r3, #0
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e118      	b.n	80076e4 <UART_SetConfig+0x348>
 80074b2:	2302      	movs	r3, #2
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e115      	b.n	80076e4 <UART_SetConfig+0x348>
 80074b8:	2304      	movs	r3, #4
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e112      	b.n	80076e4 <UART_SetConfig+0x348>
 80074be:	2308      	movs	r3, #8
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e10f      	b.n	80076e4 <UART_SetConfig+0x348>
 80074c4:	2310      	movs	r3, #16
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e10c      	b.n	80076e4 <UART_SetConfig+0x348>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a68      	ldr	r2, [pc, #416]	; (8007670 <UART_SetConfig+0x2d4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d120      	bne.n	8007516 <UART_SetConfig+0x17a>
 80074d4:	4b64      	ldr	r3, [pc, #400]	; (8007668 <UART_SetConfig+0x2cc>)
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074de:	2b30      	cmp	r3, #48	; 0x30
 80074e0:	d013      	beq.n	800750a <UART_SetConfig+0x16e>
 80074e2:	2b30      	cmp	r3, #48	; 0x30
 80074e4:	d814      	bhi.n	8007510 <UART_SetConfig+0x174>
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d009      	beq.n	80074fe <UART_SetConfig+0x162>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d810      	bhi.n	8007510 <UART_SetConfig+0x174>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <UART_SetConfig+0x15c>
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d006      	beq.n	8007504 <UART_SetConfig+0x168>
 80074f6:	e00b      	b.n	8007510 <UART_SetConfig+0x174>
 80074f8:	2300      	movs	r3, #0
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e0f2      	b.n	80076e4 <UART_SetConfig+0x348>
 80074fe:	2302      	movs	r3, #2
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e0ef      	b.n	80076e4 <UART_SetConfig+0x348>
 8007504:	2304      	movs	r3, #4
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e0ec      	b.n	80076e4 <UART_SetConfig+0x348>
 800750a:	2308      	movs	r3, #8
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e0e9      	b.n	80076e4 <UART_SetConfig+0x348>
 8007510:	2310      	movs	r3, #16
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e0e6      	b.n	80076e4 <UART_SetConfig+0x348>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a56      	ldr	r2, [pc, #344]	; (8007674 <UART_SetConfig+0x2d8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d120      	bne.n	8007562 <UART_SetConfig+0x1c6>
 8007520:	4b51      	ldr	r3, [pc, #324]	; (8007668 <UART_SetConfig+0x2cc>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800752a:	2bc0      	cmp	r3, #192	; 0xc0
 800752c:	d013      	beq.n	8007556 <UART_SetConfig+0x1ba>
 800752e:	2bc0      	cmp	r3, #192	; 0xc0
 8007530:	d814      	bhi.n	800755c <UART_SetConfig+0x1c0>
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d009      	beq.n	800754a <UART_SetConfig+0x1ae>
 8007536:	2b80      	cmp	r3, #128	; 0x80
 8007538:	d810      	bhi.n	800755c <UART_SetConfig+0x1c0>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <UART_SetConfig+0x1a8>
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d006      	beq.n	8007550 <UART_SetConfig+0x1b4>
 8007542:	e00b      	b.n	800755c <UART_SetConfig+0x1c0>
 8007544:	2300      	movs	r3, #0
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e0cc      	b.n	80076e4 <UART_SetConfig+0x348>
 800754a:	2302      	movs	r3, #2
 800754c:	77fb      	strb	r3, [r7, #31]
 800754e:	e0c9      	b.n	80076e4 <UART_SetConfig+0x348>
 8007550:	2304      	movs	r3, #4
 8007552:	77fb      	strb	r3, [r7, #31]
 8007554:	e0c6      	b.n	80076e4 <UART_SetConfig+0x348>
 8007556:	2308      	movs	r3, #8
 8007558:	77fb      	strb	r3, [r7, #31]
 800755a:	e0c3      	b.n	80076e4 <UART_SetConfig+0x348>
 800755c:	2310      	movs	r3, #16
 800755e:	77fb      	strb	r3, [r7, #31]
 8007560:	e0c0      	b.n	80076e4 <UART_SetConfig+0x348>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a44      	ldr	r2, [pc, #272]	; (8007678 <UART_SetConfig+0x2dc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d125      	bne.n	80075b8 <UART_SetConfig+0x21c>
 800756c:	4b3e      	ldr	r3, [pc, #248]	; (8007668 <UART_SetConfig+0x2cc>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800757a:	d017      	beq.n	80075ac <UART_SetConfig+0x210>
 800757c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007580:	d817      	bhi.n	80075b2 <UART_SetConfig+0x216>
 8007582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007586:	d00b      	beq.n	80075a0 <UART_SetConfig+0x204>
 8007588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758c:	d811      	bhi.n	80075b2 <UART_SetConfig+0x216>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <UART_SetConfig+0x1fe>
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d006      	beq.n	80075a6 <UART_SetConfig+0x20a>
 8007598:	e00b      	b.n	80075b2 <UART_SetConfig+0x216>
 800759a:	2300      	movs	r3, #0
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e0a1      	b.n	80076e4 <UART_SetConfig+0x348>
 80075a0:	2302      	movs	r3, #2
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e09e      	b.n	80076e4 <UART_SetConfig+0x348>
 80075a6:	2304      	movs	r3, #4
 80075a8:	77fb      	strb	r3, [r7, #31]
 80075aa:	e09b      	b.n	80076e4 <UART_SetConfig+0x348>
 80075ac:	2308      	movs	r3, #8
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e098      	b.n	80076e4 <UART_SetConfig+0x348>
 80075b2:	2310      	movs	r3, #16
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e095      	b.n	80076e4 <UART_SetConfig+0x348>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2f      	ldr	r2, [pc, #188]	; (800767c <UART_SetConfig+0x2e0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d125      	bne.n	800760e <UART_SetConfig+0x272>
 80075c2:	4b29      	ldr	r3, [pc, #164]	; (8007668 <UART_SetConfig+0x2cc>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d0:	d017      	beq.n	8007602 <UART_SetConfig+0x266>
 80075d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d6:	d817      	bhi.n	8007608 <UART_SetConfig+0x26c>
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	d00b      	beq.n	80075f6 <UART_SetConfig+0x25a>
 80075de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e2:	d811      	bhi.n	8007608 <UART_SetConfig+0x26c>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <UART_SetConfig+0x254>
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ec:	d006      	beq.n	80075fc <UART_SetConfig+0x260>
 80075ee:	e00b      	b.n	8007608 <UART_SetConfig+0x26c>
 80075f0:	2301      	movs	r3, #1
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e076      	b.n	80076e4 <UART_SetConfig+0x348>
 80075f6:	2302      	movs	r3, #2
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e073      	b.n	80076e4 <UART_SetConfig+0x348>
 80075fc:	2304      	movs	r3, #4
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e070      	b.n	80076e4 <UART_SetConfig+0x348>
 8007602:	2308      	movs	r3, #8
 8007604:	77fb      	strb	r3, [r7, #31]
 8007606:	e06d      	b.n	80076e4 <UART_SetConfig+0x348>
 8007608:	2310      	movs	r3, #16
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e06a      	b.n	80076e4 <UART_SetConfig+0x348>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <UART_SetConfig+0x2e4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d138      	bne.n	800768a <UART_SetConfig+0x2ee>
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <UART_SetConfig+0x2cc>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007626:	d017      	beq.n	8007658 <UART_SetConfig+0x2bc>
 8007628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800762c:	d82a      	bhi.n	8007684 <UART_SetConfig+0x2e8>
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	d00b      	beq.n	800764c <UART_SetConfig+0x2b0>
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d824      	bhi.n	8007684 <UART_SetConfig+0x2e8>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <UART_SetConfig+0x2aa>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d006      	beq.n	8007652 <UART_SetConfig+0x2b6>
 8007644:	e01e      	b.n	8007684 <UART_SetConfig+0x2e8>
 8007646:	2300      	movs	r3, #0
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e04b      	b.n	80076e4 <UART_SetConfig+0x348>
 800764c:	2302      	movs	r3, #2
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e048      	b.n	80076e4 <UART_SetConfig+0x348>
 8007652:	2304      	movs	r3, #4
 8007654:	77fb      	strb	r3, [r7, #31]
 8007656:	e045      	b.n	80076e4 <UART_SetConfig+0x348>
 8007658:	2308      	movs	r3, #8
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e042      	b.n	80076e4 <UART_SetConfig+0x348>
 800765e:	bf00      	nop
 8007660:	efff69f3 	.word	0xefff69f3
 8007664:	40011000 	.word	0x40011000
 8007668:	40023800 	.word	0x40023800
 800766c:	40004400 	.word	0x40004400
 8007670:	40004800 	.word	0x40004800
 8007674:	40004c00 	.word	0x40004c00
 8007678:	40005000 	.word	0x40005000
 800767c:	40011400 	.word	0x40011400
 8007680:	40007800 	.word	0x40007800
 8007684:	2310      	movs	r3, #16
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e02c      	b.n	80076e4 <UART_SetConfig+0x348>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a72      	ldr	r2, [pc, #456]	; (8007858 <UART_SetConfig+0x4bc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d125      	bne.n	80076e0 <UART_SetConfig+0x344>
 8007694:	4b71      	ldr	r3, [pc, #452]	; (800785c <UART_SetConfig+0x4c0>)
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800769e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076a2:	d017      	beq.n	80076d4 <UART_SetConfig+0x338>
 80076a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076a8:	d817      	bhi.n	80076da <UART_SetConfig+0x33e>
 80076aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ae:	d00b      	beq.n	80076c8 <UART_SetConfig+0x32c>
 80076b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b4:	d811      	bhi.n	80076da <UART_SetConfig+0x33e>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <UART_SetConfig+0x326>
 80076ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076be:	d006      	beq.n	80076ce <UART_SetConfig+0x332>
 80076c0:	e00b      	b.n	80076da <UART_SetConfig+0x33e>
 80076c2:	2300      	movs	r3, #0
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e00d      	b.n	80076e4 <UART_SetConfig+0x348>
 80076c8:	2302      	movs	r3, #2
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e00a      	b.n	80076e4 <UART_SetConfig+0x348>
 80076ce:	2304      	movs	r3, #4
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e007      	b.n	80076e4 <UART_SetConfig+0x348>
 80076d4:	2308      	movs	r3, #8
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e004      	b.n	80076e4 <UART_SetConfig+0x348>
 80076da:	2310      	movs	r3, #16
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e001      	b.n	80076e4 <UART_SetConfig+0x348>
 80076e0:	2310      	movs	r3, #16
 80076e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ec:	d15b      	bne.n	80077a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076ee:	7ffb      	ldrb	r3, [r7, #31]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d828      	bhi.n	8007746 <UART_SetConfig+0x3aa>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x360>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	08007731 	.word	0x08007731
 8007708:	08007747 	.word	0x08007747
 800770c:	08007737 	.word	0x08007737
 8007710:	08007747 	.word	0x08007747
 8007714:	08007747 	.word	0x08007747
 8007718:	08007747 	.word	0x08007747
 800771c:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd f8d4 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8007724:	61b8      	str	r0, [r7, #24]
        break;
 8007726:	e013      	b.n	8007750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fd f8e4 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 800772c:	61b8      	str	r0, [r7, #24]
        break;
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b4b      	ldr	r3, [pc, #300]	; (8007860 <UART_SetConfig+0x4c4>)
 8007732:	61bb      	str	r3, [r7, #24]
        break;
 8007734:	e00c      	b.n	8007750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fc ffb7 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800773a:	61b8      	str	r0, [r7, #24]
        break;
 800773c:	e008      	b.n	8007750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	61bb      	str	r3, [r7, #24]
        break;
 8007744:	e004      	b.n	8007750 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	77bb      	strb	r3, [r7, #30]
        break;
 800774e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d074      	beq.n	8007840 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	005a      	lsls	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	441a      	add	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	fbb2 f3f3 	udiv	r3, r2, r3
 800776a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b0f      	cmp	r3, #15
 8007770:	d916      	bls.n	80077a0 <UART_SetConfig+0x404>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007778:	d212      	bcs.n	80077a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f023 030f 	bic.w	r3, r3, #15
 8007782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	b29a      	uxth	r2, r3
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	4313      	orrs	r3, r2
 8007794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	89fa      	ldrh	r2, [r7, #14]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e04f      	b.n	8007840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	77bb      	strb	r3, [r7, #30]
 80077a4:	e04c      	b.n	8007840 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d828      	bhi.n	80077fe <UART_SetConfig+0x462>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0x418>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	080077ff 	.word	0x080077ff
 80077c4:	080077ef 	.word	0x080077ef
 80077c8:	080077ff 	.word	0x080077ff
 80077cc:	080077ff 	.word	0x080077ff
 80077d0:	080077ff 	.word	0x080077ff
 80077d4:	080077f7 	.word	0x080077f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077d8:	f7fd f878 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80077dc:	61b8      	str	r0, [r7, #24]
        break;
 80077de:	e013      	b.n	8007808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e0:	f7fd f888 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 80077e4:	61b8      	str	r0, [r7, #24]
        break;
 80077e6:	e00f      	b.n	8007808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077e8:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <UART_SetConfig+0x4c4>)
 80077ea:	61bb      	str	r3, [r7, #24]
        break;
 80077ec:	e00c      	b.n	8007808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ee:	f7fc ff5b 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80077f2:	61b8      	str	r0, [r7, #24]
        break;
 80077f4:	e008      	b.n	8007808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fa:	61bb      	str	r3, [r7, #24]
        break;
 80077fc:	e004      	b.n	8007808 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	77bb      	strb	r3, [r7, #30]
        break;
 8007806:	bf00      	nop
    }

    if (pclk != 0U)
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	085a      	lsrs	r2, r3, #1
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007820:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b0f      	cmp	r3, #15
 8007826:	d909      	bls.n	800783c <UART_SetConfig+0x4a0>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782e:	d205      	bcs.n	800783c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	b29a      	uxth	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e001      	b.n	8007840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800784c:	7fbb      	ldrb	r3, [r7, #30]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40007c00 	.word	0x40007c00
 800785c:	40023800 	.word	0x40023800
 8007860:	00f42400 	.word	0x00f42400

08007864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01a      	beq.n	800797a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007962:	d10a      	bne.n	800797a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079b8:	f7fb fd94 	bl	80034e4 <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10e      	bne.n	80079ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f81b 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e011      	b.n	8007a0e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b09c      	sub	sp, #112	; 0x70
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a26:	e0a7      	b.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	f000 80a3 	beq.w	8007b78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a32:	f7fb fd57 	bl	80034e4 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d13f      	bne.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e6      	bne.n	8007a48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	663b      	str	r3, [r7, #96]	; 0x60
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e5      	bne.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e068      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d050      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae4:	d148      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e6      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	613b      	str	r3, [r7, #16]
   return(result);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f023 0301 	bic.w	r3, r3, #1
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b42:	623a      	str	r2, [r7, #32]
 8007b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	69f9      	ldr	r1, [r7, #28]
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e5      	bne.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e010      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4013      	ands	r3, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f43f af48 	beq.w	8007a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3770      	adds	r7, #112	; 0x70
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b097      	sub	sp, #92	; 0x5c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd6:	d10e      	bne.n	8007bf6 <UART_Start_Receive_IT+0x52>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <UART_Start_Receive_IT+0x48>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007be6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bea:	e02d      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	22ff      	movs	r2, #255	; 0xff
 8007bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bf4:	e028      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <UART_Start_Receive_IT+0x76>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <UART_Start_Receive_IT+0x6c>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22ff      	movs	r2, #255	; 0xff
 8007c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0e:	e01b      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	227f      	movs	r2, #127	; 0x7f
 8007c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c18:	e016      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c22:	d10d      	bne.n	8007c40 <UART_Start_Receive_IT+0x9c>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d104      	bne.n	8007c36 <UART_Start_Receive_IT+0x92>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	227f      	movs	r2, #127	; 0x7f
 8007c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c34:	e008      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	223f      	movs	r2, #63	; 0x3f
 8007c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c3e:	e003      	b.n	8007c48 <UART_Start_Receive_IT+0xa4>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2222      	movs	r2, #34	; 0x22
 8007c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c78:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c94:	d107      	bne.n	8007ca6 <UART_Start_Receive_IT+0x102>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <UART_Start_Receive_IT+0x184>)
 8007ca2:	669a      	str	r2, [r3, #104]	; 0x68
 8007ca4:	e002      	b.n	8007cac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <UART_Start_Receive_IT+0x188>)
 8007caa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d019      	beq.n	8007ce8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e6      	bne.n	8007cb4 <UART_Start_Receive_IT+0x110>
 8007ce6:	e018      	b.n	8007d1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d06:	623b      	str	r3, [r7, #32]
 8007d08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	69f9      	ldr	r1, [r7, #28]
 8007d0c:	6a3a      	ldr	r2, [r7, #32]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e6      	bne.n	8007ce8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	375c      	adds	r7, #92	; 0x5c
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	08007fdf 	.word	0x08007fdf
 8007d2c:	08007e79 	.word	0x08007e79

08007d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b095      	sub	sp, #84	; 0x54
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d56:	643b      	str	r3, [r7, #64]	; 0x40
 8007d58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e6      	bne.n	8007d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d118      	bne.n	8007dd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6979      	ldr	r1, [r7, #20]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007dec:	bf00      	nop
 8007dee:	3754      	adds	r7, #84	; 0x54
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff faaa 	bl	8007370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fa76 	bl	800735c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e70:	bf00      	nop
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b096      	sub	sp, #88	; 0x58
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e90:	2b22      	cmp	r3, #34	; 0x22
 8007e92:	f040 8098 	bne.w	8007fc6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ea0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ea4:	b2d9      	uxtb	r1, r3
 8007ea6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	400a      	ands	r2, r1
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d17b      	bne.n	8007fd6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efc:	647b      	str	r3, [r7, #68]	; 0x44
 8007efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f30:	633a      	str	r2, [r7, #48]	; 0x30
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d12e      	bne.n	8007fbe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	69b9      	ldr	r1, [r7, #24]
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	617b      	str	r3, [r7, #20]
   return(result);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d103      	bne.n	8007fae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2210      	movs	r2, #16
 8007fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff f9e4 	bl	8007384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fbc:	e00b      	b.n	8007fd6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fa fcce 	bl	8002960 <HAL_UART_RxCpltCallback>
}
 8007fc4:	e007      	b.n	8007fd6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0208 	orr.w	r2, r2, #8
 8007fd4:	619a      	str	r2, [r3, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	3758      	adds	r7, #88	; 0x58
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b096      	sub	sp, #88	; 0x58
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff6:	2b22      	cmp	r3, #34	; 0x22
 8007ff8:	f040 8098 	bne.w	800812c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800800c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008010:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008014:	4013      	ands	r3, r2
 8008016:	b29a      	uxth	r2, r3
 8008018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800801a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	1c9a      	adds	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d17b      	bne.n	800813c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008062:	643b      	str	r3, [r7, #64]	; 0x40
 8008064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	61fb      	str	r3, [r7, #28]
   return(result);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	64bb      	str	r3, [r7, #72]	; 0x48
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800809c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d12e      	bne.n	8008124 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	647b      	str	r3, [r7, #68]	; 0x44
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6979      	ldr	r1, [r7, #20]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	613b      	str	r3, [r7, #16]
   return(result);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b10      	cmp	r3, #16
 800810a:	d103      	bne.n	8008114 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2210      	movs	r2, #16
 8008112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff f931 	bl	8007384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008122:	e00b      	b.n	800813c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fa fc1b 	bl	8002960 <HAL_UART_RxCpltCallback>
}
 800812a:	e007      	b.n	800813c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0208 	orr.w	r2, r2, #8
 800813a:	619a      	str	r2, [r3, #24]
}
 800813c:	bf00      	nop
 800813e:	3758      	adds	r7, #88	; 0x58
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <__errno>:
 8008144:	4b01      	ldr	r3, [pc, #4]	; (800814c <__errno+0x8>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	200000a8 	.word	0x200000a8

08008150 <__libc_init_array>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4d0d      	ldr	r5, [pc, #52]	; (8008188 <__libc_init_array+0x38>)
 8008154:	4c0d      	ldr	r4, [pc, #52]	; (800818c <__libc_init_array+0x3c>)
 8008156:	1b64      	subs	r4, r4, r5
 8008158:	10a4      	asrs	r4, r4, #2
 800815a:	2600      	movs	r6, #0
 800815c:	42a6      	cmp	r6, r4
 800815e:	d109      	bne.n	8008174 <__libc_init_array+0x24>
 8008160:	4d0b      	ldr	r5, [pc, #44]	; (8008190 <__libc_init_array+0x40>)
 8008162:	4c0c      	ldr	r4, [pc, #48]	; (8008194 <__libc_init_array+0x44>)
 8008164:	f005 f8ca 	bl	800d2fc <_init>
 8008168:	1b64      	subs	r4, r4, r5
 800816a:	10a4      	asrs	r4, r4, #2
 800816c:	2600      	movs	r6, #0
 800816e:	42a6      	cmp	r6, r4
 8008170:	d105      	bne.n	800817e <__libc_init_array+0x2e>
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	f855 3b04 	ldr.w	r3, [r5], #4
 8008178:	4798      	blx	r3
 800817a:	3601      	adds	r6, #1
 800817c:	e7ee      	b.n	800815c <__libc_init_array+0xc>
 800817e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008182:	4798      	blx	r3
 8008184:	3601      	adds	r6, #1
 8008186:	e7f2      	b.n	800816e <__libc_init_array+0x1e>
 8008188:	0800d87c 	.word	0x0800d87c
 800818c:	0800d87c 	.word	0x0800d87c
 8008190:	0800d87c 	.word	0x0800d87c
 8008194:	0800d880 	.word	0x0800d880

08008198 <memset>:
 8008198:	4402      	add	r2, r0
 800819a:	4603      	mov	r3, r0
 800819c:	4293      	cmp	r3, r2
 800819e:	d100      	bne.n	80081a2 <memset+0xa>
 80081a0:	4770      	bx	lr
 80081a2:	f803 1b01 	strb.w	r1, [r3], #1
 80081a6:	e7f9      	b.n	800819c <memset+0x4>

080081a8 <__cvt>:
 80081a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	ec55 4b10 	vmov	r4, r5, d0
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	460e      	mov	r6, r1
 80081b4:	4619      	mov	r1, r3
 80081b6:	462b      	mov	r3, r5
 80081b8:	bfbb      	ittet	lt
 80081ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081be:	461d      	movlt	r5, r3
 80081c0:	2300      	movge	r3, #0
 80081c2:	232d      	movlt	r3, #45	; 0x2d
 80081c4:	700b      	strb	r3, [r1, #0]
 80081c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081cc:	4691      	mov	r9, r2
 80081ce:	f023 0820 	bic.w	r8, r3, #32
 80081d2:	bfbc      	itt	lt
 80081d4:	4622      	movlt	r2, r4
 80081d6:	4614      	movlt	r4, r2
 80081d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081dc:	d005      	beq.n	80081ea <__cvt+0x42>
 80081de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081e2:	d100      	bne.n	80081e6 <__cvt+0x3e>
 80081e4:	3601      	adds	r6, #1
 80081e6:	2102      	movs	r1, #2
 80081e8:	e000      	b.n	80081ec <__cvt+0x44>
 80081ea:	2103      	movs	r1, #3
 80081ec:	ab03      	add	r3, sp, #12
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	ab02      	add	r3, sp, #8
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	ec45 4b10 	vmov	d0, r4, r5
 80081f8:	4653      	mov	r3, sl
 80081fa:	4632      	mov	r2, r6
 80081fc:	f001 fe44 	bl	8009e88 <_dtoa_r>
 8008200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008204:	4607      	mov	r7, r0
 8008206:	d102      	bne.n	800820e <__cvt+0x66>
 8008208:	f019 0f01 	tst.w	r9, #1
 800820c:	d022      	beq.n	8008254 <__cvt+0xac>
 800820e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008212:	eb07 0906 	add.w	r9, r7, r6
 8008216:	d110      	bne.n	800823a <__cvt+0x92>
 8008218:	783b      	ldrb	r3, [r7, #0]
 800821a:	2b30      	cmp	r3, #48	; 0x30
 800821c:	d10a      	bne.n	8008234 <__cvt+0x8c>
 800821e:	2200      	movs	r2, #0
 8008220:	2300      	movs	r3, #0
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 fc6f 	bl	8000b08 <__aeabi_dcmpeq>
 800822a:	b918      	cbnz	r0, 8008234 <__cvt+0x8c>
 800822c:	f1c6 0601 	rsb	r6, r6, #1
 8008230:	f8ca 6000 	str.w	r6, [sl]
 8008234:	f8da 3000 	ldr.w	r3, [sl]
 8008238:	4499      	add	r9, r3
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 8008246:	b108      	cbz	r0, 800824c <__cvt+0xa4>
 8008248:	f8cd 900c 	str.w	r9, [sp, #12]
 800824c:	2230      	movs	r2, #48	; 0x30
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	454b      	cmp	r3, r9
 8008252:	d307      	bcc.n	8008264 <__cvt+0xbc>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008258:	1bdb      	subs	r3, r3, r7
 800825a:	4638      	mov	r0, r7
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	b004      	add	sp, #16
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	1c59      	adds	r1, r3, #1
 8008266:	9103      	str	r1, [sp, #12]
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e7f0      	b.n	800824e <__cvt+0xa6>

0800826c <__exponent>:
 800826c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800826e:	4603      	mov	r3, r0
 8008270:	2900      	cmp	r1, #0
 8008272:	bfb8      	it	lt
 8008274:	4249      	neglt	r1, r1
 8008276:	f803 2b02 	strb.w	r2, [r3], #2
 800827a:	bfb4      	ite	lt
 800827c:	222d      	movlt	r2, #45	; 0x2d
 800827e:	222b      	movge	r2, #43	; 0x2b
 8008280:	2909      	cmp	r1, #9
 8008282:	7042      	strb	r2, [r0, #1]
 8008284:	dd2a      	ble.n	80082dc <__exponent+0x70>
 8008286:	f10d 0407 	add.w	r4, sp, #7
 800828a:	46a4      	mov	ip, r4
 800828c:	270a      	movs	r7, #10
 800828e:	46a6      	mov	lr, r4
 8008290:	460a      	mov	r2, r1
 8008292:	fb91 f6f7 	sdiv	r6, r1, r7
 8008296:	fb07 1516 	mls	r5, r7, r6, r1
 800829a:	3530      	adds	r5, #48	; 0x30
 800829c:	2a63      	cmp	r2, #99	; 0x63
 800829e:	f104 34ff 	add.w	r4, r4, #4294967295
 80082a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082a6:	4631      	mov	r1, r6
 80082a8:	dcf1      	bgt.n	800828e <__exponent+0x22>
 80082aa:	3130      	adds	r1, #48	; 0x30
 80082ac:	f1ae 0502 	sub.w	r5, lr, #2
 80082b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082b4:	1c44      	adds	r4, r0, #1
 80082b6:	4629      	mov	r1, r5
 80082b8:	4561      	cmp	r1, ip
 80082ba:	d30a      	bcc.n	80082d2 <__exponent+0x66>
 80082bc:	f10d 0209 	add.w	r2, sp, #9
 80082c0:	eba2 020e 	sub.w	r2, r2, lr
 80082c4:	4565      	cmp	r5, ip
 80082c6:	bf88      	it	hi
 80082c8:	2200      	movhi	r2, #0
 80082ca:	4413      	add	r3, r2
 80082cc:	1a18      	subs	r0, r3, r0
 80082ce:	b003      	add	sp, #12
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082da:	e7ed      	b.n	80082b8 <__exponent+0x4c>
 80082dc:	2330      	movs	r3, #48	; 0x30
 80082de:	3130      	adds	r1, #48	; 0x30
 80082e0:	7083      	strb	r3, [r0, #2]
 80082e2:	70c1      	strb	r1, [r0, #3]
 80082e4:	1d03      	adds	r3, r0, #4
 80082e6:	e7f1      	b.n	80082cc <__exponent+0x60>

080082e8 <_printf_float>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	ed2d 8b02 	vpush	{d8}
 80082f0:	b08d      	sub	sp, #52	; 0x34
 80082f2:	460c      	mov	r4, r1
 80082f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082f8:	4616      	mov	r6, r2
 80082fa:	461f      	mov	r7, r3
 80082fc:	4605      	mov	r5, r0
 80082fe:	f002 ff21 	bl	800b144 <_localeconv_r>
 8008302:	f8d0 a000 	ldr.w	sl, [r0]
 8008306:	4650      	mov	r0, sl
 8008308:	f7f7 ff82 	bl	8000210 <strlen>
 800830c:	2300      	movs	r3, #0
 800830e:	930a      	str	r3, [sp, #40]	; 0x28
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	f8d8 3000 	ldr.w	r3, [r8]
 8008318:	f894 b018 	ldrb.w	fp, [r4, #24]
 800831c:	3307      	adds	r3, #7
 800831e:	f023 0307 	bic.w	r3, r3, #7
 8008322:	f103 0208 	add.w	r2, r3, #8
 8008326:	f8c8 2000 	str.w	r2, [r8]
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008332:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800833a:	9307      	str	r3, [sp, #28]
 800833c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008340:	ee08 0a10 	vmov	s16, r0
 8008344:	4b9f      	ldr	r3, [pc, #636]	; (80085c4 <_printf_float+0x2dc>)
 8008346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	f7f8 fc0d 	bl	8000b6c <__aeabi_dcmpun>
 8008352:	bb88      	cbnz	r0, 80083b8 <_printf_float+0xd0>
 8008354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008358:	4b9a      	ldr	r3, [pc, #616]	; (80085c4 <_printf_float+0x2dc>)
 800835a:	f04f 32ff 	mov.w	r2, #4294967295
 800835e:	f7f8 fbe7 	bl	8000b30 <__aeabi_dcmple>
 8008362:	bb48      	cbnz	r0, 80083b8 <_printf_float+0xd0>
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	4640      	mov	r0, r8
 800836a:	4649      	mov	r1, r9
 800836c:	f7f8 fbd6 	bl	8000b1c <__aeabi_dcmplt>
 8008370:	b110      	cbz	r0, 8008378 <_printf_float+0x90>
 8008372:	232d      	movs	r3, #45	; 0x2d
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008378:	4b93      	ldr	r3, [pc, #588]	; (80085c8 <_printf_float+0x2e0>)
 800837a:	4894      	ldr	r0, [pc, #592]	; (80085cc <_printf_float+0x2e4>)
 800837c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008380:	bf94      	ite	ls
 8008382:	4698      	movls	r8, r3
 8008384:	4680      	movhi	r8, r0
 8008386:	2303      	movs	r3, #3
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	9b05      	ldr	r3, [sp, #20]
 800838c:	f023 0204 	bic.w	r2, r3, #4
 8008390:	6022      	str	r2, [r4, #0]
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	9700      	str	r7, [sp, #0]
 8008398:	4633      	mov	r3, r6
 800839a:	aa0b      	add	r2, sp, #44	; 0x2c
 800839c:	4621      	mov	r1, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f9d8 	bl	8008754 <_printf_common>
 80083a4:	3001      	adds	r0, #1
 80083a6:	f040 8090 	bne.w	80084ca <_printf_float+0x1e2>
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	b00d      	add	sp, #52	; 0x34
 80083b0:	ecbd 8b02 	vpop	{d8}
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fbd4 	bl	8000b6c <__aeabi_dcmpun>
 80083c4:	b140      	cbz	r0, 80083d8 <_printf_float+0xf0>
 80083c6:	464b      	mov	r3, r9
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfbc      	itt	lt
 80083cc:	232d      	movlt	r3, #45	; 0x2d
 80083ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083d2:	487f      	ldr	r0, [pc, #508]	; (80085d0 <_printf_float+0x2e8>)
 80083d4:	4b7f      	ldr	r3, [pc, #508]	; (80085d4 <_printf_float+0x2ec>)
 80083d6:	e7d1      	b.n	800837c <_printf_float+0x94>
 80083d8:	6863      	ldr	r3, [r4, #4]
 80083da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083de:	9206      	str	r2, [sp, #24]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	d13f      	bne.n	8008464 <_printf_float+0x17c>
 80083e4:	2306      	movs	r3, #6
 80083e6:	6063      	str	r3, [r4, #4]
 80083e8:	9b05      	ldr	r3, [sp, #20]
 80083ea:	6861      	ldr	r1, [r4, #4]
 80083ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083f0:	2300      	movs	r3, #0
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	ab0a      	add	r3, sp, #40	; 0x28
 80083f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083fa:	ab09      	add	r3, sp, #36	; 0x24
 80083fc:	ec49 8b10 	vmov	d0, r8, r9
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008408:	4628      	mov	r0, r5
 800840a:	f7ff fecd 	bl	80081a8 <__cvt>
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008412:	2b47      	cmp	r3, #71	; 0x47
 8008414:	4680      	mov	r8, r0
 8008416:	d108      	bne.n	800842a <_printf_float+0x142>
 8008418:	1cc8      	adds	r0, r1, #3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x13a>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	4299      	cmp	r1, r3
 8008420:	dd41      	ble.n	80084a6 <_printf_float+0x1be>
 8008422:	f1ab 0b02 	sub.w	fp, fp, #2
 8008426:	fa5f fb8b 	uxtb.w	fp, fp
 800842a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800842e:	d820      	bhi.n	8008472 <_printf_float+0x18a>
 8008430:	3901      	subs	r1, #1
 8008432:	465a      	mov	r2, fp
 8008434:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008438:	9109      	str	r1, [sp, #36]	; 0x24
 800843a:	f7ff ff17 	bl	800826c <__exponent>
 800843e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008440:	1813      	adds	r3, r2, r0
 8008442:	2a01      	cmp	r2, #1
 8008444:	4681      	mov	r9, r0
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	dc02      	bgt.n	8008450 <_printf_float+0x168>
 800844a:	6822      	ldr	r2, [r4, #0]
 800844c:	07d2      	lsls	r2, r2, #31
 800844e:	d501      	bpl.n	8008454 <_printf_float+0x16c>
 8008450:	3301      	adds	r3, #1
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008458:	2b00      	cmp	r3, #0
 800845a:	d09c      	beq.n	8008396 <_printf_float+0xae>
 800845c:	232d      	movs	r3, #45	; 0x2d
 800845e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008462:	e798      	b.n	8008396 <_printf_float+0xae>
 8008464:	9a06      	ldr	r2, [sp, #24]
 8008466:	2a47      	cmp	r2, #71	; 0x47
 8008468:	d1be      	bne.n	80083e8 <_printf_float+0x100>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1bc      	bne.n	80083e8 <_printf_float+0x100>
 800846e:	2301      	movs	r3, #1
 8008470:	e7b9      	b.n	80083e6 <_printf_float+0xfe>
 8008472:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008476:	d118      	bne.n	80084aa <_printf_float+0x1c2>
 8008478:	2900      	cmp	r1, #0
 800847a:	6863      	ldr	r3, [r4, #4]
 800847c:	dd0b      	ble.n	8008496 <_printf_float+0x1ae>
 800847e:	6121      	str	r1, [r4, #16]
 8008480:	b913      	cbnz	r3, 8008488 <_printf_float+0x1a0>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	07d0      	lsls	r0, r2, #31
 8008486:	d502      	bpl.n	800848e <_printf_float+0x1a6>
 8008488:	3301      	adds	r3, #1
 800848a:	440b      	add	r3, r1
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008490:	f04f 0900 	mov.w	r9, #0
 8008494:	e7de      	b.n	8008454 <_printf_float+0x16c>
 8008496:	b913      	cbnz	r3, 800849e <_printf_float+0x1b6>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	07d2      	lsls	r2, r2, #31
 800849c:	d501      	bpl.n	80084a2 <_printf_float+0x1ba>
 800849e:	3302      	adds	r3, #2
 80084a0:	e7f4      	b.n	800848c <_printf_float+0x1a4>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7f2      	b.n	800848c <_printf_float+0x1a4>
 80084a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	4299      	cmp	r1, r3
 80084ae:	db05      	blt.n	80084bc <_printf_float+0x1d4>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	6121      	str	r1, [r4, #16]
 80084b4:	07d8      	lsls	r0, r3, #31
 80084b6:	d5ea      	bpl.n	800848e <_printf_float+0x1a6>
 80084b8:	1c4b      	adds	r3, r1, #1
 80084ba:	e7e7      	b.n	800848c <_printf_float+0x1a4>
 80084bc:	2900      	cmp	r1, #0
 80084be:	bfd4      	ite	le
 80084c0:	f1c1 0202 	rsble	r2, r1, #2
 80084c4:	2201      	movgt	r2, #1
 80084c6:	4413      	add	r3, r2
 80084c8:	e7e0      	b.n	800848c <_printf_float+0x1a4>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	055a      	lsls	r2, r3, #21
 80084ce:	d407      	bmi.n	80084e0 <_printf_float+0x1f8>
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	4642      	mov	r2, r8
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	d12c      	bne.n	8008538 <_printf_float+0x250>
 80084de:	e764      	b.n	80083aa <_printf_float+0xc2>
 80084e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084e4:	f240 80e0 	bls.w	80086a8 <_printf_float+0x3c0>
 80084e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	f7f8 fb0a 	bl	8000b08 <__aeabi_dcmpeq>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d034      	beq.n	8008562 <_printf_float+0x27a>
 80084f8:	4a37      	ldr	r2, [pc, #220]	; (80085d8 <_printf_float+0x2f0>)
 80084fa:	2301      	movs	r3, #1
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	f43f af51 	beq.w	80083aa <_printf_float+0xc2>
 8008508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800850c:	429a      	cmp	r2, r3
 800850e:	db02      	blt.n	8008516 <_printf_float+0x22e>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	07d8      	lsls	r0, r3, #31
 8008514:	d510      	bpl.n	8008538 <_printf_float+0x250>
 8008516:	ee18 3a10 	vmov	r3, s16
 800851a:	4652      	mov	r2, sl
 800851c:	4631      	mov	r1, r6
 800851e:	4628      	mov	r0, r5
 8008520:	47b8      	blx	r7
 8008522:	3001      	adds	r0, #1
 8008524:	f43f af41 	beq.w	80083aa <_printf_float+0xc2>
 8008528:	f04f 0800 	mov.w	r8, #0
 800852c:	f104 091a 	add.w	r9, r4, #26
 8008530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008532:	3b01      	subs	r3, #1
 8008534:	4543      	cmp	r3, r8
 8008536:	dc09      	bgt.n	800854c <_printf_float+0x264>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	079b      	lsls	r3, r3, #30
 800853c:	f100 8105 	bmi.w	800874a <_printf_float+0x462>
 8008540:	68e0      	ldr	r0, [r4, #12]
 8008542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008544:	4298      	cmp	r0, r3
 8008546:	bfb8      	it	lt
 8008548:	4618      	movlt	r0, r3
 800854a:	e730      	b.n	80083ae <_printf_float+0xc6>
 800854c:	2301      	movs	r3, #1
 800854e:	464a      	mov	r2, r9
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af27 	beq.w	80083aa <_printf_float+0xc2>
 800855c:	f108 0801 	add.w	r8, r8, #1
 8008560:	e7e6      	b.n	8008530 <_printf_float+0x248>
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc39      	bgt.n	80085dc <_printf_float+0x2f4>
 8008568:	4a1b      	ldr	r2, [pc, #108]	; (80085d8 <_printf_float+0x2f0>)
 800856a:	2301      	movs	r3, #1
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af19 	beq.w	80083aa <_printf_float+0xc2>
 8008578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800857c:	4313      	orrs	r3, r2
 800857e:	d102      	bne.n	8008586 <_printf_float+0x29e>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	07d9      	lsls	r1, r3, #31
 8008584:	d5d8      	bpl.n	8008538 <_printf_float+0x250>
 8008586:	ee18 3a10 	vmov	r3, s16
 800858a:	4652      	mov	r2, sl
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af09 	beq.w	80083aa <_printf_float+0xc2>
 8008598:	f04f 0900 	mov.w	r9, #0
 800859c:	f104 0a1a 	add.w	sl, r4, #26
 80085a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a2:	425b      	negs	r3, r3
 80085a4:	454b      	cmp	r3, r9
 80085a6:	dc01      	bgt.n	80085ac <_printf_float+0x2c4>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	e792      	b.n	80084d2 <_printf_float+0x1ea>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4652      	mov	r2, sl
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f aef7 	beq.w	80083aa <_printf_float+0xc2>
 80085bc:	f109 0901 	add.w	r9, r9, #1
 80085c0:	e7ee      	b.n	80085a0 <_printf_float+0x2b8>
 80085c2:	bf00      	nop
 80085c4:	7fefffff 	.word	0x7fefffff
 80085c8:	0800d3bc 	.word	0x0800d3bc
 80085cc:	0800d3c0 	.word	0x0800d3c0
 80085d0:	0800d3c8 	.word	0x0800d3c8
 80085d4:	0800d3c4 	.word	0x0800d3c4
 80085d8:	0800d7c1 	.word	0x0800d7c1
 80085dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085e0:	429a      	cmp	r2, r3
 80085e2:	bfa8      	it	ge
 80085e4:	461a      	movge	r2, r3
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	4691      	mov	r9, r2
 80085ea:	dc37      	bgt.n	800865c <_printf_float+0x374>
 80085ec:	f04f 0b00 	mov.w	fp, #0
 80085f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085f4:	f104 021a 	add.w	r2, r4, #26
 80085f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	eba3 0309 	sub.w	r3, r3, r9
 8008600:	455b      	cmp	r3, fp
 8008602:	dc33      	bgt.n	800866c <_printf_float+0x384>
 8008604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008608:	429a      	cmp	r2, r3
 800860a:	db3b      	blt.n	8008684 <_printf_float+0x39c>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07da      	lsls	r2, r3, #31
 8008610:	d438      	bmi.n	8008684 <_printf_float+0x39c>
 8008612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008614:	9a05      	ldr	r2, [sp, #20]
 8008616:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008618:	1a9a      	subs	r2, r3, r2
 800861a:	eba3 0901 	sub.w	r9, r3, r1
 800861e:	4591      	cmp	r9, r2
 8008620:	bfa8      	it	ge
 8008622:	4691      	movge	r9, r2
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	dc35      	bgt.n	8008696 <_printf_float+0x3ae>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008632:	f104 0a1a 	add.w	sl, r4, #26
 8008636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	eba3 0309 	sub.w	r3, r3, r9
 8008640:	4543      	cmp	r3, r8
 8008642:	f77f af79 	ble.w	8008538 <_printf_float+0x250>
 8008646:	2301      	movs	r3, #1
 8008648:	4652      	mov	r2, sl
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f aeaa 	beq.w	80083aa <_printf_float+0xc2>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	e7ec      	b.n	8008636 <_printf_float+0x34e>
 800865c:	4613      	mov	r3, r2
 800865e:	4631      	mov	r1, r6
 8008660:	4642      	mov	r2, r8
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	d1c0      	bne.n	80085ec <_printf_float+0x304>
 800866a:	e69e      	b.n	80083aa <_printf_float+0xc2>
 800866c:	2301      	movs	r3, #1
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	f43f ae97 	beq.w	80083aa <_printf_float+0xc2>
 800867c:	9a05      	ldr	r2, [sp, #20]
 800867e:	f10b 0b01 	add.w	fp, fp, #1
 8008682:	e7b9      	b.n	80085f8 <_printf_float+0x310>
 8008684:	ee18 3a10 	vmov	r3, s16
 8008688:	4652      	mov	r2, sl
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	d1be      	bne.n	8008612 <_printf_float+0x32a>
 8008694:	e689      	b.n	80083aa <_printf_float+0xc2>
 8008696:	9a05      	ldr	r2, [sp, #20]
 8008698:	464b      	mov	r3, r9
 800869a:	4442      	add	r2, r8
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	d1c1      	bne.n	800862a <_printf_float+0x342>
 80086a6:	e680      	b.n	80083aa <_printf_float+0xc2>
 80086a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086aa:	2a01      	cmp	r2, #1
 80086ac:	dc01      	bgt.n	80086b2 <_printf_float+0x3ca>
 80086ae:	07db      	lsls	r3, r3, #31
 80086b0:	d538      	bpl.n	8008724 <_printf_float+0x43c>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4642      	mov	r2, r8
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f ae74 	beq.w	80083aa <_printf_float+0xc2>
 80086c2:	ee18 3a10 	vmov	r3, s16
 80086c6:	4652      	mov	r2, sl
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f ae6b 	beq.w	80083aa <_printf_float+0xc2>
 80086d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086d8:	2200      	movs	r2, #0
 80086da:	2300      	movs	r3, #0
 80086dc:	f7f8 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 80086e0:	b9d8      	cbnz	r0, 800871a <_printf_float+0x432>
 80086e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e4:	f108 0201 	add.w	r2, r8, #1
 80086e8:	3b01      	subs	r3, #1
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	d10e      	bne.n	8008712 <_printf_float+0x42a>
 80086f4:	e659      	b.n	80083aa <_printf_float+0xc2>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f ae52 	beq.w	80083aa <_printf_float+0xc2>
 8008706:	f108 0801 	add.w	r8, r8, #1
 800870a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870c:	3b01      	subs	r3, #1
 800870e:	4543      	cmp	r3, r8
 8008710:	dcf1      	bgt.n	80086f6 <_printf_float+0x40e>
 8008712:	464b      	mov	r3, r9
 8008714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008718:	e6dc      	b.n	80084d4 <_printf_float+0x1ec>
 800871a:	f04f 0800 	mov.w	r8, #0
 800871e:	f104 0a1a 	add.w	sl, r4, #26
 8008722:	e7f2      	b.n	800870a <_printf_float+0x422>
 8008724:	2301      	movs	r3, #1
 8008726:	4642      	mov	r2, r8
 8008728:	e7df      	b.n	80086ea <_printf_float+0x402>
 800872a:	2301      	movs	r3, #1
 800872c:	464a      	mov	r2, r9
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	f43f ae38 	beq.w	80083aa <_printf_float+0xc2>
 800873a:	f108 0801 	add.w	r8, r8, #1
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008742:	1a5b      	subs	r3, r3, r1
 8008744:	4543      	cmp	r3, r8
 8008746:	dcf0      	bgt.n	800872a <_printf_float+0x442>
 8008748:	e6fa      	b.n	8008540 <_printf_float+0x258>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 0919 	add.w	r9, r4, #25
 8008752:	e7f4      	b.n	800873e <_printf_float+0x456>

08008754 <_printf_common>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	4616      	mov	r6, r2
 800875a:	4699      	mov	r9, r3
 800875c:	688a      	ldr	r2, [r1, #8]
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008764:	4293      	cmp	r3, r2
 8008766:	bfb8      	it	lt
 8008768:	4613      	movlt	r3, r2
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008770:	4607      	mov	r7, r0
 8008772:	460c      	mov	r4, r1
 8008774:	b10a      	cbz	r2, 800877a <_printf_common+0x26>
 8008776:	3301      	adds	r3, #1
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	0699      	lsls	r1, r3, #26
 800877e:	bf42      	ittt	mi
 8008780:	6833      	ldrmi	r3, [r6, #0]
 8008782:	3302      	addmi	r3, #2
 8008784:	6033      	strmi	r3, [r6, #0]
 8008786:	6825      	ldr	r5, [r4, #0]
 8008788:	f015 0506 	ands.w	r5, r5, #6
 800878c:	d106      	bne.n	800879c <_printf_common+0x48>
 800878e:	f104 0a19 	add.w	sl, r4, #25
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	6832      	ldr	r2, [r6, #0]
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	42ab      	cmp	r3, r5
 800879a:	dc26      	bgt.n	80087ea <_printf_common+0x96>
 800879c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087a0:	1e13      	subs	r3, r2, #0
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	bf18      	it	ne
 80087a6:	2301      	movne	r3, #1
 80087a8:	0692      	lsls	r2, r2, #26
 80087aa:	d42b      	bmi.n	8008804 <_printf_common+0xb0>
 80087ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087b0:	4649      	mov	r1, r9
 80087b2:	4638      	mov	r0, r7
 80087b4:	47c0      	blx	r8
 80087b6:	3001      	adds	r0, #1
 80087b8:	d01e      	beq.n	80087f8 <_printf_common+0xa4>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	68e5      	ldr	r5, [r4, #12]
 80087be:	6832      	ldr	r2, [r6, #0]
 80087c0:	f003 0306 	and.w	r3, r3, #6
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	bf08      	it	eq
 80087c8:	1aad      	subeq	r5, r5, r2
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	bf0c      	ite	eq
 80087d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d4:	2500      	movne	r5, #0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	bfc4      	itt	gt
 80087da:	1a9b      	subgt	r3, r3, r2
 80087dc:	18ed      	addgt	r5, r5, r3
 80087de:	2600      	movs	r6, #0
 80087e0:	341a      	adds	r4, #26
 80087e2:	42b5      	cmp	r5, r6
 80087e4:	d11a      	bne.n	800881c <_printf_common+0xc8>
 80087e6:	2000      	movs	r0, #0
 80087e8:	e008      	b.n	80087fc <_printf_common+0xa8>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4652      	mov	r2, sl
 80087ee:	4649      	mov	r1, r9
 80087f0:	4638      	mov	r0, r7
 80087f2:	47c0      	blx	r8
 80087f4:	3001      	adds	r0, #1
 80087f6:	d103      	bne.n	8008800 <_printf_common+0xac>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008800:	3501      	adds	r5, #1
 8008802:	e7c6      	b.n	8008792 <_printf_common+0x3e>
 8008804:	18e1      	adds	r1, r4, r3
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	2030      	movs	r0, #48	; 0x30
 800880a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800880e:	4422      	add	r2, r4
 8008810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008818:	3302      	adds	r3, #2
 800881a:	e7c7      	b.n	80087ac <_printf_common+0x58>
 800881c:	2301      	movs	r3, #1
 800881e:	4622      	mov	r2, r4
 8008820:	4649      	mov	r1, r9
 8008822:	4638      	mov	r0, r7
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d0e6      	beq.n	80087f8 <_printf_common+0xa4>
 800882a:	3601      	adds	r6, #1
 800882c:	e7d9      	b.n	80087e2 <_printf_common+0x8e>
	...

08008830 <_printf_i>:
 8008830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	7e0f      	ldrb	r7, [r1, #24]
 8008836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008838:	2f78      	cmp	r7, #120	; 0x78
 800883a:	4691      	mov	r9, r2
 800883c:	4680      	mov	r8, r0
 800883e:	460c      	mov	r4, r1
 8008840:	469a      	mov	sl, r3
 8008842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008846:	d807      	bhi.n	8008858 <_printf_i+0x28>
 8008848:	2f62      	cmp	r7, #98	; 0x62
 800884a:	d80a      	bhi.n	8008862 <_printf_i+0x32>
 800884c:	2f00      	cmp	r7, #0
 800884e:	f000 80d8 	beq.w	8008a02 <_printf_i+0x1d2>
 8008852:	2f58      	cmp	r7, #88	; 0x58
 8008854:	f000 80a3 	beq.w	800899e <_printf_i+0x16e>
 8008858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800885c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008860:	e03a      	b.n	80088d8 <_printf_i+0xa8>
 8008862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008866:	2b15      	cmp	r3, #21
 8008868:	d8f6      	bhi.n	8008858 <_printf_i+0x28>
 800886a:	a101      	add	r1, pc, #4	; (adr r1, 8008870 <_printf_i+0x40>)
 800886c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008870:	080088c9 	.word	0x080088c9
 8008874:	080088dd 	.word	0x080088dd
 8008878:	08008859 	.word	0x08008859
 800887c:	08008859 	.word	0x08008859
 8008880:	08008859 	.word	0x08008859
 8008884:	08008859 	.word	0x08008859
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008859 	.word	0x08008859
 8008890:	08008859 	.word	0x08008859
 8008894:	08008859 	.word	0x08008859
 8008898:	08008859 	.word	0x08008859
 800889c:	080089e9 	.word	0x080089e9
 80088a0:	0800890d 	.word	0x0800890d
 80088a4:	080089cb 	.word	0x080089cb
 80088a8:	08008859 	.word	0x08008859
 80088ac:	08008859 	.word	0x08008859
 80088b0:	08008a0b 	.word	0x08008a0b
 80088b4:	08008859 	.word	0x08008859
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008859 	.word	0x08008859
 80088c0:	08008859 	.word	0x08008859
 80088c4:	080089d3 	.word	0x080089d3
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	602a      	str	r2, [r5, #0]
 80088d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088d8:	2301      	movs	r3, #1
 80088da:	e0a3      	b.n	8008a24 <_printf_i+0x1f4>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	6829      	ldr	r1, [r5, #0]
 80088e0:	0606      	lsls	r6, r0, #24
 80088e2:	f101 0304 	add.w	r3, r1, #4
 80088e6:	d50a      	bpl.n	80088fe <_printf_i+0xce>
 80088e8:	680e      	ldr	r6, [r1, #0]
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	2e00      	cmp	r6, #0
 80088ee:	da03      	bge.n	80088f8 <_printf_i+0xc8>
 80088f0:	232d      	movs	r3, #45	; 0x2d
 80088f2:	4276      	negs	r6, r6
 80088f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f8:	485e      	ldr	r0, [pc, #376]	; (8008a74 <_printf_i+0x244>)
 80088fa:	230a      	movs	r3, #10
 80088fc:	e019      	b.n	8008932 <_printf_i+0x102>
 80088fe:	680e      	ldr	r6, [r1, #0]
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008906:	bf18      	it	ne
 8008908:	b236      	sxthne	r6, r6
 800890a:	e7ef      	b.n	80088ec <_printf_i+0xbc>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	6820      	ldr	r0, [r4, #0]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	6029      	str	r1, [r5, #0]
 8008914:	0601      	lsls	r1, r0, #24
 8008916:	d501      	bpl.n	800891c <_printf_i+0xec>
 8008918:	681e      	ldr	r6, [r3, #0]
 800891a:	e002      	b.n	8008922 <_printf_i+0xf2>
 800891c:	0646      	lsls	r6, r0, #25
 800891e:	d5fb      	bpl.n	8008918 <_printf_i+0xe8>
 8008920:	881e      	ldrh	r6, [r3, #0]
 8008922:	4854      	ldr	r0, [pc, #336]	; (8008a74 <_printf_i+0x244>)
 8008924:	2f6f      	cmp	r7, #111	; 0x6f
 8008926:	bf0c      	ite	eq
 8008928:	2308      	moveq	r3, #8
 800892a:	230a      	movne	r3, #10
 800892c:	2100      	movs	r1, #0
 800892e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008932:	6865      	ldr	r5, [r4, #4]
 8008934:	60a5      	str	r5, [r4, #8]
 8008936:	2d00      	cmp	r5, #0
 8008938:	bfa2      	ittt	ge
 800893a:	6821      	ldrge	r1, [r4, #0]
 800893c:	f021 0104 	bicge.w	r1, r1, #4
 8008940:	6021      	strge	r1, [r4, #0]
 8008942:	b90e      	cbnz	r6, 8008948 <_printf_i+0x118>
 8008944:	2d00      	cmp	r5, #0
 8008946:	d04d      	beq.n	80089e4 <_printf_i+0x1b4>
 8008948:	4615      	mov	r5, r2
 800894a:	fbb6 f1f3 	udiv	r1, r6, r3
 800894e:	fb03 6711 	mls	r7, r3, r1, r6
 8008952:	5dc7      	ldrb	r7, [r0, r7]
 8008954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008958:	4637      	mov	r7, r6
 800895a:	42bb      	cmp	r3, r7
 800895c:	460e      	mov	r6, r1
 800895e:	d9f4      	bls.n	800894a <_printf_i+0x11a>
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10b      	bne.n	800897c <_printf_i+0x14c>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07de      	lsls	r6, r3, #31
 8008968:	d508      	bpl.n	800897c <_printf_i+0x14c>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4299      	cmp	r1, r3
 8008970:	bfde      	ittt	le
 8008972:	2330      	movle	r3, #48	; 0x30
 8008974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800897c:	1b52      	subs	r2, r2, r5
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	f8cd a000 	str.w	sl, [sp]
 8008984:	464b      	mov	r3, r9
 8008986:	aa03      	add	r2, sp, #12
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fee2 	bl	8008754 <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	d14c      	bne.n	8008a2e <_printf_i+0x1fe>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	4835      	ldr	r0, [pc, #212]	; (8008a74 <_printf_i+0x244>)
 80089a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089a4:	6829      	ldr	r1, [r5, #0]
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80089ac:	6029      	str	r1, [r5, #0]
 80089ae:	061d      	lsls	r5, r3, #24
 80089b0:	d514      	bpl.n	80089dc <_printf_i+0x1ac>
 80089b2:	07df      	lsls	r7, r3, #31
 80089b4:	bf44      	itt	mi
 80089b6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ba:	6023      	strmi	r3, [r4, #0]
 80089bc:	b91e      	cbnz	r6, 80089c6 <_printf_i+0x196>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f023 0320 	bic.w	r3, r3, #32
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	2310      	movs	r3, #16
 80089c8:	e7b0      	b.n	800892c <_printf_i+0xfc>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	2378      	movs	r3, #120	; 0x78
 80089d4:	4828      	ldr	r0, [pc, #160]	; (8008a78 <_printf_i+0x248>)
 80089d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089da:	e7e3      	b.n	80089a4 <_printf_i+0x174>
 80089dc:	0659      	lsls	r1, r3, #25
 80089de:	bf48      	it	mi
 80089e0:	b2b6      	uxthmi	r6, r6
 80089e2:	e7e6      	b.n	80089b2 <_printf_i+0x182>
 80089e4:	4615      	mov	r5, r2
 80089e6:	e7bb      	b.n	8008960 <_printf_i+0x130>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	6826      	ldr	r6, [r4, #0]
 80089ec:	6961      	ldr	r1, [r4, #20]
 80089ee:	1d18      	adds	r0, r3, #4
 80089f0:	6028      	str	r0, [r5, #0]
 80089f2:	0635      	lsls	r5, r6, #24
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	d501      	bpl.n	80089fc <_printf_i+0x1cc>
 80089f8:	6019      	str	r1, [r3, #0]
 80089fa:	e002      	b.n	8008a02 <_printf_i+0x1d2>
 80089fc:	0670      	lsls	r0, r6, #25
 80089fe:	d5fb      	bpl.n	80089f8 <_printf_i+0x1c8>
 8008a00:	8019      	strh	r1, [r3, #0]
 8008a02:	2300      	movs	r3, #0
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	4615      	mov	r5, r2
 8008a08:	e7ba      	b.n	8008980 <_printf_i+0x150>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	681d      	ldr	r5, [r3, #0]
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	2100      	movs	r1, #0
 8008a16:	4628      	mov	r0, r5
 8008a18:	f7f7 fc02 	bl	8000220 <memchr>
 8008a1c:	b108      	cbz	r0, 8008a22 <_printf_i+0x1f2>
 8008a1e:	1b40      	subs	r0, r0, r5
 8008a20:	6060      	str	r0, [r4, #4]
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	2300      	movs	r3, #0
 8008a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a2c:	e7a8      	b.n	8008980 <_printf_i+0x150>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	462a      	mov	r2, r5
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	47d0      	blx	sl
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d0ab      	beq.n	8008994 <_printf_i+0x164>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	079b      	lsls	r3, r3, #30
 8008a40:	d413      	bmi.n	8008a6a <_printf_i+0x23a>
 8008a42:	68e0      	ldr	r0, [r4, #12]
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	4298      	cmp	r0, r3
 8008a48:	bfb8      	it	lt
 8008a4a:	4618      	movlt	r0, r3
 8008a4c:	e7a4      	b.n	8008998 <_printf_i+0x168>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4632      	mov	r2, r6
 8008a52:	4649      	mov	r1, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	47d0      	blx	sl
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d09b      	beq.n	8008994 <_printf_i+0x164>
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	9903      	ldr	r1, [sp, #12]
 8008a62:	1a5b      	subs	r3, r3, r1
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dcf2      	bgt.n	8008a4e <_printf_i+0x21e>
 8008a68:	e7eb      	b.n	8008a42 <_printf_i+0x212>
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	f104 0619 	add.w	r6, r4, #25
 8008a70:	e7f5      	b.n	8008a5e <_printf_i+0x22e>
 8008a72:	bf00      	nop
 8008a74:	0800d3cc 	.word	0x0800d3cc
 8008a78:	0800d3dd 	.word	0x0800d3dd

08008a7c <_scanf_float>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	b087      	sub	sp, #28
 8008a82:	4617      	mov	r7, r2
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	688b      	ldr	r3, [r1, #8]
 8008a88:	1e5a      	subs	r2, r3, #1
 8008a8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a8e:	bf83      	ittte	hi
 8008a90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a94:	195b      	addhi	r3, r3, r5
 8008a96:	9302      	strhi	r3, [sp, #8]
 8008a98:	2300      	movls	r3, #0
 8008a9a:	bf86      	itte	hi
 8008a9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008aa0:	608b      	strhi	r3, [r1, #8]
 8008aa2:	9302      	strls	r3, [sp, #8]
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	468b      	mov	fp, r1
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008aae:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ab2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ab6:	4680      	mov	r8, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	465e      	mov	r6, fp
 8008abc:	46aa      	mov	sl, r5
 8008abe:	46a9      	mov	r9, r5
 8008ac0:	9501      	str	r5, [sp, #4]
 8008ac2:	68a2      	ldr	r2, [r4, #8]
 8008ac4:	b152      	cbz	r2, 8008adc <_scanf_float+0x60>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b4e      	cmp	r3, #78	; 0x4e
 8008acc:	d864      	bhi.n	8008b98 <_scanf_float+0x11c>
 8008ace:	2b40      	cmp	r3, #64	; 0x40
 8008ad0:	d83c      	bhi.n	8008b4c <_scanf_float+0xd0>
 8008ad2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ad6:	b2c8      	uxtb	r0, r1
 8008ad8:	280e      	cmp	r0, #14
 8008ada:	d93a      	bls.n	8008b52 <_scanf_float+0xd6>
 8008adc:	f1b9 0f00 	cmp.w	r9, #0
 8008ae0:	d003      	beq.n	8008aea <_scanf_float+0x6e>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aee:	f1ba 0f01 	cmp.w	sl, #1
 8008af2:	f200 8113 	bhi.w	8008d1c <_scanf_float+0x2a0>
 8008af6:	455e      	cmp	r6, fp
 8008af8:	f200 8105 	bhi.w	8008d06 <_scanf_float+0x28a>
 8008afc:	2501      	movs	r5, #1
 8008afe:	4628      	mov	r0, r5
 8008b00:	b007      	add	sp, #28
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008b0a:	2a0d      	cmp	r2, #13
 8008b0c:	d8e6      	bhi.n	8008adc <_scanf_float+0x60>
 8008b0e:	a101      	add	r1, pc, #4	; (adr r1, 8008b14 <_scanf_float+0x98>)
 8008b10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b14:	08008c53 	.word	0x08008c53
 8008b18:	08008add 	.word	0x08008add
 8008b1c:	08008add 	.word	0x08008add
 8008b20:	08008add 	.word	0x08008add
 8008b24:	08008cb3 	.word	0x08008cb3
 8008b28:	08008c8b 	.word	0x08008c8b
 8008b2c:	08008add 	.word	0x08008add
 8008b30:	08008add 	.word	0x08008add
 8008b34:	08008c61 	.word	0x08008c61
 8008b38:	08008add 	.word	0x08008add
 8008b3c:	08008add 	.word	0x08008add
 8008b40:	08008add 	.word	0x08008add
 8008b44:	08008add 	.word	0x08008add
 8008b48:	08008c19 	.word	0x08008c19
 8008b4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008b50:	e7db      	b.n	8008b0a <_scanf_float+0x8e>
 8008b52:	290e      	cmp	r1, #14
 8008b54:	d8c2      	bhi.n	8008adc <_scanf_float+0x60>
 8008b56:	a001      	add	r0, pc, #4	; (adr r0, 8008b5c <_scanf_float+0xe0>)
 8008b58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b5c:	08008c0b 	.word	0x08008c0b
 8008b60:	08008add 	.word	0x08008add
 8008b64:	08008c0b 	.word	0x08008c0b
 8008b68:	08008c9f 	.word	0x08008c9f
 8008b6c:	08008add 	.word	0x08008add
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bf5 	.word	0x08008bf5
 8008b78:	08008bf5 	.word	0x08008bf5
 8008b7c:	08008bf5 	.word	0x08008bf5
 8008b80:	08008bf5 	.word	0x08008bf5
 8008b84:	08008bf5 	.word	0x08008bf5
 8008b88:	08008bf5 	.word	0x08008bf5
 8008b8c:	08008bf5 	.word	0x08008bf5
 8008b90:	08008bf5 	.word	0x08008bf5
 8008b94:	08008bf5 	.word	0x08008bf5
 8008b98:	2b6e      	cmp	r3, #110	; 0x6e
 8008b9a:	d809      	bhi.n	8008bb0 <_scanf_float+0x134>
 8008b9c:	2b60      	cmp	r3, #96	; 0x60
 8008b9e:	d8b2      	bhi.n	8008b06 <_scanf_float+0x8a>
 8008ba0:	2b54      	cmp	r3, #84	; 0x54
 8008ba2:	d077      	beq.n	8008c94 <_scanf_float+0x218>
 8008ba4:	2b59      	cmp	r3, #89	; 0x59
 8008ba6:	d199      	bne.n	8008adc <_scanf_float+0x60>
 8008ba8:	2d07      	cmp	r5, #7
 8008baa:	d197      	bne.n	8008adc <_scanf_float+0x60>
 8008bac:	2508      	movs	r5, #8
 8008bae:	e029      	b.n	8008c04 <_scanf_float+0x188>
 8008bb0:	2b74      	cmp	r3, #116	; 0x74
 8008bb2:	d06f      	beq.n	8008c94 <_scanf_float+0x218>
 8008bb4:	2b79      	cmp	r3, #121	; 0x79
 8008bb6:	e7f6      	b.n	8008ba6 <_scanf_float+0x12a>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	05c8      	lsls	r0, r1, #23
 8008bbc:	d51a      	bpl.n	8008bf4 <_scanf_float+0x178>
 8008bbe:	9b02      	ldr	r3, [sp, #8]
 8008bc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008bc4:	6021      	str	r1, [r4, #0]
 8008bc6:	f109 0901 	add.w	r9, r9, #1
 8008bca:	b11b      	cbz	r3, 8008bd4 <_scanf_float+0x158>
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	3201      	adds	r2, #1
 8008bd0:	9302      	str	r3, [sp, #8]
 8008bd2:	60a2      	str	r2, [r4, #8]
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	f340 8084 	ble.w	8008cf4 <_scanf_float+0x278>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	e766      	b.n	8008ac2 <_scanf_float+0x46>
 8008bf4:	eb1a 0f05 	cmn.w	sl, r5
 8008bf8:	f47f af70 	bne.w	8008adc <_scanf_float+0x60>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	f806 3b01 	strb.w	r3, [r6], #1
 8008c08:	e7e4      	b.n	8008bd4 <_scanf_float+0x158>
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	0610      	lsls	r0, r2, #24
 8008c0e:	f57f af65 	bpl.w	8008adc <_scanf_float+0x60>
 8008c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c16:	e7f4      	b.n	8008c02 <_scanf_float+0x186>
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d10e      	bne.n	8008c3c <_scanf_float+0x1c0>
 8008c1e:	f1b9 0f00 	cmp.w	r9, #0
 8008c22:	d10e      	bne.n	8008c42 <_scanf_float+0x1c6>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c2e:	d108      	bne.n	8008c42 <_scanf_float+0x1c6>
 8008c30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	f04f 0a01 	mov.w	sl, #1
 8008c3a:	e7e3      	b.n	8008c04 <_scanf_float+0x188>
 8008c3c:	f1ba 0f02 	cmp.w	sl, #2
 8008c40:	d055      	beq.n	8008cee <_scanf_float+0x272>
 8008c42:	2d01      	cmp	r5, #1
 8008c44:	d002      	beq.n	8008c4c <_scanf_float+0x1d0>
 8008c46:	2d04      	cmp	r5, #4
 8008c48:	f47f af48 	bne.w	8008adc <_scanf_float+0x60>
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	b2ed      	uxtb	r5, r5
 8008c50:	e7d8      	b.n	8008c04 <_scanf_float+0x188>
 8008c52:	f1ba 0f01 	cmp.w	sl, #1
 8008c56:	f47f af41 	bne.w	8008adc <_scanf_float+0x60>
 8008c5a:	f04f 0a02 	mov.w	sl, #2
 8008c5e:	e7d1      	b.n	8008c04 <_scanf_float+0x188>
 8008c60:	b97d      	cbnz	r5, 8008c82 <_scanf_float+0x206>
 8008c62:	f1b9 0f00 	cmp.w	r9, #0
 8008c66:	f47f af3c 	bne.w	8008ae2 <_scanf_float+0x66>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c74:	f47f af39 	bne.w	8008aea <_scanf_float+0x6e>
 8008c78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	2501      	movs	r5, #1
 8008c80:	e7c0      	b.n	8008c04 <_scanf_float+0x188>
 8008c82:	2d03      	cmp	r5, #3
 8008c84:	d0e2      	beq.n	8008c4c <_scanf_float+0x1d0>
 8008c86:	2d05      	cmp	r5, #5
 8008c88:	e7de      	b.n	8008c48 <_scanf_float+0x1cc>
 8008c8a:	2d02      	cmp	r5, #2
 8008c8c:	f47f af26 	bne.w	8008adc <_scanf_float+0x60>
 8008c90:	2503      	movs	r5, #3
 8008c92:	e7b7      	b.n	8008c04 <_scanf_float+0x188>
 8008c94:	2d06      	cmp	r5, #6
 8008c96:	f47f af21 	bne.w	8008adc <_scanf_float+0x60>
 8008c9a:	2507      	movs	r5, #7
 8008c9c:	e7b2      	b.n	8008c04 <_scanf_float+0x188>
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	0591      	lsls	r1, r2, #22
 8008ca2:	f57f af1b 	bpl.w	8008adc <_scanf_float+0x60>
 8008ca6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008caa:	6022      	str	r2, [r4, #0]
 8008cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cb0:	e7a8      	b.n	8008c04 <_scanf_float+0x188>
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008cb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008cbc:	d006      	beq.n	8008ccc <_scanf_float+0x250>
 8008cbe:	0550      	lsls	r0, r2, #21
 8008cc0:	f57f af0c 	bpl.w	8008adc <_scanf_float+0x60>
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	f43f af0f 	beq.w	8008aea <_scanf_float+0x6e>
 8008ccc:	0591      	lsls	r1, r2, #22
 8008cce:	bf58      	it	pl
 8008cd0:	9901      	ldrpl	r1, [sp, #4]
 8008cd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cd6:	bf58      	it	pl
 8008cd8:	eba9 0101 	subpl.w	r1, r9, r1
 8008cdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ce0:	bf58      	it	pl
 8008ce2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	f04f 0900 	mov.w	r9, #0
 8008cec:	e78a      	b.n	8008c04 <_scanf_float+0x188>
 8008cee:	f04f 0a03 	mov.w	sl, #3
 8008cf2:	e787      	b.n	8008c04 <_scanf_float+0x188>
 8008cf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	4798      	blx	r3
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f43f aedf 	beq.w	8008ac2 <_scanf_float+0x46>
 8008d04:	e6ea      	b.n	8008adc <_scanf_float+0x60>
 8008d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d0e:	463a      	mov	r2, r7
 8008d10:	4640      	mov	r0, r8
 8008d12:	4798      	blx	r3
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	e6ec      	b.n	8008af6 <_scanf_float+0x7a>
 8008d1c:	1e6b      	subs	r3, r5, #1
 8008d1e:	2b06      	cmp	r3, #6
 8008d20:	d825      	bhi.n	8008d6e <_scanf_float+0x2f2>
 8008d22:	2d02      	cmp	r5, #2
 8008d24:	d836      	bhi.n	8008d94 <_scanf_float+0x318>
 8008d26:	455e      	cmp	r6, fp
 8008d28:	f67f aee8 	bls.w	8008afc <_scanf_float+0x80>
 8008d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d34:	463a      	mov	r2, r7
 8008d36:	4640      	mov	r0, r8
 8008d38:	4798      	blx	r3
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	e7f1      	b.n	8008d26 <_scanf_float+0x2aa>
 8008d42:	9802      	ldr	r0, [sp, #8]
 8008d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	463a      	mov	r2, r7
 8008d50:	4640      	mov	r0, r8
 8008d52:	4798      	blx	r3
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5e:	fa5f fa8a 	uxtb.w	sl, sl
 8008d62:	f1ba 0f02 	cmp.w	sl, #2
 8008d66:	d1ec      	bne.n	8008d42 <_scanf_float+0x2c6>
 8008d68:	3d03      	subs	r5, #3
 8008d6a:	b2ed      	uxtb	r5, r5
 8008d6c:	1b76      	subs	r6, r6, r5
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	05da      	lsls	r2, r3, #23
 8008d72:	d52f      	bpl.n	8008dd4 <_scanf_float+0x358>
 8008d74:	055b      	lsls	r3, r3, #21
 8008d76:	d510      	bpl.n	8008d9a <_scanf_float+0x31e>
 8008d78:	455e      	cmp	r6, fp
 8008d7a:	f67f aebf 	bls.w	8008afc <_scanf_float+0x80>
 8008d7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d86:	463a      	mov	r2, r7
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4798      	blx	r3
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	e7f1      	b.n	8008d78 <_scanf_float+0x2fc>
 8008d94:	46aa      	mov	sl, r5
 8008d96:	9602      	str	r6, [sp, #8]
 8008d98:	e7df      	b.n	8008d5a <_scanf_float+0x2de>
 8008d9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	2965      	cmp	r1, #101	; 0x65
 8008da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008da6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	d00c      	beq.n	8008dc8 <_scanf_float+0x34c>
 8008dae:	2945      	cmp	r1, #69	; 0x45
 8008db0:	d00a      	beq.n	8008dc8 <_scanf_float+0x34c>
 8008db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008db6:	463a      	mov	r2, r7
 8008db8:	4640      	mov	r0, r8
 8008dba:	4798      	blx	r3
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	1eb5      	subs	r5, r6, #2
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4798      	blx	r3
 8008dd2:	462e      	mov	r6, r5
 8008dd4:	6825      	ldr	r5, [r4, #0]
 8008dd6:	f015 0510 	ands.w	r5, r5, #16
 8008dda:	d159      	bne.n	8008e90 <_scanf_float+0x414>
 8008ddc:	7035      	strb	r5, [r6, #0]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008de8:	d11b      	bne.n	8008e22 <_scanf_float+0x3a6>
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	454b      	cmp	r3, r9
 8008dee:	eba3 0209 	sub.w	r2, r3, r9
 8008df2:	d123      	bne.n	8008e3c <_scanf_float+0x3c0>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4659      	mov	r1, fp
 8008df8:	4640      	mov	r0, r8
 8008dfa:	f000 ff0b 	bl	8009c14 <_strtod_r>
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	f012 0f02 	tst.w	r2, #2
 8008e06:	ec57 6b10 	vmov	r6, r7, d0
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	d021      	beq.n	8008e52 <_scanf_float+0x3d6>
 8008e0e:	9903      	ldr	r1, [sp, #12]
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	600a      	str	r2, [r1, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	e9c3 6700 	strd	r6, r7, [r3]
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60e3      	str	r3, [r4, #12]
 8008e20:	e66d      	b.n	8008afe <_scanf_float+0x82>
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0e5      	beq.n	8008df4 <_scanf_float+0x378>
 8008e28:	9905      	ldr	r1, [sp, #20]
 8008e2a:	230a      	movs	r3, #10
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	3101      	adds	r1, #1
 8008e30:	4640      	mov	r0, r8
 8008e32:	f000 ff77 	bl	8009d24 <_strtol_r>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	9e05      	ldr	r6, [sp, #20]
 8008e3a:	1ac2      	subs	r2, r0, r3
 8008e3c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e40:	429e      	cmp	r6, r3
 8008e42:	bf28      	it	cs
 8008e44:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e48:	4912      	ldr	r1, [pc, #72]	; (8008e94 <_scanf_float+0x418>)
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f000 f82c 	bl	8008ea8 <siprintf>
 8008e50:	e7d0      	b.n	8008df4 <_scanf_float+0x378>
 8008e52:	9903      	ldr	r1, [sp, #12]
 8008e54:	f012 0f04 	tst.w	r2, #4
 8008e58:	f103 0204 	add.w	r2, r3, #4
 8008e5c:	600a      	str	r2, [r1, #0]
 8008e5e:	d1d9      	bne.n	8008e14 <_scanf_float+0x398>
 8008e60:	f8d3 8000 	ldr.w	r8, [r3]
 8008e64:	ee10 2a10 	vmov	r2, s0
 8008e68:	ee10 0a10 	vmov	r0, s0
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7f7 fe7c 	bl	8000b6c <__aeabi_dcmpun>
 8008e74:	b128      	cbz	r0, 8008e82 <_scanf_float+0x406>
 8008e76:	4808      	ldr	r0, [pc, #32]	; (8008e98 <_scanf_float+0x41c>)
 8008e78:	f000 f810 	bl	8008e9c <nanf>
 8008e7c:	ed88 0a00 	vstr	s0, [r8]
 8008e80:	e7cb      	b.n	8008e1a <_scanf_float+0x39e>
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 fecf 	bl	8000c28 <__aeabi_d2f>
 8008e8a:	f8c8 0000 	str.w	r0, [r8]
 8008e8e:	e7c4      	b.n	8008e1a <_scanf_float+0x39e>
 8008e90:	2500      	movs	r5, #0
 8008e92:	e634      	b.n	8008afe <_scanf_float+0x82>
 8008e94:	0800d3ee 	.word	0x0800d3ee
 8008e98:	0800d813 	.word	0x0800d813

08008e9c <nanf>:
 8008e9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ea4 <nanf+0x8>
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	7fc00000 	.word	0x7fc00000

08008ea8 <siprintf>:
 8008ea8:	b40e      	push	{r1, r2, r3}
 8008eaa:	b500      	push	{lr}
 8008eac:	b09c      	sub	sp, #112	; 0x70
 8008eae:	ab1d      	add	r3, sp, #116	; 0x74
 8008eb0:	9002      	str	r0, [sp, #8]
 8008eb2:	9006      	str	r0, [sp, #24]
 8008eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eb8:	4809      	ldr	r0, [pc, #36]	; (8008ee0 <siprintf+0x38>)
 8008eba:	9107      	str	r1, [sp, #28]
 8008ebc:	9104      	str	r1, [sp, #16]
 8008ebe:	4909      	ldr	r1, [pc, #36]	; (8008ee4 <siprintf+0x3c>)
 8008ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec4:	9105      	str	r1, [sp, #20]
 8008ec6:	6800      	ldr	r0, [r0, #0]
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	a902      	add	r1, sp, #8
 8008ecc:	f002 ff8c 	bl	800bde8 <_svfiprintf_r>
 8008ed0:	9b02      	ldr	r3, [sp, #8]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	b01c      	add	sp, #112	; 0x70
 8008ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008edc:	b003      	add	sp, #12
 8008ede:	4770      	bx	lr
 8008ee0:	200000a8 	.word	0x200000a8
 8008ee4:	ffff0208 	.word	0xffff0208

08008ee8 <siscanf>:
 8008ee8:	b40e      	push	{r1, r2, r3}
 8008eea:	b510      	push	{r4, lr}
 8008eec:	b09f      	sub	sp, #124	; 0x7c
 8008eee:	ac21      	add	r4, sp, #132	; 0x84
 8008ef0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008ef4:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008efe:	9004      	str	r0, [sp, #16]
 8008f00:	9008      	str	r0, [sp, #32]
 8008f02:	f7f7 f985 	bl	8000210 <strlen>
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <siscanf+0x50>)
 8008f08:	9005      	str	r0, [sp, #20]
 8008f0a:	9009      	str	r0, [sp, #36]	; 0x24
 8008f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008f0e:	480b      	ldr	r0, [pc, #44]	; (8008f3c <siscanf+0x54>)
 8008f10:	9a01      	ldr	r2, [sp, #4]
 8008f12:	6800      	ldr	r0, [r0, #0]
 8008f14:	9403      	str	r4, [sp, #12]
 8008f16:	2300      	movs	r3, #0
 8008f18:	9311      	str	r3, [sp, #68]	; 0x44
 8008f1a:	9316      	str	r3, [sp, #88]	; 0x58
 8008f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008f24:	a904      	add	r1, sp, #16
 8008f26:	4623      	mov	r3, r4
 8008f28:	f003 f8b8 	bl	800c09c <__ssvfiscanf_r>
 8008f2c:	b01f      	add	sp, #124	; 0x7c
 8008f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f32:	b003      	add	sp, #12
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	08008f63 	.word	0x08008f63
 8008f3c:	200000a8 	.word	0x200000a8

08008f40 <__sread>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	460c      	mov	r4, r1
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	f003 fb72 	bl	800c630 <_read_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	bfab      	itete	ge
 8008f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f52:	89a3      	ldrhlt	r3, [r4, #12]
 8008f54:	181b      	addge	r3, r3, r0
 8008f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f5a:	bfac      	ite	ge
 8008f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f5e:	81a3      	strhlt	r3, [r4, #12]
 8008f60:	bd10      	pop	{r4, pc}

08008f62 <__seofread>:
 8008f62:	2000      	movs	r0, #0
 8008f64:	4770      	bx	lr

08008f66 <__swrite>:
 8008f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	461f      	mov	r7, r3
 8008f6c:	898b      	ldrh	r3, [r1, #12]
 8008f6e:	05db      	lsls	r3, r3, #23
 8008f70:	4605      	mov	r5, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4616      	mov	r6, r2
 8008f76:	d505      	bpl.n	8008f84 <__swrite+0x1e>
 8008f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f002 f8e4 	bl	800b14c <_lseek_r>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	4632      	mov	r2, r6
 8008f92:	463b      	mov	r3, r7
 8008f94:	4628      	mov	r0, r5
 8008f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	f000 bec5 	b.w	8009d28 <_write_r>

08008f9e <__sseek>:
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa6:	f002 f8d1 	bl	800b14c <_lseek_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	bf15      	itete	ne
 8008fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fba:	81a3      	strheq	r3, [r4, #12]
 8008fbc:	bf18      	it	ne
 8008fbe:	81a3      	strhne	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__sclose>:
 8008fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc6:	f000 bec1 	b.w	8009d4c <_close_r>

08008fca <sulp>:
 8008fca:	b570      	push	{r4, r5, r6, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	ec45 4b10 	vmov	d0, r4, r5
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	f002 fc65 	bl	800b8a4 <__ulp>
 8008fda:	ec51 0b10 	vmov	r0, r1, d0
 8008fde:	b17e      	cbz	r6, 8009000 <sulp+0x36>
 8008fe0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fe4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dd09      	ble.n	8009000 <sulp+0x36>
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ff2:	2400      	movs	r4, #0
 8008ff4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	462b      	mov	r3, r5
 8008ffc:	f7f7 fb1c 	bl	8000638 <__aeabi_dmul>
 8009000:	bd70      	pop	{r4, r5, r6, pc}
 8009002:	0000      	movs	r0, r0
 8009004:	0000      	movs	r0, r0
	...

08009008 <_strtod_l>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	ed2d 8b02 	vpush	{d8}
 8009010:	b09d      	sub	sp, #116	; 0x74
 8009012:	461f      	mov	r7, r3
 8009014:	2300      	movs	r3, #0
 8009016:	9318      	str	r3, [sp, #96]	; 0x60
 8009018:	4ba2      	ldr	r3, [pc, #648]	; (80092a4 <_strtod_l+0x29c>)
 800901a:	9213      	str	r2, [sp, #76]	; 0x4c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	4604      	mov	r4, r0
 8009022:	4618      	mov	r0, r3
 8009024:	4688      	mov	r8, r1
 8009026:	f7f7 f8f3 	bl	8000210 <strlen>
 800902a:	f04f 0a00 	mov.w	sl, #0
 800902e:	4605      	mov	r5, r0
 8009030:	f04f 0b00 	mov.w	fp, #0
 8009034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800903a:	781a      	ldrb	r2, [r3, #0]
 800903c:	2a2b      	cmp	r2, #43	; 0x2b
 800903e:	d04e      	beq.n	80090de <_strtod_l+0xd6>
 8009040:	d83b      	bhi.n	80090ba <_strtod_l+0xb2>
 8009042:	2a0d      	cmp	r2, #13
 8009044:	d834      	bhi.n	80090b0 <_strtod_l+0xa8>
 8009046:	2a08      	cmp	r2, #8
 8009048:	d834      	bhi.n	80090b4 <_strtod_l+0xac>
 800904a:	2a00      	cmp	r2, #0
 800904c:	d03e      	beq.n	80090cc <_strtod_l+0xc4>
 800904e:	2300      	movs	r3, #0
 8009050:	930a      	str	r3, [sp, #40]	; 0x28
 8009052:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009054:	7833      	ldrb	r3, [r6, #0]
 8009056:	2b30      	cmp	r3, #48	; 0x30
 8009058:	f040 80b0 	bne.w	80091bc <_strtod_l+0x1b4>
 800905c:	7873      	ldrb	r3, [r6, #1]
 800905e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009062:	2b58      	cmp	r3, #88	; 0x58
 8009064:	d168      	bne.n	8009138 <_strtod_l+0x130>
 8009066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	ab18      	add	r3, sp, #96	; 0x60
 800906c:	9702      	str	r7, [sp, #8]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4a8d      	ldr	r2, [pc, #564]	; (80092a8 <_strtod_l+0x2a0>)
 8009072:	ab19      	add	r3, sp, #100	; 0x64
 8009074:	a917      	add	r1, sp, #92	; 0x5c
 8009076:	4620      	mov	r0, r4
 8009078:	f001 fd5c 	bl	800ab34 <__gethex>
 800907c:	f010 0707 	ands.w	r7, r0, #7
 8009080:	4605      	mov	r5, r0
 8009082:	d005      	beq.n	8009090 <_strtod_l+0x88>
 8009084:	2f06      	cmp	r7, #6
 8009086:	d12c      	bne.n	80090e2 <_strtod_l+0xda>
 8009088:	3601      	adds	r6, #1
 800908a:	2300      	movs	r3, #0
 800908c:	9617      	str	r6, [sp, #92]	; 0x5c
 800908e:	930a      	str	r3, [sp, #40]	; 0x28
 8009090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 8590 	bne.w	8009bb8 <_strtod_l+0xbb0>
 8009098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909a:	b1eb      	cbz	r3, 80090d8 <_strtod_l+0xd0>
 800909c:	4652      	mov	r2, sl
 800909e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80090a2:	ec43 2b10 	vmov	d0, r2, r3
 80090a6:	b01d      	add	sp, #116	; 0x74
 80090a8:	ecbd 8b02 	vpop	{d8}
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b0:	2a20      	cmp	r2, #32
 80090b2:	d1cc      	bne.n	800904e <_strtod_l+0x46>
 80090b4:	3301      	adds	r3, #1
 80090b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80090b8:	e7be      	b.n	8009038 <_strtod_l+0x30>
 80090ba:	2a2d      	cmp	r2, #45	; 0x2d
 80090bc:	d1c7      	bne.n	800904e <_strtod_l+0x46>
 80090be:	2201      	movs	r2, #1
 80090c0:	920a      	str	r2, [sp, #40]	; 0x28
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1c2      	bne.n	8009052 <_strtod_l+0x4a>
 80090cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 856e 	bne.w	8009bb4 <_strtod_l+0xbac>
 80090d8:	4652      	mov	r2, sl
 80090da:	465b      	mov	r3, fp
 80090dc:	e7e1      	b.n	80090a2 <_strtod_l+0x9a>
 80090de:	2200      	movs	r2, #0
 80090e0:	e7ee      	b.n	80090c0 <_strtod_l+0xb8>
 80090e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090e4:	b13a      	cbz	r2, 80090f6 <_strtod_l+0xee>
 80090e6:	2135      	movs	r1, #53	; 0x35
 80090e8:	a81a      	add	r0, sp, #104	; 0x68
 80090ea:	f002 fce6 	bl	800baba <__copybits>
 80090ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090f0:	4620      	mov	r0, r4
 80090f2:	f002 f8a5 	bl	800b240 <_Bfree>
 80090f6:	3f01      	subs	r7, #1
 80090f8:	2f04      	cmp	r7, #4
 80090fa:	d806      	bhi.n	800910a <_strtod_l+0x102>
 80090fc:	e8df f007 	tbb	[pc, r7]
 8009100:	1714030a 	.word	0x1714030a
 8009104:	0a          	.byte	0x0a
 8009105:	00          	.byte	0x00
 8009106:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800910a:	0728      	lsls	r0, r5, #28
 800910c:	d5c0      	bpl.n	8009090 <_strtod_l+0x88>
 800910e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009112:	e7bd      	b.n	8009090 <_strtod_l+0x88>
 8009114:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009118:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800911a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800911e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009122:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009126:	e7f0      	b.n	800910a <_strtod_l+0x102>
 8009128:	f8df b180 	ldr.w	fp, [pc, #384]	; 80092ac <_strtod_l+0x2a4>
 800912c:	e7ed      	b.n	800910a <_strtod_l+0x102>
 800912e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009132:	f04f 3aff 	mov.w	sl, #4294967295
 8009136:	e7e8      	b.n	800910a <_strtod_l+0x102>
 8009138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	9217      	str	r2, [sp, #92]	; 0x5c
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b30      	cmp	r3, #48	; 0x30
 8009142:	d0f9      	beq.n	8009138 <_strtod_l+0x130>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0a3      	beq.n	8009090 <_strtod_l+0x88>
 8009148:	2301      	movs	r3, #1
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009152:	9308      	str	r3, [sp, #32]
 8009154:	f8cd 901c 	str.w	r9, [sp, #28]
 8009158:	464f      	mov	r7, r9
 800915a:	220a      	movs	r2, #10
 800915c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800915e:	7806      	ldrb	r6, [r0, #0]
 8009160:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009164:	b2d9      	uxtb	r1, r3
 8009166:	2909      	cmp	r1, #9
 8009168:	d92a      	bls.n	80091c0 <_strtod_l+0x1b8>
 800916a:	9905      	ldr	r1, [sp, #20]
 800916c:	462a      	mov	r2, r5
 800916e:	f003 fac3 	bl	800c6f8 <strncmp>
 8009172:	b398      	cbz	r0, 80091dc <_strtod_l+0x1d4>
 8009174:	2000      	movs	r0, #0
 8009176:	4632      	mov	r2, r6
 8009178:	463d      	mov	r5, r7
 800917a:	9005      	str	r0, [sp, #20]
 800917c:	4603      	mov	r3, r0
 800917e:	2a65      	cmp	r2, #101	; 0x65
 8009180:	d001      	beq.n	8009186 <_strtod_l+0x17e>
 8009182:	2a45      	cmp	r2, #69	; 0x45
 8009184:	d118      	bne.n	80091b8 <_strtod_l+0x1b0>
 8009186:	b91d      	cbnz	r5, 8009190 <_strtod_l+0x188>
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	4302      	orrs	r2, r0
 800918c:	d09e      	beq.n	80090cc <_strtod_l+0xc4>
 800918e:	2500      	movs	r5, #0
 8009190:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009194:	f108 0201 	add.w	r2, r8, #1
 8009198:	9217      	str	r2, [sp, #92]	; 0x5c
 800919a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800919e:	2a2b      	cmp	r2, #43	; 0x2b
 80091a0:	d075      	beq.n	800928e <_strtod_l+0x286>
 80091a2:	2a2d      	cmp	r2, #45	; 0x2d
 80091a4:	d07b      	beq.n	800929e <_strtod_l+0x296>
 80091a6:	f04f 0c00 	mov.w	ip, #0
 80091aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80091ae:	2909      	cmp	r1, #9
 80091b0:	f240 8082 	bls.w	80092b8 <_strtod_l+0x2b0>
 80091b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091b8:	2600      	movs	r6, #0
 80091ba:	e09d      	b.n	80092f8 <_strtod_l+0x2f0>
 80091bc:	2300      	movs	r3, #0
 80091be:	e7c4      	b.n	800914a <_strtod_l+0x142>
 80091c0:	2f08      	cmp	r7, #8
 80091c2:	bfd8      	it	le
 80091c4:	9907      	ldrle	r1, [sp, #28]
 80091c6:	f100 0001 	add.w	r0, r0, #1
 80091ca:	bfda      	itte	le
 80091cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80091d0:	9307      	strle	r3, [sp, #28]
 80091d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80091d6:	3701      	adds	r7, #1
 80091d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80091da:	e7bf      	b.n	800915c <_strtod_l+0x154>
 80091dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091de:	195a      	adds	r2, r3, r5
 80091e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80091e2:	5d5a      	ldrb	r2, [r3, r5]
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	d037      	beq.n	8009258 <_strtod_l+0x250>
 80091e8:	9005      	str	r0, [sp, #20]
 80091ea:	463d      	mov	r5, r7
 80091ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d912      	bls.n	800921a <_strtod_l+0x212>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7c2      	b.n	800917e <_strtod_l+0x176>
 80091f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80091fe:	785a      	ldrb	r2, [r3, #1]
 8009200:	3001      	adds	r0, #1
 8009202:	2a30      	cmp	r2, #48	; 0x30
 8009204:	d0f8      	beq.n	80091f8 <_strtod_l+0x1f0>
 8009206:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800920a:	2b08      	cmp	r3, #8
 800920c:	f200 84d9 	bhi.w	8009bc2 <_strtod_l+0xbba>
 8009210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009212:	9005      	str	r0, [sp, #20]
 8009214:	2000      	movs	r0, #0
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	4605      	mov	r5, r0
 800921a:	3a30      	subs	r2, #48	; 0x30
 800921c:	f100 0301 	add.w	r3, r0, #1
 8009220:	d014      	beq.n	800924c <_strtod_l+0x244>
 8009222:	9905      	ldr	r1, [sp, #20]
 8009224:	4419      	add	r1, r3
 8009226:	9105      	str	r1, [sp, #20]
 8009228:	462b      	mov	r3, r5
 800922a:	eb00 0e05 	add.w	lr, r0, r5
 800922e:	210a      	movs	r1, #10
 8009230:	4573      	cmp	r3, lr
 8009232:	d113      	bne.n	800925c <_strtod_l+0x254>
 8009234:	182b      	adds	r3, r5, r0
 8009236:	2b08      	cmp	r3, #8
 8009238:	f105 0501 	add.w	r5, r5, #1
 800923c:	4405      	add	r5, r0
 800923e:	dc1c      	bgt.n	800927a <_strtod_l+0x272>
 8009240:	9907      	ldr	r1, [sp, #28]
 8009242:	230a      	movs	r3, #10
 8009244:	fb03 2301 	mla	r3, r3, r1, r2
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	2300      	movs	r3, #0
 800924c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800924e:	1c51      	adds	r1, r2, #1
 8009250:	9117      	str	r1, [sp, #92]	; 0x5c
 8009252:	7852      	ldrb	r2, [r2, #1]
 8009254:	4618      	mov	r0, r3
 8009256:	e7c9      	b.n	80091ec <_strtod_l+0x1e4>
 8009258:	4638      	mov	r0, r7
 800925a:	e7d2      	b.n	8009202 <_strtod_l+0x1fa>
 800925c:	2b08      	cmp	r3, #8
 800925e:	dc04      	bgt.n	800926a <_strtod_l+0x262>
 8009260:	9e07      	ldr	r6, [sp, #28]
 8009262:	434e      	muls	r6, r1
 8009264:	9607      	str	r6, [sp, #28]
 8009266:	3301      	adds	r3, #1
 8009268:	e7e2      	b.n	8009230 <_strtod_l+0x228>
 800926a:	f103 0c01 	add.w	ip, r3, #1
 800926e:	f1bc 0f10 	cmp.w	ip, #16
 8009272:	bfd8      	it	le
 8009274:	fb01 f909 	mulle.w	r9, r1, r9
 8009278:	e7f5      	b.n	8009266 <_strtod_l+0x25e>
 800927a:	2d10      	cmp	r5, #16
 800927c:	bfdc      	itt	le
 800927e:	230a      	movle	r3, #10
 8009280:	fb03 2909 	mlale	r9, r3, r9, r2
 8009284:	e7e1      	b.n	800924a <_strtod_l+0x242>
 8009286:	2300      	movs	r3, #0
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	2301      	movs	r3, #1
 800928c:	e77c      	b.n	8009188 <_strtod_l+0x180>
 800928e:	f04f 0c00 	mov.w	ip, #0
 8009292:	f108 0202 	add.w	r2, r8, #2
 8009296:	9217      	str	r2, [sp, #92]	; 0x5c
 8009298:	f898 2002 	ldrb.w	r2, [r8, #2]
 800929c:	e785      	b.n	80091aa <_strtod_l+0x1a2>
 800929e:	f04f 0c01 	mov.w	ip, #1
 80092a2:	e7f6      	b.n	8009292 <_strtod_l+0x28a>
 80092a4:	0800d640 	.word	0x0800d640
 80092a8:	0800d3f4 	.word	0x0800d3f4
 80092ac:	7ff00000 	.word	0x7ff00000
 80092b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092b2:	1c51      	adds	r1, r2, #1
 80092b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80092b6:	7852      	ldrb	r2, [r2, #1]
 80092b8:	2a30      	cmp	r2, #48	; 0x30
 80092ba:	d0f9      	beq.n	80092b0 <_strtod_l+0x2a8>
 80092bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80092c0:	2908      	cmp	r1, #8
 80092c2:	f63f af79 	bhi.w	80091b8 <_strtod_l+0x1b0>
 80092c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80092ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092cc:	9206      	str	r2, [sp, #24]
 80092ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092d0:	1c51      	adds	r1, r2, #1
 80092d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80092d4:	7852      	ldrb	r2, [r2, #1]
 80092d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80092da:	2e09      	cmp	r6, #9
 80092dc:	d937      	bls.n	800934e <_strtod_l+0x346>
 80092de:	9e06      	ldr	r6, [sp, #24]
 80092e0:	1b89      	subs	r1, r1, r6
 80092e2:	2908      	cmp	r1, #8
 80092e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80092e8:	dc02      	bgt.n	80092f0 <_strtod_l+0x2e8>
 80092ea:	4576      	cmp	r6, lr
 80092ec:	bfa8      	it	ge
 80092ee:	4676      	movge	r6, lr
 80092f0:	f1bc 0f00 	cmp.w	ip, #0
 80092f4:	d000      	beq.n	80092f8 <_strtod_l+0x2f0>
 80092f6:	4276      	negs	r6, r6
 80092f8:	2d00      	cmp	r5, #0
 80092fa:	d14d      	bne.n	8009398 <_strtod_l+0x390>
 80092fc:	9904      	ldr	r1, [sp, #16]
 80092fe:	4301      	orrs	r1, r0
 8009300:	f47f aec6 	bne.w	8009090 <_strtod_l+0x88>
 8009304:	2b00      	cmp	r3, #0
 8009306:	f47f aee1 	bne.w	80090cc <_strtod_l+0xc4>
 800930a:	2a69      	cmp	r2, #105	; 0x69
 800930c:	d027      	beq.n	800935e <_strtod_l+0x356>
 800930e:	dc24      	bgt.n	800935a <_strtod_l+0x352>
 8009310:	2a49      	cmp	r2, #73	; 0x49
 8009312:	d024      	beq.n	800935e <_strtod_l+0x356>
 8009314:	2a4e      	cmp	r2, #78	; 0x4e
 8009316:	f47f aed9 	bne.w	80090cc <_strtod_l+0xc4>
 800931a:	499f      	ldr	r1, [pc, #636]	; (8009598 <_strtod_l+0x590>)
 800931c:	a817      	add	r0, sp, #92	; 0x5c
 800931e:	f001 fe61 	bl	800afe4 <__match>
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aed2 	beq.w	80090cc <_strtod_l+0xc4>
 8009328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b28      	cmp	r3, #40	; 0x28
 800932e:	d12d      	bne.n	800938c <_strtod_l+0x384>
 8009330:	499a      	ldr	r1, [pc, #616]	; (800959c <_strtod_l+0x594>)
 8009332:	aa1a      	add	r2, sp, #104	; 0x68
 8009334:	a817      	add	r0, sp, #92	; 0x5c
 8009336:	f001 fe69 	bl	800b00c <__hexnan>
 800933a:	2805      	cmp	r0, #5
 800933c:	d126      	bne.n	800938c <_strtod_l+0x384>
 800933e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009340:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009344:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009348:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800934c:	e6a0      	b.n	8009090 <_strtod_l+0x88>
 800934e:	210a      	movs	r1, #10
 8009350:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009354:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009358:	e7b9      	b.n	80092ce <_strtod_l+0x2c6>
 800935a:	2a6e      	cmp	r2, #110	; 0x6e
 800935c:	e7db      	b.n	8009316 <_strtod_l+0x30e>
 800935e:	4990      	ldr	r1, [pc, #576]	; (80095a0 <_strtod_l+0x598>)
 8009360:	a817      	add	r0, sp, #92	; 0x5c
 8009362:	f001 fe3f 	bl	800afe4 <__match>
 8009366:	2800      	cmp	r0, #0
 8009368:	f43f aeb0 	beq.w	80090cc <_strtod_l+0xc4>
 800936c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800936e:	498d      	ldr	r1, [pc, #564]	; (80095a4 <_strtod_l+0x59c>)
 8009370:	3b01      	subs	r3, #1
 8009372:	a817      	add	r0, sp, #92	; 0x5c
 8009374:	9317      	str	r3, [sp, #92]	; 0x5c
 8009376:	f001 fe35 	bl	800afe4 <__match>
 800937a:	b910      	cbnz	r0, 8009382 <_strtod_l+0x37a>
 800937c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800937e:	3301      	adds	r3, #1
 8009380:	9317      	str	r3, [sp, #92]	; 0x5c
 8009382:	f8df b230 	ldr.w	fp, [pc, #560]	; 80095b4 <_strtod_l+0x5ac>
 8009386:	f04f 0a00 	mov.w	sl, #0
 800938a:	e681      	b.n	8009090 <_strtod_l+0x88>
 800938c:	4886      	ldr	r0, [pc, #536]	; (80095a8 <_strtod_l+0x5a0>)
 800938e:	f003 f963 	bl	800c658 <nan>
 8009392:	ec5b ab10 	vmov	sl, fp, d0
 8009396:	e67b      	b.n	8009090 <_strtod_l+0x88>
 8009398:	9b05      	ldr	r3, [sp, #20]
 800939a:	9807      	ldr	r0, [sp, #28]
 800939c:	1af3      	subs	r3, r6, r3
 800939e:	2f00      	cmp	r7, #0
 80093a0:	bf08      	it	eq
 80093a2:	462f      	moveq	r7, r5
 80093a4:	2d10      	cmp	r5, #16
 80093a6:	9306      	str	r3, [sp, #24]
 80093a8:	46a8      	mov	r8, r5
 80093aa:	bfa8      	it	ge
 80093ac:	f04f 0810 	movge.w	r8, #16
 80093b0:	f7f7 f8c8 	bl	8000544 <__aeabi_ui2d>
 80093b4:	2d09      	cmp	r5, #9
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	dd13      	ble.n	80093e4 <_strtod_l+0x3dc>
 80093bc:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <_strtod_l+0x5a4>)
 80093be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80093c6:	f7f7 f937 	bl	8000638 <__aeabi_dmul>
 80093ca:	4682      	mov	sl, r0
 80093cc:	4648      	mov	r0, r9
 80093ce:	468b      	mov	fp, r1
 80093d0:	f7f7 f8b8 	bl	8000544 <__aeabi_ui2d>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4650      	mov	r0, sl
 80093da:	4659      	mov	r1, fp
 80093dc:	f7f6 ff76 	bl	80002cc <__adddf3>
 80093e0:	4682      	mov	sl, r0
 80093e2:	468b      	mov	fp, r1
 80093e4:	2d0f      	cmp	r5, #15
 80093e6:	dc38      	bgt.n	800945a <_strtod_l+0x452>
 80093e8:	9b06      	ldr	r3, [sp, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f43f ae50 	beq.w	8009090 <_strtod_l+0x88>
 80093f0:	dd24      	ble.n	800943c <_strtod_l+0x434>
 80093f2:	2b16      	cmp	r3, #22
 80093f4:	dc0b      	bgt.n	800940e <_strtod_l+0x406>
 80093f6:	496d      	ldr	r1, [pc, #436]	; (80095ac <_strtod_l+0x5a4>)
 80093f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009400:	4652      	mov	r2, sl
 8009402:	465b      	mov	r3, fp
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	4682      	mov	sl, r0
 800940a:	468b      	mov	fp, r1
 800940c:	e640      	b.n	8009090 <_strtod_l+0x88>
 800940e:	9a06      	ldr	r2, [sp, #24]
 8009410:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009414:	4293      	cmp	r3, r2
 8009416:	db20      	blt.n	800945a <_strtod_l+0x452>
 8009418:	4c64      	ldr	r4, [pc, #400]	; (80095ac <_strtod_l+0x5a4>)
 800941a:	f1c5 050f 	rsb	r5, r5, #15
 800941e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009422:	4652      	mov	r2, sl
 8009424:	465b      	mov	r3, fp
 8009426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800942a:	f7f7 f905 	bl	8000638 <__aeabi_dmul>
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	1b5d      	subs	r5, r3, r5
 8009432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800943a:	e7e3      	b.n	8009404 <_strtod_l+0x3fc>
 800943c:	9b06      	ldr	r3, [sp, #24]
 800943e:	3316      	adds	r3, #22
 8009440:	db0b      	blt.n	800945a <_strtod_l+0x452>
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	1b9e      	subs	r6, r3, r6
 8009446:	4b59      	ldr	r3, [pc, #356]	; (80095ac <_strtod_l+0x5a4>)
 8009448:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800944c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009450:	4650      	mov	r0, sl
 8009452:	4659      	mov	r1, fp
 8009454:	f7f7 fa1a 	bl	800088c <__aeabi_ddiv>
 8009458:	e7d6      	b.n	8009408 <_strtod_l+0x400>
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	eba5 0808 	sub.w	r8, r5, r8
 8009460:	4498      	add	r8, r3
 8009462:	f1b8 0f00 	cmp.w	r8, #0
 8009466:	dd74      	ble.n	8009552 <_strtod_l+0x54a>
 8009468:	f018 030f 	ands.w	r3, r8, #15
 800946c:	d00a      	beq.n	8009484 <_strtod_l+0x47c>
 800946e:	494f      	ldr	r1, [pc, #316]	; (80095ac <_strtod_l+0x5a4>)
 8009470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009474:	4652      	mov	r2, sl
 8009476:	465b      	mov	r3, fp
 8009478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947c:	f7f7 f8dc 	bl	8000638 <__aeabi_dmul>
 8009480:	4682      	mov	sl, r0
 8009482:	468b      	mov	fp, r1
 8009484:	f038 080f 	bics.w	r8, r8, #15
 8009488:	d04f      	beq.n	800952a <_strtod_l+0x522>
 800948a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800948e:	dd22      	ble.n	80094d6 <_strtod_l+0x4ce>
 8009490:	2500      	movs	r5, #0
 8009492:	462e      	mov	r6, r5
 8009494:	9507      	str	r5, [sp, #28]
 8009496:	9505      	str	r5, [sp, #20]
 8009498:	2322      	movs	r3, #34	; 0x22
 800949a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80095b4 <_strtod_l+0x5ac>
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	f04f 0a00 	mov.w	sl, #0
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f43f adf2 	beq.w	8009090 <_strtod_l+0x88>
 80094ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094ae:	4620      	mov	r0, r4
 80094b0:	f001 fec6 	bl	800b240 <_Bfree>
 80094b4:	9905      	ldr	r1, [sp, #20]
 80094b6:	4620      	mov	r0, r4
 80094b8:	f001 fec2 	bl	800b240 <_Bfree>
 80094bc:	4631      	mov	r1, r6
 80094be:	4620      	mov	r0, r4
 80094c0:	f001 febe 	bl	800b240 <_Bfree>
 80094c4:	9907      	ldr	r1, [sp, #28]
 80094c6:	4620      	mov	r0, r4
 80094c8:	f001 feba 	bl	800b240 <_Bfree>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	f001 feb6 	bl	800b240 <_Bfree>
 80094d4:	e5dc      	b.n	8009090 <_strtod_l+0x88>
 80094d6:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <_strtod_l+0x5a8>)
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	2300      	movs	r3, #0
 80094dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80094e0:	4650      	mov	r0, sl
 80094e2:	4659      	mov	r1, fp
 80094e4:	4699      	mov	r9, r3
 80094e6:	f1b8 0f01 	cmp.w	r8, #1
 80094ea:	dc21      	bgt.n	8009530 <_strtod_l+0x528>
 80094ec:	b10b      	cbz	r3, 80094f2 <_strtod_l+0x4ea>
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	4b2f      	ldr	r3, [pc, #188]	; (80095b0 <_strtod_l+0x5a8>)
 80094f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80094f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80094fc:	4652      	mov	r2, sl
 80094fe:	465b      	mov	r3, fp
 8009500:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009504:	f7f7 f898 	bl	8000638 <__aeabi_dmul>
 8009508:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <_strtod_l+0x5ac>)
 800950a:	460a      	mov	r2, r1
 800950c:	400b      	ands	r3, r1
 800950e:	492a      	ldr	r1, [pc, #168]	; (80095b8 <_strtod_l+0x5b0>)
 8009510:	428b      	cmp	r3, r1
 8009512:	4682      	mov	sl, r0
 8009514:	d8bc      	bhi.n	8009490 <_strtod_l+0x488>
 8009516:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800951a:	428b      	cmp	r3, r1
 800951c:	bf86      	itte	hi
 800951e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80095bc <_strtod_l+0x5b4>
 8009522:	f04f 3aff 	movhi.w	sl, #4294967295
 8009526:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800952a:	2300      	movs	r3, #0
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	e084      	b.n	800963a <_strtod_l+0x632>
 8009530:	f018 0f01 	tst.w	r8, #1
 8009534:	d005      	beq.n	8009542 <_strtod_l+0x53a>
 8009536:	9b04      	ldr	r3, [sp, #16]
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f7 f87c 	bl	8000638 <__aeabi_dmul>
 8009540:	2301      	movs	r3, #1
 8009542:	9a04      	ldr	r2, [sp, #16]
 8009544:	3208      	adds	r2, #8
 8009546:	f109 0901 	add.w	r9, r9, #1
 800954a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800954e:	9204      	str	r2, [sp, #16]
 8009550:	e7c9      	b.n	80094e6 <_strtod_l+0x4de>
 8009552:	d0ea      	beq.n	800952a <_strtod_l+0x522>
 8009554:	f1c8 0800 	rsb	r8, r8, #0
 8009558:	f018 020f 	ands.w	r2, r8, #15
 800955c:	d00a      	beq.n	8009574 <_strtod_l+0x56c>
 800955e:	4b13      	ldr	r3, [pc, #76]	; (80095ac <_strtod_l+0x5a4>)
 8009560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009564:	4650      	mov	r0, sl
 8009566:	4659      	mov	r1, fp
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	f7f7 f98e 	bl	800088c <__aeabi_ddiv>
 8009570:	4682      	mov	sl, r0
 8009572:	468b      	mov	fp, r1
 8009574:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009578:	d0d7      	beq.n	800952a <_strtod_l+0x522>
 800957a:	f1b8 0f1f 	cmp.w	r8, #31
 800957e:	dd1f      	ble.n	80095c0 <_strtod_l+0x5b8>
 8009580:	2500      	movs	r5, #0
 8009582:	462e      	mov	r6, r5
 8009584:	9507      	str	r5, [sp, #28]
 8009586:	9505      	str	r5, [sp, #20]
 8009588:	2322      	movs	r3, #34	; 0x22
 800958a:	f04f 0a00 	mov.w	sl, #0
 800958e:	f04f 0b00 	mov.w	fp, #0
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	e786      	b.n	80094a4 <_strtod_l+0x49c>
 8009596:	bf00      	nop
 8009598:	0800d3c9 	.word	0x0800d3c9
 800959c:	0800d408 	.word	0x0800d408
 80095a0:	0800d3c1 	.word	0x0800d3c1
 80095a4:	0800d54c 	.word	0x0800d54c
 80095a8:	0800d813 	.word	0x0800d813
 80095ac:	0800d6d8 	.word	0x0800d6d8
 80095b0:	0800d6b0 	.word	0x0800d6b0
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	7ca00000 	.word	0x7ca00000
 80095bc:	7fefffff 	.word	0x7fefffff
 80095c0:	f018 0310 	ands.w	r3, r8, #16
 80095c4:	bf18      	it	ne
 80095c6:	236a      	movne	r3, #106	; 0x6a
 80095c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009978 <_strtod_l+0x970>
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	4650      	mov	r0, sl
 80095d0:	4659      	mov	r1, fp
 80095d2:	2300      	movs	r3, #0
 80095d4:	f018 0f01 	tst.w	r8, #1
 80095d8:	d004      	beq.n	80095e4 <_strtod_l+0x5dc>
 80095da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80095de:	f7f7 f82b 	bl	8000638 <__aeabi_dmul>
 80095e2:	2301      	movs	r3, #1
 80095e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80095e8:	f109 0908 	add.w	r9, r9, #8
 80095ec:	d1f2      	bne.n	80095d4 <_strtod_l+0x5cc>
 80095ee:	b10b      	cbz	r3, 80095f4 <_strtod_l+0x5ec>
 80095f0:	4682      	mov	sl, r0
 80095f2:	468b      	mov	fp, r1
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	b1c3      	cbz	r3, 800962a <_strtod_l+0x622>
 80095f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80095fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009600:	2b00      	cmp	r3, #0
 8009602:	4659      	mov	r1, fp
 8009604:	dd11      	ble.n	800962a <_strtod_l+0x622>
 8009606:	2b1f      	cmp	r3, #31
 8009608:	f340 8124 	ble.w	8009854 <_strtod_l+0x84c>
 800960c:	2b34      	cmp	r3, #52	; 0x34
 800960e:	bfde      	ittt	le
 8009610:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009614:	f04f 33ff 	movle.w	r3, #4294967295
 8009618:	fa03 f202 	lslle.w	r2, r3, r2
 800961c:	f04f 0a00 	mov.w	sl, #0
 8009620:	bfcc      	ite	gt
 8009622:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009626:	ea02 0b01 	andle.w	fp, r2, r1
 800962a:	2200      	movs	r2, #0
 800962c:	2300      	movs	r3, #0
 800962e:	4650      	mov	r0, sl
 8009630:	4659      	mov	r1, fp
 8009632:	f7f7 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8009636:	2800      	cmp	r0, #0
 8009638:	d1a2      	bne.n	8009580 <_strtod_l+0x578>
 800963a:	9b07      	ldr	r3, [sp, #28]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	9908      	ldr	r1, [sp, #32]
 8009640:	462b      	mov	r3, r5
 8009642:	463a      	mov	r2, r7
 8009644:	4620      	mov	r0, r4
 8009646:	f001 fe63 	bl	800b310 <__s2b>
 800964a:	9007      	str	r0, [sp, #28]
 800964c:	2800      	cmp	r0, #0
 800964e:	f43f af1f 	beq.w	8009490 <_strtod_l+0x488>
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	1b9e      	subs	r6, r3, r6
 8009656:	9b06      	ldr	r3, [sp, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	bfb4      	ite	lt
 800965c:	4633      	movlt	r3, r6
 800965e:	2300      	movge	r3, #0
 8009660:	930c      	str	r3, [sp, #48]	; 0x30
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	2500      	movs	r5, #0
 8009666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800966a:	9312      	str	r3, [sp, #72]	; 0x48
 800966c:	462e      	mov	r6, r5
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	4620      	mov	r0, r4
 8009672:	6859      	ldr	r1, [r3, #4]
 8009674:	f001 fda4 	bl	800b1c0 <_Balloc>
 8009678:	9005      	str	r0, [sp, #20]
 800967a:	2800      	cmp	r0, #0
 800967c:	f43f af0c 	beq.w	8009498 <_strtod_l+0x490>
 8009680:	9b07      	ldr	r3, [sp, #28]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	3202      	adds	r2, #2
 8009686:	f103 010c 	add.w	r1, r3, #12
 800968a:	0092      	lsls	r2, r2, #2
 800968c:	300c      	adds	r0, #12
 800968e:	f001 fd89 	bl	800b1a4 <memcpy>
 8009692:	ec4b ab10 	vmov	d0, sl, fp
 8009696:	aa1a      	add	r2, sp, #104	; 0x68
 8009698:	a919      	add	r1, sp, #100	; 0x64
 800969a:	4620      	mov	r0, r4
 800969c:	f002 f97e 	bl	800b99c <__d2b>
 80096a0:	ec4b ab18 	vmov	d8, sl, fp
 80096a4:	9018      	str	r0, [sp, #96]	; 0x60
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f43f aef6 	beq.w	8009498 <_strtod_l+0x490>
 80096ac:	2101      	movs	r1, #1
 80096ae:	4620      	mov	r0, r4
 80096b0:	f001 fec8 	bl	800b444 <__i2b>
 80096b4:	4606      	mov	r6, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f aeee 	beq.w	8009498 <_strtod_l+0x490>
 80096bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096be:	9904      	ldr	r1, [sp, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfab      	itete	ge
 80096c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80096c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80096c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80096ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80096ce:	bfac      	ite	ge
 80096d0:	eb03 0902 	addge.w	r9, r3, r2
 80096d4:	1ad7      	sublt	r7, r2, r3
 80096d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096d8:	eba3 0801 	sub.w	r8, r3, r1
 80096dc:	4490      	add	r8, r2
 80096de:	4ba1      	ldr	r3, [pc, #644]	; (8009964 <_strtod_l+0x95c>)
 80096e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80096e4:	4598      	cmp	r8, r3
 80096e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80096ea:	f280 80c7 	bge.w	800987c <_strtod_l+0x874>
 80096ee:	eba3 0308 	sub.w	r3, r3, r8
 80096f2:	2b1f      	cmp	r3, #31
 80096f4:	eba2 0203 	sub.w	r2, r2, r3
 80096f8:	f04f 0101 	mov.w	r1, #1
 80096fc:	f300 80b1 	bgt.w	8009862 <_strtod_l+0x85a>
 8009700:	fa01 f303 	lsl.w	r3, r1, r3
 8009704:	930d      	str	r3, [sp, #52]	; 0x34
 8009706:	2300      	movs	r3, #0
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	eb09 0802 	add.w	r8, r9, r2
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	45c1      	cmp	r9, r8
 8009712:	4417      	add	r7, r2
 8009714:	441f      	add	r7, r3
 8009716:	464b      	mov	r3, r9
 8009718:	bfa8      	it	ge
 800971a:	4643      	movge	r3, r8
 800971c:	42bb      	cmp	r3, r7
 800971e:	bfa8      	it	ge
 8009720:	463b      	movge	r3, r7
 8009722:	2b00      	cmp	r3, #0
 8009724:	bfc2      	ittt	gt
 8009726:	eba8 0803 	subgt.w	r8, r8, r3
 800972a:	1aff      	subgt	r7, r7, r3
 800972c:	eba9 0903 	subgt.w	r9, r9, r3
 8009730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009732:	2b00      	cmp	r3, #0
 8009734:	dd17      	ble.n	8009766 <_strtod_l+0x75e>
 8009736:	4631      	mov	r1, r6
 8009738:	461a      	mov	r2, r3
 800973a:	4620      	mov	r0, r4
 800973c:	f001 ff42 	bl	800b5c4 <__pow5mult>
 8009740:	4606      	mov	r6, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	f43f aea8 	beq.w	8009498 <_strtod_l+0x490>
 8009748:	4601      	mov	r1, r0
 800974a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800974c:	4620      	mov	r0, r4
 800974e:	f001 fe8f 	bl	800b470 <__multiply>
 8009752:	900b      	str	r0, [sp, #44]	; 0x2c
 8009754:	2800      	cmp	r0, #0
 8009756:	f43f ae9f 	beq.w	8009498 <_strtod_l+0x490>
 800975a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800975c:	4620      	mov	r0, r4
 800975e:	f001 fd6f 	bl	800b240 <_Bfree>
 8009762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009764:	9318      	str	r3, [sp, #96]	; 0x60
 8009766:	f1b8 0f00 	cmp.w	r8, #0
 800976a:	f300 808c 	bgt.w	8009886 <_strtod_l+0x87e>
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	dd08      	ble.n	8009786 <_strtod_l+0x77e>
 8009774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009776:	9905      	ldr	r1, [sp, #20]
 8009778:	4620      	mov	r0, r4
 800977a:	f001 ff23 	bl	800b5c4 <__pow5mult>
 800977e:	9005      	str	r0, [sp, #20]
 8009780:	2800      	cmp	r0, #0
 8009782:	f43f ae89 	beq.w	8009498 <_strtod_l+0x490>
 8009786:	2f00      	cmp	r7, #0
 8009788:	dd08      	ble.n	800979c <_strtod_l+0x794>
 800978a:	9905      	ldr	r1, [sp, #20]
 800978c:	463a      	mov	r2, r7
 800978e:	4620      	mov	r0, r4
 8009790:	f001 ff72 	bl	800b678 <__lshift>
 8009794:	9005      	str	r0, [sp, #20]
 8009796:	2800      	cmp	r0, #0
 8009798:	f43f ae7e 	beq.w	8009498 <_strtod_l+0x490>
 800979c:	f1b9 0f00 	cmp.w	r9, #0
 80097a0:	dd08      	ble.n	80097b4 <_strtod_l+0x7ac>
 80097a2:	4631      	mov	r1, r6
 80097a4:	464a      	mov	r2, r9
 80097a6:	4620      	mov	r0, r4
 80097a8:	f001 ff66 	bl	800b678 <__lshift>
 80097ac:	4606      	mov	r6, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f43f ae72 	beq.w	8009498 <_strtod_l+0x490>
 80097b4:	9a05      	ldr	r2, [sp, #20]
 80097b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097b8:	4620      	mov	r0, r4
 80097ba:	f001 ffe9 	bl	800b790 <__mdiff>
 80097be:	4605      	mov	r5, r0
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f43f ae69 	beq.w	8009498 <_strtod_l+0x490>
 80097c6:	68c3      	ldr	r3, [r0, #12]
 80097c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ca:	2300      	movs	r3, #0
 80097cc:	60c3      	str	r3, [r0, #12]
 80097ce:	4631      	mov	r1, r6
 80097d0:	f001 ffc2 	bl	800b758 <__mcmp>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	da60      	bge.n	800989a <_strtod_l+0x892>
 80097d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097da:	ea53 030a 	orrs.w	r3, r3, sl
 80097de:	f040 8082 	bne.w	80098e6 <_strtod_l+0x8de>
 80097e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d17d      	bne.n	80098e6 <_strtod_l+0x8de>
 80097ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097ee:	0d1b      	lsrs	r3, r3, #20
 80097f0:	051b      	lsls	r3, r3, #20
 80097f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097f6:	d976      	bls.n	80098e6 <_strtod_l+0x8de>
 80097f8:	696b      	ldr	r3, [r5, #20]
 80097fa:	b913      	cbnz	r3, 8009802 <_strtod_l+0x7fa>
 80097fc:	692b      	ldr	r3, [r5, #16]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	dd71      	ble.n	80098e6 <_strtod_l+0x8de>
 8009802:	4629      	mov	r1, r5
 8009804:	2201      	movs	r2, #1
 8009806:	4620      	mov	r0, r4
 8009808:	f001 ff36 	bl	800b678 <__lshift>
 800980c:	4631      	mov	r1, r6
 800980e:	4605      	mov	r5, r0
 8009810:	f001 ffa2 	bl	800b758 <__mcmp>
 8009814:	2800      	cmp	r0, #0
 8009816:	dd66      	ble.n	80098e6 <_strtod_l+0x8de>
 8009818:	9904      	ldr	r1, [sp, #16]
 800981a:	4a53      	ldr	r2, [pc, #332]	; (8009968 <_strtod_l+0x960>)
 800981c:	465b      	mov	r3, fp
 800981e:	2900      	cmp	r1, #0
 8009820:	f000 8081 	beq.w	8009926 <_strtod_l+0x91e>
 8009824:	ea02 010b 	and.w	r1, r2, fp
 8009828:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800982c:	dc7b      	bgt.n	8009926 <_strtod_l+0x91e>
 800982e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009832:	f77f aea9 	ble.w	8009588 <_strtod_l+0x580>
 8009836:	4b4d      	ldr	r3, [pc, #308]	; (800996c <_strtod_l+0x964>)
 8009838:	4650      	mov	r0, sl
 800983a:	4659      	mov	r1, fp
 800983c:	2200      	movs	r2, #0
 800983e:	f7f6 fefb 	bl	8000638 <__aeabi_dmul>
 8009842:	460b      	mov	r3, r1
 8009844:	4303      	orrs	r3, r0
 8009846:	bf08      	it	eq
 8009848:	2322      	moveq	r3, #34	; 0x22
 800984a:	4682      	mov	sl, r0
 800984c:	468b      	mov	fp, r1
 800984e:	bf08      	it	eq
 8009850:	6023      	streq	r3, [r4, #0]
 8009852:	e62b      	b.n	80094ac <_strtod_l+0x4a4>
 8009854:	f04f 32ff 	mov.w	r2, #4294967295
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	ea03 0a0a 	and.w	sl, r3, sl
 8009860:	e6e3      	b.n	800962a <_strtod_l+0x622>
 8009862:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009866:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800986a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800986e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009872:	fa01 f308 	lsl.w	r3, r1, r8
 8009876:	9308      	str	r3, [sp, #32]
 8009878:	910d      	str	r1, [sp, #52]	; 0x34
 800987a:	e746      	b.n	800970a <_strtod_l+0x702>
 800987c:	2300      	movs	r3, #0
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	2301      	movs	r3, #1
 8009882:	930d      	str	r3, [sp, #52]	; 0x34
 8009884:	e741      	b.n	800970a <_strtod_l+0x702>
 8009886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009888:	4642      	mov	r2, r8
 800988a:	4620      	mov	r0, r4
 800988c:	f001 fef4 	bl	800b678 <__lshift>
 8009890:	9018      	str	r0, [sp, #96]	; 0x60
 8009892:	2800      	cmp	r0, #0
 8009894:	f47f af6b 	bne.w	800976e <_strtod_l+0x766>
 8009898:	e5fe      	b.n	8009498 <_strtod_l+0x490>
 800989a:	465f      	mov	r7, fp
 800989c:	d16e      	bne.n	800997c <_strtod_l+0x974>
 800989e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098a4:	b342      	cbz	r2, 80098f8 <_strtod_l+0x8f0>
 80098a6:	4a32      	ldr	r2, [pc, #200]	; (8009970 <_strtod_l+0x968>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d128      	bne.n	80098fe <_strtod_l+0x8f6>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	4651      	mov	r1, sl
 80098b0:	b1eb      	cbz	r3, 80098ee <_strtod_l+0x8e6>
 80098b2:	4b2d      	ldr	r3, [pc, #180]	; (8009968 <_strtod_l+0x960>)
 80098b4:	403b      	ands	r3, r7
 80098b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	d819      	bhi.n	80098f4 <_strtod_l+0x8ec>
 80098c0:	0d1b      	lsrs	r3, r3, #20
 80098c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	4299      	cmp	r1, r3
 80098cc:	d117      	bne.n	80098fe <_strtod_l+0x8f6>
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <_strtod_l+0x96c>)
 80098d0:	429f      	cmp	r7, r3
 80098d2:	d102      	bne.n	80098da <_strtod_l+0x8d2>
 80098d4:	3101      	adds	r1, #1
 80098d6:	f43f addf 	beq.w	8009498 <_strtod_l+0x490>
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <_strtod_l+0x960>)
 80098dc:	403b      	ands	r3, r7
 80098de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80098e2:	f04f 0a00 	mov.w	sl, #0
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1a4      	bne.n	8009836 <_strtod_l+0x82e>
 80098ec:	e5de      	b.n	80094ac <_strtod_l+0x4a4>
 80098ee:	f04f 33ff 	mov.w	r3, #4294967295
 80098f2:	e7ea      	b.n	80098ca <_strtod_l+0x8c2>
 80098f4:	4613      	mov	r3, r2
 80098f6:	e7e8      	b.n	80098ca <_strtod_l+0x8c2>
 80098f8:	ea53 030a 	orrs.w	r3, r3, sl
 80098fc:	d08c      	beq.n	8009818 <_strtod_l+0x810>
 80098fe:	9b08      	ldr	r3, [sp, #32]
 8009900:	b1db      	cbz	r3, 800993a <_strtod_l+0x932>
 8009902:	423b      	tst	r3, r7
 8009904:	d0ef      	beq.n	80098e6 <_strtod_l+0x8de>
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	9a04      	ldr	r2, [sp, #16]
 800990a:	4650      	mov	r0, sl
 800990c:	4659      	mov	r1, fp
 800990e:	b1c3      	cbz	r3, 8009942 <_strtod_l+0x93a>
 8009910:	f7ff fb5b 	bl	8008fca <sulp>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	ec51 0b18 	vmov	r0, r1, d8
 800991c:	f7f6 fcd6 	bl	80002cc <__adddf3>
 8009920:	4682      	mov	sl, r0
 8009922:	468b      	mov	fp, r1
 8009924:	e7df      	b.n	80098e6 <_strtod_l+0x8de>
 8009926:	4013      	ands	r3, r2
 8009928:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800992c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009930:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009934:	f04f 3aff 	mov.w	sl, #4294967295
 8009938:	e7d5      	b.n	80098e6 <_strtod_l+0x8de>
 800993a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800993c:	ea13 0f0a 	tst.w	r3, sl
 8009940:	e7e0      	b.n	8009904 <_strtod_l+0x8fc>
 8009942:	f7ff fb42 	bl	8008fca <sulp>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	ec51 0b18 	vmov	r0, r1, d8
 800994e:	f7f6 fcbb 	bl	80002c8 <__aeabi_dsub>
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	4682      	mov	sl, r0
 8009958:	468b      	mov	fp, r1
 800995a:	f7f7 f8d5 	bl	8000b08 <__aeabi_dcmpeq>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0c1      	beq.n	80098e6 <_strtod_l+0x8de>
 8009962:	e611      	b.n	8009588 <_strtod_l+0x580>
 8009964:	fffffc02 	.word	0xfffffc02
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	39500000 	.word	0x39500000
 8009970:	000fffff 	.word	0x000fffff
 8009974:	7fefffff 	.word	0x7fefffff
 8009978:	0800d420 	.word	0x0800d420
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	f002 f868 	bl	800ba54 <__ratio>
 8009984:	ec59 8b10 	vmov	r8, r9, d0
 8009988:	ee10 0a10 	vmov	r0, s0
 800998c:	2200      	movs	r2, #0
 800998e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f8cc 	bl	8000b30 <__aeabi_dcmple>
 8009998:	2800      	cmp	r0, #0
 800999a:	d07a      	beq.n	8009a92 <_strtod_l+0xa8a>
 800999c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d04a      	beq.n	8009a38 <_strtod_l+0xa30>
 80099a2:	4b95      	ldr	r3, [pc, #596]	; (8009bf8 <_strtod_l+0xbf0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009bf8 <_strtod_l+0xbf0>
 80099ae:	f04f 0800 	mov.w	r8, #0
 80099b2:	4b92      	ldr	r3, [pc, #584]	; (8009bfc <_strtod_l+0xbf4>)
 80099b4:	403b      	ands	r3, r7
 80099b6:	930d      	str	r3, [sp, #52]	; 0x34
 80099b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099ba:	4b91      	ldr	r3, [pc, #580]	; (8009c00 <_strtod_l+0xbf8>)
 80099bc:	429a      	cmp	r2, r3
 80099be:	f040 80b0 	bne.w	8009b22 <_strtod_l+0xb1a>
 80099c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80099ca:	ec4b ab10 	vmov	d0, sl, fp
 80099ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099d2:	f001 ff67 	bl	800b8a4 <__ulp>
 80099d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099da:	ec53 2b10 	vmov	r2, r3, d0
 80099de:	f7f6 fe2b 	bl	8000638 <__aeabi_dmul>
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	f7f6 fc71 	bl	80002cc <__adddf3>
 80099ea:	460b      	mov	r3, r1
 80099ec:	4983      	ldr	r1, [pc, #524]	; (8009bfc <_strtod_l+0xbf4>)
 80099ee:	4a85      	ldr	r2, [pc, #532]	; (8009c04 <_strtod_l+0xbfc>)
 80099f0:	4019      	ands	r1, r3
 80099f2:	4291      	cmp	r1, r2
 80099f4:	4682      	mov	sl, r0
 80099f6:	d960      	bls.n	8009aba <_strtod_l+0xab2>
 80099f8:	ee18 3a90 	vmov	r3, s17
 80099fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d104      	bne.n	8009a0e <_strtod_l+0xa06>
 8009a04:	ee18 3a10 	vmov	r3, s16
 8009a08:	3301      	adds	r3, #1
 8009a0a:	f43f ad45 	beq.w	8009498 <_strtod_l+0x490>
 8009a0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009c10 <_strtod_l+0xc08>
 8009a12:	f04f 3aff 	mov.w	sl, #4294967295
 8009a16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f001 fc11 	bl	800b240 <_Bfree>
 8009a1e:	9905      	ldr	r1, [sp, #20]
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 fc0d 	bl	800b240 <_Bfree>
 8009a26:	4631      	mov	r1, r6
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f001 fc09 	bl	800b240 <_Bfree>
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fc05 	bl	800b240 <_Bfree>
 8009a36:	e61a      	b.n	800966e <_strtod_l+0x666>
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	d11b      	bne.n	8009a76 <_strtod_l+0xa6e>
 8009a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a42:	b9f3      	cbnz	r3, 8009a82 <_strtod_l+0xa7a>
 8009a44:	4b6c      	ldr	r3, [pc, #432]	; (8009bf8 <_strtod_l+0xbf0>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f866 	bl	8000b1c <__aeabi_dcmplt>
 8009a50:	b9d0      	cbnz	r0, 8009a88 <_strtod_l+0xa80>
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	4b6c      	ldr	r3, [pc, #432]	; (8009c08 <_strtod_l+0xc00>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f7f6 fded 	bl	8000638 <__aeabi_dmul>
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4689      	mov	r9, r1
 8009a62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009a6a:	9315      	str	r3, [sp, #84]	; 0x54
 8009a6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009a70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a74:	e79d      	b.n	80099b2 <_strtod_l+0x9aa>
 8009a76:	f1ba 0f01 	cmp.w	sl, #1
 8009a7a:	d102      	bne.n	8009a82 <_strtod_l+0xa7a>
 8009a7c:	2f00      	cmp	r7, #0
 8009a7e:	f43f ad83 	beq.w	8009588 <_strtod_l+0x580>
 8009a82:	4b62      	ldr	r3, [pc, #392]	; (8009c0c <_strtod_l+0xc04>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	e78e      	b.n	80099a6 <_strtod_l+0x99e>
 8009a88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009c08 <_strtod_l+0xc00>
 8009a8c:	f04f 0800 	mov.w	r8, #0
 8009a90:	e7e7      	b.n	8009a62 <_strtod_l+0xa5a>
 8009a92:	4b5d      	ldr	r3, [pc, #372]	; (8009c08 <_strtod_l+0xc00>)
 8009a94:	4640      	mov	r0, r8
 8009a96:	4649      	mov	r1, r9
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f7f6 fdcd 	bl	8000638 <__aeabi_dmul>
 8009a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	4689      	mov	r9, r1
 8009aa4:	b933      	cbnz	r3, 8009ab4 <_strtod_l+0xaac>
 8009aa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009aaa:	900e      	str	r0, [sp, #56]	; 0x38
 8009aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ab2:	e7dd      	b.n	8009a70 <_strtod_l+0xa68>
 8009ab4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ab8:	e7f9      	b.n	8009aae <_strtod_l+0xaa6>
 8009aba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1a8      	bne.n	8009a16 <_strtod_l+0xa0e>
 8009ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009aca:	0d1b      	lsrs	r3, r3, #20
 8009acc:	051b      	lsls	r3, r3, #20
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d1a1      	bne.n	8009a16 <_strtod_l+0xa0e>
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	f7f7 f90f 	bl	8000cf8 <__aeabi_d2lz>
 8009ada:	f7f6 fd7f 	bl	80005dc <__aeabi_l2d>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fbef 	bl	80002c8 <__aeabi_dsub>
 8009aea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009af0:	ea43 030a 	orr.w	r3, r3, sl
 8009af4:	4313      	orrs	r3, r2
 8009af6:	4680      	mov	r8, r0
 8009af8:	4689      	mov	r9, r1
 8009afa:	d055      	beq.n	8009ba8 <_strtod_l+0xba0>
 8009afc:	a336      	add	r3, pc, #216	; (adr r3, 8009bd8 <_strtod_l+0xbd0>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f7 f80b 	bl	8000b1c <__aeabi_dcmplt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f47f acd0 	bne.w	80094ac <_strtod_l+0x4a4>
 8009b0c:	a334      	add	r3, pc, #208	; (adr r3, 8009be0 <_strtod_l+0xbd8>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f7 f81f 	bl	8000b58 <__aeabi_dcmpgt>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f af7b 	beq.w	8009a16 <_strtod_l+0xa0e>
 8009b20:	e4c4      	b.n	80094ac <_strtod_l+0x4a4>
 8009b22:	9b04      	ldr	r3, [sp, #16]
 8009b24:	b333      	cbz	r3, 8009b74 <_strtod_l+0xb6c>
 8009b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b2c:	d822      	bhi.n	8009b74 <_strtod_l+0xb6c>
 8009b2e:	a32e      	add	r3, pc, #184	; (adr r3, 8009be8 <_strtod_l+0xbe0>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fffa 	bl	8000b30 <__aeabi_dcmple>
 8009b3c:	b1a0      	cbz	r0, 8009b68 <_strtod_l+0xb60>
 8009b3e:	4649      	mov	r1, r9
 8009b40:	4640      	mov	r0, r8
 8009b42:	f7f7 f851 	bl	8000be8 <__aeabi_d2uiz>
 8009b46:	2801      	cmp	r0, #1
 8009b48:	bf38      	it	cc
 8009b4a:	2001      	movcc	r0, #1
 8009b4c:	f7f6 fcfa 	bl	8000544 <__aeabi_ui2d>
 8009b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b52:	4680      	mov	r8, r0
 8009b54:	4689      	mov	r9, r1
 8009b56:	bb23      	cbnz	r3, 8009ba2 <_strtod_l+0xb9a>
 8009b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b5c:	9010      	str	r0, [sp, #64]	; 0x40
 8009b5e:	9311      	str	r3, [sp, #68]	; 0x44
 8009b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
 8009b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b78:	eeb0 0a48 	vmov.f32	s0, s16
 8009b7c:	eef0 0a68 	vmov.f32	s1, s17
 8009b80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b84:	f001 fe8e 	bl	800b8a4 <__ulp>
 8009b88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b8c:	ec53 2b10 	vmov	r2, r3, d0
 8009b90:	f7f6 fd52 	bl	8000638 <__aeabi_dmul>
 8009b94:	ec53 2b18 	vmov	r2, r3, d8
 8009b98:	f7f6 fb98 	bl	80002cc <__adddf3>
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	468b      	mov	fp, r1
 8009ba0:	e78d      	b.n	8009abe <_strtod_l+0xab6>
 8009ba2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ba6:	e7db      	b.n	8009b60 <_strtod_l+0xb58>
 8009ba8:	a311      	add	r3, pc, #68	; (adr r3, 8009bf0 <_strtod_l+0xbe8>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 ffb5 	bl	8000b1c <__aeabi_dcmplt>
 8009bb2:	e7b2      	b.n	8009b1a <_strtod_l+0xb12>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	f7ff ba6b 	b.w	8009098 <_strtod_l+0x90>
 8009bc2:	2a65      	cmp	r2, #101	; 0x65
 8009bc4:	f43f ab5f 	beq.w	8009286 <_strtod_l+0x27e>
 8009bc8:	2a45      	cmp	r2, #69	; 0x45
 8009bca:	f43f ab5c 	beq.w	8009286 <_strtod_l+0x27e>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f7ff bb94 	b.w	80092fc <_strtod_l+0x2f4>
 8009bd4:	f3af 8000 	nop.w
 8009bd8:	94a03595 	.word	0x94a03595
 8009bdc:	3fdfffff 	.word	0x3fdfffff
 8009be0:	35afe535 	.word	0x35afe535
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	ffc00000 	.word	0xffc00000
 8009bec:	41dfffff 	.word	0x41dfffff
 8009bf0:	94a03595 	.word	0x94a03595
 8009bf4:	3fcfffff 	.word	0x3fcfffff
 8009bf8:	3ff00000 	.word	0x3ff00000
 8009bfc:	7ff00000 	.word	0x7ff00000
 8009c00:	7fe00000 	.word	0x7fe00000
 8009c04:	7c9fffff 	.word	0x7c9fffff
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	bff00000 	.word	0xbff00000
 8009c10:	7fefffff 	.word	0x7fefffff

08009c14 <_strtod_r>:
 8009c14:	4b01      	ldr	r3, [pc, #4]	; (8009c1c <_strtod_r+0x8>)
 8009c16:	f7ff b9f7 	b.w	8009008 <_strtod_l>
 8009c1a:	bf00      	nop
 8009c1c:	20000110 	.word	0x20000110

08009c20 <_strtol_l.constprop.0>:
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c26:	d001      	beq.n	8009c2c <_strtol_l.constprop.0+0xc>
 8009c28:	2b24      	cmp	r3, #36	; 0x24
 8009c2a:	d906      	bls.n	8009c3a <_strtol_l.constprop.0+0x1a>
 8009c2c:	f7fe fa8a 	bl	8008144 <__errno>
 8009c30:	2316      	movs	r3, #22
 8009c32:	6003      	str	r3, [r0, #0]
 8009c34:	2000      	movs	r0, #0
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d20 <_strtol_l.constprop.0+0x100>
 8009c3e:	460d      	mov	r5, r1
 8009c40:	462e      	mov	r6, r5
 8009c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c4a:	f017 0708 	ands.w	r7, r7, #8
 8009c4e:	d1f7      	bne.n	8009c40 <_strtol_l.constprop.0+0x20>
 8009c50:	2c2d      	cmp	r4, #45	; 0x2d
 8009c52:	d132      	bne.n	8009cba <_strtol_l.constprop.0+0x9a>
 8009c54:	782c      	ldrb	r4, [r5, #0]
 8009c56:	2701      	movs	r7, #1
 8009c58:	1cb5      	adds	r5, r6, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d05b      	beq.n	8009d16 <_strtol_l.constprop.0+0xf6>
 8009c5e:	2b10      	cmp	r3, #16
 8009c60:	d109      	bne.n	8009c76 <_strtol_l.constprop.0+0x56>
 8009c62:	2c30      	cmp	r4, #48	; 0x30
 8009c64:	d107      	bne.n	8009c76 <_strtol_l.constprop.0+0x56>
 8009c66:	782c      	ldrb	r4, [r5, #0]
 8009c68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c6c:	2c58      	cmp	r4, #88	; 0x58
 8009c6e:	d14d      	bne.n	8009d0c <_strtol_l.constprop.0+0xec>
 8009c70:	786c      	ldrb	r4, [r5, #1]
 8009c72:	2310      	movs	r3, #16
 8009c74:	3502      	adds	r5, #2
 8009c76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c7e:	f04f 0c00 	mov.w	ip, #0
 8009c82:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c86:	4666      	mov	r6, ip
 8009c88:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c90:	f1be 0f09 	cmp.w	lr, #9
 8009c94:	d816      	bhi.n	8009cc4 <_strtol_l.constprop.0+0xa4>
 8009c96:	4674      	mov	r4, lr
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	dd24      	ble.n	8009ce6 <_strtol_l.constprop.0+0xc6>
 8009c9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ca0:	db1e      	blt.n	8009ce0 <_strtol_l.constprop.0+0xc0>
 8009ca2:	45b1      	cmp	r9, r6
 8009ca4:	d31c      	bcc.n	8009ce0 <_strtol_l.constprop.0+0xc0>
 8009ca6:	d101      	bne.n	8009cac <_strtol_l.constprop.0+0x8c>
 8009ca8:	45a2      	cmp	sl, r4
 8009caa:	db19      	blt.n	8009ce0 <_strtol_l.constprop.0+0xc0>
 8009cac:	fb06 4603 	mla	r6, r6, r3, r4
 8009cb0:	f04f 0c01 	mov.w	ip, #1
 8009cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb8:	e7e8      	b.n	8009c8c <_strtol_l.constprop.0+0x6c>
 8009cba:	2c2b      	cmp	r4, #43	; 0x2b
 8009cbc:	bf04      	itt	eq
 8009cbe:	782c      	ldrbeq	r4, [r5, #0]
 8009cc0:	1cb5      	addeq	r5, r6, #2
 8009cc2:	e7ca      	b.n	8009c5a <_strtol_l.constprop.0+0x3a>
 8009cc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009cc8:	f1be 0f19 	cmp.w	lr, #25
 8009ccc:	d801      	bhi.n	8009cd2 <_strtol_l.constprop.0+0xb2>
 8009cce:	3c37      	subs	r4, #55	; 0x37
 8009cd0:	e7e2      	b.n	8009c98 <_strtol_l.constprop.0+0x78>
 8009cd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cd6:	f1be 0f19 	cmp.w	lr, #25
 8009cda:	d804      	bhi.n	8009ce6 <_strtol_l.constprop.0+0xc6>
 8009cdc:	3c57      	subs	r4, #87	; 0x57
 8009cde:	e7db      	b.n	8009c98 <_strtol_l.constprop.0+0x78>
 8009ce0:	f04f 3cff 	mov.w	ip, #4294967295
 8009ce4:	e7e6      	b.n	8009cb4 <_strtol_l.constprop.0+0x94>
 8009ce6:	f1bc 0f00 	cmp.w	ip, #0
 8009cea:	da05      	bge.n	8009cf8 <_strtol_l.constprop.0+0xd8>
 8009cec:	2322      	movs	r3, #34	; 0x22
 8009cee:	6003      	str	r3, [r0, #0]
 8009cf0:	4646      	mov	r6, r8
 8009cf2:	b942      	cbnz	r2, 8009d06 <_strtol_l.constprop.0+0xe6>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	e79e      	b.n	8009c36 <_strtol_l.constprop.0+0x16>
 8009cf8:	b107      	cbz	r7, 8009cfc <_strtol_l.constprop.0+0xdc>
 8009cfa:	4276      	negs	r6, r6
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	d0f9      	beq.n	8009cf4 <_strtol_l.constprop.0+0xd4>
 8009d00:	f1bc 0f00 	cmp.w	ip, #0
 8009d04:	d000      	beq.n	8009d08 <_strtol_l.constprop.0+0xe8>
 8009d06:	1e69      	subs	r1, r5, #1
 8009d08:	6011      	str	r1, [r2, #0]
 8009d0a:	e7f3      	b.n	8009cf4 <_strtol_l.constprop.0+0xd4>
 8009d0c:	2430      	movs	r4, #48	; 0x30
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1b1      	bne.n	8009c76 <_strtol_l.constprop.0+0x56>
 8009d12:	2308      	movs	r3, #8
 8009d14:	e7af      	b.n	8009c76 <_strtol_l.constprop.0+0x56>
 8009d16:	2c30      	cmp	r4, #48	; 0x30
 8009d18:	d0a5      	beq.n	8009c66 <_strtol_l.constprop.0+0x46>
 8009d1a:	230a      	movs	r3, #10
 8009d1c:	e7ab      	b.n	8009c76 <_strtol_l.constprop.0+0x56>
 8009d1e:	bf00      	nop
 8009d20:	0800d449 	.word	0x0800d449

08009d24 <_strtol_r>:
 8009d24:	f7ff bf7c 	b.w	8009c20 <_strtol_l.constprop.0>

08009d28 <_write_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	; (8009d48 <_write_r+0x20>)
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4611      	mov	r1, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	602a      	str	r2, [r5, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f7f9 f8ed 	bl	8002f16 <_write>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_write_r+0x1e>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_write_r+0x1e>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20000498 	.word	0x20000498

08009d4c <_close_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d06      	ldr	r5, [pc, #24]	; (8009d68 <_close_r+0x1c>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	f7f9 f8f9 	bl	8002f4e <_close>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_close_r+0x1a>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_close_r+0x1a>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20000498 	.word	0x20000498

08009d6c <quorem>:
 8009d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	6903      	ldr	r3, [r0, #16]
 8009d72:	690c      	ldr	r4, [r1, #16]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	4607      	mov	r7, r0
 8009d78:	f2c0 8081 	blt.w	8009e7e <quorem+0x112>
 8009d7c:	3c01      	subs	r4, #1
 8009d7e:	f101 0814 	add.w	r8, r1, #20
 8009d82:	f100 0514 	add.w	r5, r0, #20
 8009d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d94:	3301      	adds	r3, #1
 8009d96:	429a      	cmp	r2, r3
 8009d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da4:	d331      	bcc.n	8009e0a <quorem+0x9e>
 8009da6:	f04f 0e00 	mov.w	lr, #0
 8009daa:	4640      	mov	r0, r8
 8009dac:	46ac      	mov	ip, r5
 8009dae:	46f2      	mov	sl, lr
 8009db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009db4:	b293      	uxth	r3, r2
 8009db6:	fb06 e303 	mla	r3, r6, r3, lr
 8009dba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8009dc4:	f8dc a000 	ldr.w	sl, [ip]
 8009dc8:	0c12      	lsrs	r2, r2, #16
 8009dca:	fa13 f38a 	uxtah	r3, r3, sl
 8009dce:	fb06 e202 	mla	r2, r6, r2, lr
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	9b00      	ldr	r3, [sp, #0]
 8009dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dda:	b292      	uxth	r2, r2
 8009ddc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009de4:	f8bd 3000 	ldrh.w	r3, [sp]
 8009de8:	4581      	cmp	r9, r0
 8009dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dee:	f84c 3b04 	str.w	r3, [ip], #4
 8009df2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009df6:	d2db      	bcs.n	8009db0 <quorem+0x44>
 8009df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dfc:	b92b      	cbnz	r3, 8009e0a <quorem+0x9e>
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	3b04      	subs	r3, #4
 8009e02:	429d      	cmp	r5, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	d32e      	bcc.n	8009e66 <quorem+0xfa>
 8009e08:	613c      	str	r4, [r7, #16]
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f001 fca4 	bl	800b758 <__mcmp>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	db24      	blt.n	8009e5e <quorem+0xf2>
 8009e14:	3601      	adds	r6, #1
 8009e16:	4628      	mov	r0, r5
 8009e18:	f04f 0c00 	mov.w	ip, #0
 8009e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e20:	f8d0 e000 	ldr.w	lr, [r0]
 8009e24:	b293      	uxth	r3, r2
 8009e26:	ebac 0303 	sub.w	r3, ip, r3
 8009e2a:	0c12      	lsrs	r2, r2, #16
 8009e2c:	fa13 f38e 	uxtah	r3, r3, lr
 8009e30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3e:	45c1      	cmp	r9, r8
 8009e40:	f840 3b04 	str.w	r3, [r0], #4
 8009e44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e48:	d2e8      	bcs.n	8009e1c <quorem+0xb0>
 8009e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e52:	b922      	cbnz	r2, 8009e5e <quorem+0xf2>
 8009e54:	3b04      	subs	r3, #4
 8009e56:	429d      	cmp	r5, r3
 8009e58:	461a      	mov	r2, r3
 8009e5a:	d30a      	bcc.n	8009e72 <quorem+0x106>
 8009e5c:	613c      	str	r4, [r7, #16]
 8009e5e:	4630      	mov	r0, r6
 8009e60:	b003      	add	sp, #12
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d1cc      	bne.n	8009e08 <quorem+0x9c>
 8009e6e:	3c01      	subs	r4, #1
 8009e70:	e7c7      	b.n	8009e02 <quorem+0x96>
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	d1f0      	bne.n	8009e5c <quorem+0xf0>
 8009e7a:	3c01      	subs	r4, #1
 8009e7c:	e7eb      	b.n	8009e56 <quorem+0xea>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e7ee      	b.n	8009e60 <quorem+0xf4>
 8009e82:	0000      	movs	r0, r0
 8009e84:	0000      	movs	r0, r0
	...

08009e88 <_dtoa_r>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	ed2d 8b04 	vpush	{d8-d9}
 8009e90:	ec57 6b10 	vmov	r6, r7, d0
 8009e94:	b093      	sub	sp, #76	; 0x4c
 8009e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e9c:	9106      	str	r1, [sp, #24]
 8009e9e:	ee10 aa10 	vmov	sl, s0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ea8:	46bb      	mov	fp, r7
 8009eaa:	b975      	cbnz	r5, 8009eca <_dtoa_r+0x42>
 8009eac:	2010      	movs	r0, #16
 8009eae:	f001 f95f 	bl	800b170 <malloc>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8009eb6:	b920      	cbnz	r0, 8009ec2 <_dtoa_r+0x3a>
 8009eb8:	4ba7      	ldr	r3, [pc, #668]	; (800a158 <_dtoa_r+0x2d0>)
 8009eba:	21ea      	movs	r1, #234	; 0xea
 8009ebc:	48a7      	ldr	r0, [pc, #668]	; (800a15c <_dtoa_r+0x2d4>)
 8009ebe:	f002 fceb 	bl	800c898 <__assert_func>
 8009ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ec6:	6005      	str	r5, [r0, #0]
 8009ec8:	60c5      	str	r5, [r0, #12]
 8009eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ecc:	6819      	ldr	r1, [r3, #0]
 8009ece:	b151      	cbz	r1, 8009ee6 <_dtoa_r+0x5e>
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	604a      	str	r2, [r1, #4]
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	4093      	lsls	r3, r2
 8009ed8:	608b      	str	r3, [r1, #8]
 8009eda:	4620      	mov	r0, r4
 8009edc:	f001 f9b0 	bl	800b240 <_Bfree>
 8009ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	1e3b      	subs	r3, r7, #0
 8009ee8:	bfaa      	itet	ge
 8009eea:	2300      	movge	r3, #0
 8009eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ef0:	f8c8 3000 	strge.w	r3, [r8]
 8009ef4:	4b9a      	ldr	r3, [pc, #616]	; (800a160 <_dtoa_r+0x2d8>)
 8009ef6:	bfbc      	itt	lt
 8009ef8:	2201      	movlt	r2, #1
 8009efa:	f8c8 2000 	strlt.w	r2, [r8]
 8009efe:	ea33 030b 	bics.w	r3, r3, fp
 8009f02:	d11b      	bne.n	8009f3c <_dtoa_r+0xb4>
 8009f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f10:	4333      	orrs	r3, r6
 8009f12:	f000 8592 	beq.w	800aa3a <_dtoa_r+0xbb2>
 8009f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f18:	b963      	cbnz	r3, 8009f34 <_dtoa_r+0xac>
 8009f1a:	4b92      	ldr	r3, [pc, #584]	; (800a164 <_dtoa_r+0x2dc>)
 8009f1c:	e022      	b.n	8009f64 <_dtoa_r+0xdc>
 8009f1e:	4b92      	ldr	r3, [pc, #584]	; (800a168 <_dtoa_r+0x2e0>)
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	3308      	adds	r3, #8
 8009f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	9801      	ldr	r0, [sp, #4]
 8009f2a:	b013      	add	sp, #76	; 0x4c
 8009f2c:	ecbd 8b04 	vpop	{d8-d9}
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	4b8b      	ldr	r3, [pc, #556]	; (800a164 <_dtoa_r+0x2dc>)
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	3303      	adds	r3, #3
 8009f3a:	e7f3      	b.n	8009f24 <_dtoa_r+0x9c>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4650      	mov	r0, sl
 8009f42:	4659      	mov	r1, fp
 8009f44:	f7f6 fde0 	bl	8000b08 <__aeabi_dcmpeq>
 8009f48:	ec4b ab19 	vmov	d9, sl, fp
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	b158      	cbz	r0, 8009f68 <_dtoa_r+0xe0>
 8009f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f52:	2301      	movs	r3, #1
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 856b 	beq.w	800aa34 <_dtoa_r+0xbac>
 8009f5e:	4883      	ldr	r0, [pc, #524]	; (800a16c <_dtoa_r+0x2e4>)
 8009f60:	6018      	str	r0, [r3, #0]
 8009f62:	1e43      	subs	r3, r0, #1
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	e7df      	b.n	8009f28 <_dtoa_r+0xa0>
 8009f68:	ec4b ab10 	vmov	d0, sl, fp
 8009f6c:	aa10      	add	r2, sp, #64	; 0x40
 8009f6e:	a911      	add	r1, sp, #68	; 0x44
 8009f70:	4620      	mov	r0, r4
 8009f72:	f001 fd13 	bl	800b99c <__d2b>
 8009f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009f7a:	ee08 0a10 	vmov	s16, r0
 8009f7e:	2d00      	cmp	r5, #0
 8009f80:	f000 8084 	beq.w	800a08c <_dtoa_r+0x204>
 8009f84:	ee19 3a90 	vmov	r3, s19
 8009f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f90:	4656      	mov	r6, sl
 8009f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f9e:	4b74      	ldr	r3, [pc, #464]	; (800a170 <_dtoa_r+0x2e8>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	f7f6 f98f 	bl	80002c8 <__aeabi_dsub>
 8009faa:	a365      	add	r3, pc, #404	; (adr r3, 800a140 <_dtoa_r+0x2b8>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 fb42 	bl	8000638 <__aeabi_dmul>
 8009fb4:	a364      	add	r3, pc, #400	; (adr r3, 800a148 <_dtoa_r+0x2c0>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 f987 	bl	80002cc <__adddf3>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	460f      	mov	r7, r1
 8009fc4:	f7f6 face 	bl	8000564 <__aeabi_i2d>
 8009fc8:	a361      	add	r3, pc, #388	; (adr r3, 800a150 <_dtoa_r+0x2c8>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 fb33 	bl	8000638 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 f977 	bl	80002cc <__adddf3>
 8009fde:	4606      	mov	r6, r0
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	f7f6 fdd9 	bl	8000b98 <__aeabi_d2iz>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	9000      	str	r0, [sp, #0]
 8009fea:	2300      	movs	r3, #0
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f7f6 fd94 	bl	8000b1c <__aeabi_dcmplt>
 8009ff4:	b150      	cbz	r0, 800a00c <_dtoa_r+0x184>
 8009ff6:	9800      	ldr	r0, [sp, #0]
 8009ff8:	f7f6 fab4 	bl	8000564 <__aeabi_i2d>
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	463b      	mov	r3, r7
 800a000:	f7f6 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 800a004:	b910      	cbnz	r0, 800a00c <_dtoa_r+0x184>
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	3b01      	subs	r3, #1
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	9b00      	ldr	r3, [sp, #0]
 800a00e:	2b16      	cmp	r3, #22
 800a010:	d85a      	bhi.n	800a0c8 <_dtoa_r+0x240>
 800a012:	9a00      	ldr	r2, [sp, #0]
 800a014:	4b57      	ldr	r3, [pc, #348]	; (800a174 <_dtoa_r+0x2ec>)
 800a016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	ec51 0b19 	vmov	r0, r1, d9
 800a022:	f7f6 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d050      	beq.n	800a0cc <_dtoa_r+0x244>
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2300      	movs	r3, #0
 800a032:	930b      	str	r3, [sp, #44]	; 0x2c
 800a034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a036:	1b5d      	subs	r5, r3, r5
 800a038:	1e6b      	subs	r3, r5, #1
 800a03a:	9305      	str	r3, [sp, #20]
 800a03c:	bf45      	ittet	mi
 800a03e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a042:	9304      	strmi	r3, [sp, #16]
 800a044:	2300      	movpl	r3, #0
 800a046:	2300      	movmi	r3, #0
 800a048:	bf4c      	ite	mi
 800a04a:	9305      	strmi	r3, [sp, #20]
 800a04c:	9304      	strpl	r3, [sp, #16]
 800a04e:	9b00      	ldr	r3, [sp, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	db3d      	blt.n	800a0d0 <_dtoa_r+0x248>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	9a00      	ldr	r2, [sp, #0]
 800a058:	920a      	str	r2, [sp, #40]	; 0x28
 800a05a:	4413      	add	r3, r2
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	2300      	movs	r3, #0
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	2b09      	cmp	r3, #9
 800a066:	f200 8089 	bhi.w	800a17c <_dtoa_r+0x2f4>
 800a06a:	2b05      	cmp	r3, #5
 800a06c:	bfc4      	itt	gt
 800a06e:	3b04      	subgt	r3, #4
 800a070:	9306      	strgt	r3, [sp, #24]
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	f1a3 0302 	sub.w	r3, r3, #2
 800a078:	bfcc      	ite	gt
 800a07a:	2500      	movgt	r5, #0
 800a07c:	2501      	movle	r5, #1
 800a07e:	2b03      	cmp	r3, #3
 800a080:	f200 8087 	bhi.w	800a192 <_dtoa_r+0x30a>
 800a084:	e8df f003 	tbb	[pc, r3]
 800a088:	59383a2d 	.word	0x59383a2d
 800a08c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a090:	441d      	add	r5, r3
 800a092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a096:	2b20      	cmp	r3, #32
 800a098:	bfc1      	itttt	gt
 800a09a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a09e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a0a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a0a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a0aa:	bfda      	itte	le
 800a0ac:	f1c3 0320 	rsble	r3, r3, #32
 800a0b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a0b4:	4318      	orrgt	r0, r3
 800a0b6:	f7f6 fa45 	bl	8000544 <__aeabi_ui2d>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4606      	mov	r6, r0
 800a0be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0c2:	3d01      	subs	r5, #1
 800a0c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a0c6:	e76a      	b.n	8009f9e <_dtoa_r+0x116>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e7b2      	b.n	800a032 <_dtoa_r+0x1aa>
 800a0cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0ce:	e7b1      	b.n	800a034 <_dtoa_r+0x1ac>
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	9a00      	ldr	r2, [sp, #0]
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	4253      	negs	r3, r2
 800a0da:	9307      	str	r3, [sp, #28]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e0:	e7bf      	b.n	800a062 <_dtoa_r+0x1da>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9308      	str	r3, [sp, #32]
 800a0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc55      	bgt.n	800a198 <_dtoa_r+0x310>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f6:	e00c      	b.n	800a112 <_dtoa_r+0x28a>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7f3      	b.n	800a0e4 <_dtoa_r+0x25c>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a100:	9308      	str	r3, [sp, #32]
 800a102:	9b00      	ldr	r3, [sp, #0]
 800a104:	4413      	add	r3, r2
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	3301      	adds	r3, #1
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	9303      	str	r3, [sp, #12]
 800a10e:	bfb8      	it	lt
 800a110:	2301      	movlt	r3, #1
 800a112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a114:	2200      	movs	r2, #0
 800a116:	6042      	str	r2, [r0, #4]
 800a118:	2204      	movs	r2, #4
 800a11a:	f102 0614 	add.w	r6, r2, #20
 800a11e:	429e      	cmp	r6, r3
 800a120:	6841      	ldr	r1, [r0, #4]
 800a122:	d93d      	bls.n	800a1a0 <_dtoa_r+0x318>
 800a124:	4620      	mov	r0, r4
 800a126:	f001 f84b 	bl	800b1c0 <_Balloc>
 800a12a:	9001      	str	r0, [sp, #4]
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d13b      	bne.n	800a1a8 <_dtoa_r+0x320>
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <_dtoa_r+0x2f0>)
 800a132:	4602      	mov	r2, r0
 800a134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a138:	e6c0      	b.n	8009ebc <_dtoa_r+0x34>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e7df      	b.n	800a0fe <_dtoa_r+0x276>
 800a13e:	bf00      	nop
 800a140:	636f4361 	.word	0x636f4361
 800a144:	3fd287a7 	.word	0x3fd287a7
 800a148:	8b60c8b3 	.word	0x8b60c8b3
 800a14c:	3fc68a28 	.word	0x3fc68a28
 800a150:	509f79fb 	.word	0x509f79fb
 800a154:	3fd34413 	.word	0x3fd34413
 800a158:	0800d556 	.word	0x0800d556
 800a15c:	0800d56d 	.word	0x0800d56d
 800a160:	7ff00000 	.word	0x7ff00000
 800a164:	0800d552 	.word	0x0800d552
 800a168:	0800d549 	.word	0x0800d549
 800a16c:	0800d7c2 	.word	0x0800d7c2
 800a170:	3ff80000 	.word	0x3ff80000
 800a174:	0800d6d8 	.word	0x0800d6d8
 800a178:	0800d5c8 	.word	0x0800d5c8
 800a17c:	2501      	movs	r5, #1
 800a17e:	2300      	movs	r3, #0
 800a180:	9306      	str	r3, [sp, #24]
 800a182:	9508      	str	r5, [sp, #32]
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a18c:	2200      	movs	r2, #0
 800a18e:	2312      	movs	r3, #18
 800a190:	e7b0      	b.n	800a0f4 <_dtoa_r+0x26c>
 800a192:	2301      	movs	r3, #1
 800a194:	9308      	str	r3, [sp, #32]
 800a196:	e7f5      	b.n	800a184 <_dtoa_r+0x2fc>
 800a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a19e:	e7b8      	b.n	800a112 <_dtoa_r+0x28a>
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	6041      	str	r1, [r0, #4]
 800a1a4:	0052      	lsls	r2, r2, #1
 800a1a6:	e7b8      	b.n	800a11a <_dtoa_r+0x292>
 800a1a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1aa:	9a01      	ldr	r2, [sp, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	2b0e      	cmp	r3, #14
 800a1b2:	f200 809d 	bhi.w	800a2f0 <_dtoa_r+0x468>
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	f000 809a 	beq.w	800a2f0 <_dtoa_r+0x468>
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dd32      	ble.n	800a228 <_dtoa_r+0x3a0>
 800a1c2:	4ab7      	ldr	r2, [pc, #732]	; (800a4a0 <_dtoa_r+0x618>)
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	05d8      	lsls	r0, r3, #23
 800a1d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a1d8:	d516      	bpl.n	800a208 <_dtoa_r+0x380>
 800a1da:	4bb2      	ldr	r3, [pc, #712]	; (800a4a4 <_dtoa_r+0x61c>)
 800a1dc:	ec51 0b19 	vmov	r0, r1, d9
 800a1e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1e4:	f7f6 fb52 	bl	800088c <__aeabi_ddiv>
 800a1e8:	f007 070f 	and.w	r7, r7, #15
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	468b      	mov	fp, r1
 800a1f0:	2503      	movs	r5, #3
 800a1f2:	4eac      	ldr	r6, [pc, #688]	; (800a4a4 <_dtoa_r+0x61c>)
 800a1f4:	b957      	cbnz	r7, 800a20c <_dtoa_r+0x384>
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f7f6 fb45 	bl	800088c <__aeabi_ddiv>
 800a202:	4682      	mov	sl, r0
 800a204:	468b      	mov	fp, r1
 800a206:	e028      	b.n	800a25a <_dtoa_r+0x3d2>
 800a208:	2502      	movs	r5, #2
 800a20a:	e7f2      	b.n	800a1f2 <_dtoa_r+0x36a>
 800a20c:	07f9      	lsls	r1, r7, #31
 800a20e:	d508      	bpl.n	800a222 <_dtoa_r+0x39a>
 800a210:	4640      	mov	r0, r8
 800a212:	4649      	mov	r1, r9
 800a214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a218:	f7f6 fa0e 	bl	8000638 <__aeabi_dmul>
 800a21c:	3501      	adds	r5, #1
 800a21e:	4680      	mov	r8, r0
 800a220:	4689      	mov	r9, r1
 800a222:	107f      	asrs	r7, r7, #1
 800a224:	3608      	adds	r6, #8
 800a226:	e7e5      	b.n	800a1f4 <_dtoa_r+0x36c>
 800a228:	f000 809b 	beq.w	800a362 <_dtoa_r+0x4da>
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	4f9d      	ldr	r7, [pc, #628]	; (800a4a4 <_dtoa_r+0x61c>)
 800a230:	425e      	negs	r6, r3
 800a232:	4b9b      	ldr	r3, [pc, #620]	; (800a4a0 <_dtoa_r+0x618>)
 800a234:	f006 020f 	and.w	r2, r6, #15
 800a238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	ec51 0b19 	vmov	r0, r1, d9
 800a244:	f7f6 f9f8 	bl	8000638 <__aeabi_dmul>
 800a248:	1136      	asrs	r6, r6, #4
 800a24a:	4682      	mov	sl, r0
 800a24c:	468b      	mov	fp, r1
 800a24e:	2300      	movs	r3, #0
 800a250:	2502      	movs	r5, #2
 800a252:	2e00      	cmp	r6, #0
 800a254:	d17a      	bne.n	800a34c <_dtoa_r+0x4c4>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1d3      	bne.n	800a202 <_dtoa_r+0x37a>
 800a25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 8082 	beq.w	800a366 <_dtoa_r+0x4de>
 800a262:	4b91      	ldr	r3, [pc, #580]	; (800a4a8 <_dtoa_r+0x620>)
 800a264:	2200      	movs	r2, #0
 800a266:	4650      	mov	r0, sl
 800a268:	4659      	mov	r1, fp
 800a26a:	f7f6 fc57 	bl	8000b1c <__aeabi_dcmplt>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d079      	beq.n	800a366 <_dtoa_r+0x4de>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d076      	beq.n	800a366 <_dtoa_r+0x4de>
 800a278:	9b02      	ldr	r3, [sp, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd36      	ble.n	800a2ec <_dtoa_r+0x464>
 800a27e:	9b00      	ldr	r3, [sp, #0]
 800a280:	4650      	mov	r0, sl
 800a282:	4659      	mov	r1, fp
 800a284:	1e5f      	subs	r7, r3, #1
 800a286:	2200      	movs	r2, #0
 800a288:	4b88      	ldr	r3, [pc, #544]	; (800a4ac <_dtoa_r+0x624>)
 800a28a:	f7f6 f9d5 	bl	8000638 <__aeabi_dmul>
 800a28e:	9e02      	ldr	r6, [sp, #8]
 800a290:	4682      	mov	sl, r0
 800a292:	468b      	mov	fp, r1
 800a294:	3501      	adds	r5, #1
 800a296:	4628      	mov	r0, r5
 800a298:	f7f6 f964 	bl	8000564 <__aeabi_i2d>
 800a29c:	4652      	mov	r2, sl
 800a29e:	465b      	mov	r3, fp
 800a2a0:	f7f6 f9ca 	bl	8000638 <__aeabi_dmul>
 800a2a4:	4b82      	ldr	r3, [pc, #520]	; (800a4b0 <_dtoa_r+0x628>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f7f6 f810 	bl	80002cc <__adddf3>
 800a2ac:	46d0      	mov	r8, sl
 800a2ae:	46d9      	mov	r9, fp
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	d158      	bne.n	800a36c <_dtoa_r+0x4e4>
 800a2ba:	4b7e      	ldr	r3, [pc, #504]	; (800a4b4 <_dtoa_r+0x62c>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f6 f801 	bl	80002c8 <__aeabi_dsub>
 800a2c6:	4652      	mov	r2, sl
 800a2c8:	465b      	mov	r3, fp
 800a2ca:	4680      	mov	r8, r0
 800a2cc:	4689      	mov	r9, r1
 800a2ce:	f7f6 fc43 	bl	8000b58 <__aeabi_dcmpgt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f040 8295 	bne.w	800a802 <_dtoa_r+0x97a>
 800a2d8:	4652      	mov	r2, sl
 800a2da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f6 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f040 8289 	bne.w	800a7fe <_dtoa_r+0x976>
 800a2ec:	ec5b ab19 	vmov	sl, fp, d9
 800a2f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f2c0 8148 	blt.w	800a588 <_dtoa_r+0x700>
 800a2f8:	9a00      	ldr	r2, [sp, #0]
 800a2fa:	2a0e      	cmp	r2, #14
 800a2fc:	f300 8144 	bgt.w	800a588 <_dtoa_r+0x700>
 800a300:	4b67      	ldr	r3, [pc, #412]	; (800a4a0 <_dtoa_r+0x618>)
 800a302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f280 80d5 	bge.w	800a4bc <_dtoa_r+0x634>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f300 80d1 	bgt.w	800a4bc <_dtoa_r+0x634>
 800a31a:	f040 826f 	bne.w	800a7fc <_dtoa_r+0x974>
 800a31e:	4b65      	ldr	r3, [pc, #404]	; (800a4b4 <_dtoa_r+0x62c>)
 800a320:	2200      	movs	r2, #0
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f6 f987 	bl	8000638 <__aeabi_dmul>
 800a32a:	4652      	mov	r2, sl
 800a32c:	465b      	mov	r3, fp
 800a32e:	f7f6 fc09 	bl	8000b44 <__aeabi_dcmpge>
 800a332:	9e03      	ldr	r6, [sp, #12]
 800a334:	4637      	mov	r7, r6
 800a336:	2800      	cmp	r0, #0
 800a338:	f040 8245 	bne.w	800a7c6 <_dtoa_r+0x93e>
 800a33c:	9d01      	ldr	r5, [sp, #4]
 800a33e:	2331      	movs	r3, #49	; 0x31
 800a340:	f805 3b01 	strb.w	r3, [r5], #1
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	e240      	b.n	800a7ce <_dtoa_r+0x946>
 800a34c:	07f2      	lsls	r2, r6, #31
 800a34e:	d505      	bpl.n	800a35c <_dtoa_r+0x4d4>
 800a350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	3501      	adds	r5, #1
 800a35a:	2301      	movs	r3, #1
 800a35c:	1076      	asrs	r6, r6, #1
 800a35e:	3708      	adds	r7, #8
 800a360:	e777      	b.n	800a252 <_dtoa_r+0x3ca>
 800a362:	2502      	movs	r5, #2
 800a364:	e779      	b.n	800a25a <_dtoa_r+0x3d2>
 800a366:	9f00      	ldr	r7, [sp, #0]
 800a368:	9e03      	ldr	r6, [sp, #12]
 800a36a:	e794      	b.n	800a296 <_dtoa_r+0x40e>
 800a36c:	9901      	ldr	r1, [sp, #4]
 800a36e:	4b4c      	ldr	r3, [pc, #304]	; (800a4a0 <_dtoa_r+0x618>)
 800a370:	4431      	add	r1, r6
 800a372:	910d      	str	r1, [sp, #52]	; 0x34
 800a374:	9908      	ldr	r1, [sp, #32]
 800a376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a37a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a37e:	2900      	cmp	r1, #0
 800a380:	d043      	beq.n	800a40a <_dtoa_r+0x582>
 800a382:	494d      	ldr	r1, [pc, #308]	; (800a4b8 <_dtoa_r+0x630>)
 800a384:	2000      	movs	r0, #0
 800a386:	f7f6 fa81 	bl	800088c <__aeabi_ddiv>
 800a38a:	4652      	mov	r2, sl
 800a38c:	465b      	mov	r3, fp
 800a38e:	f7f5 ff9b 	bl	80002c8 <__aeabi_dsub>
 800a392:	9d01      	ldr	r5, [sp, #4]
 800a394:	4682      	mov	sl, r0
 800a396:	468b      	mov	fp, r1
 800a398:	4649      	mov	r1, r9
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7f6 fbfc 	bl	8000b98 <__aeabi_d2iz>
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	f7f6 f8df 	bl	8000564 <__aeabi_i2d>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f5 ff8b 	bl	80002c8 <__aeabi_dsub>
 800a3b2:	3630      	adds	r6, #48	; 0x30
 800a3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	465b      	mov	r3, fp
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4689      	mov	r9, r1
 800a3c0:	f7f6 fbac 	bl	8000b1c <__aeabi_dcmplt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d163      	bne.n	800a490 <_dtoa_r+0x608>
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	4936      	ldr	r1, [pc, #216]	; (800a4a8 <_dtoa_r+0x620>)
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7f5 ff7a 	bl	80002c8 <__aeabi_dsub>
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	465b      	mov	r3, fp
 800a3d8:	f7f6 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f040 80b5 	bne.w	800a54c <_dtoa_r+0x6c4>
 800a3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	d081      	beq.n	800a2ec <_dtoa_r+0x464>
 800a3e8:	4b30      	ldr	r3, [pc, #192]	; (800a4ac <_dtoa_r+0x624>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	f7f6 f922 	bl	8000638 <__aeabi_dmul>
 800a3f4:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <_dtoa_r+0x624>)
 800a3f6:	4682      	mov	sl, r0
 800a3f8:	468b      	mov	fp, r1
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	2200      	movs	r2, #0
 800a400:	f7f6 f91a 	bl	8000638 <__aeabi_dmul>
 800a404:	4680      	mov	r8, r0
 800a406:	4689      	mov	r9, r1
 800a408:	e7c6      	b.n	800a398 <_dtoa_r+0x510>
 800a40a:	4650      	mov	r0, sl
 800a40c:	4659      	mov	r1, fp
 800a40e:	f7f6 f913 	bl	8000638 <__aeabi_dmul>
 800a412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a414:	9d01      	ldr	r5, [sp, #4]
 800a416:	930f      	str	r3, [sp, #60]	; 0x3c
 800a418:	4682      	mov	sl, r0
 800a41a:	468b      	mov	fp, r1
 800a41c:	4649      	mov	r1, r9
 800a41e:	4640      	mov	r0, r8
 800a420:	f7f6 fbba 	bl	8000b98 <__aeabi_d2iz>
 800a424:	4606      	mov	r6, r0
 800a426:	f7f6 f89d 	bl	8000564 <__aeabi_i2d>
 800a42a:	3630      	adds	r6, #48	; 0x30
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4640      	mov	r0, r8
 800a432:	4649      	mov	r1, r9
 800a434:	f7f5 ff48 	bl	80002c8 <__aeabi_dsub>
 800a438:	f805 6b01 	strb.w	r6, [r5], #1
 800a43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a43e:	429d      	cmp	r5, r3
 800a440:	4680      	mov	r8, r0
 800a442:	4689      	mov	r9, r1
 800a444:	f04f 0200 	mov.w	r2, #0
 800a448:	d124      	bne.n	800a494 <_dtoa_r+0x60c>
 800a44a:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <_dtoa_r+0x630>)
 800a44c:	4650      	mov	r0, sl
 800a44e:	4659      	mov	r1, fp
 800a450:	f7f5 ff3c 	bl	80002cc <__adddf3>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4640      	mov	r0, r8
 800a45a:	4649      	mov	r1, r9
 800a45c:	f7f6 fb7c 	bl	8000b58 <__aeabi_dcmpgt>
 800a460:	2800      	cmp	r0, #0
 800a462:	d173      	bne.n	800a54c <_dtoa_r+0x6c4>
 800a464:	4652      	mov	r2, sl
 800a466:	465b      	mov	r3, fp
 800a468:	4913      	ldr	r1, [pc, #76]	; (800a4b8 <_dtoa_r+0x630>)
 800a46a:	2000      	movs	r0, #0
 800a46c:	f7f5 ff2c 	bl	80002c8 <__aeabi_dsub>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4640      	mov	r0, r8
 800a476:	4649      	mov	r1, r9
 800a478:	f7f6 fb50 	bl	8000b1c <__aeabi_dcmplt>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f43f af35 	beq.w	800a2ec <_dtoa_r+0x464>
 800a482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a484:	1e6b      	subs	r3, r5, #1
 800a486:	930f      	str	r3, [sp, #60]	; 0x3c
 800a488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a48c:	2b30      	cmp	r3, #48	; 0x30
 800a48e:	d0f8      	beq.n	800a482 <_dtoa_r+0x5fa>
 800a490:	9700      	str	r7, [sp, #0]
 800a492:	e049      	b.n	800a528 <_dtoa_r+0x6a0>
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <_dtoa_r+0x624>)
 800a496:	f7f6 f8cf 	bl	8000638 <__aeabi_dmul>
 800a49a:	4680      	mov	r8, r0
 800a49c:	4689      	mov	r9, r1
 800a49e:	e7bd      	b.n	800a41c <_dtoa_r+0x594>
 800a4a0:	0800d6d8 	.word	0x0800d6d8
 800a4a4:	0800d6b0 	.word	0x0800d6b0
 800a4a8:	3ff00000 	.word	0x3ff00000
 800a4ac:	40240000 	.word	0x40240000
 800a4b0:	401c0000 	.word	0x401c0000
 800a4b4:	40140000 	.word	0x40140000
 800a4b8:	3fe00000 	.word	0x3fe00000
 800a4bc:	9d01      	ldr	r5, [sp, #4]
 800a4be:	4656      	mov	r6, sl
 800a4c0:	465f      	mov	r7, fp
 800a4c2:	4642      	mov	r2, r8
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	f7f6 f9df 	bl	800088c <__aeabi_ddiv>
 800a4ce:	f7f6 fb63 	bl	8000b98 <__aeabi_d2iz>
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	f7f6 f846 	bl	8000564 <__aeabi_i2d>
 800a4d8:	4642      	mov	r2, r8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	f7f6 f8ac 	bl	8000638 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a4ec:	f7f5 feec 	bl	80002c8 <__aeabi_dsub>
 800a4f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a4f4:	9e01      	ldr	r6, [sp, #4]
 800a4f6:	9f03      	ldr	r7, [sp, #12]
 800a4f8:	1bae      	subs	r6, r5, r6
 800a4fa:	42b7      	cmp	r7, r6
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	d135      	bne.n	800a56e <_dtoa_r+0x6e6>
 800a502:	f7f5 fee3 	bl	80002cc <__adddf3>
 800a506:	4642      	mov	r2, r8
 800a508:	464b      	mov	r3, r9
 800a50a:	4606      	mov	r6, r0
 800a50c:	460f      	mov	r7, r1
 800a50e:	f7f6 fb23 	bl	8000b58 <__aeabi_dcmpgt>
 800a512:	b9d0      	cbnz	r0, 800a54a <_dtoa_r+0x6c2>
 800a514:	4642      	mov	r2, r8
 800a516:	464b      	mov	r3, r9
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f6 faf4 	bl	8000b08 <__aeabi_dcmpeq>
 800a520:	b110      	cbz	r0, 800a528 <_dtoa_r+0x6a0>
 800a522:	f01a 0f01 	tst.w	sl, #1
 800a526:	d110      	bne.n	800a54a <_dtoa_r+0x6c2>
 800a528:	4620      	mov	r0, r4
 800a52a:	ee18 1a10 	vmov	r1, s16
 800a52e:	f000 fe87 	bl	800b240 <_Bfree>
 800a532:	2300      	movs	r3, #0
 800a534:	9800      	ldr	r0, [sp, #0]
 800a536:	702b      	strb	r3, [r5, #0]
 800a538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53a:	3001      	adds	r0, #1
 800a53c:	6018      	str	r0, [r3, #0]
 800a53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a540:	2b00      	cmp	r3, #0
 800a542:	f43f acf1 	beq.w	8009f28 <_dtoa_r+0xa0>
 800a546:	601d      	str	r5, [r3, #0]
 800a548:	e4ee      	b.n	8009f28 <_dtoa_r+0xa0>
 800a54a:	9f00      	ldr	r7, [sp, #0]
 800a54c:	462b      	mov	r3, r5
 800a54e:	461d      	mov	r5, r3
 800a550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a554:	2a39      	cmp	r2, #57	; 0x39
 800a556:	d106      	bne.n	800a566 <_dtoa_r+0x6de>
 800a558:	9a01      	ldr	r2, [sp, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d1f7      	bne.n	800a54e <_dtoa_r+0x6c6>
 800a55e:	9901      	ldr	r1, [sp, #4]
 800a560:	2230      	movs	r2, #48	; 0x30
 800a562:	3701      	adds	r7, #1
 800a564:	700a      	strb	r2, [r1, #0]
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	3201      	adds	r2, #1
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e790      	b.n	800a490 <_dtoa_r+0x608>
 800a56e:	4ba6      	ldr	r3, [pc, #664]	; (800a808 <_dtoa_r+0x980>)
 800a570:	2200      	movs	r2, #0
 800a572:	f7f6 f861 	bl	8000638 <__aeabi_dmul>
 800a576:	2200      	movs	r2, #0
 800a578:	2300      	movs	r3, #0
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	f7f6 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 800a582:	2800      	cmp	r0, #0
 800a584:	d09d      	beq.n	800a4c2 <_dtoa_r+0x63a>
 800a586:	e7cf      	b.n	800a528 <_dtoa_r+0x6a0>
 800a588:	9a08      	ldr	r2, [sp, #32]
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	f000 80d7 	beq.w	800a73e <_dtoa_r+0x8b6>
 800a590:	9a06      	ldr	r2, [sp, #24]
 800a592:	2a01      	cmp	r2, #1
 800a594:	f300 80ba 	bgt.w	800a70c <_dtoa_r+0x884>
 800a598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	f000 80b2 	beq.w	800a704 <_dtoa_r+0x87c>
 800a5a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5a4:	9e07      	ldr	r6, [sp, #28]
 800a5a6:	9d04      	ldr	r5, [sp, #16]
 800a5a8:	9a04      	ldr	r2, [sp, #16]
 800a5aa:	441a      	add	r2, r3
 800a5ac:	9204      	str	r2, [sp, #16]
 800a5ae:	9a05      	ldr	r2, [sp, #20]
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	441a      	add	r2, r3
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	9205      	str	r2, [sp, #20]
 800a5b8:	f000 ff44 	bl	800b444 <__i2b>
 800a5bc:	4607      	mov	r7, r0
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	dd0c      	ble.n	800a5dc <_dtoa_r+0x754>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd09      	ble.n	800a5dc <_dtoa_r+0x754>
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	9a04      	ldr	r2, [sp, #16]
 800a5cc:	bfa8      	it	ge
 800a5ce:	462b      	movge	r3, r5
 800a5d0:	1ad2      	subs	r2, r2, r3
 800a5d2:	9204      	str	r2, [sp, #16]
 800a5d4:	9a05      	ldr	r2, [sp, #20]
 800a5d6:	1aed      	subs	r5, r5, r3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	9b07      	ldr	r3, [sp, #28]
 800a5de:	b31b      	cbz	r3, 800a628 <_dtoa_r+0x7a0>
 800a5e0:	9b08      	ldr	r3, [sp, #32]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80af 	beq.w	800a746 <_dtoa_r+0x8be>
 800a5e8:	2e00      	cmp	r6, #0
 800a5ea:	dd13      	ble.n	800a614 <_dtoa_r+0x78c>
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 ffe7 	bl	800b5c4 <__pow5mult>
 800a5f6:	ee18 2a10 	vmov	r2, s16
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 ff36 	bl	800b470 <__multiply>
 800a604:	ee18 1a10 	vmov	r1, s16
 800a608:	4680      	mov	r8, r0
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fe18 	bl	800b240 <_Bfree>
 800a610:	ee08 8a10 	vmov	s16, r8
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	1b9a      	subs	r2, r3, r6
 800a618:	d006      	beq.n	800a628 <_dtoa_r+0x7a0>
 800a61a:	ee18 1a10 	vmov	r1, s16
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 ffd0 	bl	800b5c4 <__pow5mult>
 800a624:	ee08 0a10 	vmov	s16, r0
 800a628:	2101      	movs	r1, #1
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 ff0a 	bl	800b444 <__i2b>
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	2b00      	cmp	r3, #0
 800a634:	4606      	mov	r6, r0
 800a636:	f340 8088 	ble.w	800a74a <_dtoa_r+0x8c2>
 800a63a:	461a      	mov	r2, r3
 800a63c:	4601      	mov	r1, r0
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 ffc0 	bl	800b5c4 <__pow5mult>
 800a644:	9b06      	ldr	r3, [sp, #24]
 800a646:	2b01      	cmp	r3, #1
 800a648:	4606      	mov	r6, r0
 800a64a:	f340 8081 	ble.w	800a750 <_dtoa_r+0x8c8>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	6933      	ldr	r3, [r6, #16]
 800a654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a658:	6918      	ldr	r0, [r3, #16]
 800a65a:	f000 fea3 	bl	800b3a4 <__hi0bits>
 800a65e:	f1c0 0020 	rsb	r0, r0, #32
 800a662:	9b05      	ldr	r3, [sp, #20]
 800a664:	4418      	add	r0, r3
 800a666:	f010 001f 	ands.w	r0, r0, #31
 800a66a:	f000 8092 	beq.w	800a792 <_dtoa_r+0x90a>
 800a66e:	f1c0 0320 	rsb	r3, r0, #32
 800a672:	2b04      	cmp	r3, #4
 800a674:	f340 808a 	ble.w	800a78c <_dtoa_r+0x904>
 800a678:	f1c0 001c 	rsb	r0, r0, #28
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	4403      	add	r3, r0
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	4403      	add	r3, r0
 800a686:	4405      	add	r5, r0
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	9b04      	ldr	r3, [sp, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd07      	ble.n	800a6a0 <_dtoa_r+0x818>
 800a690:	ee18 1a10 	vmov	r1, s16
 800a694:	461a      	mov	r2, r3
 800a696:	4620      	mov	r0, r4
 800a698:	f000 ffee 	bl	800b678 <__lshift>
 800a69c:	ee08 0a10 	vmov	s16, r0
 800a6a0:	9b05      	ldr	r3, [sp, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd05      	ble.n	800a6b2 <_dtoa_r+0x82a>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 ffe4 	bl	800b678 <__lshift>
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d06e      	beq.n	800a796 <_dtoa_r+0x90e>
 800a6b8:	ee18 0a10 	vmov	r0, s16
 800a6bc:	4631      	mov	r1, r6
 800a6be:	f001 f84b 	bl	800b758 <__mcmp>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	da67      	bge.n	800a796 <_dtoa_r+0x90e>
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	ee18 1a10 	vmov	r1, s16
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 fdd5 	bl	800b284 <__multadd>
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	ee08 0a10 	vmov	s16, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 81b1 	beq.w	800aa48 <_dtoa_r+0xbc0>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fdc9 	bl	800b284 <__multadd>
 800a6f2:	9b02      	ldr	r3, [sp, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f300 808e 	bgt.w	800a818 <_dtoa_r+0x990>
 800a6fc:	9b06      	ldr	r3, [sp, #24]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc51      	bgt.n	800a7a6 <_dtoa_r+0x91e>
 800a702:	e089      	b.n	800a818 <_dtoa_r+0x990>
 800a704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a70a:	e74b      	b.n	800a5a4 <_dtoa_r+0x71c>
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	1e5e      	subs	r6, r3, #1
 800a710:	9b07      	ldr	r3, [sp, #28]
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfbf      	itttt	lt
 800a716:	9b07      	ldrlt	r3, [sp, #28]
 800a718:	9607      	strlt	r6, [sp, #28]
 800a71a:	1af2      	sublt	r2, r6, r3
 800a71c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a71e:	bfb6      	itet	lt
 800a720:	189b      	addlt	r3, r3, r2
 800a722:	1b9e      	subge	r6, r3, r6
 800a724:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	bfb8      	it	lt
 800a72a:	2600      	movlt	r6, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb7      	itett	lt
 800a730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a738:	1a9d      	sublt	r5, r3, r2
 800a73a:	2300      	movlt	r3, #0
 800a73c:	e734      	b.n	800a5a8 <_dtoa_r+0x720>
 800a73e:	9e07      	ldr	r6, [sp, #28]
 800a740:	9d04      	ldr	r5, [sp, #16]
 800a742:	9f08      	ldr	r7, [sp, #32]
 800a744:	e73b      	b.n	800a5be <_dtoa_r+0x736>
 800a746:	9a07      	ldr	r2, [sp, #28]
 800a748:	e767      	b.n	800a61a <_dtoa_r+0x792>
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	dc18      	bgt.n	800a782 <_dtoa_r+0x8fa>
 800a750:	f1ba 0f00 	cmp.w	sl, #0
 800a754:	d115      	bne.n	800a782 <_dtoa_r+0x8fa>
 800a756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a75a:	b993      	cbnz	r3, 800a782 <_dtoa_r+0x8fa>
 800a75c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a760:	0d1b      	lsrs	r3, r3, #20
 800a762:	051b      	lsls	r3, r3, #20
 800a764:	b183      	cbz	r3, 800a788 <_dtoa_r+0x900>
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	3301      	adds	r3, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	9b05      	ldr	r3, [sp, #20]
 800a76e:	3301      	adds	r3, #1
 800a770:	9305      	str	r3, [sp, #20]
 800a772:	f04f 0801 	mov.w	r8, #1
 800a776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f47f af6a 	bne.w	800a652 <_dtoa_r+0x7ca>
 800a77e:	2001      	movs	r0, #1
 800a780:	e76f      	b.n	800a662 <_dtoa_r+0x7da>
 800a782:	f04f 0800 	mov.w	r8, #0
 800a786:	e7f6      	b.n	800a776 <_dtoa_r+0x8ee>
 800a788:	4698      	mov	r8, r3
 800a78a:	e7f4      	b.n	800a776 <_dtoa_r+0x8ee>
 800a78c:	f43f af7d 	beq.w	800a68a <_dtoa_r+0x802>
 800a790:	4618      	mov	r0, r3
 800a792:	301c      	adds	r0, #28
 800a794:	e772      	b.n	800a67c <_dtoa_r+0x7f4>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dc37      	bgt.n	800a80c <_dtoa_r+0x984>
 800a79c:	9b06      	ldr	r3, [sp, #24]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	dd34      	ble.n	800a80c <_dtoa_r+0x984>
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	b96b      	cbnz	r3, 800a7c6 <_dtoa_r+0x93e>
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	2205      	movs	r2, #5
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fd68 	bl	800b284 <__multadd>
 800a7b4:	4601      	mov	r1, r0
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	ee18 0a10 	vmov	r0, s16
 800a7bc:	f000 ffcc 	bl	800b758 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f73f adbb 	bgt.w	800a33c <_dtoa_r+0x4b4>
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	9d01      	ldr	r5, [sp, #4]
 800a7ca:	43db      	mvns	r3, r3
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	f04f 0800 	mov.w	r8, #0
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fd33 	bl	800b240 <_Bfree>
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	f43f aea4 	beq.w	800a528 <_dtoa_r+0x6a0>
 800a7e0:	f1b8 0f00 	cmp.w	r8, #0
 800a7e4:	d005      	beq.n	800a7f2 <_dtoa_r+0x96a>
 800a7e6:	45b8      	cmp	r8, r7
 800a7e8:	d003      	beq.n	800a7f2 <_dtoa_r+0x96a>
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fd27 	bl	800b240 <_Bfree>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fd23 	bl	800b240 <_Bfree>
 800a7fa:	e695      	b.n	800a528 <_dtoa_r+0x6a0>
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	4637      	mov	r7, r6
 800a800:	e7e1      	b.n	800a7c6 <_dtoa_r+0x93e>
 800a802:	9700      	str	r7, [sp, #0]
 800a804:	4637      	mov	r7, r6
 800a806:	e599      	b.n	800a33c <_dtoa_r+0x4b4>
 800a808:	40240000 	.word	0x40240000
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80ca 	beq.w	800a9a8 <_dtoa_r+0xb20>
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	2d00      	cmp	r5, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x9a0>
 800a81c:	4639      	mov	r1, r7
 800a81e:	462a      	mov	r2, r5
 800a820:	4620      	mov	r0, r4
 800a822:	f000 ff29 	bl	800b678 <__lshift>
 800a826:	4607      	mov	r7, r0
 800a828:	f1b8 0f00 	cmp.w	r8, #0
 800a82c:	d05b      	beq.n	800a8e6 <_dtoa_r+0xa5e>
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fcc5 	bl	800b1c0 <_Balloc>
 800a836:	4605      	mov	r5, r0
 800a838:	b928      	cbnz	r0, 800a846 <_dtoa_r+0x9be>
 800a83a:	4b87      	ldr	r3, [pc, #540]	; (800aa58 <_dtoa_r+0xbd0>)
 800a83c:	4602      	mov	r2, r0
 800a83e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a842:	f7ff bb3b 	b.w	8009ebc <_dtoa_r+0x34>
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	3202      	adds	r2, #2
 800a84a:	0092      	lsls	r2, r2, #2
 800a84c:	f107 010c 	add.w	r1, r7, #12
 800a850:	300c      	adds	r0, #12
 800a852:	f000 fca7 	bl	800b1a4 <memcpy>
 800a856:	2201      	movs	r2, #1
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 ff0c 	bl	800b678 <__lshift>
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	f103 0901 	add.w	r9, r3, #1
 800a866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a86a:	4413      	add	r3, r2
 800a86c:	9305      	str	r3, [sp, #20]
 800a86e:	f00a 0301 	and.w	r3, sl, #1
 800a872:	46b8      	mov	r8, r7
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	4607      	mov	r7, r0
 800a878:	4631      	mov	r1, r6
 800a87a:	ee18 0a10 	vmov	r0, s16
 800a87e:	f7ff fa75 	bl	8009d6c <quorem>
 800a882:	4641      	mov	r1, r8
 800a884:	9002      	str	r0, [sp, #8]
 800a886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a88a:	ee18 0a10 	vmov	r0, s16
 800a88e:	f000 ff63 	bl	800b758 <__mcmp>
 800a892:	463a      	mov	r2, r7
 800a894:	9003      	str	r0, [sp, #12]
 800a896:	4631      	mov	r1, r6
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 ff79 	bl	800b790 <__mdiff>
 800a89e:	68c2      	ldr	r2, [r0, #12]
 800a8a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	bb02      	cbnz	r2, 800a8ea <_dtoa_r+0xa62>
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	ee18 0a10 	vmov	r0, s16
 800a8ae:	f000 ff53 	bl	800b758 <__mcmp>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	9207      	str	r2, [sp, #28]
 800a8ba:	f000 fcc1 	bl	800b240 <_Bfree>
 800a8be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a8c2:	ea43 0102 	orr.w	r1, r3, r2
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	464d      	mov	r5, r9
 800a8cc:	d10f      	bne.n	800a8ee <_dtoa_r+0xa66>
 800a8ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8d2:	d02a      	beq.n	800a92a <_dtoa_r+0xaa2>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dd02      	ble.n	800a8e0 <_dtoa_r+0xa58>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a8e0:	f88b a000 	strb.w	sl, [fp]
 800a8e4:	e775      	b.n	800a7d2 <_dtoa_r+0x94a>
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	e7ba      	b.n	800a860 <_dtoa_r+0x9d8>
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	e7e2      	b.n	800a8b4 <_dtoa_r+0xa2c>
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	db04      	blt.n	800a8fe <_dtoa_r+0xa76>
 800a8f4:	9906      	ldr	r1, [sp, #24]
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	9904      	ldr	r1, [sp, #16]
 800a8fa:	430b      	orrs	r3, r1
 800a8fc:	d122      	bne.n	800a944 <_dtoa_r+0xabc>
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	ddee      	ble.n	800a8e0 <_dtoa_r+0xa58>
 800a902:	ee18 1a10 	vmov	r1, s16
 800a906:	2201      	movs	r2, #1
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 feb5 	bl	800b678 <__lshift>
 800a90e:	4631      	mov	r1, r6
 800a910:	ee08 0a10 	vmov	s16, r0
 800a914:	f000 ff20 	bl	800b758 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	dc03      	bgt.n	800a924 <_dtoa_r+0xa9c>
 800a91c:	d1e0      	bne.n	800a8e0 <_dtoa_r+0xa58>
 800a91e:	f01a 0f01 	tst.w	sl, #1
 800a922:	d0dd      	beq.n	800a8e0 <_dtoa_r+0xa58>
 800a924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a928:	d1d7      	bne.n	800a8da <_dtoa_r+0xa52>
 800a92a:	2339      	movs	r3, #57	; 0x39
 800a92c:	f88b 3000 	strb.w	r3, [fp]
 800a930:	462b      	mov	r3, r5
 800a932:	461d      	mov	r5, r3
 800a934:	3b01      	subs	r3, #1
 800a936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a93a:	2a39      	cmp	r2, #57	; 0x39
 800a93c:	d071      	beq.n	800aa22 <_dtoa_r+0xb9a>
 800a93e:	3201      	adds	r2, #1
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	e746      	b.n	800a7d2 <_dtoa_r+0x94a>
 800a944:	2a00      	cmp	r2, #0
 800a946:	dd07      	ble.n	800a958 <_dtoa_r+0xad0>
 800a948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a94c:	d0ed      	beq.n	800a92a <_dtoa_r+0xaa2>
 800a94e:	f10a 0301 	add.w	r3, sl, #1
 800a952:	f88b 3000 	strb.w	r3, [fp]
 800a956:	e73c      	b.n	800a7d2 <_dtoa_r+0x94a>
 800a958:	9b05      	ldr	r3, [sp, #20]
 800a95a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a95e:	4599      	cmp	r9, r3
 800a960:	d047      	beq.n	800a9f2 <_dtoa_r+0xb6a>
 800a962:	ee18 1a10 	vmov	r1, s16
 800a966:	2300      	movs	r3, #0
 800a968:	220a      	movs	r2, #10
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fc8a 	bl	800b284 <__multadd>
 800a970:	45b8      	cmp	r8, r7
 800a972:	ee08 0a10 	vmov	s16, r0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	f04f 020a 	mov.w	r2, #10
 800a97e:	4641      	mov	r1, r8
 800a980:	4620      	mov	r0, r4
 800a982:	d106      	bne.n	800a992 <_dtoa_r+0xb0a>
 800a984:	f000 fc7e 	bl	800b284 <__multadd>
 800a988:	4680      	mov	r8, r0
 800a98a:	4607      	mov	r7, r0
 800a98c:	f109 0901 	add.w	r9, r9, #1
 800a990:	e772      	b.n	800a878 <_dtoa_r+0x9f0>
 800a992:	f000 fc77 	bl	800b284 <__multadd>
 800a996:	4639      	mov	r1, r7
 800a998:	4680      	mov	r8, r0
 800a99a:	2300      	movs	r3, #0
 800a99c:	220a      	movs	r2, #10
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 fc70 	bl	800b284 <__multadd>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	e7f1      	b.n	800a98c <_dtoa_r+0xb04>
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	9302      	str	r3, [sp, #8]
 800a9ac:	9d01      	ldr	r5, [sp, #4]
 800a9ae:	ee18 0a10 	vmov	r0, s16
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	f7ff f9da 	bl	8009d6c <quorem>
 800a9b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	f805 ab01 	strb.w	sl, [r5], #1
 800a9c2:	1aea      	subs	r2, r5, r3
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	dd09      	ble.n	800a9de <_dtoa_r+0xb56>
 800a9ca:	ee18 1a10 	vmov	r1, s16
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fc56 	bl	800b284 <__multadd>
 800a9d8:	ee08 0a10 	vmov	s16, r0
 800a9dc:	e7e7      	b.n	800a9ae <_dtoa_r+0xb26>
 800a9de:	9b02      	ldr	r3, [sp, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfc8      	it	gt
 800a9e4:	461d      	movgt	r5, r3
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	bfd8      	it	le
 800a9ea:	2501      	movle	r5, #1
 800a9ec:	441d      	add	r5, r3
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	ee18 1a10 	vmov	r1, s16
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fe3d 	bl	800b678 <__lshift>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	ee08 0a10 	vmov	s16, r0
 800aa04:	f000 fea8 	bl	800b758 <__mcmp>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	dc91      	bgt.n	800a930 <_dtoa_r+0xaa8>
 800aa0c:	d102      	bne.n	800aa14 <_dtoa_r+0xb8c>
 800aa0e:	f01a 0f01 	tst.w	sl, #1
 800aa12:	d18d      	bne.n	800a930 <_dtoa_r+0xaa8>
 800aa14:	462b      	mov	r3, r5
 800aa16:	461d      	mov	r5, r3
 800aa18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1c:	2a30      	cmp	r2, #48	; 0x30
 800aa1e:	d0fa      	beq.n	800aa16 <_dtoa_r+0xb8e>
 800aa20:	e6d7      	b.n	800a7d2 <_dtoa_r+0x94a>
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d184      	bne.n	800a932 <_dtoa_r+0xaaa>
 800aa28:	9b00      	ldr	r3, [sp, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	2331      	movs	r3, #49	; 0x31
 800aa30:	7013      	strb	r3, [r2, #0]
 800aa32:	e6ce      	b.n	800a7d2 <_dtoa_r+0x94a>
 800aa34:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <_dtoa_r+0xbd4>)
 800aa36:	f7ff ba95 	b.w	8009f64 <_dtoa_r+0xdc>
 800aa3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f47f aa6e 	bne.w	8009f1e <_dtoa_r+0x96>
 800aa42:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <_dtoa_r+0xbd8>)
 800aa44:	f7ff ba8e 	b.w	8009f64 <_dtoa_r+0xdc>
 800aa48:	9b02      	ldr	r3, [sp, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dcae      	bgt.n	800a9ac <_dtoa_r+0xb24>
 800aa4e:	9b06      	ldr	r3, [sp, #24]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	f73f aea8 	bgt.w	800a7a6 <_dtoa_r+0x91e>
 800aa56:	e7a9      	b.n	800a9ac <_dtoa_r+0xb24>
 800aa58:	0800d5c8 	.word	0x0800d5c8
 800aa5c:	0800d7c1 	.word	0x0800d7c1
 800aa60:	0800d549 	.word	0x0800d549

0800aa64 <rshift>:
 800aa64:	6903      	ldr	r3, [r0, #16]
 800aa66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa72:	f100 0414 	add.w	r4, r0, #20
 800aa76:	dd45      	ble.n	800ab04 <rshift+0xa0>
 800aa78:	f011 011f 	ands.w	r1, r1, #31
 800aa7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa84:	d10c      	bne.n	800aaa0 <rshift+0x3c>
 800aa86:	f100 0710 	add.w	r7, r0, #16
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	42b1      	cmp	r1, r6
 800aa8e:	d334      	bcc.n	800aafa <rshift+0x96>
 800aa90:	1a9b      	subs	r3, r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	1eea      	subs	r2, r5, #3
 800aa96:	4296      	cmp	r6, r2
 800aa98:	bf38      	it	cc
 800aa9a:	2300      	movcc	r3, #0
 800aa9c:	4423      	add	r3, r4
 800aa9e:	e015      	b.n	800aacc <rshift+0x68>
 800aaa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aaa4:	f1c1 0820 	rsb	r8, r1, #32
 800aaa8:	40cf      	lsrs	r7, r1
 800aaaa:	f105 0e04 	add.w	lr, r5, #4
 800aaae:	46a1      	mov	r9, r4
 800aab0:	4576      	cmp	r6, lr
 800aab2:	46f4      	mov	ip, lr
 800aab4:	d815      	bhi.n	800aae2 <rshift+0x7e>
 800aab6:	1a9a      	subs	r2, r3, r2
 800aab8:	0092      	lsls	r2, r2, #2
 800aaba:	3a04      	subs	r2, #4
 800aabc:	3501      	adds	r5, #1
 800aabe:	42ae      	cmp	r6, r5
 800aac0:	bf38      	it	cc
 800aac2:	2200      	movcc	r2, #0
 800aac4:	18a3      	adds	r3, r4, r2
 800aac6:	50a7      	str	r7, [r4, r2]
 800aac8:	b107      	cbz	r7, 800aacc <rshift+0x68>
 800aaca:	3304      	adds	r3, #4
 800aacc:	1b1a      	subs	r2, r3, r4
 800aace:	42a3      	cmp	r3, r4
 800aad0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aad4:	bf08      	it	eq
 800aad6:	2300      	moveq	r3, #0
 800aad8:	6102      	str	r2, [r0, #16]
 800aada:	bf08      	it	eq
 800aadc:	6143      	streq	r3, [r0, #20]
 800aade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae2:	f8dc c000 	ldr.w	ip, [ip]
 800aae6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaea:	ea4c 0707 	orr.w	r7, ip, r7
 800aaee:	f849 7b04 	str.w	r7, [r9], #4
 800aaf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaf6:	40cf      	lsrs	r7, r1
 800aaf8:	e7da      	b.n	800aab0 <rshift+0x4c>
 800aafa:	f851 cb04 	ldr.w	ip, [r1], #4
 800aafe:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab02:	e7c3      	b.n	800aa8c <rshift+0x28>
 800ab04:	4623      	mov	r3, r4
 800ab06:	e7e1      	b.n	800aacc <rshift+0x68>

0800ab08 <__hexdig_fun>:
 800ab08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab0c:	2b09      	cmp	r3, #9
 800ab0e:	d802      	bhi.n	800ab16 <__hexdig_fun+0xe>
 800ab10:	3820      	subs	r0, #32
 800ab12:	b2c0      	uxtb	r0, r0
 800ab14:	4770      	bx	lr
 800ab16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	d801      	bhi.n	800ab22 <__hexdig_fun+0x1a>
 800ab1e:	3847      	subs	r0, #71	; 0x47
 800ab20:	e7f7      	b.n	800ab12 <__hexdig_fun+0xa>
 800ab22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab26:	2b05      	cmp	r3, #5
 800ab28:	d801      	bhi.n	800ab2e <__hexdig_fun+0x26>
 800ab2a:	3827      	subs	r0, #39	; 0x27
 800ab2c:	e7f1      	b.n	800ab12 <__hexdig_fun+0xa>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	4770      	bx	lr
	...

0800ab34 <__gethex>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	ed2d 8b02 	vpush	{d8}
 800ab3c:	b089      	sub	sp, #36	; 0x24
 800ab3e:	ee08 0a10 	vmov	s16, r0
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	4bb4      	ldr	r3, [pc, #720]	; (800ae18 <__gethex+0x2e4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	468b      	mov	fp, r1
 800ab4e:	4690      	mov	r8, r2
 800ab50:	f7f5 fb5e 	bl	8000210 <strlen>
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	f8db 2000 	ldr.w	r2, [fp]
 800ab5a:	4403      	add	r3, r0
 800ab5c:	4682      	mov	sl, r0
 800ab5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab62:	9305      	str	r3, [sp, #20]
 800ab64:	1c93      	adds	r3, r2, #2
 800ab66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab6e:	32fe      	adds	r2, #254	; 0xfe
 800ab70:	18d1      	adds	r1, r2, r3
 800ab72:	461f      	mov	r7, r3
 800ab74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab78:	9100      	str	r1, [sp, #0]
 800ab7a:	2830      	cmp	r0, #48	; 0x30
 800ab7c:	d0f8      	beq.n	800ab70 <__gethex+0x3c>
 800ab7e:	f7ff ffc3 	bl	800ab08 <__hexdig_fun>
 800ab82:	4604      	mov	r4, r0
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d13a      	bne.n	800abfe <__gethex+0xca>
 800ab88:	9901      	ldr	r1, [sp, #4]
 800ab8a:	4652      	mov	r2, sl
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f001 fdb3 	bl	800c6f8 <strncmp>
 800ab92:	4605      	mov	r5, r0
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d168      	bne.n	800ac6a <__gethex+0x136>
 800ab98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab9c:	eb07 060a 	add.w	r6, r7, sl
 800aba0:	f7ff ffb2 	bl	800ab08 <__hexdig_fun>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d062      	beq.n	800ac6e <__gethex+0x13a>
 800aba8:	4633      	mov	r3, r6
 800abaa:	7818      	ldrb	r0, [r3, #0]
 800abac:	2830      	cmp	r0, #48	; 0x30
 800abae:	461f      	mov	r7, r3
 800abb0:	f103 0301 	add.w	r3, r3, #1
 800abb4:	d0f9      	beq.n	800abaa <__gethex+0x76>
 800abb6:	f7ff ffa7 	bl	800ab08 <__hexdig_fun>
 800abba:	2301      	movs	r3, #1
 800abbc:	fab0 f480 	clz	r4, r0
 800abc0:	0964      	lsrs	r4, r4, #5
 800abc2:	4635      	mov	r5, r6
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	463a      	mov	r2, r7
 800abc8:	4616      	mov	r6, r2
 800abca:	3201      	adds	r2, #1
 800abcc:	7830      	ldrb	r0, [r6, #0]
 800abce:	f7ff ff9b 	bl	800ab08 <__hexdig_fun>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d1f8      	bne.n	800abc8 <__gethex+0x94>
 800abd6:	9901      	ldr	r1, [sp, #4]
 800abd8:	4652      	mov	r2, sl
 800abda:	4630      	mov	r0, r6
 800abdc:	f001 fd8c 	bl	800c6f8 <strncmp>
 800abe0:	b980      	cbnz	r0, 800ac04 <__gethex+0xd0>
 800abe2:	b94d      	cbnz	r5, 800abf8 <__gethex+0xc4>
 800abe4:	eb06 050a 	add.w	r5, r6, sl
 800abe8:	462a      	mov	r2, r5
 800abea:	4616      	mov	r6, r2
 800abec:	3201      	adds	r2, #1
 800abee:	7830      	ldrb	r0, [r6, #0]
 800abf0:	f7ff ff8a 	bl	800ab08 <__hexdig_fun>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1f8      	bne.n	800abea <__gethex+0xb6>
 800abf8:	1bad      	subs	r5, r5, r6
 800abfa:	00ad      	lsls	r5, r5, #2
 800abfc:	e004      	b.n	800ac08 <__gethex+0xd4>
 800abfe:	2400      	movs	r4, #0
 800ac00:	4625      	mov	r5, r4
 800ac02:	e7e0      	b.n	800abc6 <__gethex+0x92>
 800ac04:	2d00      	cmp	r5, #0
 800ac06:	d1f7      	bne.n	800abf8 <__gethex+0xc4>
 800ac08:	7833      	ldrb	r3, [r6, #0]
 800ac0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac0e:	2b50      	cmp	r3, #80	; 0x50
 800ac10:	d13b      	bne.n	800ac8a <__gethex+0x156>
 800ac12:	7873      	ldrb	r3, [r6, #1]
 800ac14:	2b2b      	cmp	r3, #43	; 0x2b
 800ac16:	d02c      	beq.n	800ac72 <__gethex+0x13e>
 800ac18:	2b2d      	cmp	r3, #45	; 0x2d
 800ac1a:	d02e      	beq.n	800ac7a <__gethex+0x146>
 800ac1c:	1c71      	adds	r1, r6, #1
 800ac1e:	f04f 0900 	mov.w	r9, #0
 800ac22:	7808      	ldrb	r0, [r1, #0]
 800ac24:	f7ff ff70 	bl	800ab08 <__hexdig_fun>
 800ac28:	1e43      	subs	r3, r0, #1
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b18      	cmp	r3, #24
 800ac2e:	d82c      	bhi.n	800ac8a <__gethex+0x156>
 800ac30:	f1a0 0210 	sub.w	r2, r0, #16
 800ac34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac38:	f7ff ff66 	bl	800ab08 <__hexdig_fun>
 800ac3c:	1e43      	subs	r3, r0, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b18      	cmp	r3, #24
 800ac42:	d91d      	bls.n	800ac80 <__gethex+0x14c>
 800ac44:	f1b9 0f00 	cmp.w	r9, #0
 800ac48:	d000      	beq.n	800ac4c <__gethex+0x118>
 800ac4a:	4252      	negs	r2, r2
 800ac4c:	4415      	add	r5, r2
 800ac4e:	f8cb 1000 	str.w	r1, [fp]
 800ac52:	b1e4      	cbz	r4, 800ac8e <__gethex+0x15a>
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2700      	movne	r7, #0
 800ac5c:	2706      	moveq	r7, #6
 800ac5e:	4638      	mov	r0, r7
 800ac60:	b009      	add	sp, #36	; 0x24
 800ac62:	ecbd 8b02 	vpop	{d8}
 800ac66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6a:	463e      	mov	r6, r7
 800ac6c:	4625      	mov	r5, r4
 800ac6e:	2401      	movs	r4, #1
 800ac70:	e7ca      	b.n	800ac08 <__gethex+0xd4>
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	1cb1      	adds	r1, r6, #2
 800ac78:	e7d3      	b.n	800ac22 <__gethex+0xee>
 800ac7a:	f04f 0901 	mov.w	r9, #1
 800ac7e:	e7fa      	b.n	800ac76 <__gethex+0x142>
 800ac80:	230a      	movs	r3, #10
 800ac82:	fb03 0202 	mla	r2, r3, r2, r0
 800ac86:	3a10      	subs	r2, #16
 800ac88:	e7d4      	b.n	800ac34 <__gethex+0x100>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	e7df      	b.n	800ac4e <__gethex+0x11a>
 800ac8e:	1bf3      	subs	r3, r6, r7
 800ac90:	3b01      	subs	r3, #1
 800ac92:	4621      	mov	r1, r4
 800ac94:	2b07      	cmp	r3, #7
 800ac96:	dc0b      	bgt.n	800acb0 <__gethex+0x17c>
 800ac98:	ee18 0a10 	vmov	r0, s16
 800ac9c:	f000 fa90 	bl	800b1c0 <_Balloc>
 800aca0:	4604      	mov	r4, r0
 800aca2:	b940      	cbnz	r0, 800acb6 <__gethex+0x182>
 800aca4:	4b5d      	ldr	r3, [pc, #372]	; (800ae1c <__gethex+0x2e8>)
 800aca6:	4602      	mov	r2, r0
 800aca8:	21de      	movs	r1, #222	; 0xde
 800acaa:	485d      	ldr	r0, [pc, #372]	; (800ae20 <__gethex+0x2ec>)
 800acac:	f001 fdf4 	bl	800c898 <__assert_func>
 800acb0:	3101      	adds	r1, #1
 800acb2:	105b      	asrs	r3, r3, #1
 800acb4:	e7ee      	b.n	800ac94 <__gethex+0x160>
 800acb6:	f100 0914 	add.w	r9, r0, #20
 800acba:	f04f 0b00 	mov.w	fp, #0
 800acbe:	f1ca 0301 	rsb	r3, sl, #1
 800acc2:	f8cd 9008 	str.w	r9, [sp, #8]
 800acc6:	f8cd b000 	str.w	fp, [sp]
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	42b7      	cmp	r7, r6
 800acce:	d340      	bcc.n	800ad52 <__gethex+0x21e>
 800acd0:	9802      	ldr	r0, [sp, #8]
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	f840 3b04 	str.w	r3, [r0], #4
 800acd8:	eba0 0009 	sub.w	r0, r0, r9
 800acdc:	1080      	asrs	r0, r0, #2
 800acde:	0146      	lsls	r6, r0, #5
 800ace0:	6120      	str	r0, [r4, #16]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fb5e 	bl	800b3a4 <__hi0bits>
 800ace8:	1a30      	subs	r0, r6, r0
 800acea:	f8d8 6000 	ldr.w	r6, [r8]
 800acee:	42b0      	cmp	r0, r6
 800acf0:	dd63      	ble.n	800adba <__gethex+0x286>
 800acf2:	1b87      	subs	r7, r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 ff02 	bl	800bb00 <__any_on>
 800acfc:	4682      	mov	sl, r0
 800acfe:	b1a8      	cbz	r0, 800ad2c <__gethex+0x1f8>
 800ad00:	1e7b      	subs	r3, r7, #1
 800ad02:	1159      	asrs	r1, r3, #5
 800ad04:	f003 021f 	and.w	r2, r3, #31
 800ad08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad0c:	f04f 0a01 	mov.w	sl, #1
 800ad10:	fa0a f202 	lsl.w	r2, sl, r2
 800ad14:	420a      	tst	r2, r1
 800ad16:	d009      	beq.n	800ad2c <__gethex+0x1f8>
 800ad18:	4553      	cmp	r3, sl
 800ad1a:	dd05      	ble.n	800ad28 <__gethex+0x1f4>
 800ad1c:	1eb9      	subs	r1, r7, #2
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 feee 	bl	800bb00 <__any_on>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d145      	bne.n	800adb4 <__gethex+0x280>
 800ad28:	f04f 0a02 	mov.w	sl, #2
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff fe98 	bl	800aa64 <rshift>
 800ad34:	443d      	add	r5, r7
 800ad36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad3a:	42ab      	cmp	r3, r5
 800ad3c:	da4c      	bge.n	800add8 <__gethex+0x2a4>
 800ad3e:	ee18 0a10 	vmov	r0, s16
 800ad42:	4621      	mov	r1, r4
 800ad44:	f000 fa7c 	bl	800b240 <_Bfree>
 800ad48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	27a3      	movs	r7, #163	; 0xa3
 800ad50:	e785      	b.n	800ac5e <__gethex+0x12a>
 800ad52:	1e73      	subs	r3, r6, #1
 800ad54:	9a05      	ldr	r2, [sp, #20]
 800ad56:	9303      	str	r3, [sp, #12]
 800ad58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d019      	beq.n	800ad94 <__gethex+0x260>
 800ad60:	f1bb 0f20 	cmp.w	fp, #32
 800ad64:	d107      	bne.n	800ad76 <__gethex+0x242>
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	9a00      	ldr	r2, [sp, #0]
 800ad6a:	f843 2b04 	str.w	r2, [r3], #4
 800ad6e:	9302      	str	r3, [sp, #8]
 800ad70:	2300      	movs	r3, #0
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	469b      	mov	fp, r3
 800ad76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad7a:	f7ff fec5 	bl	800ab08 <__hexdig_fun>
 800ad7e:	9b00      	ldr	r3, [sp, #0]
 800ad80:	f000 000f 	and.w	r0, r0, #15
 800ad84:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad88:	4303      	orrs	r3, r0
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	f10b 0b04 	add.w	fp, fp, #4
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	e00d      	b.n	800adb0 <__gethex+0x27c>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	9a06      	ldr	r2, [sp, #24]
 800ad98:	4413      	add	r3, r2
 800ad9a:	42bb      	cmp	r3, r7
 800ad9c:	d3e0      	bcc.n	800ad60 <__gethex+0x22c>
 800ad9e:	4618      	mov	r0, r3
 800ada0:	9901      	ldr	r1, [sp, #4]
 800ada2:	9307      	str	r3, [sp, #28]
 800ada4:	4652      	mov	r2, sl
 800ada6:	f001 fca7 	bl	800c6f8 <strncmp>
 800adaa:	9b07      	ldr	r3, [sp, #28]
 800adac:	2800      	cmp	r0, #0
 800adae:	d1d7      	bne.n	800ad60 <__gethex+0x22c>
 800adb0:	461e      	mov	r6, r3
 800adb2:	e78b      	b.n	800accc <__gethex+0x198>
 800adb4:	f04f 0a03 	mov.w	sl, #3
 800adb8:	e7b8      	b.n	800ad2c <__gethex+0x1f8>
 800adba:	da0a      	bge.n	800add2 <__gethex+0x29e>
 800adbc:	1a37      	subs	r7, r6, r0
 800adbe:	4621      	mov	r1, r4
 800adc0:	ee18 0a10 	vmov	r0, s16
 800adc4:	463a      	mov	r2, r7
 800adc6:	f000 fc57 	bl	800b678 <__lshift>
 800adca:	1bed      	subs	r5, r5, r7
 800adcc:	4604      	mov	r4, r0
 800adce:	f100 0914 	add.w	r9, r0, #20
 800add2:	f04f 0a00 	mov.w	sl, #0
 800add6:	e7ae      	b.n	800ad36 <__gethex+0x202>
 800add8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800addc:	42a8      	cmp	r0, r5
 800adde:	dd72      	ble.n	800aec6 <__gethex+0x392>
 800ade0:	1b45      	subs	r5, r0, r5
 800ade2:	42ae      	cmp	r6, r5
 800ade4:	dc36      	bgt.n	800ae54 <__gethex+0x320>
 800ade6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d02a      	beq.n	800ae44 <__gethex+0x310>
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d02c      	beq.n	800ae4c <__gethex+0x318>
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d11c      	bne.n	800ae30 <__gethex+0x2fc>
 800adf6:	42ae      	cmp	r6, r5
 800adf8:	d11a      	bne.n	800ae30 <__gethex+0x2fc>
 800adfa:	2e01      	cmp	r6, #1
 800adfc:	d112      	bne.n	800ae24 <__gethex+0x2f0>
 800adfe:	9a04      	ldr	r2, [sp, #16]
 800ae00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	2301      	movs	r3, #1
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	f8c9 3000 	str.w	r3, [r9]
 800ae0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae10:	2762      	movs	r7, #98	; 0x62
 800ae12:	601c      	str	r4, [r3, #0]
 800ae14:	e723      	b.n	800ac5e <__gethex+0x12a>
 800ae16:	bf00      	nop
 800ae18:	0800d640 	.word	0x0800d640
 800ae1c:	0800d5c8 	.word	0x0800d5c8
 800ae20:	0800d5d9 	.word	0x0800d5d9
 800ae24:	1e71      	subs	r1, r6, #1
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fe6a 	bl	800bb00 <__any_on>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1e6      	bne.n	800adfe <__gethex+0x2ca>
 800ae30:	ee18 0a10 	vmov	r0, s16
 800ae34:	4621      	mov	r1, r4
 800ae36:	f000 fa03 	bl	800b240 <_Bfree>
 800ae3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	2750      	movs	r7, #80	; 0x50
 800ae42:	e70c      	b.n	800ac5e <__gethex+0x12a>
 800ae44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1f2      	bne.n	800ae30 <__gethex+0x2fc>
 800ae4a:	e7d8      	b.n	800adfe <__gethex+0x2ca>
 800ae4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1d5      	bne.n	800adfe <__gethex+0x2ca>
 800ae52:	e7ed      	b.n	800ae30 <__gethex+0x2fc>
 800ae54:	1e6f      	subs	r7, r5, #1
 800ae56:	f1ba 0f00 	cmp.w	sl, #0
 800ae5a:	d131      	bne.n	800aec0 <__gethex+0x38c>
 800ae5c:	b127      	cbz	r7, 800ae68 <__gethex+0x334>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 fe4d 	bl	800bb00 <__any_on>
 800ae66:	4682      	mov	sl, r0
 800ae68:	117b      	asrs	r3, r7, #5
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae70:	f007 071f 	and.w	r7, r7, #31
 800ae74:	fa01 f707 	lsl.w	r7, r1, r7
 800ae78:	421f      	tst	r7, r3
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	bf18      	it	ne
 800ae80:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae84:	1b76      	subs	r6, r6, r5
 800ae86:	f7ff fded 	bl	800aa64 <rshift>
 800ae8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae8e:	2702      	movs	r7, #2
 800ae90:	f1ba 0f00 	cmp.w	sl, #0
 800ae94:	d048      	beq.n	800af28 <__gethex+0x3f4>
 800ae96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d015      	beq.n	800aeca <__gethex+0x396>
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d017      	beq.n	800aed2 <__gethex+0x39e>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d109      	bne.n	800aeba <__gethex+0x386>
 800aea6:	f01a 0f02 	tst.w	sl, #2
 800aeaa:	d006      	beq.n	800aeba <__gethex+0x386>
 800aeac:	f8d9 0000 	ldr.w	r0, [r9]
 800aeb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aeb4:	f01a 0f01 	tst.w	sl, #1
 800aeb8:	d10e      	bne.n	800aed8 <__gethex+0x3a4>
 800aeba:	f047 0710 	orr.w	r7, r7, #16
 800aebe:	e033      	b.n	800af28 <__gethex+0x3f4>
 800aec0:	f04f 0a01 	mov.w	sl, #1
 800aec4:	e7d0      	b.n	800ae68 <__gethex+0x334>
 800aec6:	2701      	movs	r7, #1
 800aec8:	e7e2      	b.n	800ae90 <__gethex+0x35c>
 800aeca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aecc:	f1c3 0301 	rsb	r3, r3, #1
 800aed0:	9315      	str	r3, [sp, #84]	; 0x54
 800aed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0f0      	beq.n	800aeba <__gethex+0x386>
 800aed8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aedc:	f104 0314 	add.w	r3, r4, #20
 800aee0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aee4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aee8:	f04f 0c00 	mov.w	ip, #0
 800aeec:	4618      	mov	r0, r3
 800aeee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aef6:	d01c      	beq.n	800af32 <__gethex+0x3fe>
 800aef8:	3201      	adds	r2, #1
 800aefa:	6002      	str	r2, [r0, #0]
 800aefc:	2f02      	cmp	r7, #2
 800aefe:	f104 0314 	add.w	r3, r4, #20
 800af02:	d13f      	bne.n	800af84 <__gethex+0x450>
 800af04:	f8d8 2000 	ldr.w	r2, [r8]
 800af08:	3a01      	subs	r2, #1
 800af0a:	42b2      	cmp	r2, r6
 800af0c:	d10a      	bne.n	800af24 <__gethex+0x3f0>
 800af0e:	1171      	asrs	r1, r6, #5
 800af10:	2201      	movs	r2, #1
 800af12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af16:	f006 061f 	and.w	r6, r6, #31
 800af1a:	fa02 f606 	lsl.w	r6, r2, r6
 800af1e:	421e      	tst	r6, r3
 800af20:	bf18      	it	ne
 800af22:	4617      	movne	r7, r2
 800af24:	f047 0720 	orr.w	r7, r7, #32
 800af28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af2a:	601c      	str	r4, [r3, #0]
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	601d      	str	r5, [r3, #0]
 800af30:	e695      	b.n	800ac5e <__gethex+0x12a>
 800af32:	4299      	cmp	r1, r3
 800af34:	f843 cc04 	str.w	ip, [r3, #-4]
 800af38:	d8d8      	bhi.n	800aeec <__gethex+0x3b8>
 800af3a:	68a3      	ldr	r3, [r4, #8]
 800af3c:	459b      	cmp	fp, r3
 800af3e:	db19      	blt.n	800af74 <__gethex+0x440>
 800af40:	6861      	ldr	r1, [r4, #4]
 800af42:	ee18 0a10 	vmov	r0, s16
 800af46:	3101      	adds	r1, #1
 800af48:	f000 f93a 	bl	800b1c0 <_Balloc>
 800af4c:	4681      	mov	r9, r0
 800af4e:	b918      	cbnz	r0, 800af58 <__gethex+0x424>
 800af50:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <__gethex+0x488>)
 800af52:	4602      	mov	r2, r0
 800af54:	2184      	movs	r1, #132	; 0x84
 800af56:	e6a8      	b.n	800acaa <__gethex+0x176>
 800af58:	6922      	ldr	r2, [r4, #16]
 800af5a:	3202      	adds	r2, #2
 800af5c:	f104 010c 	add.w	r1, r4, #12
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	300c      	adds	r0, #12
 800af64:	f000 f91e 	bl	800b1a4 <memcpy>
 800af68:	4621      	mov	r1, r4
 800af6a:	ee18 0a10 	vmov	r0, s16
 800af6e:	f000 f967 	bl	800b240 <_Bfree>
 800af72:	464c      	mov	r4, r9
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af7c:	6122      	str	r2, [r4, #16]
 800af7e:	2201      	movs	r2, #1
 800af80:	615a      	str	r2, [r3, #20]
 800af82:	e7bb      	b.n	800aefc <__gethex+0x3c8>
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	455a      	cmp	r2, fp
 800af88:	dd0b      	ble.n	800afa2 <__gethex+0x46e>
 800af8a:	2101      	movs	r1, #1
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7ff fd69 	bl	800aa64 <rshift>
 800af92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af96:	3501      	adds	r5, #1
 800af98:	42ab      	cmp	r3, r5
 800af9a:	f6ff aed0 	blt.w	800ad3e <__gethex+0x20a>
 800af9e:	2701      	movs	r7, #1
 800afa0:	e7c0      	b.n	800af24 <__gethex+0x3f0>
 800afa2:	f016 061f 	ands.w	r6, r6, #31
 800afa6:	d0fa      	beq.n	800af9e <__gethex+0x46a>
 800afa8:	4453      	add	r3, sl
 800afaa:	f1c6 0620 	rsb	r6, r6, #32
 800afae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800afb2:	f000 f9f7 	bl	800b3a4 <__hi0bits>
 800afb6:	42b0      	cmp	r0, r6
 800afb8:	dbe7      	blt.n	800af8a <__gethex+0x456>
 800afba:	e7f0      	b.n	800af9e <__gethex+0x46a>
 800afbc:	0800d5c8 	.word	0x0800d5c8

0800afc0 <L_shift>:
 800afc0:	f1c2 0208 	rsb	r2, r2, #8
 800afc4:	0092      	lsls	r2, r2, #2
 800afc6:	b570      	push	{r4, r5, r6, lr}
 800afc8:	f1c2 0620 	rsb	r6, r2, #32
 800afcc:	6843      	ldr	r3, [r0, #4]
 800afce:	6804      	ldr	r4, [r0, #0]
 800afd0:	fa03 f506 	lsl.w	r5, r3, r6
 800afd4:	432c      	orrs	r4, r5
 800afd6:	40d3      	lsrs	r3, r2
 800afd8:	6004      	str	r4, [r0, #0]
 800afda:	f840 3f04 	str.w	r3, [r0, #4]!
 800afde:	4288      	cmp	r0, r1
 800afe0:	d3f4      	bcc.n	800afcc <L_shift+0xc>
 800afe2:	bd70      	pop	{r4, r5, r6, pc}

0800afe4 <__match>:
 800afe4:	b530      	push	{r4, r5, lr}
 800afe6:	6803      	ldr	r3, [r0, #0]
 800afe8:	3301      	adds	r3, #1
 800afea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afee:	b914      	cbnz	r4, 800aff6 <__match+0x12>
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	2001      	movs	r0, #1
 800aff4:	bd30      	pop	{r4, r5, pc}
 800aff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800affe:	2d19      	cmp	r5, #25
 800b000:	bf98      	it	ls
 800b002:	3220      	addls	r2, #32
 800b004:	42a2      	cmp	r2, r4
 800b006:	d0f0      	beq.n	800afea <__match+0x6>
 800b008:	2000      	movs	r0, #0
 800b00a:	e7f3      	b.n	800aff4 <__match+0x10>

0800b00c <__hexnan>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	680b      	ldr	r3, [r1, #0]
 800b012:	115e      	asrs	r6, r3, #5
 800b014:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b018:	f013 031f 	ands.w	r3, r3, #31
 800b01c:	b087      	sub	sp, #28
 800b01e:	bf18      	it	ne
 800b020:	3604      	addne	r6, #4
 800b022:	2500      	movs	r5, #0
 800b024:	1f37      	subs	r7, r6, #4
 800b026:	4690      	mov	r8, r2
 800b028:	6802      	ldr	r2, [r0, #0]
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	4682      	mov	sl, r0
 800b02e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b032:	46b9      	mov	r9, r7
 800b034:	463c      	mov	r4, r7
 800b036:	9502      	str	r5, [sp, #8]
 800b038:	46ab      	mov	fp, r5
 800b03a:	7851      	ldrb	r1, [r2, #1]
 800b03c:	1c53      	adds	r3, r2, #1
 800b03e:	9303      	str	r3, [sp, #12]
 800b040:	b341      	cbz	r1, 800b094 <__hexnan+0x88>
 800b042:	4608      	mov	r0, r1
 800b044:	9205      	str	r2, [sp, #20]
 800b046:	9104      	str	r1, [sp, #16]
 800b048:	f7ff fd5e 	bl	800ab08 <__hexdig_fun>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d14f      	bne.n	800b0f0 <__hexnan+0xe4>
 800b050:	9904      	ldr	r1, [sp, #16]
 800b052:	9a05      	ldr	r2, [sp, #20]
 800b054:	2920      	cmp	r1, #32
 800b056:	d818      	bhi.n	800b08a <__hexnan+0x7e>
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	459b      	cmp	fp, r3
 800b05c:	dd13      	ble.n	800b086 <__hexnan+0x7a>
 800b05e:	454c      	cmp	r4, r9
 800b060:	d206      	bcs.n	800b070 <__hexnan+0x64>
 800b062:	2d07      	cmp	r5, #7
 800b064:	dc04      	bgt.n	800b070 <__hexnan+0x64>
 800b066:	462a      	mov	r2, r5
 800b068:	4649      	mov	r1, r9
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7ff ffa8 	bl	800afc0 <L_shift>
 800b070:	4544      	cmp	r4, r8
 800b072:	d950      	bls.n	800b116 <__hexnan+0x10a>
 800b074:	2300      	movs	r3, #0
 800b076:	f1a4 0904 	sub.w	r9, r4, #4
 800b07a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b07e:	f8cd b008 	str.w	fp, [sp, #8]
 800b082:	464c      	mov	r4, r9
 800b084:	461d      	mov	r5, r3
 800b086:	9a03      	ldr	r2, [sp, #12]
 800b088:	e7d7      	b.n	800b03a <__hexnan+0x2e>
 800b08a:	2929      	cmp	r1, #41	; 0x29
 800b08c:	d156      	bne.n	800b13c <__hexnan+0x130>
 800b08e:	3202      	adds	r2, #2
 800b090:	f8ca 2000 	str.w	r2, [sl]
 800b094:	f1bb 0f00 	cmp.w	fp, #0
 800b098:	d050      	beq.n	800b13c <__hexnan+0x130>
 800b09a:	454c      	cmp	r4, r9
 800b09c:	d206      	bcs.n	800b0ac <__hexnan+0xa0>
 800b09e:	2d07      	cmp	r5, #7
 800b0a0:	dc04      	bgt.n	800b0ac <__hexnan+0xa0>
 800b0a2:	462a      	mov	r2, r5
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7ff ff8a 	bl	800afc0 <L_shift>
 800b0ac:	4544      	cmp	r4, r8
 800b0ae:	d934      	bls.n	800b11a <__hexnan+0x10e>
 800b0b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0be:	429f      	cmp	r7, r3
 800b0c0:	d2f9      	bcs.n	800b0b6 <__hexnan+0xaa>
 800b0c2:	1b3b      	subs	r3, r7, r4
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	3401      	adds	r4, #1
 800b0cc:	3e03      	subs	r6, #3
 800b0ce:	42b4      	cmp	r4, r6
 800b0d0:	bf88      	it	hi
 800b0d2:	2304      	movhi	r3, #4
 800b0d4:	4443      	add	r3, r8
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f843 2b04 	str.w	r2, [r3], #4
 800b0dc:	429f      	cmp	r7, r3
 800b0de:	d2fb      	bcs.n	800b0d8 <__hexnan+0xcc>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	b91b      	cbnz	r3, 800b0ec <__hexnan+0xe0>
 800b0e4:	4547      	cmp	r7, r8
 800b0e6:	d127      	bne.n	800b138 <__hexnan+0x12c>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	603b      	str	r3, [r7, #0]
 800b0ec:	2005      	movs	r0, #5
 800b0ee:	e026      	b.n	800b13e <__hexnan+0x132>
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	2d08      	cmp	r5, #8
 800b0f4:	f10b 0b01 	add.w	fp, fp, #1
 800b0f8:	dd06      	ble.n	800b108 <__hexnan+0xfc>
 800b0fa:	4544      	cmp	r4, r8
 800b0fc:	d9c3      	bls.n	800b086 <__hexnan+0x7a>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f844 3c04 	str.w	r3, [r4, #-4]
 800b104:	2501      	movs	r5, #1
 800b106:	3c04      	subs	r4, #4
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	f000 000f 	and.w	r0, r0, #15
 800b10e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b112:	6022      	str	r2, [r4, #0]
 800b114:	e7b7      	b.n	800b086 <__hexnan+0x7a>
 800b116:	2508      	movs	r5, #8
 800b118:	e7b5      	b.n	800b086 <__hexnan+0x7a>
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0df      	beq.n	800b0e0 <__hexnan+0xd4>
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	f1c3 0320 	rsb	r3, r3, #32
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
 800b12c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b130:	401a      	ands	r2, r3
 800b132:	f846 2c04 	str.w	r2, [r6, #-4]
 800b136:	e7d3      	b.n	800b0e0 <__hexnan+0xd4>
 800b138:	3f04      	subs	r7, #4
 800b13a:	e7d1      	b.n	800b0e0 <__hexnan+0xd4>
 800b13c:	2004      	movs	r0, #4
 800b13e:	b007      	add	sp, #28
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b144 <_localeconv_r>:
 800b144:	4800      	ldr	r0, [pc, #0]	; (800b148 <_localeconv_r+0x4>)
 800b146:	4770      	bx	lr
 800b148:	20000200 	.word	0x20000200

0800b14c <_lseek_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4d07      	ldr	r5, [pc, #28]	; (800b16c <_lseek_r+0x20>)
 800b150:	4604      	mov	r4, r0
 800b152:	4608      	mov	r0, r1
 800b154:	4611      	mov	r1, r2
 800b156:	2200      	movs	r2, #0
 800b158:	602a      	str	r2, [r5, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	f7f7 ff1e 	bl	8002f9c <_lseek>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_lseek_r+0x1e>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_lseek_r+0x1e>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	20000498 	.word	0x20000498

0800b170 <malloc>:
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <malloc+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	f000 bd67 	b.w	800bc48 <_malloc_r>
 800b17a:	bf00      	nop
 800b17c:	200000a8 	.word	0x200000a8

0800b180 <__ascii_mbtowc>:
 800b180:	b082      	sub	sp, #8
 800b182:	b901      	cbnz	r1, 800b186 <__ascii_mbtowc+0x6>
 800b184:	a901      	add	r1, sp, #4
 800b186:	b142      	cbz	r2, 800b19a <__ascii_mbtowc+0x1a>
 800b188:	b14b      	cbz	r3, 800b19e <__ascii_mbtowc+0x1e>
 800b18a:	7813      	ldrb	r3, [r2, #0]
 800b18c:	600b      	str	r3, [r1, #0]
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	1e10      	subs	r0, r2, #0
 800b192:	bf18      	it	ne
 800b194:	2001      	movne	r0, #1
 800b196:	b002      	add	sp, #8
 800b198:	4770      	bx	lr
 800b19a:	4610      	mov	r0, r2
 800b19c:	e7fb      	b.n	800b196 <__ascii_mbtowc+0x16>
 800b19e:	f06f 0001 	mvn.w	r0, #1
 800b1a2:	e7f8      	b.n	800b196 <__ascii_mbtowc+0x16>

0800b1a4 <memcpy>:
 800b1a4:	440a      	add	r2, r1
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1ac:	d100      	bne.n	800b1b0 <memcpy+0xc>
 800b1ae:	4770      	bx	lr
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	d1f9      	bne.n	800b1b2 <memcpy+0xe>
 800b1be:	bd10      	pop	{r4, pc}

0800b1c0 <_Balloc>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	b976      	cbnz	r6, 800b1e8 <_Balloc+0x28>
 800b1ca:	2010      	movs	r0, #16
 800b1cc:	f7ff ffd0 	bl	800b170 <malloc>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6260      	str	r0, [r4, #36]	; 0x24
 800b1d4:	b920      	cbnz	r0, 800b1e0 <_Balloc+0x20>
 800b1d6:	4b18      	ldr	r3, [pc, #96]	; (800b238 <_Balloc+0x78>)
 800b1d8:	4818      	ldr	r0, [pc, #96]	; (800b23c <_Balloc+0x7c>)
 800b1da:	2166      	movs	r1, #102	; 0x66
 800b1dc:	f001 fb5c 	bl	800c898 <__assert_func>
 800b1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e4:	6006      	str	r6, [r0, #0]
 800b1e6:	60c6      	str	r6, [r0, #12]
 800b1e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1ea:	68f3      	ldr	r3, [r6, #12]
 800b1ec:	b183      	cbz	r3, 800b210 <_Balloc+0x50>
 800b1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1f6:	b9b8      	cbnz	r0, 800b228 <_Balloc+0x68>
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b1fe:	1d72      	adds	r2, r6, #5
 800b200:	0092      	lsls	r2, r2, #2
 800b202:	4620      	mov	r0, r4
 800b204:	f000 fc9d 	bl	800bb42 <_calloc_r>
 800b208:	b160      	cbz	r0, 800b224 <_Balloc+0x64>
 800b20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b20e:	e00e      	b.n	800b22e <_Balloc+0x6e>
 800b210:	2221      	movs	r2, #33	; 0x21
 800b212:	2104      	movs	r1, #4
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fc94 	bl	800bb42 <_calloc_r>
 800b21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b21c:	60f0      	str	r0, [r6, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e4      	bne.n	800b1ee <_Balloc+0x2e>
 800b224:	2000      	movs	r0, #0
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	6802      	ldr	r2, [r0, #0]
 800b22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b22e:	2300      	movs	r3, #0
 800b230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b234:	e7f7      	b.n	800b226 <_Balloc+0x66>
 800b236:	bf00      	nop
 800b238:	0800d556 	.word	0x0800d556
 800b23c:	0800d654 	.word	0x0800d654

0800b240 <_Bfree>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b244:	4605      	mov	r5, r0
 800b246:	460c      	mov	r4, r1
 800b248:	b976      	cbnz	r6, 800b268 <_Bfree+0x28>
 800b24a:	2010      	movs	r0, #16
 800b24c:	f7ff ff90 	bl	800b170 <malloc>
 800b250:	4602      	mov	r2, r0
 800b252:	6268      	str	r0, [r5, #36]	; 0x24
 800b254:	b920      	cbnz	r0, 800b260 <_Bfree+0x20>
 800b256:	4b09      	ldr	r3, [pc, #36]	; (800b27c <_Bfree+0x3c>)
 800b258:	4809      	ldr	r0, [pc, #36]	; (800b280 <_Bfree+0x40>)
 800b25a:	218a      	movs	r1, #138	; 0x8a
 800b25c:	f001 fb1c 	bl	800c898 <__assert_func>
 800b260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b264:	6006      	str	r6, [r0, #0]
 800b266:	60c6      	str	r6, [r0, #12]
 800b268:	b13c      	cbz	r4, 800b27a <_Bfree+0x3a>
 800b26a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b26c:	6862      	ldr	r2, [r4, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b274:	6021      	str	r1, [r4, #0]
 800b276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	0800d556 	.word	0x0800d556
 800b280:	0800d654 	.word	0x0800d654

0800b284 <__multadd>:
 800b284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b288:	690d      	ldr	r5, [r1, #16]
 800b28a:	4607      	mov	r7, r0
 800b28c:	460c      	mov	r4, r1
 800b28e:	461e      	mov	r6, r3
 800b290:	f101 0c14 	add.w	ip, r1, #20
 800b294:	2000      	movs	r0, #0
 800b296:	f8dc 3000 	ldr.w	r3, [ip]
 800b29a:	b299      	uxth	r1, r3
 800b29c:	fb02 6101 	mla	r1, r2, r1, r6
 800b2a0:	0c1e      	lsrs	r6, r3, #16
 800b2a2:	0c0b      	lsrs	r3, r1, #16
 800b2a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2a8:	b289      	uxth	r1, r1
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2b0:	4285      	cmp	r5, r0
 800b2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ba:	dcec      	bgt.n	800b296 <__multadd+0x12>
 800b2bc:	b30e      	cbz	r6, 800b302 <__multadd+0x7e>
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	42ab      	cmp	r3, r5
 800b2c2:	dc19      	bgt.n	800b2f8 <__multadd+0x74>
 800b2c4:	6861      	ldr	r1, [r4, #4]
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	f7ff ff79 	bl	800b1c0 <_Balloc>
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	b928      	cbnz	r0, 800b2de <__multadd+0x5a>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <__multadd+0x84>)
 800b2d6:	480d      	ldr	r0, [pc, #52]	; (800b30c <__multadd+0x88>)
 800b2d8:	21b5      	movs	r1, #181	; 0xb5
 800b2da:	f001 fadd 	bl	800c898 <__assert_func>
 800b2de:	6922      	ldr	r2, [r4, #16]
 800b2e0:	3202      	adds	r2, #2
 800b2e2:	f104 010c 	add.w	r1, r4, #12
 800b2e6:	0092      	lsls	r2, r2, #2
 800b2e8:	300c      	adds	r0, #12
 800b2ea:	f7ff ff5b 	bl	800b1a4 <memcpy>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f7ff ffa5 	bl	800b240 <_Bfree>
 800b2f6:	4644      	mov	r4, r8
 800b2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2fc:	3501      	adds	r5, #1
 800b2fe:	615e      	str	r6, [r3, #20]
 800b300:	6125      	str	r5, [r4, #16]
 800b302:	4620      	mov	r0, r4
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	0800d5c8 	.word	0x0800d5c8
 800b30c:	0800d654 	.word	0x0800d654

0800b310 <__s2b>:
 800b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b314:	460c      	mov	r4, r1
 800b316:	4615      	mov	r5, r2
 800b318:	461f      	mov	r7, r3
 800b31a:	2209      	movs	r2, #9
 800b31c:	3308      	adds	r3, #8
 800b31e:	4606      	mov	r6, r0
 800b320:	fb93 f3f2 	sdiv	r3, r3, r2
 800b324:	2100      	movs	r1, #0
 800b326:	2201      	movs	r2, #1
 800b328:	429a      	cmp	r2, r3
 800b32a:	db09      	blt.n	800b340 <__s2b+0x30>
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff ff47 	bl	800b1c0 <_Balloc>
 800b332:	b940      	cbnz	r0, 800b346 <__s2b+0x36>
 800b334:	4602      	mov	r2, r0
 800b336:	4b19      	ldr	r3, [pc, #100]	; (800b39c <__s2b+0x8c>)
 800b338:	4819      	ldr	r0, [pc, #100]	; (800b3a0 <__s2b+0x90>)
 800b33a:	21ce      	movs	r1, #206	; 0xce
 800b33c:	f001 faac 	bl	800c898 <__assert_func>
 800b340:	0052      	lsls	r2, r2, #1
 800b342:	3101      	adds	r1, #1
 800b344:	e7f0      	b.n	800b328 <__s2b+0x18>
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	6143      	str	r3, [r0, #20]
 800b34a:	2d09      	cmp	r5, #9
 800b34c:	f04f 0301 	mov.w	r3, #1
 800b350:	6103      	str	r3, [r0, #16]
 800b352:	dd16      	ble.n	800b382 <__s2b+0x72>
 800b354:	f104 0909 	add.w	r9, r4, #9
 800b358:	46c8      	mov	r8, r9
 800b35a:	442c      	add	r4, r5
 800b35c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b360:	4601      	mov	r1, r0
 800b362:	3b30      	subs	r3, #48	; 0x30
 800b364:	220a      	movs	r2, #10
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ff8c 	bl	800b284 <__multadd>
 800b36c:	45a0      	cmp	r8, r4
 800b36e:	d1f5      	bne.n	800b35c <__s2b+0x4c>
 800b370:	f1a5 0408 	sub.w	r4, r5, #8
 800b374:	444c      	add	r4, r9
 800b376:	1b2d      	subs	r5, r5, r4
 800b378:	1963      	adds	r3, r4, r5
 800b37a:	42bb      	cmp	r3, r7
 800b37c:	db04      	blt.n	800b388 <__s2b+0x78>
 800b37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b382:	340a      	adds	r4, #10
 800b384:	2509      	movs	r5, #9
 800b386:	e7f6      	b.n	800b376 <__s2b+0x66>
 800b388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b38c:	4601      	mov	r1, r0
 800b38e:	3b30      	subs	r3, #48	; 0x30
 800b390:	220a      	movs	r2, #10
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ff76 	bl	800b284 <__multadd>
 800b398:	e7ee      	b.n	800b378 <__s2b+0x68>
 800b39a:	bf00      	nop
 800b39c:	0800d5c8 	.word	0x0800d5c8
 800b3a0:	0800d654 	.word	0x0800d654

0800b3a4 <__hi0bits>:
 800b3a4:	0c03      	lsrs	r3, r0, #16
 800b3a6:	041b      	lsls	r3, r3, #16
 800b3a8:	b9d3      	cbnz	r3, 800b3e0 <__hi0bits+0x3c>
 800b3aa:	0400      	lsls	r0, r0, #16
 800b3ac:	2310      	movs	r3, #16
 800b3ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3b2:	bf04      	itt	eq
 800b3b4:	0200      	lsleq	r0, r0, #8
 800b3b6:	3308      	addeq	r3, #8
 800b3b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3bc:	bf04      	itt	eq
 800b3be:	0100      	lsleq	r0, r0, #4
 800b3c0:	3304      	addeq	r3, #4
 800b3c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3c6:	bf04      	itt	eq
 800b3c8:	0080      	lsleq	r0, r0, #2
 800b3ca:	3302      	addeq	r3, #2
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	db05      	blt.n	800b3dc <__hi0bits+0x38>
 800b3d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3d4:	f103 0301 	add.w	r3, r3, #1
 800b3d8:	bf08      	it	eq
 800b3da:	2320      	moveq	r3, #32
 800b3dc:	4618      	mov	r0, r3
 800b3de:	4770      	bx	lr
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e7e4      	b.n	800b3ae <__hi0bits+0xa>

0800b3e4 <__lo0bits>:
 800b3e4:	6803      	ldr	r3, [r0, #0]
 800b3e6:	f013 0207 	ands.w	r2, r3, #7
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	d00b      	beq.n	800b406 <__lo0bits+0x22>
 800b3ee:	07da      	lsls	r2, r3, #31
 800b3f0:	d423      	bmi.n	800b43a <__lo0bits+0x56>
 800b3f2:	0798      	lsls	r0, r3, #30
 800b3f4:	bf49      	itett	mi
 800b3f6:	085b      	lsrmi	r3, r3, #1
 800b3f8:	089b      	lsrpl	r3, r3, #2
 800b3fa:	2001      	movmi	r0, #1
 800b3fc:	600b      	strmi	r3, [r1, #0]
 800b3fe:	bf5c      	itt	pl
 800b400:	600b      	strpl	r3, [r1, #0]
 800b402:	2002      	movpl	r0, #2
 800b404:	4770      	bx	lr
 800b406:	b298      	uxth	r0, r3
 800b408:	b9a8      	cbnz	r0, 800b436 <__lo0bits+0x52>
 800b40a:	0c1b      	lsrs	r3, r3, #16
 800b40c:	2010      	movs	r0, #16
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	b90a      	cbnz	r2, 800b416 <__lo0bits+0x32>
 800b412:	3008      	adds	r0, #8
 800b414:	0a1b      	lsrs	r3, r3, #8
 800b416:	071a      	lsls	r2, r3, #28
 800b418:	bf04      	itt	eq
 800b41a:	091b      	lsreq	r3, r3, #4
 800b41c:	3004      	addeq	r0, #4
 800b41e:	079a      	lsls	r2, r3, #30
 800b420:	bf04      	itt	eq
 800b422:	089b      	lsreq	r3, r3, #2
 800b424:	3002      	addeq	r0, #2
 800b426:	07da      	lsls	r2, r3, #31
 800b428:	d403      	bmi.n	800b432 <__lo0bits+0x4e>
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	f100 0001 	add.w	r0, r0, #1
 800b430:	d005      	beq.n	800b43e <__lo0bits+0x5a>
 800b432:	600b      	str	r3, [r1, #0]
 800b434:	4770      	bx	lr
 800b436:	4610      	mov	r0, r2
 800b438:	e7e9      	b.n	800b40e <__lo0bits+0x2a>
 800b43a:	2000      	movs	r0, #0
 800b43c:	4770      	bx	lr
 800b43e:	2020      	movs	r0, #32
 800b440:	4770      	bx	lr
	...

0800b444 <__i2b>:
 800b444:	b510      	push	{r4, lr}
 800b446:	460c      	mov	r4, r1
 800b448:	2101      	movs	r1, #1
 800b44a:	f7ff feb9 	bl	800b1c0 <_Balloc>
 800b44e:	4602      	mov	r2, r0
 800b450:	b928      	cbnz	r0, 800b45e <__i2b+0x1a>
 800b452:	4b05      	ldr	r3, [pc, #20]	; (800b468 <__i2b+0x24>)
 800b454:	4805      	ldr	r0, [pc, #20]	; (800b46c <__i2b+0x28>)
 800b456:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b45a:	f001 fa1d 	bl	800c898 <__assert_func>
 800b45e:	2301      	movs	r3, #1
 800b460:	6144      	str	r4, [r0, #20]
 800b462:	6103      	str	r3, [r0, #16]
 800b464:	bd10      	pop	{r4, pc}
 800b466:	bf00      	nop
 800b468:	0800d5c8 	.word	0x0800d5c8
 800b46c:	0800d654 	.word	0x0800d654

0800b470 <__multiply>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	4691      	mov	r9, r2
 800b476:	690a      	ldr	r2, [r1, #16]
 800b478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfb8      	it	lt
 800b480:	460b      	movlt	r3, r1
 800b482:	460c      	mov	r4, r1
 800b484:	bfbc      	itt	lt
 800b486:	464c      	movlt	r4, r9
 800b488:	4699      	movlt	r9, r3
 800b48a:	6927      	ldr	r7, [r4, #16]
 800b48c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b490:	68a3      	ldr	r3, [r4, #8]
 800b492:	6861      	ldr	r1, [r4, #4]
 800b494:	eb07 060a 	add.w	r6, r7, sl
 800b498:	42b3      	cmp	r3, r6
 800b49a:	b085      	sub	sp, #20
 800b49c:	bfb8      	it	lt
 800b49e:	3101      	addlt	r1, #1
 800b4a0:	f7ff fe8e 	bl	800b1c0 <_Balloc>
 800b4a4:	b930      	cbnz	r0, 800b4b4 <__multiply+0x44>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	4b44      	ldr	r3, [pc, #272]	; (800b5bc <__multiply+0x14c>)
 800b4aa:	4845      	ldr	r0, [pc, #276]	; (800b5c0 <__multiply+0x150>)
 800b4ac:	f240 115d 	movw	r1, #349	; 0x15d
 800b4b0:	f001 f9f2 	bl	800c898 <__assert_func>
 800b4b4:	f100 0514 	add.w	r5, r0, #20
 800b4b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4bc:	462b      	mov	r3, r5
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4543      	cmp	r3, r8
 800b4c2:	d321      	bcc.n	800b508 <__multiply+0x98>
 800b4c4:	f104 0314 	add.w	r3, r4, #20
 800b4c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4cc:	f109 0314 	add.w	r3, r9, #20
 800b4d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4d4:	9202      	str	r2, [sp, #8]
 800b4d6:	1b3a      	subs	r2, r7, r4
 800b4d8:	3a15      	subs	r2, #21
 800b4da:	f022 0203 	bic.w	r2, r2, #3
 800b4de:	3204      	adds	r2, #4
 800b4e0:	f104 0115 	add.w	r1, r4, #21
 800b4e4:	428f      	cmp	r7, r1
 800b4e6:	bf38      	it	cc
 800b4e8:	2204      	movcc	r2, #4
 800b4ea:	9201      	str	r2, [sp, #4]
 800b4ec:	9a02      	ldr	r2, [sp, #8]
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d80c      	bhi.n	800b50e <__multiply+0x9e>
 800b4f4:	2e00      	cmp	r6, #0
 800b4f6:	dd03      	ble.n	800b500 <__multiply+0x90>
 800b4f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d05a      	beq.n	800b5b6 <__multiply+0x146>
 800b500:	6106      	str	r6, [r0, #16]
 800b502:	b005      	add	sp, #20
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	f843 2b04 	str.w	r2, [r3], #4
 800b50c:	e7d8      	b.n	800b4c0 <__multiply+0x50>
 800b50e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b512:	f1ba 0f00 	cmp.w	sl, #0
 800b516:	d024      	beq.n	800b562 <__multiply+0xf2>
 800b518:	f104 0e14 	add.w	lr, r4, #20
 800b51c:	46a9      	mov	r9, r5
 800b51e:	f04f 0c00 	mov.w	ip, #0
 800b522:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b526:	f8d9 1000 	ldr.w	r1, [r9]
 800b52a:	fa1f fb82 	uxth.w	fp, r2
 800b52e:	b289      	uxth	r1, r1
 800b530:	fb0a 110b 	mla	r1, sl, fp, r1
 800b534:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b538:	f8d9 2000 	ldr.w	r2, [r9]
 800b53c:	4461      	add	r1, ip
 800b53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b542:	fb0a c20b 	mla	r2, sl, fp, ip
 800b546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b54a:	b289      	uxth	r1, r1
 800b54c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b550:	4577      	cmp	r7, lr
 800b552:	f849 1b04 	str.w	r1, [r9], #4
 800b556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b55a:	d8e2      	bhi.n	800b522 <__multiply+0xb2>
 800b55c:	9a01      	ldr	r2, [sp, #4]
 800b55e:	f845 c002 	str.w	ip, [r5, r2]
 800b562:	9a03      	ldr	r2, [sp, #12]
 800b564:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b568:	3304      	adds	r3, #4
 800b56a:	f1b9 0f00 	cmp.w	r9, #0
 800b56e:	d020      	beq.n	800b5b2 <__multiply+0x142>
 800b570:	6829      	ldr	r1, [r5, #0]
 800b572:	f104 0c14 	add.w	ip, r4, #20
 800b576:	46ae      	mov	lr, r5
 800b578:	f04f 0a00 	mov.w	sl, #0
 800b57c:	f8bc b000 	ldrh.w	fp, [ip]
 800b580:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b584:	fb09 220b 	mla	r2, r9, fp, r2
 800b588:	4492      	add	sl, r2
 800b58a:	b289      	uxth	r1, r1
 800b58c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b590:	f84e 1b04 	str.w	r1, [lr], #4
 800b594:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b598:	f8be 1000 	ldrh.w	r1, [lr]
 800b59c:	0c12      	lsrs	r2, r2, #16
 800b59e:	fb09 1102 	mla	r1, r9, r2, r1
 800b5a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5a6:	4567      	cmp	r7, ip
 800b5a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5ac:	d8e6      	bhi.n	800b57c <__multiply+0x10c>
 800b5ae:	9a01      	ldr	r2, [sp, #4]
 800b5b0:	50a9      	str	r1, [r5, r2]
 800b5b2:	3504      	adds	r5, #4
 800b5b4:	e79a      	b.n	800b4ec <__multiply+0x7c>
 800b5b6:	3e01      	subs	r6, #1
 800b5b8:	e79c      	b.n	800b4f4 <__multiply+0x84>
 800b5ba:	bf00      	nop
 800b5bc:	0800d5c8 	.word	0x0800d5c8
 800b5c0:	0800d654 	.word	0x0800d654

0800b5c4 <__pow5mult>:
 800b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	4615      	mov	r5, r2
 800b5ca:	f012 0203 	ands.w	r2, r2, #3
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	d007      	beq.n	800b5e4 <__pow5mult+0x20>
 800b5d4:	4c25      	ldr	r4, [pc, #148]	; (800b66c <__pow5mult+0xa8>)
 800b5d6:	3a01      	subs	r2, #1
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5de:	f7ff fe51 	bl	800b284 <__multadd>
 800b5e2:	4607      	mov	r7, r0
 800b5e4:	10ad      	asrs	r5, r5, #2
 800b5e6:	d03d      	beq.n	800b664 <__pow5mult+0xa0>
 800b5e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5ea:	b97c      	cbnz	r4, 800b60c <__pow5mult+0x48>
 800b5ec:	2010      	movs	r0, #16
 800b5ee:	f7ff fdbf 	bl	800b170 <malloc>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b5f6:	b928      	cbnz	r0, 800b604 <__pow5mult+0x40>
 800b5f8:	4b1d      	ldr	r3, [pc, #116]	; (800b670 <__pow5mult+0xac>)
 800b5fa:	481e      	ldr	r0, [pc, #120]	; (800b674 <__pow5mult+0xb0>)
 800b5fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b600:	f001 f94a 	bl	800c898 <__assert_func>
 800b604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b608:	6004      	str	r4, [r0, #0]
 800b60a:	60c4      	str	r4, [r0, #12]
 800b60c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b614:	b94c      	cbnz	r4, 800b62a <__pow5mult+0x66>
 800b616:	f240 2171 	movw	r1, #625	; 0x271
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff ff12 	bl	800b444 <__i2b>
 800b620:	2300      	movs	r3, #0
 800b622:	f8c8 0008 	str.w	r0, [r8, #8]
 800b626:	4604      	mov	r4, r0
 800b628:	6003      	str	r3, [r0, #0]
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	07eb      	lsls	r3, r5, #31
 800b630:	d50a      	bpl.n	800b648 <__pow5mult+0x84>
 800b632:	4639      	mov	r1, r7
 800b634:	4622      	mov	r2, r4
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff ff1a 	bl	800b470 <__multiply>
 800b63c:	4639      	mov	r1, r7
 800b63e:	4680      	mov	r8, r0
 800b640:	4630      	mov	r0, r6
 800b642:	f7ff fdfd 	bl	800b240 <_Bfree>
 800b646:	4647      	mov	r7, r8
 800b648:	106d      	asrs	r5, r5, #1
 800b64a:	d00b      	beq.n	800b664 <__pow5mult+0xa0>
 800b64c:	6820      	ldr	r0, [r4, #0]
 800b64e:	b938      	cbnz	r0, 800b660 <__pow5mult+0x9c>
 800b650:	4622      	mov	r2, r4
 800b652:	4621      	mov	r1, r4
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff ff0b 	bl	800b470 <__multiply>
 800b65a:	6020      	str	r0, [r4, #0]
 800b65c:	f8c0 9000 	str.w	r9, [r0]
 800b660:	4604      	mov	r4, r0
 800b662:	e7e4      	b.n	800b62e <__pow5mult+0x6a>
 800b664:	4638      	mov	r0, r7
 800b666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66a:	bf00      	nop
 800b66c:	0800d7a0 	.word	0x0800d7a0
 800b670:	0800d556 	.word	0x0800d556
 800b674:	0800d654 	.word	0x0800d654

0800b678 <__lshift>:
 800b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	460c      	mov	r4, r1
 800b67e:	6849      	ldr	r1, [r1, #4]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b686:	68a3      	ldr	r3, [r4, #8]
 800b688:	4607      	mov	r7, r0
 800b68a:	4691      	mov	r9, r2
 800b68c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b690:	f108 0601 	add.w	r6, r8, #1
 800b694:	42b3      	cmp	r3, r6
 800b696:	db0b      	blt.n	800b6b0 <__lshift+0x38>
 800b698:	4638      	mov	r0, r7
 800b69a:	f7ff fd91 	bl	800b1c0 <_Balloc>
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b948      	cbnz	r0, 800b6b6 <__lshift+0x3e>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	4b2a      	ldr	r3, [pc, #168]	; (800b750 <__lshift+0xd8>)
 800b6a6:	482b      	ldr	r0, [pc, #172]	; (800b754 <__lshift+0xdc>)
 800b6a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6ac:	f001 f8f4 	bl	800c898 <__assert_func>
 800b6b0:	3101      	adds	r1, #1
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	e7ee      	b.n	800b694 <__lshift+0x1c>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f100 0114 	add.w	r1, r0, #20
 800b6bc:	f100 0210 	add.w	r2, r0, #16
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	4553      	cmp	r3, sl
 800b6c4:	db37      	blt.n	800b736 <__lshift+0xbe>
 800b6c6:	6920      	ldr	r0, [r4, #16]
 800b6c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6cc:	f104 0314 	add.w	r3, r4, #20
 800b6d0:	f019 091f 	ands.w	r9, r9, #31
 800b6d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6dc:	d02f      	beq.n	800b73e <__lshift+0xc6>
 800b6de:	f1c9 0e20 	rsb	lr, r9, #32
 800b6e2:	468a      	mov	sl, r1
 800b6e4:	f04f 0c00 	mov.w	ip, #0
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	fa02 f209 	lsl.w	r2, r2, r9
 800b6ee:	ea42 020c 	orr.w	r2, r2, ip
 800b6f2:	f84a 2b04 	str.w	r2, [sl], #4
 800b6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fa:	4298      	cmp	r0, r3
 800b6fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b700:	d8f2      	bhi.n	800b6e8 <__lshift+0x70>
 800b702:	1b03      	subs	r3, r0, r4
 800b704:	3b15      	subs	r3, #21
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	3304      	adds	r3, #4
 800b70c:	f104 0215 	add.w	r2, r4, #21
 800b710:	4290      	cmp	r0, r2
 800b712:	bf38      	it	cc
 800b714:	2304      	movcc	r3, #4
 800b716:	f841 c003 	str.w	ip, [r1, r3]
 800b71a:	f1bc 0f00 	cmp.w	ip, #0
 800b71e:	d001      	beq.n	800b724 <__lshift+0xac>
 800b720:	f108 0602 	add.w	r6, r8, #2
 800b724:	3e01      	subs	r6, #1
 800b726:	4638      	mov	r0, r7
 800b728:	612e      	str	r6, [r5, #16]
 800b72a:	4621      	mov	r1, r4
 800b72c:	f7ff fd88 	bl	800b240 <_Bfree>
 800b730:	4628      	mov	r0, r5
 800b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b736:	f842 0f04 	str.w	r0, [r2, #4]!
 800b73a:	3301      	adds	r3, #1
 800b73c:	e7c1      	b.n	800b6c2 <__lshift+0x4a>
 800b73e:	3904      	subs	r1, #4
 800b740:	f853 2b04 	ldr.w	r2, [r3], #4
 800b744:	f841 2f04 	str.w	r2, [r1, #4]!
 800b748:	4298      	cmp	r0, r3
 800b74a:	d8f9      	bhi.n	800b740 <__lshift+0xc8>
 800b74c:	e7ea      	b.n	800b724 <__lshift+0xac>
 800b74e:	bf00      	nop
 800b750:	0800d5c8 	.word	0x0800d5c8
 800b754:	0800d654 	.word	0x0800d654

0800b758 <__mcmp>:
 800b758:	b530      	push	{r4, r5, lr}
 800b75a:	6902      	ldr	r2, [r0, #16]
 800b75c:	690c      	ldr	r4, [r1, #16]
 800b75e:	1b12      	subs	r2, r2, r4
 800b760:	d10e      	bne.n	800b780 <__mcmp+0x28>
 800b762:	f100 0314 	add.w	r3, r0, #20
 800b766:	3114      	adds	r1, #20
 800b768:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b76c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b770:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b774:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b778:	42a5      	cmp	r5, r4
 800b77a:	d003      	beq.n	800b784 <__mcmp+0x2c>
 800b77c:	d305      	bcc.n	800b78a <__mcmp+0x32>
 800b77e:	2201      	movs	r2, #1
 800b780:	4610      	mov	r0, r2
 800b782:	bd30      	pop	{r4, r5, pc}
 800b784:	4283      	cmp	r3, r0
 800b786:	d3f3      	bcc.n	800b770 <__mcmp+0x18>
 800b788:	e7fa      	b.n	800b780 <__mcmp+0x28>
 800b78a:	f04f 32ff 	mov.w	r2, #4294967295
 800b78e:	e7f7      	b.n	800b780 <__mcmp+0x28>

0800b790 <__mdiff>:
 800b790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	460c      	mov	r4, r1
 800b796:	4606      	mov	r6, r0
 800b798:	4611      	mov	r1, r2
 800b79a:	4620      	mov	r0, r4
 800b79c:	4690      	mov	r8, r2
 800b79e:	f7ff ffdb 	bl	800b758 <__mcmp>
 800b7a2:	1e05      	subs	r5, r0, #0
 800b7a4:	d110      	bne.n	800b7c8 <__mdiff+0x38>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7ff fd09 	bl	800b1c0 <_Balloc>
 800b7ae:	b930      	cbnz	r0, 800b7be <__mdiff+0x2e>
 800b7b0:	4b3a      	ldr	r3, [pc, #232]	; (800b89c <__mdiff+0x10c>)
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	f240 2132 	movw	r1, #562	; 0x232
 800b7b8:	4839      	ldr	r0, [pc, #228]	; (800b8a0 <__mdiff+0x110>)
 800b7ba:	f001 f86d 	bl	800c898 <__assert_func>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	bfa4      	itt	ge
 800b7ca:	4643      	movge	r3, r8
 800b7cc:	46a0      	movge	r8, r4
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7d4:	bfa6      	itte	ge
 800b7d6:	461c      	movge	r4, r3
 800b7d8:	2500      	movge	r5, #0
 800b7da:	2501      	movlt	r5, #1
 800b7dc:	f7ff fcf0 	bl	800b1c0 <_Balloc>
 800b7e0:	b920      	cbnz	r0, 800b7ec <__mdiff+0x5c>
 800b7e2:	4b2e      	ldr	r3, [pc, #184]	; (800b89c <__mdiff+0x10c>)
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7ea:	e7e5      	b.n	800b7b8 <__mdiff+0x28>
 800b7ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7f0:	6926      	ldr	r6, [r4, #16]
 800b7f2:	60c5      	str	r5, [r0, #12]
 800b7f4:	f104 0914 	add.w	r9, r4, #20
 800b7f8:	f108 0514 	add.w	r5, r8, #20
 800b7fc:	f100 0e14 	add.w	lr, r0, #20
 800b800:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b808:	f108 0210 	add.w	r2, r8, #16
 800b80c:	46f2      	mov	sl, lr
 800b80e:	2100      	movs	r1, #0
 800b810:	f859 3b04 	ldr.w	r3, [r9], #4
 800b814:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b818:	fa1f f883 	uxth.w	r8, r3
 800b81c:	fa11 f18b 	uxtah	r1, r1, fp
 800b820:	0c1b      	lsrs	r3, r3, #16
 800b822:	eba1 0808 	sub.w	r8, r1, r8
 800b826:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b82a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b82e:	fa1f f888 	uxth.w	r8, r8
 800b832:	1419      	asrs	r1, r3, #16
 800b834:	454e      	cmp	r6, r9
 800b836:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b83a:	f84a 3b04 	str.w	r3, [sl], #4
 800b83e:	d8e7      	bhi.n	800b810 <__mdiff+0x80>
 800b840:	1b33      	subs	r3, r6, r4
 800b842:	3b15      	subs	r3, #21
 800b844:	f023 0303 	bic.w	r3, r3, #3
 800b848:	3304      	adds	r3, #4
 800b84a:	3415      	adds	r4, #21
 800b84c:	42a6      	cmp	r6, r4
 800b84e:	bf38      	it	cc
 800b850:	2304      	movcc	r3, #4
 800b852:	441d      	add	r5, r3
 800b854:	4473      	add	r3, lr
 800b856:	469e      	mov	lr, r3
 800b858:	462e      	mov	r6, r5
 800b85a:	4566      	cmp	r6, ip
 800b85c:	d30e      	bcc.n	800b87c <__mdiff+0xec>
 800b85e:	f10c 0203 	add.w	r2, ip, #3
 800b862:	1b52      	subs	r2, r2, r5
 800b864:	f022 0203 	bic.w	r2, r2, #3
 800b868:	3d03      	subs	r5, #3
 800b86a:	45ac      	cmp	ip, r5
 800b86c:	bf38      	it	cc
 800b86e:	2200      	movcc	r2, #0
 800b870:	441a      	add	r2, r3
 800b872:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b876:	b17b      	cbz	r3, 800b898 <__mdiff+0x108>
 800b878:	6107      	str	r7, [r0, #16]
 800b87a:	e7a3      	b.n	800b7c4 <__mdiff+0x34>
 800b87c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b880:	fa11 f288 	uxtah	r2, r1, r8
 800b884:	1414      	asrs	r4, r2, #16
 800b886:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b88a:	b292      	uxth	r2, r2
 800b88c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b890:	f84e 2b04 	str.w	r2, [lr], #4
 800b894:	1421      	asrs	r1, r4, #16
 800b896:	e7e0      	b.n	800b85a <__mdiff+0xca>
 800b898:	3f01      	subs	r7, #1
 800b89a:	e7ea      	b.n	800b872 <__mdiff+0xe2>
 800b89c:	0800d5c8 	.word	0x0800d5c8
 800b8a0:	0800d654 	.word	0x0800d654

0800b8a4 <__ulp>:
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	ed8d 0b00 	vstr	d0, [sp]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	4912      	ldr	r1, [pc, #72]	; (800b8f8 <__ulp+0x54>)
 800b8ae:	4019      	ands	r1, r3
 800b8b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	dd05      	ble.n	800b8c4 <__ulp+0x20>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	ec43 2b10 	vmov	d0, r2, r3
 800b8c0:	b002      	add	sp, #8
 800b8c2:	4770      	bx	lr
 800b8c4:	4249      	negs	r1, r1
 800b8c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	f04f 0300 	mov.w	r3, #0
 800b8d6:	da04      	bge.n	800b8e2 <__ulp+0x3e>
 800b8d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8dc:	fa41 f300 	asr.w	r3, r1, r0
 800b8e0:	e7ec      	b.n	800b8bc <__ulp+0x18>
 800b8e2:	f1a0 0114 	sub.w	r1, r0, #20
 800b8e6:	291e      	cmp	r1, #30
 800b8e8:	bfda      	itte	le
 800b8ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8f2:	2101      	movgt	r1, #1
 800b8f4:	460a      	mov	r2, r1
 800b8f6:	e7e1      	b.n	800b8bc <__ulp+0x18>
 800b8f8:	7ff00000 	.word	0x7ff00000

0800b8fc <__b2d>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	6905      	ldr	r5, [r0, #16]
 800b900:	f100 0714 	add.w	r7, r0, #20
 800b904:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b908:	1f2e      	subs	r6, r5, #4
 800b90a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff fd48 	bl	800b3a4 <__hi0bits>
 800b914:	f1c0 0320 	rsb	r3, r0, #32
 800b918:	280a      	cmp	r0, #10
 800b91a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b998 <__b2d+0x9c>
 800b91e:	600b      	str	r3, [r1, #0]
 800b920:	dc14      	bgt.n	800b94c <__b2d+0x50>
 800b922:	f1c0 0e0b 	rsb	lr, r0, #11
 800b926:	fa24 f10e 	lsr.w	r1, r4, lr
 800b92a:	42b7      	cmp	r7, r6
 800b92c:	ea41 030c 	orr.w	r3, r1, ip
 800b930:	bf34      	ite	cc
 800b932:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b936:	2100      	movcs	r1, #0
 800b938:	3015      	adds	r0, #21
 800b93a:	fa04 f000 	lsl.w	r0, r4, r0
 800b93e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b942:	ea40 0201 	orr.w	r2, r0, r1
 800b946:	ec43 2b10 	vmov	d0, r2, r3
 800b94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b94c:	42b7      	cmp	r7, r6
 800b94e:	bf3a      	itte	cc
 800b950:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b954:	f1a5 0608 	subcc.w	r6, r5, #8
 800b958:	2100      	movcs	r1, #0
 800b95a:	380b      	subs	r0, #11
 800b95c:	d017      	beq.n	800b98e <__b2d+0x92>
 800b95e:	f1c0 0c20 	rsb	ip, r0, #32
 800b962:	fa04 f500 	lsl.w	r5, r4, r0
 800b966:	42be      	cmp	r6, r7
 800b968:	fa21 f40c 	lsr.w	r4, r1, ip
 800b96c:	ea45 0504 	orr.w	r5, r5, r4
 800b970:	bf8c      	ite	hi
 800b972:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b976:	2400      	movls	r4, #0
 800b978:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b97c:	fa01 f000 	lsl.w	r0, r1, r0
 800b980:	fa24 f40c 	lsr.w	r4, r4, ip
 800b984:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b988:	ea40 0204 	orr.w	r2, r0, r4
 800b98c:	e7db      	b.n	800b946 <__b2d+0x4a>
 800b98e:	ea44 030c 	orr.w	r3, r4, ip
 800b992:	460a      	mov	r2, r1
 800b994:	e7d7      	b.n	800b946 <__b2d+0x4a>
 800b996:	bf00      	nop
 800b998:	3ff00000 	.word	0x3ff00000

0800b99c <__d2b>:
 800b99c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	ec57 6b10 	vmov	r6, r7, d0
 800b9a8:	4690      	mov	r8, r2
 800b9aa:	f7ff fc09 	bl	800b1c0 <_Balloc>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	b930      	cbnz	r0, 800b9c0 <__d2b+0x24>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b25      	ldr	r3, [pc, #148]	; (800ba4c <__d2b+0xb0>)
 800b9b6:	4826      	ldr	r0, [pc, #152]	; (800ba50 <__d2b+0xb4>)
 800b9b8:	f240 310a 	movw	r1, #778	; 0x30a
 800b9bc:	f000 ff6c 	bl	800c898 <__assert_func>
 800b9c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9c8:	bb35      	cbnz	r5, 800ba18 <__d2b+0x7c>
 800b9ca:	2e00      	cmp	r6, #0
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	d028      	beq.n	800ba22 <__d2b+0x86>
 800b9d0:	4668      	mov	r0, sp
 800b9d2:	9600      	str	r6, [sp, #0]
 800b9d4:	f7ff fd06 	bl	800b3e4 <__lo0bits>
 800b9d8:	9900      	ldr	r1, [sp, #0]
 800b9da:	b300      	cbz	r0, 800ba1e <__d2b+0x82>
 800b9dc:	9a01      	ldr	r2, [sp, #4]
 800b9de:	f1c0 0320 	rsb	r3, r0, #32
 800b9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e6:	430b      	orrs	r3, r1
 800b9e8:	40c2      	lsrs	r2, r0
 800b9ea:	6163      	str	r3, [r4, #20]
 800b9ec:	9201      	str	r2, [sp, #4]
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	61a3      	str	r3, [r4, #24]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bf14      	ite	ne
 800b9f6:	2202      	movne	r2, #2
 800b9f8:	2201      	moveq	r2, #1
 800b9fa:	6122      	str	r2, [r4, #16]
 800b9fc:	b1d5      	cbz	r5, 800ba34 <__d2b+0x98>
 800b9fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba02:	4405      	add	r5, r0
 800ba04:	f8c9 5000 	str.w	r5, [r9]
 800ba08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba0c:	f8c8 0000 	str.w	r0, [r8]
 800ba10:	4620      	mov	r0, r4
 800ba12:	b003      	add	sp, #12
 800ba14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba1c:	e7d5      	b.n	800b9ca <__d2b+0x2e>
 800ba1e:	6161      	str	r1, [r4, #20]
 800ba20:	e7e5      	b.n	800b9ee <__d2b+0x52>
 800ba22:	a801      	add	r0, sp, #4
 800ba24:	f7ff fcde 	bl	800b3e4 <__lo0bits>
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	6163      	str	r3, [r4, #20]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	6122      	str	r2, [r4, #16]
 800ba30:	3020      	adds	r0, #32
 800ba32:	e7e3      	b.n	800b9fc <__d2b+0x60>
 800ba34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba3c:	f8c9 0000 	str.w	r0, [r9]
 800ba40:	6918      	ldr	r0, [r3, #16]
 800ba42:	f7ff fcaf 	bl	800b3a4 <__hi0bits>
 800ba46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba4a:	e7df      	b.n	800ba0c <__d2b+0x70>
 800ba4c:	0800d5c8 	.word	0x0800d5c8
 800ba50:	0800d654 	.word	0x0800d654

0800ba54 <__ratio>:
 800ba54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	4688      	mov	r8, r1
 800ba5a:	4669      	mov	r1, sp
 800ba5c:	4681      	mov	r9, r0
 800ba5e:	f7ff ff4d 	bl	800b8fc <__b2d>
 800ba62:	a901      	add	r1, sp, #4
 800ba64:	4640      	mov	r0, r8
 800ba66:	ec55 4b10 	vmov	r4, r5, d0
 800ba6a:	f7ff ff47 	bl	800b8fc <__b2d>
 800ba6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba76:	eba3 0c02 	sub.w	ip, r3, r2
 800ba7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba84:	ec51 0b10 	vmov	r0, r1, d0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	bfd6      	itet	le
 800ba8c:	460a      	movle	r2, r1
 800ba8e:	462a      	movgt	r2, r5
 800ba90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba94:	468b      	mov	fp, r1
 800ba96:	462f      	mov	r7, r5
 800ba98:	bfd4      	ite	le
 800ba9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800baa2:	4620      	mov	r0, r4
 800baa4:	ee10 2a10 	vmov	r2, s0
 800baa8:	465b      	mov	r3, fp
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 feee 	bl	800088c <__aeabi_ddiv>
 800bab0:	ec41 0b10 	vmov	d0, r0, r1
 800bab4:	b003      	add	sp, #12
 800bab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baba <__copybits>:
 800baba:	3901      	subs	r1, #1
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	1149      	asrs	r1, r1, #5
 800bac0:	6914      	ldr	r4, [r2, #16]
 800bac2:	3101      	adds	r1, #1
 800bac4:	f102 0314 	add.w	r3, r2, #20
 800bac8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bacc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bad0:	1f05      	subs	r5, r0, #4
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	d30c      	bcc.n	800baf0 <__copybits+0x36>
 800bad6:	1aa3      	subs	r3, r4, r2
 800bad8:	3b11      	subs	r3, #17
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	3211      	adds	r2, #17
 800bae0:	42a2      	cmp	r2, r4
 800bae2:	bf88      	it	hi
 800bae4:	2300      	movhi	r3, #0
 800bae6:	4418      	add	r0, r3
 800bae8:	2300      	movs	r3, #0
 800baea:	4288      	cmp	r0, r1
 800baec:	d305      	bcc.n	800bafa <__copybits+0x40>
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	f853 6b04 	ldr.w	r6, [r3], #4
 800baf4:	f845 6f04 	str.w	r6, [r5, #4]!
 800baf8:	e7eb      	b.n	800bad2 <__copybits+0x18>
 800bafa:	f840 3b04 	str.w	r3, [r0], #4
 800bafe:	e7f4      	b.n	800baea <__copybits+0x30>

0800bb00 <__any_on>:
 800bb00:	f100 0214 	add.w	r2, r0, #20
 800bb04:	6900      	ldr	r0, [r0, #16]
 800bb06:	114b      	asrs	r3, r1, #5
 800bb08:	4298      	cmp	r0, r3
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	db11      	blt.n	800bb32 <__any_on+0x32>
 800bb0e:	dd0a      	ble.n	800bb26 <__any_on+0x26>
 800bb10:	f011 011f 	ands.w	r1, r1, #31
 800bb14:	d007      	beq.n	800bb26 <__any_on+0x26>
 800bb16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb1a:	fa24 f001 	lsr.w	r0, r4, r1
 800bb1e:	fa00 f101 	lsl.w	r1, r0, r1
 800bb22:	428c      	cmp	r4, r1
 800bb24:	d10b      	bne.n	800bb3e <__any_on+0x3e>
 800bb26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d803      	bhi.n	800bb36 <__any_on+0x36>
 800bb2e:	2000      	movs	r0, #0
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	4603      	mov	r3, r0
 800bb34:	e7f7      	b.n	800bb26 <__any_on+0x26>
 800bb36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	d0f5      	beq.n	800bb2a <__any_on+0x2a>
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7f6      	b.n	800bb30 <__any_on+0x30>

0800bb42 <_calloc_r>:
 800bb42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb44:	fba1 2402 	umull	r2, r4, r1, r2
 800bb48:	b94c      	cbnz	r4, 800bb5e <_calloc_r+0x1c>
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	9201      	str	r2, [sp, #4]
 800bb4e:	f000 f87b 	bl	800bc48 <_malloc_r>
 800bb52:	9a01      	ldr	r2, [sp, #4]
 800bb54:	4605      	mov	r5, r0
 800bb56:	b930      	cbnz	r0, 800bb66 <_calloc_r+0x24>
 800bb58:	4628      	mov	r0, r5
 800bb5a:	b003      	add	sp, #12
 800bb5c:	bd30      	pop	{r4, r5, pc}
 800bb5e:	220c      	movs	r2, #12
 800bb60:	6002      	str	r2, [r0, #0]
 800bb62:	2500      	movs	r5, #0
 800bb64:	e7f8      	b.n	800bb58 <_calloc_r+0x16>
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7fc fb16 	bl	8008198 <memset>
 800bb6c:	e7f4      	b.n	800bb58 <_calloc_r+0x16>
	...

0800bb70 <_free_r>:
 800bb70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb72:	2900      	cmp	r1, #0
 800bb74:	d044      	beq.n	800bc00 <_free_r+0x90>
 800bb76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb7a:	9001      	str	r0, [sp, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb82:	bfb8      	it	lt
 800bb84:	18e4      	addlt	r4, r4, r3
 800bb86:	f001 f88b 	bl	800cca0 <__malloc_lock>
 800bb8a:	4a1e      	ldr	r2, [pc, #120]	; (800bc04 <_free_r+0x94>)
 800bb8c:	9801      	ldr	r0, [sp, #4]
 800bb8e:	6813      	ldr	r3, [r2, #0]
 800bb90:	b933      	cbnz	r3, 800bba0 <_free_r+0x30>
 800bb92:	6063      	str	r3, [r4, #4]
 800bb94:	6014      	str	r4, [r2, #0]
 800bb96:	b003      	add	sp, #12
 800bb98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb9c:	f001 b886 	b.w	800ccac <__malloc_unlock>
 800bba0:	42a3      	cmp	r3, r4
 800bba2:	d908      	bls.n	800bbb6 <_free_r+0x46>
 800bba4:	6825      	ldr	r5, [r4, #0]
 800bba6:	1961      	adds	r1, r4, r5
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	bf01      	itttt	eq
 800bbac:	6819      	ldreq	r1, [r3, #0]
 800bbae:	685b      	ldreq	r3, [r3, #4]
 800bbb0:	1949      	addeq	r1, r1, r5
 800bbb2:	6021      	streq	r1, [r4, #0]
 800bbb4:	e7ed      	b.n	800bb92 <_free_r+0x22>
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	b10b      	cbz	r3, 800bbc0 <_free_r+0x50>
 800bbbc:	42a3      	cmp	r3, r4
 800bbbe:	d9fa      	bls.n	800bbb6 <_free_r+0x46>
 800bbc0:	6811      	ldr	r1, [r2, #0]
 800bbc2:	1855      	adds	r5, r2, r1
 800bbc4:	42a5      	cmp	r5, r4
 800bbc6:	d10b      	bne.n	800bbe0 <_free_r+0x70>
 800bbc8:	6824      	ldr	r4, [r4, #0]
 800bbca:	4421      	add	r1, r4
 800bbcc:	1854      	adds	r4, r2, r1
 800bbce:	42a3      	cmp	r3, r4
 800bbd0:	6011      	str	r1, [r2, #0]
 800bbd2:	d1e0      	bne.n	800bb96 <_free_r+0x26>
 800bbd4:	681c      	ldr	r4, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	6053      	str	r3, [r2, #4]
 800bbda:	4421      	add	r1, r4
 800bbdc:	6011      	str	r1, [r2, #0]
 800bbde:	e7da      	b.n	800bb96 <_free_r+0x26>
 800bbe0:	d902      	bls.n	800bbe8 <_free_r+0x78>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	6003      	str	r3, [r0, #0]
 800bbe6:	e7d6      	b.n	800bb96 <_free_r+0x26>
 800bbe8:	6825      	ldr	r5, [r4, #0]
 800bbea:	1961      	adds	r1, r4, r5
 800bbec:	428b      	cmp	r3, r1
 800bbee:	bf04      	itt	eq
 800bbf0:	6819      	ldreq	r1, [r3, #0]
 800bbf2:	685b      	ldreq	r3, [r3, #4]
 800bbf4:	6063      	str	r3, [r4, #4]
 800bbf6:	bf04      	itt	eq
 800bbf8:	1949      	addeq	r1, r1, r5
 800bbfa:	6021      	streq	r1, [r4, #0]
 800bbfc:	6054      	str	r4, [r2, #4]
 800bbfe:	e7ca      	b.n	800bb96 <_free_r+0x26>
 800bc00:	b003      	add	sp, #12
 800bc02:	bd30      	pop	{r4, r5, pc}
 800bc04:	20000490 	.word	0x20000490

0800bc08 <sbrk_aligned>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	4e0e      	ldr	r6, [pc, #56]	; (800bc44 <sbrk_aligned+0x3c>)
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	6831      	ldr	r1, [r6, #0]
 800bc10:	4605      	mov	r5, r0
 800bc12:	b911      	cbnz	r1, 800bc1a <sbrk_aligned+0x12>
 800bc14:	f000 fd28 	bl	800c668 <_sbrk_r>
 800bc18:	6030      	str	r0, [r6, #0]
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f000 fd23 	bl	800c668 <_sbrk_r>
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	d00a      	beq.n	800bc3c <sbrk_aligned+0x34>
 800bc26:	1cc4      	adds	r4, r0, #3
 800bc28:	f024 0403 	bic.w	r4, r4, #3
 800bc2c:	42a0      	cmp	r0, r4
 800bc2e:	d007      	beq.n	800bc40 <sbrk_aligned+0x38>
 800bc30:	1a21      	subs	r1, r4, r0
 800bc32:	4628      	mov	r0, r5
 800bc34:	f000 fd18 	bl	800c668 <_sbrk_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d101      	bne.n	800bc40 <sbrk_aligned+0x38>
 800bc3c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc40:	4620      	mov	r0, r4
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
 800bc44:	20000494 	.word	0x20000494

0800bc48 <_malloc_r>:
 800bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4c:	1ccd      	adds	r5, r1, #3
 800bc4e:	f025 0503 	bic.w	r5, r5, #3
 800bc52:	3508      	adds	r5, #8
 800bc54:	2d0c      	cmp	r5, #12
 800bc56:	bf38      	it	cc
 800bc58:	250c      	movcc	r5, #12
 800bc5a:	2d00      	cmp	r5, #0
 800bc5c:	4607      	mov	r7, r0
 800bc5e:	db01      	blt.n	800bc64 <_malloc_r+0x1c>
 800bc60:	42a9      	cmp	r1, r5
 800bc62:	d905      	bls.n	800bc70 <_malloc_r+0x28>
 800bc64:	230c      	movs	r3, #12
 800bc66:	603b      	str	r3, [r7, #0]
 800bc68:	2600      	movs	r6, #0
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc70:	4e2e      	ldr	r6, [pc, #184]	; (800bd2c <_malloc_r+0xe4>)
 800bc72:	f001 f815 	bl	800cca0 <__malloc_lock>
 800bc76:	6833      	ldr	r3, [r6, #0]
 800bc78:	461c      	mov	r4, r3
 800bc7a:	bb34      	cbnz	r4, 800bcca <_malloc_r+0x82>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f7ff ffc2 	bl	800bc08 <sbrk_aligned>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	4604      	mov	r4, r0
 800bc88:	d14d      	bne.n	800bd26 <_malloc_r+0xde>
 800bc8a:	6834      	ldr	r4, [r6, #0]
 800bc8c:	4626      	mov	r6, r4
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	d140      	bne.n	800bd14 <_malloc_r+0xcc>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	4631      	mov	r1, r6
 800bc96:	4638      	mov	r0, r7
 800bc98:	eb04 0803 	add.w	r8, r4, r3
 800bc9c:	f000 fce4 	bl	800c668 <_sbrk_r>
 800bca0:	4580      	cmp	r8, r0
 800bca2:	d13a      	bne.n	800bd1a <_malloc_r+0xd2>
 800bca4:	6821      	ldr	r1, [r4, #0]
 800bca6:	3503      	adds	r5, #3
 800bca8:	1a6d      	subs	r5, r5, r1
 800bcaa:	f025 0503 	bic.w	r5, r5, #3
 800bcae:	3508      	adds	r5, #8
 800bcb0:	2d0c      	cmp	r5, #12
 800bcb2:	bf38      	it	cc
 800bcb4:	250c      	movcc	r5, #12
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7ff ffa5 	bl	800bc08 <sbrk_aligned>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d02b      	beq.n	800bd1a <_malloc_r+0xd2>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	442b      	add	r3, r5
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	e00e      	b.n	800bce8 <_malloc_r+0xa0>
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	1b52      	subs	r2, r2, r5
 800bcce:	d41e      	bmi.n	800bd0e <_malloc_r+0xc6>
 800bcd0:	2a0b      	cmp	r2, #11
 800bcd2:	d916      	bls.n	800bd02 <_malloc_r+0xba>
 800bcd4:	1961      	adds	r1, r4, r5
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	6025      	str	r5, [r4, #0]
 800bcda:	bf18      	it	ne
 800bcdc:	6059      	strne	r1, [r3, #4]
 800bcde:	6863      	ldr	r3, [r4, #4]
 800bce0:	bf08      	it	eq
 800bce2:	6031      	streq	r1, [r6, #0]
 800bce4:	5162      	str	r2, [r4, r5]
 800bce6:	604b      	str	r3, [r1, #4]
 800bce8:	4638      	mov	r0, r7
 800bcea:	f104 060b 	add.w	r6, r4, #11
 800bcee:	f000 ffdd 	bl	800ccac <__malloc_unlock>
 800bcf2:	f026 0607 	bic.w	r6, r6, #7
 800bcf6:	1d23      	adds	r3, r4, #4
 800bcf8:	1af2      	subs	r2, r6, r3
 800bcfa:	d0b6      	beq.n	800bc6a <_malloc_r+0x22>
 800bcfc:	1b9b      	subs	r3, r3, r6
 800bcfe:	50a3      	str	r3, [r4, r2]
 800bd00:	e7b3      	b.n	800bc6a <_malloc_r+0x22>
 800bd02:	6862      	ldr	r2, [r4, #4]
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	bf0c      	ite	eq
 800bd08:	6032      	streq	r2, [r6, #0]
 800bd0a:	605a      	strne	r2, [r3, #4]
 800bd0c:	e7ec      	b.n	800bce8 <_malloc_r+0xa0>
 800bd0e:	4623      	mov	r3, r4
 800bd10:	6864      	ldr	r4, [r4, #4]
 800bd12:	e7b2      	b.n	800bc7a <_malloc_r+0x32>
 800bd14:	4634      	mov	r4, r6
 800bd16:	6876      	ldr	r6, [r6, #4]
 800bd18:	e7b9      	b.n	800bc8e <_malloc_r+0x46>
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	603b      	str	r3, [r7, #0]
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f000 ffc4 	bl	800ccac <__malloc_unlock>
 800bd24:	e7a1      	b.n	800bc6a <_malloc_r+0x22>
 800bd26:	6025      	str	r5, [r4, #0]
 800bd28:	e7de      	b.n	800bce8 <_malloc_r+0xa0>
 800bd2a:	bf00      	nop
 800bd2c:	20000490 	.word	0x20000490

0800bd30 <__ssputs_r>:
 800bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	688e      	ldr	r6, [r1, #8]
 800bd36:	429e      	cmp	r6, r3
 800bd38:	4682      	mov	sl, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	4690      	mov	r8, r2
 800bd3e:	461f      	mov	r7, r3
 800bd40:	d838      	bhi.n	800bdb4 <__ssputs_r+0x84>
 800bd42:	898a      	ldrh	r2, [r1, #12]
 800bd44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd48:	d032      	beq.n	800bdb0 <__ssputs_r+0x80>
 800bd4a:	6825      	ldr	r5, [r4, #0]
 800bd4c:	6909      	ldr	r1, [r1, #16]
 800bd4e:	eba5 0901 	sub.w	r9, r5, r1
 800bd52:	6965      	ldr	r5, [r4, #20]
 800bd54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	444b      	add	r3, r9
 800bd60:	106d      	asrs	r5, r5, #1
 800bd62:	429d      	cmp	r5, r3
 800bd64:	bf38      	it	cc
 800bd66:	461d      	movcc	r5, r3
 800bd68:	0553      	lsls	r3, r2, #21
 800bd6a:	d531      	bpl.n	800bdd0 <__ssputs_r+0xa0>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7ff ff6b 	bl	800bc48 <_malloc_r>
 800bd72:	4606      	mov	r6, r0
 800bd74:	b950      	cbnz	r0, 800bd8c <__ssputs_r+0x5c>
 800bd76:	230c      	movs	r3, #12
 800bd78:	f8ca 3000 	str.w	r3, [sl]
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8c:	6921      	ldr	r1, [r4, #16]
 800bd8e:	464a      	mov	r2, r9
 800bd90:	f7ff fa08 	bl	800b1a4 <memcpy>
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	6126      	str	r6, [r4, #16]
 800bda2:	6165      	str	r5, [r4, #20]
 800bda4:	444e      	add	r6, r9
 800bda6:	eba5 0509 	sub.w	r5, r5, r9
 800bdaa:	6026      	str	r6, [r4, #0]
 800bdac:	60a5      	str	r5, [r4, #8]
 800bdae:	463e      	mov	r6, r7
 800bdb0:	42be      	cmp	r6, r7
 800bdb2:	d900      	bls.n	800bdb6 <__ssputs_r+0x86>
 800bdb4:	463e      	mov	r6, r7
 800bdb6:	6820      	ldr	r0, [r4, #0]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	4641      	mov	r1, r8
 800bdbc:	f000 ff56 	bl	800cc6c <memmove>
 800bdc0:	68a3      	ldr	r3, [r4, #8]
 800bdc2:	1b9b      	subs	r3, r3, r6
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	4433      	add	r3, r6
 800bdca:	6023      	str	r3, [r4, #0]
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e7db      	b.n	800bd88 <__ssputs_r+0x58>
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	f000 ff71 	bl	800ccb8 <_realloc_r>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d1e1      	bne.n	800bda0 <__ssputs_r+0x70>
 800bddc:	6921      	ldr	r1, [r4, #16]
 800bdde:	4650      	mov	r0, sl
 800bde0:	f7ff fec6 	bl	800bb70 <_free_r>
 800bde4:	e7c7      	b.n	800bd76 <__ssputs_r+0x46>
	...

0800bde8 <_svfiprintf_r>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	4698      	mov	r8, r3
 800bdee:	898b      	ldrh	r3, [r1, #12]
 800bdf0:	061b      	lsls	r3, r3, #24
 800bdf2:	b09d      	sub	sp, #116	; 0x74
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	d50e      	bpl.n	800be1a <_svfiprintf_r+0x32>
 800bdfc:	690b      	ldr	r3, [r1, #16]
 800bdfe:	b963      	cbnz	r3, 800be1a <_svfiprintf_r+0x32>
 800be00:	2140      	movs	r1, #64	; 0x40
 800be02:	f7ff ff21 	bl	800bc48 <_malloc_r>
 800be06:	6028      	str	r0, [r5, #0]
 800be08:	6128      	str	r0, [r5, #16]
 800be0a:	b920      	cbnz	r0, 800be16 <_svfiprintf_r+0x2e>
 800be0c:	230c      	movs	r3, #12
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
 800be14:	e0d1      	b.n	800bfba <_svfiprintf_r+0x1d2>
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	616b      	str	r3, [r5, #20]
 800be1a:	2300      	movs	r3, #0
 800be1c:	9309      	str	r3, [sp, #36]	; 0x24
 800be1e:	2320      	movs	r3, #32
 800be20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be24:	f8cd 800c 	str.w	r8, [sp, #12]
 800be28:	2330      	movs	r3, #48	; 0x30
 800be2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfd4 <_svfiprintf_r+0x1ec>
 800be2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be32:	f04f 0901 	mov.w	r9, #1
 800be36:	4623      	mov	r3, r4
 800be38:	469a      	mov	sl, r3
 800be3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be3e:	b10a      	cbz	r2, 800be44 <_svfiprintf_r+0x5c>
 800be40:	2a25      	cmp	r2, #37	; 0x25
 800be42:	d1f9      	bne.n	800be38 <_svfiprintf_r+0x50>
 800be44:	ebba 0b04 	subs.w	fp, sl, r4
 800be48:	d00b      	beq.n	800be62 <_svfiprintf_r+0x7a>
 800be4a:	465b      	mov	r3, fp
 800be4c:	4622      	mov	r2, r4
 800be4e:	4629      	mov	r1, r5
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff ff6d 	bl	800bd30 <__ssputs_r>
 800be56:	3001      	adds	r0, #1
 800be58:	f000 80aa 	beq.w	800bfb0 <_svfiprintf_r+0x1c8>
 800be5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be5e:	445a      	add	r2, fp
 800be60:	9209      	str	r2, [sp, #36]	; 0x24
 800be62:	f89a 3000 	ldrb.w	r3, [sl]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 80a2 	beq.w	800bfb0 <_svfiprintf_r+0x1c8>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be76:	f10a 0a01 	add.w	sl, sl, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	9307      	str	r3, [sp, #28]
 800be7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be82:	931a      	str	r3, [sp, #104]	; 0x68
 800be84:	4654      	mov	r4, sl
 800be86:	2205      	movs	r2, #5
 800be88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8c:	4851      	ldr	r0, [pc, #324]	; (800bfd4 <_svfiprintf_r+0x1ec>)
 800be8e:	f7f4 f9c7 	bl	8000220 <memchr>
 800be92:	9a04      	ldr	r2, [sp, #16]
 800be94:	b9d8      	cbnz	r0, 800bece <_svfiprintf_r+0xe6>
 800be96:	06d0      	lsls	r0, r2, #27
 800be98:	bf44      	itt	mi
 800be9a:	2320      	movmi	r3, #32
 800be9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea0:	0711      	lsls	r1, r2, #28
 800bea2:	bf44      	itt	mi
 800bea4:	232b      	movmi	r3, #43	; 0x2b
 800bea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beaa:	f89a 3000 	ldrb.w	r3, [sl]
 800beae:	2b2a      	cmp	r3, #42	; 0x2a
 800beb0:	d015      	beq.n	800bede <_svfiprintf_r+0xf6>
 800beb2:	9a07      	ldr	r2, [sp, #28]
 800beb4:	4654      	mov	r4, sl
 800beb6:	2000      	movs	r0, #0
 800beb8:	f04f 0c0a 	mov.w	ip, #10
 800bebc:	4621      	mov	r1, r4
 800bebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec2:	3b30      	subs	r3, #48	; 0x30
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	d94e      	bls.n	800bf66 <_svfiprintf_r+0x17e>
 800bec8:	b1b0      	cbz	r0, 800bef8 <_svfiprintf_r+0x110>
 800beca:	9207      	str	r2, [sp, #28]
 800becc:	e014      	b.n	800bef8 <_svfiprintf_r+0x110>
 800bece:	eba0 0308 	sub.w	r3, r0, r8
 800bed2:	fa09 f303 	lsl.w	r3, r9, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	46a2      	mov	sl, r4
 800bedc:	e7d2      	b.n	800be84 <_svfiprintf_r+0x9c>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	1d19      	adds	r1, r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	9103      	str	r1, [sp, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfbb      	ittet	lt
 800beea:	425b      	neglt	r3, r3
 800beec:	f042 0202 	orrlt.w	r2, r2, #2
 800bef0:	9307      	strge	r3, [sp, #28]
 800bef2:	9307      	strlt	r3, [sp, #28]
 800bef4:	bfb8      	it	lt
 800bef6:	9204      	strlt	r2, [sp, #16]
 800bef8:	7823      	ldrb	r3, [r4, #0]
 800befa:	2b2e      	cmp	r3, #46	; 0x2e
 800befc:	d10c      	bne.n	800bf18 <_svfiprintf_r+0x130>
 800befe:	7863      	ldrb	r3, [r4, #1]
 800bf00:	2b2a      	cmp	r3, #42	; 0x2a
 800bf02:	d135      	bne.n	800bf70 <_svfiprintf_r+0x188>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d1a      	adds	r2, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9203      	str	r2, [sp, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfb8      	it	lt
 800bf10:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf14:	3402      	adds	r4, #2
 800bf16:	9305      	str	r3, [sp, #20]
 800bf18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfe4 <_svfiprintf_r+0x1fc>
 800bf1c:	7821      	ldrb	r1, [r4, #0]
 800bf1e:	2203      	movs	r2, #3
 800bf20:	4650      	mov	r0, sl
 800bf22:	f7f4 f97d 	bl	8000220 <memchr>
 800bf26:	b140      	cbz	r0, 800bf3a <_svfiprintf_r+0x152>
 800bf28:	2340      	movs	r3, #64	; 0x40
 800bf2a:	eba0 000a 	sub.w	r0, r0, sl
 800bf2e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf32:	9b04      	ldr	r3, [sp, #16]
 800bf34:	4303      	orrs	r3, r0
 800bf36:	3401      	adds	r4, #1
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3e:	4826      	ldr	r0, [pc, #152]	; (800bfd8 <_svfiprintf_r+0x1f0>)
 800bf40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf44:	2206      	movs	r2, #6
 800bf46:	f7f4 f96b 	bl	8000220 <memchr>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d038      	beq.n	800bfc0 <_svfiprintf_r+0x1d8>
 800bf4e:	4b23      	ldr	r3, [pc, #140]	; (800bfdc <_svfiprintf_r+0x1f4>)
 800bf50:	bb1b      	cbnz	r3, 800bf9a <_svfiprintf_r+0x1b2>
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	3307      	adds	r3, #7
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	9303      	str	r3, [sp, #12]
 800bf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf60:	4433      	add	r3, r6
 800bf62:	9309      	str	r3, [sp, #36]	; 0x24
 800bf64:	e767      	b.n	800be36 <_svfiprintf_r+0x4e>
 800bf66:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	e7a5      	b.n	800bebc <_svfiprintf_r+0xd4>
 800bf70:	2300      	movs	r3, #0
 800bf72:	3401      	adds	r4, #1
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	4619      	mov	r1, r3
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf82:	3a30      	subs	r2, #48	; 0x30
 800bf84:	2a09      	cmp	r2, #9
 800bf86:	d903      	bls.n	800bf90 <_svfiprintf_r+0x1a8>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d0c5      	beq.n	800bf18 <_svfiprintf_r+0x130>
 800bf8c:	9105      	str	r1, [sp, #20]
 800bf8e:	e7c3      	b.n	800bf18 <_svfiprintf_r+0x130>
 800bf90:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf94:	4604      	mov	r4, r0
 800bf96:	2301      	movs	r3, #1
 800bf98:	e7f0      	b.n	800bf7c <_svfiprintf_r+0x194>
 800bf9a:	ab03      	add	r3, sp, #12
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <_svfiprintf_r+0x1f8>)
 800bfa2:	a904      	add	r1, sp, #16
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	f7fc f99f 	bl	80082e8 <_printf_float>
 800bfaa:	1c42      	adds	r2, r0, #1
 800bfac:	4606      	mov	r6, r0
 800bfae:	d1d6      	bne.n	800bf5e <_svfiprintf_r+0x176>
 800bfb0:	89ab      	ldrh	r3, [r5, #12]
 800bfb2:	065b      	lsls	r3, r3, #25
 800bfb4:	f53f af2c 	bmi.w	800be10 <_svfiprintf_r+0x28>
 800bfb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfba:	b01d      	add	sp, #116	; 0x74
 800bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4b06      	ldr	r3, [pc, #24]	; (800bfe0 <_svfiprintf_r+0x1f8>)
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f7fc fc30 	bl	8008830 <_printf_i>
 800bfd0:	e7eb      	b.n	800bfaa <_svfiprintf_r+0x1c2>
 800bfd2:	bf00      	nop
 800bfd4:	0800d7ac 	.word	0x0800d7ac
 800bfd8:	0800d7b6 	.word	0x0800d7b6
 800bfdc:	080082e9 	.word	0x080082e9
 800bfe0:	0800bd31 	.word	0x0800bd31
 800bfe4:	0800d7b2 	.word	0x0800d7b2

0800bfe8 <_sungetc_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	1c4b      	adds	r3, r1, #1
 800bfec:	4614      	mov	r4, r2
 800bfee:	d103      	bne.n	800bff8 <_sungetc_r+0x10>
 800bff0:	f04f 35ff 	mov.w	r5, #4294967295
 800bff4:	4628      	mov	r0, r5
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	8993      	ldrh	r3, [r2, #12]
 800bffa:	f023 0320 	bic.w	r3, r3, #32
 800bffe:	8193      	strh	r3, [r2, #12]
 800c000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c002:	6852      	ldr	r2, [r2, #4]
 800c004:	b2cd      	uxtb	r5, r1
 800c006:	b18b      	cbz	r3, 800c02c <_sungetc_r+0x44>
 800c008:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c00a:	4293      	cmp	r3, r2
 800c00c:	dd08      	ble.n	800c020 <_sungetc_r+0x38>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	1e5a      	subs	r2, r3, #1
 800c012:	6022      	str	r2, [r4, #0]
 800c014:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	3301      	adds	r3, #1
 800c01c:	6063      	str	r3, [r4, #4]
 800c01e:	e7e9      	b.n	800bff4 <_sungetc_r+0xc>
 800c020:	4621      	mov	r1, r4
 800c022:	f000 fbf1 	bl	800c808 <__submore>
 800c026:	2800      	cmp	r0, #0
 800c028:	d0f1      	beq.n	800c00e <_sungetc_r+0x26>
 800c02a:	e7e1      	b.n	800bff0 <_sungetc_r+0x8>
 800c02c:	6921      	ldr	r1, [r4, #16]
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	b151      	cbz	r1, 800c048 <_sungetc_r+0x60>
 800c032:	4299      	cmp	r1, r3
 800c034:	d208      	bcs.n	800c048 <_sungetc_r+0x60>
 800c036:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c03a:	42a9      	cmp	r1, r5
 800c03c:	d104      	bne.n	800c048 <_sungetc_r+0x60>
 800c03e:	3b01      	subs	r3, #1
 800c040:	3201      	adds	r2, #1
 800c042:	6023      	str	r3, [r4, #0]
 800c044:	6062      	str	r2, [r4, #4]
 800c046:	e7d5      	b.n	800bff4 <_sungetc_r+0xc>
 800c048:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c050:	6363      	str	r3, [r4, #52]	; 0x34
 800c052:	2303      	movs	r3, #3
 800c054:	63a3      	str	r3, [r4, #56]	; 0x38
 800c056:	4623      	mov	r3, r4
 800c058:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	2301      	movs	r3, #1
 800c060:	e7dc      	b.n	800c01c <_sungetc_r+0x34>

0800c062 <__ssrefill_r>:
 800c062:	b510      	push	{r4, lr}
 800c064:	460c      	mov	r4, r1
 800c066:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c068:	b169      	cbz	r1, 800c086 <__ssrefill_r+0x24>
 800c06a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c06e:	4299      	cmp	r1, r3
 800c070:	d001      	beq.n	800c076 <__ssrefill_r+0x14>
 800c072:	f7ff fd7d 	bl	800bb70 <_free_r>
 800c076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c078:	6063      	str	r3, [r4, #4]
 800c07a:	2000      	movs	r0, #0
 800c07c:	6360      	str	r0, [r4, #52]	; 0x34
 800c07e:	b113      	cbz	r3, 800c086 <__ssrefill_r+0x24>
 800c080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	bd10      	pop	{r4, pc}
 800c086:	6923      	ldr	r3, [r4, #16]
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	2300      	movs	r3, #0
 800c08c:	6063      	str	r3, [r4, #4]
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f043 0320 	orr.w	r3, r3, #32
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	f04f 30ff 	mov.w	r0, #4294967295
 800c09a:	e7f3      	b.n	800c084 <__ssrefill_r+0x22>

0800c09c <__ssvfiscanf_r>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c0ac:	49a6      	ldr	r1, [pc, #664]	; (800c348 <__ssvfiscanf_r+0x2ac>)
 800c0ae:	91a0      	str	r1, [sp, #640]	; 0x280
 800c0b0:	f10d 0804 	add.w	r8, sp, #4
 800c0b4:	49a5      	ldr	r1, [pc, #660]	; (800c34c <__ssvfiscanf_r+0x2b0>)
 800c0b6:	4fa6      	ldr	r7, [pc, #664]	; (800c350 <__ssvfiscanf_r+0x2b4>)
 800c0b8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c354 <__ssvfiscanf_r+0x2b8>
 800c0bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	91a1      	str	r1, [sp, #644]	; 0x284
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	7813      	ldrb	r3, [r2, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 815a 	beq.w	800c382 <__ssvfiscanf_r+0x2e6>
 800c0ce:	5dd9      	ldrb	r1, [r3, r7]
 800c0d0:	f011 0108 	ands.w	r1, r1, #8
 800c0d4:	f102 0501 	add.w	r5, r2, #1
 800c0d8:	d019      	beq.n	800c10e <__ssvfiscanf_r+0x72>
 800c0da:	6863      	ldr	r3, [r4, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dd0f      	ble.n	800c100 <__ssvfiscanf_r+0x64>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	781a      	ldrb	r2, [r3, #0]
 800c0e4:	5cba      	ldrb	r2, [r7, r2]
 800c0e6:	0712      	lsls	r2, r2, #28
 800c0e8:	d401      	bmi.n	800c0ee <__ssvfiscanf_r+0x52>
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	e7eb      	b.n	800c0c6 <__ssvfiscanf_r+0x2a>
 800c0ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0f0:	3201      	adds	r2, #1
 800c0f2:	9245      	str	r2, [sp, #276]	; 0x114
 800c0f4:	6862      	ldr	r2, [r4, #4]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	3a01      	subs	r2, #1
 800c0fa:	6062      	str	r2, [r4, #4]
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	e7ec      	b.n	800c0da <__ssvfiscanf_r+0x3e>
 800c100:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c102:	4621      	mov	r1, r4
 800c104:	4630      	mov	r0, r6
 800c106:	4798      	blx	r3
 800c108:	2800      	cmp	r0, #0
 800c10a:	d0e9      	beq.n	800c0e0 <__ssvfiscanf_r+0x44>
 800c10c:	e7ed      	b.n	800c0ea <__ssvfiscanf_r+0x4e>
 800c10e:	2b25      	cmp	r3, #37	; 0x25
 800c110:	d012      	beq.n	800c138 <__ssvfiscanf_r+0x9c>
 800c112:	469a      	mov	sl, r3
 800c114:	6863      	ldr	r3, [r4, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	f340 8091 	ble.w	800c23e <__ssvfiscanf_r+0x1a2>
 800c11c:	6822      	ldr	r2, [r4, #0]
 800c11e:	7813      	ldrb	r3, [r2, #0]
 800c120:	4553      	cmp	r3, sl
 800c122:	f040 812e 	bne.w	800c382 <__ssvfiscanf_r+0x2e6>
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	3b01      	subs	r3, #1
 800c12a:	6063      	str	r3, [r4, #4]
 800c12c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c12e:	3201      	adds	r2, #1
 800c130:	3301      	adds	r3, #1
 800c132:	6022      	str	r2, [r4, #0]
 800c134:	9345      	str	r3, [sp, #276]	; 0x114
 800c136:	e7d8      	b.n	800c0ea <__ssvfiscanf_r+0x4e>
 800c138:	9141      	str	r1, [sp, #260]	; 0x104
 800c13a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c13c:	7853      	ldrb	r3, [r2, #1]
 800c13e:	2b2a      	cmp	r3, #42	; 0x2a
 800c140:	bf02      	ittt	eq
 800c142:	2310      	moveq	r3, #16
 800c144:	1c95      	addeq	r5, r2, #2
 800c146:	9341      	streq	r3, [sp, #260]	; 0x104
 800c148:	220a      	movs	r2, #10
 800c14a:	46aa      	mov	sl, r5
 800c14c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c150:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c154:	2b09      	cmp	r3, #9
 800c156:	d91d      	bls.n	800c194 <__ssvfiscanf_r+0xf8>
 800c158:	487e      	ldr	r0, [pc, #504]	; (800c354 <__ssvfiscanf_r+0x2b8>)
 800c15a:	2203      	movs	r2, #3
 800c15c:	f7f4 f860 	bl	8000220 <memchr>
 800c160:	b140      	cbz	r0, 800c174 <__ssvfiscanf_r+0xd8>
 800c162:	2301      	movs	r3, #1
 800c164:	eba0 0009 	sub.w	r0, r0, r9
 800c168:	fa03 f000 	lsl.w	r0, r3, r0
 800c16c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c16e:	4318      	orrs	r0, r3
 800c170:	9041      	str	r0, [sp, #260]	; 0x104
 800c172:	4655      	mov	r5, sl
 800c174:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c178:	2b78      	cmp	r3, #120	; 0x78
 800c17a:	d806      	bhi.n	800c18a <__ssvfiscanf_r+0xee>
 800c17c:	2b57      	cmp	r3, #87	; 0x57
 800c17e:	d810      	bhi.n	800c1a2 <__ssvfiscanf_r+0x106>
 800c180:	2b25      	cmp	r3, #37	; 0x25
 800c182:	d0c6      	beq.n	800c112 <__ssvfiscanf_r+0x76>
 800c184:	d856      	bhi.n	800c234 <__ssvfiscanf_r+0x198>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d064      	beq.n	800c254 <__ssvfiscanf_r+0x1b8>
 800c18a:	2303      	movs	r3, #3
 800c18c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c18e:	230a      	movs	r3, #10
 800c190:	9342      	str	r3, [sp, #264]	; 0x108
 800c192:	e071      	b.n	800c278 <__ssvfiscanf_r+0x1dc>
 800c194:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c196:	fb02 1103 	mla	r1, r2, r3, r1
 800c19a:	3930      	subs	r1, #48	; 0x30
 800c19c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c19e:	4655      	mov	r5, sl
 800c1a0:	e7d3      	b.n	800c14a <__ssvfiscanf_r+0xae>
 800c1a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c1a6:	2a20      	cmp	r2, #32
 800c1a8:	d8ef      	bhi.n	800c18a <__ssvfiscanf_r+0xee>
 800c1aa:	a101      	add	r1, pc, #4	; (adr r1, 800c1b0 <__ssvfiscanf_r+0x114>)
 800c1ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1b0:	0800c263 	.word	0x0800c263
 800c1b4:	0800c18b 	.word	0x0800c18b
 800c1b8:	0800c18b 	.word	0x0800c18b
 800c1bc:	0800c2c1 	.word	0x0800c2c1
 800c1c0:	0800c18b 	.word	0x0800c18b
 800c1c4:	0800c18b 	.word	0x0800c18b
 800c1c8:	0800c18b 	.word	0x0800c18b
 800c1cc:	0800c18b 	.word	0x0800c18b
 800c1d0:	0800c18b 	.word	0x0800c18b
 800c1d4:	0800c18b 	.word	0x0800c18b
 800c1d8:	0800c18b 	.word	0x0800c18b
 800c1dc:	0800c2d7 	.word	0x0800c2d7
 800c1e0:	0800c2ad 	.word	0x0800c2ad
 800c1e4:	0800c23b 	.word	0x0800c23b
 800c1e8:	0800c23b 	.word	0x0800c23b
 800c1ec:	0800c23b 	.word	0x0800c23b
 800c1f0:	0800c18b 	.word	0x0800c18b
 800c1f4:	0800c2b1 	.word	0x0800c2b1
 800c1f8:	0800c18b 	.word	0x0800c18b
 800c1fc:	0800c18b 	.word	0x0800c18b
 800c200:	0800c18b 	.word	0x0800c18b
 800c204:	0800c18b 	.word	0x0800c18b
 800c208:	0800c2e7 	.word	0x0800c2e7
 800c20c:	0800c2b9 	.word	0x0800c2b9
 800c210:	0800c25b 	.word	0x0800c25b
 800c214:	0800c18b 	.word	0x0800c18b
 800c218:	0800c18b 	.word	0x0800c18b
 800c21c:	0800c2e3 	.word	0x0800c2e3
 800c220:	0800c18b 	.word	0x0800c18b
 800c224:	0800c2ad 	.word	0x0800c2ad
 800c228:	0800c18b 	.word	0x0800c18b
 800c22c:	0800c18b 	.word	0x0800c18b
 800c230:	0800c263 	.word	0x0800c263
 800c234:	3b45      	subs	r3, #69	; 0x45
 800c236:	2b02      	cmp	r3, #2
 800c238:	d8a7      	bhi.n	800c18a <__ssvfiscanf_r+0xee>
 800c23a:	2305      	movs	r3, #5
 800c23c:	e01b      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c23e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c240:	4621      	mov	r1, r4
 800c242:	4630      	mov	r0, r6
 800c244:	4798      	blx	r3
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f af68 	beq.w	800c11c <__ssvfiscanf_r+0x80>
 800c24c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c24e:	2800      	cmp	r0, #0
 800c250:	f040 808d 	bne.w	800c36e <__ssvfiscanf_r+0x2d2>
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e08f      	b.n	800c37a <__ssvfiscanf_r+0x2de>
 800c25a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c25c:	f042 0220 	orr.w	r2, r2, #32
 800c260:	9241      	str	r2, [sp, #260]	; 0x104
 800c262:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c268:	9241      	str	r2, [sp, #260]	; 0x104
 800c26a:	2210      	movs	r2, #16
 800c26c:	2b6f      	cmp	r3, #111	; 0x6f
 800c26e:	9242      	str	r2, [sp, #264]	; 0x108
 800c270:	bf34      	ite	cc
 800c272:	2303      	movcc	r3, #3
 800c274:	2304      	movcs	r3, #4
 800c276:	9347      	str	r3, [sp, #284]	; 0x11c
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	dd42      	ble.n	800c304 <__ssvfiscanf_r+0x268>
 800c27e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c280:	0659      	lsls	r1, r3, #25
 800c282:	d404      	bmi.n	800c28e <__ssvfiscanf_r+0x1f2>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	781a      	ldrb	r2, [r3, #0]
 800c288:	5cba      	ldrb	r2, [r7, r2]
 800c28a:	0712      	lsls	r2, r2, #28
 800c28c:	d441      	bmi.n	800c312 <__ssvfiscanf_r+0x276>
 800c28e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c290:	2b02      	cmp	r3, #2
 800c292:	dc50      	bgt.n	800c336 <__ssvfiscanf_r+0x29a>
 800c294:	466b      	mov	r3, sp
 800c296:	4622      	mov	r2, r4
 800c298:	a941      	add	r1, sp, #260	; 0x104
 800c29a:	4630      	mov	r0, r6
 800c29c:	f000 f876 	bl	800c38c <_scanf_chars>
 800c2a0:	2801      	cmp	r0, #1
 800c2a2:	d06e      	beq.n	800c382 <__ssvfiscanf_r+0x2e6>
 800c2a4:	2802      	cmp	r0, #2
 800c2a6:	f47f af20 	bne.w	800c0ea <__ssvfiscanf_r+0x4e>
 800c2aa:	e7cf      	b.n	800c24c <__ssvfiscanf_r+0x1b0>
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	e7dd      	b.n	800c26c <__ssvfiscanf_r+0x1d0>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9342      	str	r3, [sp, #264]	; 0x108
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e7de      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c2b8:	2308      	movs	r3, #8
 800c2ba:	9342      	str	r3, [sp, #264]	; 0x108
 800c2bc:	2304      	movs	r3, #4
 800c2be:	e7da      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f000 f9e0 	bl	800c688 <__sccl>
 800c2c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ce:	9341      	str	r3, [sp, #260]	; 0x104
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e7cf      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c2d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2dc:	9341      	str	r3, [sp, #260]	; 0x104
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e7c9      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e7c7      	b.n	800c276 <__ssvfiscanf_r+0x1da>
 800c2e6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c2e8:	06c3      	lsls	r3, r0, #27
 800c2ea:	f53f aefe 	bmi.w	800c0ea <__ssvfiscanf_r+0x4e>
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2f2:	1d19      	adds	r1, r3, #4
 800c2f4:	9100      	str	r1, [sp, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f010 0f01 	tst.w	r0, #1
 800c2fc:	bf14      	ite	ne
 800c2fe:	801a      	strhne	r2, [r3, #0]
 800c300:	601a      	streq	r2, [r3, #0]
 800c302:	e6f2      	b.n	800c0ea <__ssvfiscanf_r+0x4e>
 800c304:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c306:	4621      	mov	r1, r4
 800c308:	4630      	mov	r0, r6
 800c30a:	4798      	blx	r3
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d0b6      	beq.n	800c27e <__ssvfiscanf_r+0x1e2>
 800c310:	e79c      	b.n	800c24c <__ssvfiscanf_r+0x1b0>
 800c312:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c314:	3201      	adds	r2, #1
 800c316:	9245      	str	r2, [sp, #276]	; 0x114
 800c318:	6862      	ldr	r2, [r4, #4]
 800c31a:	3a01      	subs	r2, #1
 800c31c:	2a00      	cmp	r2, #0
 800c31e:	6062      	str	r2, [r4, #4]
 800c320:	dd02      	ble.n	800c328 <__ssvfiscanf_r+0x28c>
 800c322:	3301      	adds	r3, #1
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	e7ad      	b.n	800c284 <__ssvfiscanf_r+0x1e8>
 800c328:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c32a:	4621      	mov	r1, r4
 800c32c:	4630      	mov	r0, r6
 800c32e:	4798      	blx	r3
 800c330:	2800      	cmp	r0, #0
 800c332:	d0a7      	beq.n	800c284 <__ssvfiscanf_r+0x1e8>
 800c334:	e78a      	b.n	800c24c <__ssvfiscanf_r+0x1b0>
 800c336:	2b04      	cmp	r3, #4
 800c338:	dc0e      	bgt.n	800c358 <__ssvfiscanf_r+0x2bc>
 800c33a:	466b      	mov	r3, sp
 800c33c:	4622      	mov	r2, r4
 800c33e:	a941      	add	r1, sp, #260	; 0x104
 800c340:	4630      	mov	r0, r6
 800c342:	f000 f87d 	bl	800c440 <_scanf_i>
 800c346:	e7ab      	b.n	800c2a0 <__ssvfiscanf_r+0x204>
 800c348:	0800bfe9 	.word	0x0800bfe9
 800c34c:	0800c063 	.word	0x0800c063
 800c350:	0800d449 	.word	0x0800d449
 800c354:	0800d7b2 	.word	0x0800d7b2
 800c358:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <__ssvfiscanf_r+0x2ec>)
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f43f aec5 	beq.w	800c0ea <__ssvfiscanf_r+0x4e>
 800c360:	466b      	mov	r3, sp
 800c362:	4622      	mov	r2, r4
 800c364:	a941      	add	r1, sp, #260	; 0x104
 800c366:	4630      	mov	r0, r6
 800c368:	f7fc fb88 	bl	8008a7c <_scanf_float>
 800c36c:	e798      	b.n	800c2a0 <__ssvfiscanf_r+0x204>
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c374:	bf18      	it	ne
 800c376:	f04f 30ff 	movne.w	r0, #4294967295
 800c37a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c382:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c384:	e7f9      	b.n	800c37a <__ssvfiscanf_r+0x2de>
 800c386:	bf00      	nop
 800c388:	08008a7d 	.word	0x08008a7d

0800c38c <_scanf_chars>:
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	4615      	mov	r5, r2
 800c392:	688a      	ldr	r2, [r1, #8]
 800c394:	4680      	mov	r8, r0
 800c396:	460c      	mov	r4, r1
 800c398:	b932      	cbnz	r2, 800c3a8 <_scanf_chars+0x1c>
 800c39a:	698a      	ldr	r2, [r1, #24]
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	bf0c      	ite	eq
 800c3a0:	2201      	moveq	r2, #1
 800c3a2:	f04f 32ff 	movne.w	r2, #4294967295
 800c3a6:	608a      	str	r2, [r1, #8]
 800c3a8:	6822      	ldr	r2, [r4, #0]
 800c3aa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c43c <_scanf_chars+0xb0>
 800c3ae:	06d1      	lsls	r1, r2, #27
 800c3b0:	bf5f      	itttt	pl
 800c3b2:	681a      	ldrpl	r2, [r3, #0]
 800c3b4:	1d11      	addpl	r1, r2, #4
 800c3b6:	6019      	strpl	r1, [r3, #0]
 800c3b8:	6816      	ldrpl	r6, [r2, #0]
 800c3ba:	2700      	movs	r7, #0
 800c3bc:	69a0      	ldr	r0, [r4, #24]
 800c3be:	b188      	cbz	r0, 800c3e4 <_scanf_chars+0x58>
 800c3c0:	2801      	cmp	r0, #1
 800c3c2:	d107      	bne.n	800c3d4 <_scanf_chars+0x48>
 800c3c4:	682a      	ldr	r2, [r5, #0]
 800c3c6:	7811      	ldrb	r1, [r2, #0]
 800c3c8:	6962      	ldr	r2, [r4, #20]
 800c3ca:	5c52      	ldrb	r2, [r2, r1]
 800c3cc:	b952      	cbnz	r2, 800c3e4 <_scanf_chars+0x58>
 800c3ce:	2f00      	cmp	r7, #0
 800c3d0:	d031      	beq.n	800c436 <_scanf_chars+0xaa>
 800c3d2:	e022      	b.n	800c41a <_scanf_chars+0x8e>
 800c3d4:	2802      	cmp	r0, #2
 800c3d6:	d120      	bne.n	800c41a <_scanf_chars+0x8e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c3e0:	071b      	lsls	r3, r3, #28
 800c3e2:	d41a      	bmi.n	800c41a <_scanf_chars+0x8e>
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	06da      	lsls	r2, r3, #27
 800c3e8:	bf5e      	ittt	pl
 800c3ea:	682b      	ldrpl	r3, [r5, #0]
 800c3ec:	781b      	ldrbpl	r3, [r3, #0]
 800c3ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c3f2:	682a      	ldr	r2, [r5, #0]
 800c3f4:	686b      	ldr	r3, [r5, #4]
 800c3f6:	3201      	adds	r2, #1
 800c3f8:	602a      	str	r2, [r5, #0]
 800c3fa:	68a2      	ldr	r2, [r4, #8]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	3a01      	subs	r2, #1
 800c400:	606b      	str	r3, [r5, #4]
 800c402:	3701      	adds	r7, #1
 800c404:	60a2      	str	r2, [r4, #8]
 800c406:	b142      	cbz	r2, 800c41a <_scanf_chars+0x8e>
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dcd7      	bgt.n	800c3bc <_scanf_chars+0x30>
 800c40c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c410:	4629      	mov	r1, r5
 800c412:	4640      	mov	r0, r8
 800c414:	4798      	blx	r3
 800c416:	2800      	cmp	r0, #0
 800c418:	d0d0      	beq.n	800c3bc <_scanf_chars+0x30>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	f013 0310 	ands.w	r3, r3, #16
 800c420:	d105      	bne.n	800c42e <_scanf_chars+0xa2>
 800c422:	68e2      	ldr	r2, [r4, #12]
 800c424:	3201      	adds	r2, #1
 800c426:	60e2      	str	r2, [r4, #12]
 800c428:	69a2      	ldr	r2, [r4, #24]
 800c42a:	b102      	cbz	r2, 800c42e <_scanf_chars+0xa2>
 800c42c:	7033      	strb	r3, [r6, #0]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	443b      	add	r3, r7
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	2000      	movs	r0, #0
 800c436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43a:	bf00      	nop
 800c43c:	0800d449 	.word	0x0800d449

0800c440 <_scanf_i>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	4698      	mov	r8, r3
 800c446:	4b76      	ldr	r3, [pc, #472]	; (800c620 <_scanf_i+0x1e0>)
 800c448:	460c      	mov	r4, r1
 800c44a:	4682      	mov	sl, r0
 800c44c:	4616      	mov	r6, r2
 800c44e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c452:	b087      	sub	sp, #28
 800c454:	ab03      	add	r3, sp, #12
 800c456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c45a:	4b72      	ldr	r3, [pc, #456]	; (800c624 <_scanf_i+0x1e4>)
 800c45c:	69a1      	ldr	r1, [r4, #24]
 800c45e:	4a72      	ldr	r2, [pc, #456]	; (800c628 <_scanf_i+0x1e8>)
 800c460:	2903      	cmp	r1, #3
 800c462:	bf18      	it	ne
 800c464:	461a      	movne	r2, r3
 800c466:	68a3      	ldr	r3, [r4, #8]
 800c468:	9201      	str	r2, [sp, #4]
 800c46a:	1e5a      	subs	r2, r3, #1
 800c46c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c470:	bf88      	it	hi
 800c472:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c476:	4627      	mov	r7, r4
 800c478:	bf82      	ittt	hi
 800c47a:	eb03 0905 	addhi.w	r9, r3, r5
 800c47e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c482:	60a3      	strhi	r3, [r4, #8]
 800c484:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c488:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c48c:	bf98      	it	ls
 800c48e:	f04f 0900 	movls.w	r9, #0
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	463d      	mov	r5, r7
 800c496:	f04f 0b00 	mov.w	fp, #0
 800c49a:	6831      	ldr	r1, [r6, #0]
 800c49c:	ab03      	add	r3, sp, #12
 800c49e:	7809      	ldrb	r1, [r1, #0]
 800c4a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	f7f3 febb 	bl	8000220 <memchr>
 800c4aa:	b328      	cbz	r0, 800c4f8 <_scanf_i+0xb8>
 800c4ac:	f1bb 0f01 	cmp.w	fp, #1
 800c4b0:	d159      	bne.n	800c566 <_scanf_i+0x126>
 800c4b2:	6862      	ldr	r2, [r4, #4]
 800c4b4:	b92a      	cbnz	r2, 800c4c2 <_scanf_i+0x82>
 800c4b6:	6822      	ldr	r2, [r4, #0]
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4be:	6063      	str	r3, [r4, #4]
 800c4c0:	6022      	str	r2, [r4, #0]
 800c4c2:	6822      	ldr	r2, [r4, #0]
 800c4c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c4c8:	6022      	str	r2, [r4, #0]
 800c4ca:	68a2      	ldr	r2, [r4, #8]
 800c4cc:	1e51      	subs	r1, r2, #1
 800c4ce:	60a1      	str	r1, [r4, #8]
 800c4d0:	b192      	cbz	r2, 800c4f8 <_scanf_i+0xb8>
 800c4d2:	6832      	ldr	r2, [r6, #0]
 800c4d4:	1c51      	adds	r1, r2, #1
 800c4d6:	6031      	str	r1, [r6, #0]
 800c4d8:	7812      	ldrb	r2, [r2, #0]
 800c4da:	f805 2b01 	strb.w	r2, [r5], #1
 800c4de:	6872      	ldr	r2, [r6, #4]
 800c4e0:	3a01      	subs	r2, #1
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	6072      	str	r2, [r6, #4]
 800c4e6:	dc07      	bgt.n	800c4f8 <_scanf_i+0xb8>
 800c4e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4650      	mov	r0, sl
 800c4f0:	4790      	blx	r2
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	f040 8085 	bne.w	800c602 <_scanf_i+0x1c2>
 800c4f8:	f10b 0b01 	add.w	fp, fp, #1
 800c4fc:	f1bb 0f03 	cmp.w	fp, #3
 800c500:	d1cb      	bne.n	800c49a <_scanf_i+0x5a>
 800c502:	6863      	ldr	r3, [r4, #4]
 800c504:	b90b      	cbnz	r3, 800c50a <_scanf_i+0xca>
 800c506:	230a      	movs	r3, #10
 800c508:	6063      	str	r3, [r4, #4]
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	4947      	ldr	r1, [pc, #284]	; (800c62c <_scanf_i+0x1ec>)
 800c50e:	6960      	ldr	r0, [r4, #20]
 800c510:	1ac9      	subs	r1, r1, r3
 800c512:	f000 f8b9 	bl	800c688 <__sccl>
 800c516:	f04f 0b00 	mov.w	fp, #0
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d03d      	beq.n	800c59e <_scanf_i+0x15e>
 800c522:	6831      	ldr	r1, [r6, #0]
 800c524:	6960      	ldr	r0, [r4, #20]
 800c526:	f891 c000 	ldrb.w	ip, [r1]
 800c52a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c52e:	2800      	cmp	r0, #0
 800c530:	d035      	beq.n	800c59e <_scanf_i+0x15e>
 800c532:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c536:	d124      	bne.n	800c582 <_scanf_i+0x142>
 800c538:	0510      	lsls	r0, r2, #20
 800c53a:	d522      	bpl.n	800c582 <_scanf_i+0x142>
 800c53c:	f10b 0b01 	add.w	fp, fp, #1
 800c540:	f1b9 0f00 	cmp.w	r9, #0
 800c544:	d003      	beq.n	800c54e <_scanf_i+0x10e>
 800c546:	3301      	adds	r3, #1
 800c548:	f109 39ff 	add.w	r9, r9, #4294967295
 800c54c:	60a3      	str	r3, [r4, #8]
 800c54e:	6873      	ldr	r3, [r6, #4]
 800c550:	3b01      	subs	r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	6073      	str	r3, [r6, #4]
 800c556:	dd1b      	ble.n	800c590 <_scanf_i+0x150>
 800c558:	6833      	ldr	r3, [r6, #0]
 800c55a:	3301      	adds	r3, #1
 800c55c:	6033      	str	r3, [r6, #0]
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	e7d9      	b.n	800c51a <_scanf_i+0xda>
 800c566:	f1bb 0f02 	cmp.w	fp, #2
 800c56a:	d1ae      	bne.n	800c4ca <_scanf_i+0x8a>
 800c56c:	6822      	ldr	r2, [r4, #0]
 800c56e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c572:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c576:	d1bf      	bne.n	800c4f8 <_scanf_i+0xb8>
 800c578:	2310      	movs	r3, #16
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c580:	e7a2      	b.n	800c4c8 <_scanf_i+0x88>
 800c582:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c586:	6022      	str	r2, [r4, #0]
 800c588:	780b      	ldrb	r3, [r1, #0]
 800c58a:	f805 3b01 	strb.w	r3, [r5], #1
 800c58e:	e7de      	b.n	800c54e <_scanf_i+0x10e>
 800c590:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c594:	4631      	mov	r1, r6
 800c596:	4650      	mov	r0, sl
 800c598:	4798      	blx	r3
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d0df      	beq.n	800c55e <_scanf_i+0x11e>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	05db      	lsls	r3, r3, #23
 800c5a2:	d50d      	bpl.n	800c5c0 <_scanf_i+0x180>
 800c5a4:	42bd      	cmp	r5, r7
 800c5a6:	d909      	bls.n	800c5bc <_scanf_i+0x17c>
 800c5a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	4650      	mov	r0, sl
 800c5b4:	4798      	blx	r3
 800c5b6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c5ba:	464d      	mov	r5, r9
 800c5bc:	42bd      	cmp	r5, r7
 800c5be:	d02d      	beq.n	800c61c <_scanf_i+0x1dc>
 800c5c0:	6822      	ldr	r2, [r4, #0]
 800c5c2:	f012 0210 	ands.w	r2, r2, #16
 800c5c6:	d113      	bne.n	800c5f0 <_scanf_i+0x1b0>
 800c5c8:	702a      	strb	r2, [r5, #0]
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	9e01      	ldr	r6, [sp, #4]
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	47b0      	blx	r6
 800c5d4:	6821      	ldr	r1, [r4, #0]
 800c5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5da:	f011 0f20 	tst.w	r1, #32
 800c5de:	d013      	beq.n	800c608 <_scanf_i+0x1c8>
 800c5e0:	1d1a      	adds	r2, r3, #4
 800c5e2:	f8c8 2000 	str.w	r2, [r8]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6018      	str	r0, [r3, #0]
 800c5ea:	68e3      	ldr	r3, [r4, #12]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60e3      	str	r3, [r4, #12]
 800c5f0:	1bed      	subs	r5, r5, r7
 800c5f2:	44ab      	add	fp, r5
 800c5f4:	6925      	ldr	r5, [r4, #16]
 800c5f6:	445d      	add	r5, fp
 800c5f8:	6125      	str	r5, [r4, #16]
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	b007      	add	sp, #28
 800c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c602:	f04f 0b00 	mov.w	fp, #0
 800c606:	e7ca      	b.n	800c59e <_scanf_i+0x15e>
 800c608:	1d1a      	adds	r2, r3, #4
 800c60a:	f8c8 2000 	str.w	r2, [r8]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f011 0f01 	tst.w	r1, #1
 800c614:	bf14      	ite	ne
 800c616:	8018      	strhne	r0, [r3, #0]
 800c618:	6018      	streq	r0, [r3, #0]
 800c61a:	e7e6      	b.n	800c5ea <_scanf_i+0x1aa>
 800c61c:	2001      	movs	r0, #1
 800c61e:	e7ed      	b.n	800c5fc <_scanf_i+0x1bc>
 800c620:	0800d394 	.word	0x0800d394
 800c624:	0800c805 	.word	0x0800c805
 800c628:	08009d25 	.word	0x08009d25
 800c62c:	0800d7d6 	.word	0x0800d7d6

0800c630 <_read_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4d07      	ldr	r5, [pc, #28]	; (800c650 <_read_r+0x20>)
 800c634:	4604      	mov	r4, r0
 800c636:	4608      	mov	r0, r1
 800c638:	4611      	mov	r1, r2
 800c63a:	2200      	movs	r2, #0
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7f6 fc4c 	bl	8002edc <_read>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_read_r+0x1e>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_read_r+0x1e>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	20000498 	.word	0x20000498
 800c654:	00000000 	.word	0x00000000

0800c658 <nan>:
 800c658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c660 <nan+0x8>
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	00000000 	.word	0x00000000
 800c664:	7ff80000 	.word	0x7ff80000

0800c668 <_sbrk_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d06      	ldr	r5, [pc, #24]	; (800c684 <_sbrk_r+0x1c>)
 800c66c:	2300      	movs	r3, #0
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	f7f6 fca0 	bl	8002fb8 <_sbrk>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_sbrk_r+0x1a>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_sbrk_r+0x1a>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20000498 	.word	0x20000498

0800c688 <__sccl>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	780b      	ldrb	r3, [r1, #0]
 800c68c:	4604      	mov	r4, r0
 800c68e:	2b5e      	cmp	r3, #94	; 0x5e
 800c690:	bf0b      	itete	eq
 800c692:	784b      	ldrbeq	r3, [r1, #1]
 800c694:	1c48      	addne	r0, r1, #1
 800c696:	1c88      	addeq	r0, r1, #2
 800c698:	2200      	movne	r2, #0
 800c69a:	bf08      	it	eq
 800c69c:	2201      	moveq	r2, #1
 800c69e:	1e61      	subs	r1, r4, #1
 800c6a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c6a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c6a8:	42a9      	cmp	r1, r5
 800c6aa:	d1fb      	bne.n	800c6a4 <__sccl+0x1c>
 800c6ac:	b90b      	cbnz	r3, 800c6b2 <__sccl+0x2a>
 800c6ae:	3801      	subs	r0, #1
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	f082 0201 	eor.w	r2, r2, #1
 800c6b6:	54e2      	strb	r2, [r4, r3]
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c6c0:	292d      	cmp	r1, #45	; 0x2d
 800c6c2:	d006      	beq.n	800c6d2 <__sccl+0x4a>
 800c6c4:	295d      	cmp	r1, #93	; 0x5d
 800c6c6:	d0f3      	beq.n	800c6b0 <__sccl+0x28>
 800c6c8:	b909      	cbnz	r1, 800c6ce <__sccl+0x46>
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	e7f0      	b.n	800c6b0 <__sccl+0x28>
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	e7f1      	b.n	800c6b6 <__sccl+0x2e>
 800c6d2:	786e      	ldrb	r6, [r5, #1]
 800c6d4:	2e5d      	cmp	r6, #93	; 0x5d
 800c6d6:	d0fa      	beq.n	800c6ce <__sccl+0x46>
 800c6d8:	42b3      	cmp	r3, r6
 800c6da:	dcf8      	bgt.n	800c6ce <__sccl+0x46>
 800c6dc:	3502      	adds	r5, #2
 800c6de:	4619      	mov	r1, r3
 800c6e0:	3101      	adds	r1, #1
 800c6e2:	428e      	cmp	r6, r1
 800c6e4:	5462      	strb	r2, [r4, r1]
 800c6e6:	dcfb      	bgt.n	800c6e0 <__sccl+0x58>
 800c6e8:	1af1      	subs	r1, r6, r3
 800c6ea:	3901      	subs	r1, #1
 800c6ec:	1c58      	adds	r0, r3, #1
 800c6ee:	42b3      	cmp	r3, r6
 800c6f0:	bfa8      	it	ge
 800c6f2:	2100      	movge	r1, #0
 800c6f4:	1843      	adds	r3, r0, r1
 800c6f6:	e7e0      	b.n	800c6ba <__sccl+0x32>

0800c6f8 <strncmp>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	b17a      	cbz	r2, 800c71c <strncmp+0x24>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	3901      	subs	r1, #1
 800c700:	1884      	adds	r4, r0, r2
 800c702:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c706:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c70a:	4290      	cmp	r0, r2
 800c70c:	d101      	bne.n	800c712 <strncmp+0x1a>
 800c70e:	42a3      	cmp	r3, r4
 800c710:	d101      	bne.n	800c716 <strncmp+0x1e>
 800c712:	1a80      	subs	r0, r0, r2
 800c714:	bd10      	pop	{r4, pc}
 800c716:	2800      	cmp	r0, #0
 800c718:	d1f3      	bne.n	800c702 <strncmp+0xa>
 800c71a:	e7fa      	b.n	800c712 <strncmp+0x1a>
 800c71c:	4610      	mov	r0, r2
 800c71e:	e7f9      	b.n	800c714 <strncmp+0x1c>

0800c720 <_strtoul_l.constprop.0>:
 800c720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c724:	4f36      	ldr	r7, [pc, #216]	; (800c800 <_strtoul_l.constprop.0+0xe0>)
 800c726:	4686      	mov	lr, r0
 800c728:	460d      	mov	r5, r1
 800c72a:	4628      	mov	r0, r5
 800c72c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c730:	5de6      	ldrb	r6, [r4, r7]
 800c732:	f016 0608 	ands.w	r6, r6, #8
 800c736:	d1f8      	bne.n	800c72a <_strtoul_l.constprop.0+0xa>
 800c738:	2c2d      	cmp	r4, #45	; 0x2d
 800c73a:	d12f      	bne.n	800c79c <_strtoul_l.constprop.0+0x7c>
 800c73c:	782c      	ldrb	r4, [r5, #0]
 800c73e:	2601      	movs	r6, #1
 800c740:	1c85      	adds	r5, r0, #2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d057      	beq.n	800c7f6 <_strtoul_l.constprop.0+0xd6>
 800c746:	2b10      	cmp	r3, #16
 800c748:	d109      	bne.n	800c75e <_strtoul_l.constprop.0+0x3e>
 800c74a:	2c30      	cmp	r4, #48	; 0x30
 800c74c:	d107      	bne.n	800c75e <_strtoul_l.constprop.0+0x3e>
 800c74e:	7828      	ldrb	r0, [r5, #0]
 800c750:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c754:	2858      	cmp	r0, #88	; 0x58
 800c756:	d149      	bne.n	800c7ec <_strtoul_l.constprop.0+0xcc>
 800c758:	786c      	ldrb	r4, [r5, #1]
 800c75a:	2310      	movs	r3, #16
 800c75c:	3502      	adds	r5, #2
 800c75e:	f04f 38ff 	mov.w	r8, #4294967295
 800c762:	2700      	movs	r7, #0
 800c764:	fbb8 f8f3 	udiv	r8, r8, r3
 800c768:	fb03 f908 	mul.w	r9, r3, r8
 800c76c:	ea6f 0909 	mvn.w	r9, r9
 800c770:	4638      	mov	r0, r7
 800c772:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c776:	f1bc 0f09 	cmp.w	ip, #9
 800c77a:	d814      	bhi.n	800c7a6 <_strtoul_l.constprop.0+0x86>
 800c77c:	4664      	mov	r4, ip
 800c77e:	42a3      	cmp	r3, r4
 800c780:	dd22      	ble.n	800c7c8 <_strtoul_l.constprop.0+0xa8>
 800c782:	2f00      	cmp	r7, #0
 800c784:	db1d      	blt.n	800c7c2 <_strtoul_l.constprop.0+0xa2>
 800c786:	4580      	cmp	r8, r0
 800c788:	d31b      	bcc.n	800c7c2 <_strtoul_l.constprop.0+0xa2>
 800c78a:	d101      	bne.n	800c790 <_strtoul_l.constprop.0+0x70>
 800c78c:	45a1      	cmp	r9, r4
 800c78e:	db18      	blt.n	800c7c2 <_strtoul_l.constprop.0+0xa2>
 800c790:	fb00 4003 	mla	r0, r0, r3, r4
 800c794:	2701      	movs	r7, #1
 800c796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c79a:	e7ea      	b.n	800c772 <_strtoul_l.constprop.0+0x52>
 800c79c:	2c2b      	cmp	r4, #43	; 0x2b
 800c79e:	bf04      	itt	eq
 800c7a0:	782c      	ldrbeq	r4, [r5, #0]
 800c7a2:	1c85      	addeq	r5, r0, #2
 800c7a4:	e7cd      	b.n	800c742 <_strtoul_l.constprop.0+0x22>
 800c7a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c7aa:	f1bc 0f19 	cmp.w	ip, #25
 800c7ae:	d801      	bhi.n	800c7b4 <_strtoul_l.constprop.0+0x94>
 800c7b0:	3c37      	subs	r4, #55	; 0x37
 800c7b2:	e7e4      	b.n	800c77e <_strtoul_l.constprop.0+0x5e>
 800c7b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c7b8:	f1bc 0f19 	cmp.w	ip, #25
 800c7bc:	d804      	bhi.n	800c7c8 <_strtoul_l.constprop.0+0xa8>
 800c7be:	3c57      	subs	r4, #87	; 0x57
 800c7c0:	e7dd      	b.n	800c77e <_strtoul_l.constprop.0+0x5e>
 800c7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7c6:	e7e6      	b.n	800c796 <_strtoul_l.constprop.0+0x76>
 800c7c8:	2f00      	cmp	r7, #0
 800c7ca:	da07      	bge.n	800c7dc <_strtoul_l.constprop.0+0xbc>
 800c7cc:	2322      	movs	r3, #34	; 0x22
 800c7ce:	f8ce 3000 	str.w	r3, [lr]
 800c7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d6:	b932      	cbnz	r2, 800c7e6 <_strtoul_l.constprop.0+0xc6>
 800c7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7dc:	b106      	cbz	r6, 800c7e0 <_strtoul_l.constprop.0+0xc0>
 800c7de:	4240      	negs	r0, r0
 800c7e0:	2a00      	cmp	r2, #0
 800c7e2:	d0f9      	beq.n	800c7d8 <_strtoul_l.constprop.0+0xb8>
 800c7e4:	b107      	cbz	r7, 800c7e8 <_strtoul_l.constprop.0+0xc8>
 800c7e6:	1e69      	subs	r1, r5, #1
 800c7e8:	6011      	str	r1, [r2, #0]
 800c7ea:	e7f5      	b.n	800c7d8 <_strtoul_l.constprop.0+0xb8>
 800c7ec:	2430      	movs	r4, #48	; 0x30
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1b5      	bne.n	800c75e <_strtoul_l.constprop.0+0x3e>
 800c7f2:	2308      	movs	r3, #8
 800c7f4:	e7b3      	b.n	800c75e <_strtoul_l.constprop.0+0x3e>
 800c7f6:	2c30      	cmp	r4, #48	; 0x30
 800c7f8:	d0a9      	beq.n	800c74e <_strtoul_l.constprop.0+0x2e>
 800c7fa:	230a      	movs	r3, #10
 800c7fc:	e7af      	b.n	800c75e <_strtoul_l.constprop.0+0x3e>
 800c7fe:	bf00      	nop
 800c800:	0800d449 	.word	0x0800d449

0800c804 <_strtoul_r>:
 800c804:	f7ff bf8c 	b.w	800c720 <_strtoul_l.constprop.0>

0800c808 <__submore>:
 800c808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	460c      	mov	r4, r1
 800c80e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c814:	4299      	cmp	r1, r3
 800c816:	d11d      	bne.n	800c854 <__submore+0x4c>
 800c818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c81c:	f7ff fa14 	bl	800bc48 <_malloc_r>
 800c820:	b918      	cbnz	r0, 800c82a <__submore+0x22>
 800c822:	f04f 30ff 	mov.w	r0, #4294967295
 800c826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c82e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c830:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c834:	6360      	str	r0, [r4, #52]	; 0x34
 800c836:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c83a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c83e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c842:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c846:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c84a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	2000      	movs	r0, #0
 800c852:	e7e8      	b.n	800c826 <__submore+0x1e>
 800c854:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c856:	0077      	lsls	r7, r6, #1
 800c858:	463a      	mov	r2, r7
 800c85a:	f000 fa2d 	bl	800ccb8 <_realloc_r>
 800c85e:	4605      	mov	r5, r0
 800c860:	2800      	cmp	r0, #0
 800c862:	d0de      	beq.n	800c822 <__submore+0x1a>
 800c864:	eb00 0806 	add.w	r8, r0, r6
 800c868:	4601      	mov	r1, r0
 800c86a:	4632      	mov	r2, r6
 800c86c:	4640      	mov	r0, r8
 800c86e:	f7fe fc99 	bl	800b1a4 <memcpy>
 800c872:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c876:	f8c4 8000 	str.w	r8, [r4]
 800c87a:	e7e9      	b.n	800c850 <__submore+0x48>

0800c87c <__ascii_wctomb>:
 800c87c:	b149      	cbz	r1, 800c892 <__ascii_wctomb+0x16>
 800c87e:	2aff      	cmp	r2, #255	; 0xff
 800c880:	bf85      	ittet	hi
 800c882:	238a      	movhi	r3, #138	; 0x8a
 800c884:	6003      	strhi	r3, [r0, #0]
 800c886:	700a      	strbls	r2, [r1, #0]
 800c888:	f04f 30ff 	movhi.w	r0, #4294967295
 800c88c:	bf98      	it	ls
 800c88e:	2001      	movls	r0, #1
 800c890:	4770      	bx	lr
 800c892:	4608      	mov	r0, r1
 800c894:	4770      	bx	lr
	...

0800c898 <__assert_func>:
 800c898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c89a:	4614      	mov	r4, r2
 800c89c:	461a      	mov	r2, r3
 800c89e:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <__assert_func+0x2c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	68d8      	ldr	r0, [r3, #12]
 800c8a6:	b14c      	cbz	r4, 800c8bc <__assert_func+0x24>
 800c8a8:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <__assert_func+0x30>)
 800c8aa:	9100      	str	r1, [sp, #0]
 800c8ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8b0:	4906      	ldr	r1, [pc, #24]	; (800c8cc <__assert_func+0x34>)
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	f000 f9a6 	bl	800cc04 <fiprintf>
 800c8b8:	f000 fc46 	bl	800d148 <abort>
 800c8bc:	4b04      	ldr	r3, [pc, #16]	; (800c8d0 <__assert_func+0x38>)
 800c8be:	461c      	mov	r4, r3
 800c8c0:	e7f3      	b.n	800c8aa <__assert_func+0x12>
 800c8c2:	bf00      	nop
 800c8c4:	200000a8 	.word	0x200000a8
 800c8c8:	0800d7d8 	.word	0x0800d7d8
 800c8cc:	0800d7e5 	.word	0x0800d7e5
 800c8d0:	0800d813 	.word	0x0800d813

0800c8d4 <__sflush_r>:
 800c8d4:	898a      	ldrh	r2, [r1, #12]
 800c8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8da:	4605      	mov	r5, r0
 800c8dc:	0710      	lsls	r0, r2, #28
 800c8de:	460c      	mov	r4, r1
 800c8e0:	d458      	bmi.n	800c994 <__sflush_r+0xc0>
 800c8e2:	684b      	ldr	r3, [r1, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dc05      	bgt.n	800c8f4 <__sflush_r+0x20>
 800c8e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dc02      	bgt.n	800c8f4 <__sflush_r+0x20>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8f6:	2e00      	cmp	r6, #0
 800c8f8:	d0f9      	beq.n	800c8ee <__sflush_r+0x1a>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c900:	682f      	ldr	r7, [r5, #0]
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	d032      	beq.n	800c96c <__sflush_r+0x98>
 800c906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	075a      	lsls	r2, r3, #29
 800c90c:	d505      	bpl.n	800c91a <__sflush_r+0x46>
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	1ac0      	subs	r0, r0, r3
 800c912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c914:	b10b      	cbz	r3, 800c91a <__sflush_r+0x46>
 800c916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c918:	1ac0      	subs	r0, r0, r3
 800c91a:	2300      	movs	r3, #0
 800c91c:	4602      	mov	r2, r0
 800c91e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c920:	6a21      	ldr	r1, [r4, #32]
 800c922:	4628      	mov	r0, r5
 800c924:	47b0      	blx	r6
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	d106      	bne.n	800c93a <__sflush_r+0x66>
 800c92c:	6829      	ldr	r1, [r5, #0]
 800c92e:	291d      	cmp	r1, #29
 800c930:	d82c      	bhi.n	800c98c <__sflush_r+0xb8>
 800c932:	4a2a      	ldr	r2, [pc, #168]	; (800c9dc <__sflush_r+0x108>)
 800c934:	40ca      	lsrs	r2, r1
 800c936:	07d6      	lsls	r6, r2, #31
 800c938:	d528      	bpl.n	800c98c <__sflush_r+0xb8>
 800c93a:	2200      	movs	r2, #0
 800c93c:	6062      	str	r2, [r4, #4]
 800c93e:	04d9      	lsls	r1, r3, #19
 800c940:	6922      	ldr	r2, [r4, #16]
 800c942:	6022      	str	r2, [r4, #0]
 800c944:	d504      	bpl.n	800c950 <__sflush_r+0x7c>
 800c946:	1c42      	adds	r2, r0, #1
 800c948:	d101      	bne.n	800c94e <__sflush_r+0x7a>
 800c94a:	682b      	ldr	r3, [r5, #0]
 800c94c:	b903      	cbnz	r3, 800c950 <__sflush_r+0x7c>
 800c94e:	6560      	str	r0, [r4, #84]	; 0x54
 800c950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c952:	602f      	str	r7, [r5, #0]
 800c954:	2900      	cmp	r1, #0
 800c956:	d0ca      	beq.n	800c8ee <__sflush_r+0x1a>
 800c958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c95c:	4299      	cmp	r1, r3
 800c95e:	d002      	beq.n	800c966 <__sflush_r+0x92>
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff f905 	bl	800bb70 <_free_r>
 800c966:	2000      	movs	r0, #0
 800c968:	6360      	str	r0, [r4, #52]	; 0x34
 800c96a:	e7c1      	b.n	800c8f0 <__sflush_r+0x1c>
 800c96c:	6a21      	ldr	r1, [r4, #32]
 800c96e:	2301      	movs	r3, #1
 800c970:	4628      	mov	r0, r5
 800c972:	47b0      	blx	r6
 800c974:	1c41      	adds	r1, r0, #1
 800c976:	d1c7      	bne.n	800c908 <__sflush_r+0x34>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0c4      	beq.n	800c908 <__sflush_r+0x34>
 800c97e:	2b1d      	cmp	r3, #29
 800c980:	d001      	beq.n	800c986 <__sflush_r+0xb2>
 800c982:	2b16      	cmp	r3, #22
 800c984:	d101      	bne.n	800c98a <__sflush_r+0xb6>
 800c986:	602f      	str	r7, [r5, #0]
 800c988:	e7b1      	b.n	800c8ee <__sflush_r+0x1a>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c990:	81a3      	strh	r3, [r4, #12]
 800c992:	e7ad      	b.n	800c8f0 <__sflush_r+0x1c>
 800c994:	690f      	ldr	r7, [r1, #16]
 800c996:	2f00      	cmp	r7, #0
 800c998:	d0a9      	beq.n	800c8ee <__sflush_r+0x1a>
 800c99a:	0793      	lsls	r3, r2, #30
 800c99c:	680e      	ldr	r6, [r1, #0]
 800c99e:	bf08      	it	eq
 800c9a0:	694b      	ldreq	r3, [r1, #20]
 800c9a2:	600f      	str	r7, [r1, #0]
 800c9a4:	bf18      	it	ne
 800c9a6:	2300      	movne	r3, #0
 800c9a8:	eba6 0807 	sub.w	r8, r6, r7
 800c9ac:	608b      	str	r3, [r1, #8]
 800c9ae:	f1b8 0f00 	cmp.w	r8, #0
 800c9b2:	dd9c      	ble.n	800c8ee <__sflush_r+0x1a>
 800c9b4:	6a21      	ldr	r1, [r4, #32]
 800c9b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9b8:	4643      	mov	r3, r8
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	4628      	mov	r0, r5
 800c9be:	47b0      	blx	r6
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	dc06      	bgt.n	800c9d2 <__sflush_r+0xfe>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ca:	81a3      	strh	r3, [r4, #12]
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	e78e      	b.n	800c8f0 <__sflush_r+0x1c>
 800c9d2:	4407      	add	r7, r0
 800c9d4:	eba8 0800 	sub.w	r8, r8, r0
 800c9d8:	e7e9      	b.n	800c9ae <__sflush_r+0xda>
 800c9da:	bf00      	nop
 800c9dc:	20400001 	.word	0x20400001

0800c9e0 <_fflush_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	690b      	ldr	r3, [r1, #16]
 800c9e4:	4605      	mov	r5, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	b913      	cbnz	r3, 800c9f0 <_fflush_r+0x10>
 800c9ea:	2500      	movs	r5, #0
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	b118      	cbz	r0, 800c9fa <_fflush_r+0x1a>
 800c9f2:	6983      	ldr	r3, [r0, #24]
 800c9f4:	b90b      	cbnz	r3, 800c9fa <_fflush_r+0x1a>
 800c9f6:	f000 f887 	bl	800cb08 <__sinit>
 800c9fa:	4b14      	ldr	r3, [pc, #80]	; (800ca4c <_fflush_r+0x6c>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	d11b      	bne.n	800ca38 <_fflush_r+0x58>
 800ca00:	686c      	ldr	r4, [r5, #4]
 800ca02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0ef      	beq.n	800c9ea <_fflush_r+0xa>
 800ca0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca0c:	07d0      	lsls	r0, r2, #31
 800ca0e:	d404      	bmi.n	800ca1a <_fflush_r+0x3a>
 800ca10:	0599      	lsls	r1, r3, #22
 800ca12:	d402      	bmi.n	800ca1a <_fflush_r+0x3a>
 800ca14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca16:	f000 f927 	bl	800cc68 <__retarget_lock_acquire_recursive>
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	f7ff ff59 	bl	800c8d4 <__sflush_r>
 800ca22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca24:	07da      	lsls	r2, r3, #31
 800ca26:	4605      	mov	r5, r0
 800ca28:	d4e0      	bmi.n	800c9ec <_fflush_r+0xc>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	059b      	lsls	r3, r3, #22
 800ca2e:	d4dd      	bmi.n	800c9ec <_fflush_r+0xc>
 800ca30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca32:	f000 f91a 	bl	800cc6a <__retarget_lock_release_recursive>
 800ca36:	e7d9      	b.n	800c9ec <_fflush_r+0xc>
 800ca38:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <_fflush_r+0x70>)
 800ca3a:	429c      	cmp	r4, r3
 800ca3c:	d101      	bne.n	800ca42 <_fflush_r+0x62>
 800ca3e:	68ac      	ldr	r4, [r5, #8]
 800ca40:	e7df      	b.n	800ca02 <_fflush_r+0x22>
 800ca42:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <_fflush_r+0x74>)
 800ca44:	429c      	cmp	r4, r3
 800ca46:	bf08      	it	eq
 800ca48:	68ec      	ldreq	r4, [r5, #12]
 800ca4a:	e7da      	b.n	800ca02 <_fflush_r+0x22>
 800ca4c:	0800d834 	.word	0x0800d834
 800ca50:	0800d854 	.word	0x0800d854
 800ca54:	0800d814 	.word	0x0800d814

0800ca58 <std>:
 800ca58:	2300      	movs	r3, #0
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca66:	6083      	str	r3, [r0, #8]
 800ca68:	8181      	strh	r1, [r0, #12]
 800ca6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca6c:	81c2      	strh	r2, [r0, #14]
 800ca6e:	6183      	str	r3, [r0, #24]
 800ca70:	4619      	mov	r1, r3
 800ca72:	2208      	movs	r2, #8
 800ca74:	305c      	adds	r0, #92	; 0x5c
 800ca76:	f7fb fb8f 	bl	8008198 <memset>
 800ca7a:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <std+0x38>)
 800ca7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <std+0x3c>)
 800ca80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca82:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <std+0x40>)
 800ca84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca86:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <std+0x44>)
 800ca88:	6224      	str	r4, [r4, #32]
 800ca8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	bf00      	nop
 800ca90:	08008f41 	.word	0x08008f41
 800ca94:	08008f67 	.word	0x08008f67
 800ca98:	08008f9f 	.word	0x08008f9f
 800ca9c:	08008fc3 	.word	0x08008fc3

0800caa0 <_cleanup_r>:
 800caa0:	4901      	ldr	r1, [pc, #4]	; (800caa8 <_cleanup_r+0x8>)
 800caa2:	f000 b8c1 	b.w	800cc28 <_fwalk_reent>
 800caa6:	bf00      	nop
 800caa8:	0800c9e1 	.word	0x0800c9e1

0800caac <__sfmoreglue>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	2268      	movs	r2, #104	; 0x68
 800cab0:	1e4d      	subs	r5, r1, #1
 800cab2:	4355      	muls	r5, r2
 800cab4:	460e      	mov	r6, r1
 800cab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caba:	f7ff f8c5 	bl	800bc48 <_malloc_r>
 800cabe:	4604      	mov	r4, r0
 800cac0:	b140      	cbz	r0, 800cad4 <__sfmoreglue+0x28>
 800cac2:	2100      	movs	r1, #0
 800cac4:	e9c0 1600 	strd	r1, r6, [r0]
 800cac8:	300c      	adds	r0, #12
 800caca:	60a0      	str	r0, [r4, #8]
 800cacc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cad0:	f7fb fb62 	bl	8008198 <memset>
 800cad4:	4620      	mov	r0, r4
 800cad6:	bd70      	pop	{r4, r5, r6, pc}

0800cad8 <__sfp_lock_acquire>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__sfp_lock_acquire+0x8>)
 800cada:	f000 b8c5 	b.w	800cc68 <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	2000049d 	.word	0x2000049d

0800cae4 <__sfp_lock_release>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__sfp_lock_release+0x8>)
 800cae6:	f000 b8c0 	b.w	800cc6a <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	2000049d 	.word	0x2000049d

0800caf0 <__sinit_lock_acquire>:
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <__sinit_lock_acquire+0x8>)
 800caf2:	f000 b8b9 	b.w	800cc68 <__retarget_lock_acquire_recursive>
 800caf6:	bf00      	nop
 800caf8:	2000049e 	.word	0x2000049e

0800cafc <__sinit_lock_release>:
 800cafc:	4801      	ldr	r0, [pc, #4]	; (800cb04 <__sinit_lock_release+0x8>)
 800cafe:	f000 b8b4 	b.w	800cc6a <__retarget_lock_release_recursive>
 800cb02:	bf00      	nop
 800cb04:	2000049e 	.word	0x2000049e

0800cb08 <__sinit>:
 800cb08:	b510      	push	{r4, lr}
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	f7ff fff0 	bl	800caf0 <__sinit_lock_acquire>
 800cb10:	69a3      	ldr	r3, [r4, #24]
 800cb12:	b11b      	cbz	r3, 800cb1c <__sinit+0x14>
 800cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb18:	f7ff bff0 	b.w	800cafc <__sinit_lock_release>
 800cb1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb20:	6523      	str	r3, [r4, #80]	; 0x50
 800cb22:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <__sinit+0x68>)
 800cb24:	4a13      	ldr	r2, [pc, #76]	; (800cb74 <__sinit+0x6c>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb2a:	42a3      	cmp	r3, r4
 800cb2c:	bf04      	itt	eq
 800cb2e:	2301      	moveq	r3, #1
 800cb30:	61a3      	streq	r3, [r4, #24]
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f820 	bl	800cb78 <__sfp>
 800cb38:	6060      	str	r0, [r4, #4]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 f81c 	bl	800cb78 <__sfp>
 800cb40:	60a0      	str	r0, [r4, #8]
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 f818 	bl	800cb78 <__sfp>
 800cb48:	2200      	movs	r2, #0
 800cb4a:	60e0      	str	r0, [r4, #12]
 800cb4c:	2104      	movs	r1, #4
 800cb4e:	6860      	ldr	r0, [r4, #4]
 800cb50:	f7ff ff82 	bl	800ca58 <std>
 800cb54:	68a0      	ldr	r0, [r4, #8]
 800cb56:	2201      	movs	r2, #1
 800cb58:	2109      	movs	r1, #9
 800cb5a:	f7ff ff7d 	bl	800ca58 <std>
 800cb5e:	68e0      	ldr	r0, [r4, #12]
 800cb60:	2202      	movs	r2, #2
 800cb62:	2112      	movs	r1, #18
 800cb64:	f7ff ff78 	bl	800ca58 <std>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	61a3      	str	r3, [r4, #24]
 800cb6c:	e7d2      	b.n	800cb14 <__sinit+0xc>
 800cb6e:	bf00      	nop
 800cb70:	0800d3b8 	.word	0x0800d3b8
 800cb74:	0800caa1 	.word	0x0800caa1

0800cb78 <__sfp>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	f7ff ffac 	bl	800cad8 <__sfp_lock_acquire>
 800cb80:	4b1e      	ldr	r3, [pc, #120]	; (800cbfc <__sfp+0x84>)
 800cb82:	681e      	ldr	r6, [r3, #0]
 800cb84:	69b3      	ldr	r3, [r6, #24]
 800cb86:	b913      	cbnz	r3, 800cb8e <__sfp+0x16>
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff ffbd 	bl	800cb08 <__sinit>
 800cb8e:	3648      	adds	r6, #72	; 0x48
 800cb90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	d503      	bpl.n	800cba0 <__sfp+0x28>
 800cb98:	6833      	ldr	r3, [r6, #0]
 800cb9a:	b30b      	cbz	r3, 800cbe0 <__sfp+0x68>
 800cb9c:	6836      	ldr	r6, [r6, #0]
 800cb9e:	e7f7      	b.n	800cb90 <__sfp+0x18>
 800cba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cba4:	b9d5      	cbnz	r5, 800cbdc <__sfp+0x64>
 800cba6:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <__sfp+0x88>)
 800cba8:	60e3      	str	r3, [r4, #12]
 800cbaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbae:	6665      	str	r5, [r4, #100]	; 0x64
 800cbb0:	f000 f859 	bl	800cc66 <__retarget_lock_init_recursive>
 800cbb4:	f7ff ff96 	bl	800cae4 <__sfp_lock_release>
 800cbb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbc0:	6025      	str	r5, [r4, #0]
 800cbc2:	61a5      	str	r5, [r4, #24]
 800cbc4:	2208      	movs	r2, #8
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbcc:	f7fb fae4 	bl	8008198 <memset>
 800cbd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbd8:	4620      	mov	r0, r4
 800cbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbdc:	3468      	adds	r4, #104	; 0x68
 800cbde:	e7d9      	b.n	800cb94 <__sfp+0x1c>
 800cbe0:	2104      	movs	r1, #4
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f7ff ff62 	bl	800caac <__sfmoreglue>
 800cbe8:	4604      	mov	r4, r0
 800cbea:	6030      	str	r0, [r6, #0]
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d1d5      	bne.n	800cb9c <__sfp+0x24>
 800cbf0:	f7ff ff78 	bl	800cae4 <__sfp_lock_release>
 800cbf4:	230c      	movs	r3, #12
 800cbf6:	603b      	str	r3, [r7, #0]
 800cbf8:	e7ee      	b.n	800cbd8 <__sfp+0x60>
 800cbfa:	bf00      	nop
 800cbfc:	0800d3b8 	.word	0x0800d3b8
 800cc00:	ffff0001 	.word	0xffff0001

0800cc04 <fiprintf>:
 800cc04:	b40e      	push	{r1, r2, r3}
 800cc06:	b503      	push	{r0, r1, lr}
 800cc08:	4601      	mov	r1, r0
 800cc0a:	ab03      	add	r3, sp, #12
 800cc0c:	4805      	ldr	r0, [pc, #20]	; (800cc24 <fiprintf+0x20>)
 800cc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc12:	6800      	ldr	r0, [r0, #0]
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	f000 f8a7 	bl	800cd68 <_vfiprintf_r>
 800cc1a:	b002      	add	sp, #8
 800cc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc20:	b003      	add	sp, #12
 800cc22:	4770      	bx	lr
 800cc24:	200000a8 	.word	0x200000a8

0800cc28 <_fwalk_reent>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	4688      	mov	r8, r1
 800cc30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc34:	2700      	movs	r7, #0
 800cc36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc3a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc3e:	d505      	bpl.n	800cc4c <_fwalk_reent+0x24>
 800cc40:	6824      	ldr	r4, [r4, #0]
 800cc42:	2c00      	cmp	r4, #0
 800cc44:	d1f7      	bne.n	800cc36 <_fwalk_reent+0xe>
 800cc46:	4638      	mov	r0, r7
 800cc48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4c:	89ab      	ldrh	r3, [r5, #12]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d907      	bls.n	800cc62 <_fwalk_reent+0x3a>
 800cc52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc56:	3301      	adds	r3, #1
 800cc58:	d003      	beq.n	800cc62 <_fwalk_reent+0x3a>
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	47c0      	blx	r8
 800cc60:	4307      	orrs	r7, r0
 800cc62:	3568      	adds	r5, #104	; 0x68
 800cc64:	e7e9      	b.n	800cc3a <_fwalk_reent+0x12>

0800cc66 <__retarget_lock_init_recursive>:
 800cc66:	4770      	bx	lr

0800cc68 <__retarget_lock_acquire_recursive>:
 800cc68:	4770      	bx	lr

0800cc6a <__retarget_lock_release_recursive>:
 800cc6a:	4770      	bx	lr

0800cc6c <memmove>:
 800cc6c:	4288      	cmp	r0, r1
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	eb01 0402 	add.w	r4, r1, r2
 800cc74:	d902      	bls.n	800cc7c <memmove+0x10>
 800cc76:	4284      	cmp	r4, r0
 800cc78:	4623      	mov	r3, r4
 800cc7a:	d807      	bhi.n	800cc8c <memmove+0x20>
 800cc7c:	1e43      	subs	r3, r0, #1
 800cc7e:	42a1      	cmp	r1, r4
 800cc80:	d008      	beq.n	800cc94 <memmove+0x28>
 800cc82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc8a:	e7f8      	b.n	800cc7e <memmove+0x12>
 800cc8c:	4402      	add	r2, r0
 800cc8e:	4601      	mov	r1, r0
 800cc90:	428a      	cmp	r2, r1
 800cc92:	d100      	bne.n	800cc96 <memmove+0x2a>
 800cc94:	bd10      	pop	{r4, pc}
 800cc96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc9e:	e7f7      	b.n	800cc90 <memmove+0x24>

0800cca0 <__malloc_lock>:
 800cca0:	4801      	ldr	r0, [pc, #4]	; (800cca8 <__malloc_lock+0x8>)
 800cca2:	f7ff bfe1 	b.w	800cc68 <__retarget_lock_acquire_recursive>
 800cca6:	bf00      	nop
 800cca8:	2000049c 	.word	0x2000049c

0800ccac <__malloc_unlock>:
 800ccac:	4801      	ldr	r0, [pc, #4]	; (800ccb4 <__malloc_unlock+0x8>)
 800ccae:	f7ff bfdc 	b.w	800cc6a <__retarget_lock_release_recursive>
 800ccb2:	bf00      	nop
 800ccb4:	2000049c 	.word	0x2000049c

0800ccb8 <_realloc_r>:
 800ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	4614      	mov	r4, r2
 800ccc0:	460e      	mov	r6, r1
 800ccc2:	b921      	cbnz	r1, 800ccce <_realloc_r+0x16>
 800ccc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	4611      	mov	r1, r2
 800ccca:	f7fe bfbd 	b.w	800bc48 <_malloc_r>
 800ccce:	b92a      	cbnz	r2, 800ccdc <_realloc_r+0x24>
 800ccd0:	f7fe ff4e 	bl	800bb70 <_free_r>
 800ccd4:	4625      	mov	r5, r4
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	f000 faa0 	bl	800d220 <_malloc_usable_size_r>
 800cce0:	4284      	cmp	r4, r0
 800cce2:	4607      	mov	r7, r0
 800cce4:	d802      	bhi.n	800ccec <_realloc_r+0x34>
 800cce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccea:	d812      	bhi.n	800cd12 <_realloc_r+0x5a>
 800ccec:	4621      	mov	r1, r4
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7fe ffaa 	bl	800bc48 <_malloc_r>
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d0ed      	beq.n	800ccd6 <_realloc_r+0x1e>
 800ccfa:	42bc      	cmp	r4, r7
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	4631      	mov	r1, r6
 800cd00:	bf28      	it	cs
 800cd02:	463a      	movcs	r2, r7
 800cd04:	f7fe fa4e 	bl	800b1a4 <memcpy>
 800cd08:	4631      	mov	r1, r6
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	f7fe ff30 	bl	800bb70 <_free_r>
 800cd10:	e7e1      	b.n	800ccd6 <_realloc_r+0x1e>
 800cd12:	4635      	mov	r5, r6
 800cd14:	e7df      	b.n	800ccd6 <_realloc_r+0x1e>

0800cd16 <__sfputc_r>:
 800cd16:	6893      	ldr	r3, [r2, #8]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	b410      	push	{r4}
 800cd1e:	6093      	str	r3, [r2, #8]
 800cd20:	da08      	bge.n	800cd34 <__sfputc_r+0x1e>
 800cd22:	6994      	ldr	r4, [r2, #24]
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	db01      	blt.n	800cd2c <__sfputc_r+0x16>
 800cd28:	290a      	cmp	r1, #10
 800cd2a:	d103      	bne.n	800cd34 <__sfputc_r+0x1e>
 800cd2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd30:	f000 b94a 	b.w	800cfc8 <__swbuf_r>
 800cd34:	6813      	ldr	r3, [r2, #0]
 800cd36:	1c58      	adds	r0, r3, #1
 800cd38:	6010      	str	r0, [r2, #0]
 800cd3a:	7019      	strb	r1, [r3, #0]
 800cd3c:	4608      	mov	r0, r1
 800cd3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <__sfputs_r>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	4606      	mov	r6, r0
 800cd48:	460f      	mov	r7, r1
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	18d5      	adds	r5, r2, r3
 800cd4e:	42ac      	cmp	r4, r5
 800cd50:	d101      	bne.n	800cd56 <__sfputs_r+0x12>
 800cd52:	2000      	movs	r0, #0
 800cd54:	e007      	b.n	800cd66 <__sfputs_r+0x22>
 800cd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7ff ffda 	bl	800cd16 <__sfputc_r>
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	d1f3      	bne.n	800cd4e <__sfputs_r+0xa>
 800cd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd68 <_vfiprintf_r>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	460d      	mov	r5, r1
 800cd6e:	b09d      	sub	sp, #116	; 0x74
 800cd70:	4614      	mov	r4, r2
 800cd72:	4698      	mov	r8, r3
 800cd74:	4606      	mov	r6, r0
 800cd76:	b118      	cbz	r0, 800cd80 <_vfiprintf_r+0x18>
 800cd78:	6983      	ldr	r3, [r0, #24]
 800cd7a:	b90b      	cbnz	r3, 800cd80 <_vfiprintf_r+0x18>
 800cd7c:	f7ff fec4 	bl	800cb08 <__sinit>
 800cd80:	4b89      	ldr	r3, [pc, #548]	; (800cfa8 <_vfiprintf_r+0x240>)
 800cd82:	429d      	cmp	r5, r3
 800cd84:	d11b      	bne.n	800cdbe <_vfiprintf_r+0x56>
 800cd86:	6875      	ldr	r5, [r6, #4]
 800cd88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd8a:	07d9      	lsls	r1, r3, #31
 800cd8c:	d405      	bmi.n	800cd9a <_vfiprintf_r+0x32>
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	059a      	lsls	r2, r3, #22
 800cd92:	d402      	bmi.n	800cd9a <_vfiprintf_r+0x32>
 800cd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd96:	f7ff ff67 	bl	800cc68 <__retarget_lock_acquire_recursive>
 800cd9a:	89ab      	ldrh	r3, [r5, #12]
 800cd9c:	071b      	lsls	r3, r3, #28
 800cd9e:	d501      	bpl.n	800cda4 <_vfiprintf_r+0x3c>
 800cda0:	692b      	ldr	r3, [r5, #16]
 800cda2:	b9eb      	cbnz	r3, 800cde0 <_vfiprintf_r+0x78>
 800cda4:	4629      	mov	r1, r5
 800cda6:	4630      	mov	r0, r6
 800cda8:	f000 f960 	bl	800d06c <__swsetup_r>
 800cdac:	b1c0      	cbz	r0, 800cde0 <_vfiprintf_r+0x78>
 800cdae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdb0:	07dc      	lsls	r4, r3, #31
 800cdb2:	d50e      	bpl.n	800cdd2 <_vfiprintf_r+0x6a>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	b01d      	add	sp, #116	; 0x74
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	4b7b      	ldr	r3, [pc, #492]	; (800cfac <_vfiprintf_r+0x244>)
 800cdc0:	429d      	cmp	r5, r3
 800cdc2:	d101      	bne.n	800cdc8 <_vfiprintf_r+0x60>
 800cdc4:	68b5      	ldr	r5, [r6, #8]
 800cdc6:	e7df      	b.n	800cd88 <_vfiprintf_r+0x20>
 800cdc8:	4b79      	ldr	r3, [pc, #484]	; (800cfb0 <_vfiprintf_r+0x248>)
 800cdca:	429d      	cmp	r5, r3
 800cdcc:	bf08      	it	eq
 800cdce:	68f5      	ldreq	r5, [r6, #12]
 800cdd0:	e7da      	b.n	800cd88 <_vfiprintf_r+0x20>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	0598      	lsls	r0, r3, #22
 800cdd6:	d4ed      	bmi.n	800cdb4 <_vfiprintf_r+0x4c>
 800cdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdda:	f7ff ff46 	bl	800cc6a <__retarget_lock_release_recursive>
 800cdde:	e7e9      	b.n	800cdb4 <_vfiprintf_r+0x4c>
 800cde0:	2300      	movs	r3, #0
 800cde2:	9309      	str	r3, [sp, #36]	; 0x24
 800cde4:	2320      	movs	r3, #32
 800cde6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdee:	2330      	movs	r3, #48	; 0x30
 800cdf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cfb4 <_vfiprintf_r+0x24c>
 800cdf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdf8:	f04f 0901 	mov.w	r9, #1
 800cdfc:	4623      	mov	r3, r4
 800cdfe:	469a      	mov	sl, r3
 800ce00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce04:	b10a      	cbz	r2, 800ce0a <_vfiprintf_r+0xa2>
 800ce06:	2a25      	cmp	r2, #37	; 0x25
 800ce08:	d1f9      	bne.n	800cdfe <_vfiprintf_r+0x96>
 800ce0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce0e:	d00b      	beq.n	800ce28 <_vfiprintf_r+0xc0>
 800ce10:	465b      	mov	r3, fp
 800ce12:	4622      	mov	r2, r4
 800ce14:	4629      	mov	r1, r5
 800ce16:	4630      	mov	r0, r6
 800ce18:	f7ff ff94 	bl	800cd44 <__sfputs_r>
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	f000 80aa 	beq.w	800cf76 <_vfiprintf_r+0x20e>
 800ce22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce24:	445a      	add	r2, fp
 800ce26:	9209      	str	r2, [sp, #36]	; 0x24
 800ce28:	f89a 3000 	ldrb.w	r3, [sl]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 80a2 	beq.w	800cf76 <_vfiprintf_r+0x20e>
 800ce32:	2300      	movs	r3, #0
 800ce34:	f04f 32ff 	mov.w	r2, #4294967295
 800ce38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce3c:	f10a 0a01 	add.w	sl, sl, #1
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	9307      	str	r3, [sp, #28]
 800ce44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce48:	931a      	str	r3, [sp, #104]	; 0x68
 800ce4a:	4654      	mov	r4, sl
 800ce4c:	2205      	movs	r2, #5
 800ce4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce52:	4858      	ldr	r0, [pc, #352]	; (800cfb4 <_vfiprintf_r+0x24c>)
 800ce54:	f7f3 f9e4 	bl	8000220 <memchr>
 800ce58:	9a04      	ldr	r2, [sp, #16]
 800ce5a:	b9d8      	cbnz	r0, 800ce94 <_vfiprintf_r+0x12c>
 800ce5c:	06d1      	lsls	r1, r2, #27
 800ce5e:	bf44      	itt	mi
 800ce60:	2320      	movmi	r3, #32
 800ce62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce66:	0713      	lsls	r3, r2, #28
 800ce68:	bf44      	itt	mi
 800ce6a:	232b      	movmi	r3, #43	; 0x2b
 800ce6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce70:	f89a 3000 	ldrb.w	r3, [sl]
 800ce74:	2b2a      	cmp	r3, #42	; 0x2a
 800ce76:	d015      	beq.n	800cea4 <_vfiprintf_r+0x13c>
 800ce78:	9a07      	ldr	r2, [sp, #28]
 800ce7a:	4654      	mov	r4, sl
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	f04f 0c0a 	mov.w	ip, #10
 800ce82:	4621      	mov	r1, r4
 800ce84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce88:	3b30      	subs	r3, #48	; 0x30
 800ce8a:	2b09      	cmp	r3, #9
 800ce8c:	d94e      	bls.n	800cf2c <_vfiprintf_r+0x1c4>
 800ce8e:	b1b0      	cbz	r0, 800cebe <_vfiprintf_r+0x156>
 800ce90:	9207      	str	r2, [sp, #28]
 800ce92:	e014      	b.n	800cebe <_vfiprintf_r+0x156>
 800ce94:	eba0 0308 	sub.w	r3, r0, r8
 800ce98:	fa09 f303 	lsl.w	r3, r9, r3
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	46a2      	mov	sl, r4
 800cea2:	e7d2      	b.n	800ce4a <_vfiprintf_r+0xe2>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	1d19      	adds	r1, r3, #4
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	9103      	str	r1, [sp, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	bfbb      	ittet	lt
 800ceb0:	425b      	neglt	r3, r3
 800ceb2:	f042 0202 	orrlt.w	r2, r2, #2
 800ceb6:	9307      	strge	r3, [sp, #28]
 800ceb8:	9307      	strlt	r3, [sp, #28]
 800ceba:	bfb8      	it	lt
 800cebc:	9204      	strlt	r2, [sp, #16]
 800cebe:	7823      	ldrb	r3, [r4, #0]
 800cec0:	2b2e      	cmp	r3, #46	; 0x2e
 800cec2:	d10c      	bne.n	800cede <_vfiprintf_r+0x176>
 800cec4:	7863      	ldrb	r3, [r4, #1]
 800cec6:	2b2a      	cmp	r3, #42	; 0x2a
 800cec8:	d135      	bne.n	800cf36 <_vfiprintf_r+0x1ce>
 800ceca:	9b03      	ldr	r3, [sp, #12]
 800cecc:	1d1a      	adds	r2, r3, #4
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	9203      	str	r2, [sp, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	bfb8      	it	lt
 800ced6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceda:	3402      	adds	r4, #2
 800cedc:	9305      	str	r3, [sp, #20]
 800cede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cfc4 <_vfiprintf_r+0x25c>
 800cee2:	7821      	ldrb	r1, [r4, #0]
 800cee4:	2203      	movs	r2, #3
 800cee6:	4650      	mov	r0, sl
 800cee8:	f7f3 f99a 	bl	8000220 <memchr>
 800ceec:	b140      	cbz	r0, 800cf00 <_vfiprintf_r+0x198>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	eba0 000a 	sub.w	r0, r0, sl
 800cef4:	fa03 f000 	lsl.w	r0, r3, r0
 800cef8:	9b04      	ldr	r3, [sp, #16]
 800cefa:	4303      	orrs	r3, r0
 800cefc:	3401      	adds	r4, #1
 800cefe:	9304      	str	r3, [sp, #16]
 800cf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf04:	482c      	ldr	r0, [pc, #176]	; (800cfb8 <_vfiprintf_r+0x250>)
 800cf06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf0a:	2206      	movs	r2, #6
 800cf0c:	f7f3 f988 	bl	8000220 <memchr>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d03f      	beq.n	800cf94 <_vfiprintf_r+0x22c>
 800cf14:	4b29      	ldr	r3, [pc, #164]	; (800cfbc <_vfiprintf_r+0x254>)
 800cf16:	bb1b      	cbnz	r3, 800cf60 <_vfiprintf_r+0x1f8>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	3307      	adds	r3, #7
 800cf1c:	f023 0307 	bic.w	r3, r3, #7
 800cf20:	3308      	adds	r3, #8
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf26:	443b      	add	r3, r7
 800cf28:	9309      	str	r3, [sp, #36]	; 0x24
 800cf2a:	e767      	b.n	800cdfc <_vfiprintf_r+0x94>
 800cf2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf30:	460c      	mov	r4, r1
 800cf32:	2001      	movs	r0, #1
 800cf34:	e7a5      	b.n	800ce82 <_vfiprintf_r+0x11a>
 800cf36:	2300      	movs	r3, #0
 800cf38:	3401      	adds	r4, #1
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	f04f 0c0a 	mov.w	ip, #10
 800cf42:	4620      	mov	r0, r4
 800cf44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf48:	3a30      	subs	r2, #48	; 0x30
 800cf4a:	2a09      	cmp	r2, #9
 800cf4c:	d903      	bls.n	800cf56 <_vfiprintf_r+0x1ee>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0c5      	beq.n	800cede <_vfiprintf_r+0x176>
 800cf52:	9105      	str	r1, [sp, #20]
 800cf54:	e7c3      	b.n	800cede <_vfiprintf_r+0x176>
 800cf56:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e7f0      	b.n	800cf42 <_vfiprintf_r+0x1da>
 800cf60:	ab03      	add	r3, sp, #12
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	462a      	mov	r2, r5
 800cf66:	4b16      	ldr	r3, [pc, #88]	; (800cfc0 <_vfiprintf_r+0x258>)
 800cf68:	a904      	add	r1, sp, #16
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7fb f9bc 	bl	80082e8 <_printf_float>
 800cf70:	4607      	mov	r7, r0
 800cf72:	1c78      	adds	r0, r7, #1
 800cf74:	d1d6      	bne.n	800cf24 <_vfiprintf_r+0x1bc>
 800cf76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf78:	07d9      	lsls	r1, r3, #31
 800cf7a:	d405      	bmi.n	800cf88 <_vfiprintf_r+0x220>
 800cf7c:	89ab      	ldrh	r3, [r5, #12]
 800cf7e:	059a      	lsls	r2, r3, #22
 800cf80:	d402      	bmi.n	800cf88 <_vfiprintf_r+0x220>
 800cf82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf84:	f7ff fe71 	bl	800cc6a <__retarget_lock_release_recursive>
 800cf88:	89ab      	ldrh	r3, [r5, #12]
 800cf8a:	065b      	lsls	r3, r3, #25
 800cf8c:	f53f af12 	bmi.w	800cdb4 <_vfiprintf_r+0x4c>
 800cf90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf92:	e711      	b.n	800cdb8 <_vfiprintf_r+0x50>
 800cf94:	ab03      	add	r3, sp, #12
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	462a      	mov	r2, r5
 800cf9a:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <_vfiprintf_r+0x258>)
 800cf9c:	a904      	add	r1, sp, #16
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7fb fc46 	bl	8008830 <_printf_i>
 800cfa4:	e7e4      	b.n	800cf70 <_vfiprintf_r+0x208>
 800cfa6:	bf00      	nop
 800cfa8:	0800d834 	.word	0x0800d834
 800cfac:	0800d854 	.word	0x0800d854
 800cfb0:	0800d814 	.word	0x0800d814
 800cfb4:	0800d7ac 	.word	0x0800d7ac
 800cfb8:	0800d7b6 	.word	0x0800d7b6
 800cfbc:	080082e9 	.word	0x080082e9
 800cfc0:	0800cd45 	.word	0x0800cd45
 800cfc4:	0800d7b2 	.word	0x0800d7b2

0800cfc8 <__swbuf_r>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	460e      	mov	r6, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	4605      	mov	r5, r0
 800cfd0:	b118      	cbz	r0, 800cfda <__swbuf_r+0x12>
 800cfd2:	6983      	ldr	r3, [r0, #24]
 800cfd4:	b90b      	cbnz	r3, 800cfda <__swbuf_r+0x12>
 800cfd6:	f7ff fd97 	bl	800cb08 <__sinit>
 800cfda:	4b21      	ldr	r3, [pc, #132]	; (800d060 <__swbuf_r+0x98>)
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	d12b      	bne.n	800d038 <__swbuf_r+0x70>
 800cfe0:	686c      	ldr	r4, [r5, #4]
 800cfe2:	69a3      	ldr	r3, [r4, #24]
 800cfe4:	60a3      	str	r3, [r4, #8]
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	071a      	lsls	r2, r3, #28
 800cfea:	d52f      	bpl.n	800d04c <__swbuf_r+0x84>
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	b36b      	cbz	r3, 800d04c <__swbuf_r+0x84>
 800cff0:	6923      	ldr	r3, [r4, #16]
 800cff2:	6820      	ldr	r0, [r4, #0]
 800cff4:	1ac0      	subs	r0, r0, r3
 800cff6:	6963      	ldr	r3, [r4, #20]
 800cff8:	b2f6      	uxtb	r6, r6
 800cffa:	4283      	cmp	r3, r0
 800cffc:	4637      	mov	r7, r6
 800cffe:	dc04      	bgt.n	800d00a <__swbuf_r+0x42>
 800d000:	4621      	mov	r1, r4
 800d002:	4628      	mov	r0, r5
 800d004:	f7ff fcec 	bl	800c9e0 <_fflush_r>
 800d008:	bb30      	cbnz	r0, 800d058 <__swbuf_r+0x90>
 800d00a:	68a3      	ldr	r3, [r4, #8]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	60a3      	str	r3, [r4, #8]
 800d010:	6823      	ldr	r3, [r4, #0]
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	6022      	str	r2, [r4, #0]
 800d016:	701e      	strb	r6, [r3, #0]
 800d018:	6963      	ldr	r3, [r4, #20]
 800d01a:	3001      	adds	r0, #1
 800d01c:	4283      	cmp	r3, r0
 800d01e:	d004      	beq.n	800d02a <__swbuf_r+0x62>
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	07db      	lsls	r3, r3, #31
 800d024:	d506      	bpl.n	800d034 <__swbuf_r+0x6c>
 800d026:	2e0a      	cmp	r6, #10
 800d028:	d104      	bne.n	800d034 <__swbuf_r+0x6c>
 800d02a:	4621      	mov	r1, r4
 800d02c:	4628      	mov	r0, r5
 800d02e:	f7ff fcd7 	bl	800c9e0 <_fflush_r>
 800d032:	b988      	cbnz	r0, 800d058 <__swbuf_r+0x90>
 800d034:	4638      	mov	r0, r7
 800d036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d038:	4b0a      	ldr	r3, [pc, #40]	; (800d064 <__swbuf_r+0x9c>)
 800d03a:	429c      	cmp	r4, r3
 800d03c:	d101      	bne.n	800d042 <__swbuf_r+0x7a>
 800d03e:	68ac      	ldr	r4, [r5, #8]
 800d040:	e7cf      	b.n	800cfe2 <__swbuf_r+0x1a>
 800d042:	4b09      	ldr	r3, [pc, #36]	; (800d068 <__swbuf_r+0xa0>)
 800d044:	429c      	cmp	r4, r3
 800d046:	bf08      	it	eq
 800d048:	68ec      	ldreq	r4, [r5, #12]
 800d04a:	e7ca      	b.n	800cfe2 <__swbuf_r+0x1a>
 800d04c:	4621      	mov	r1, r4
 800d04e:	4628      	mov	r0, r5
 800d050:	f000 f80c 	bl	800d06c <__swsetup_r>
 800d054:	2800      	cmp	r0, #0
 800d056:	d0cb      	beq.n	800cff0 <__swbuf_r+0x28>
 800d058:	f04f 37ff 	mov.w	r7, #4294967295
 800d05c:	e7ea      	b.n	800d034 <__swbuf_r+0x6c>
 800d05e:	bf00      	nop
 800d060:	0800d834 	.word	0x0800d834
 800d064:	0800d854 	.word	0x0800d854
 800d068:	0800d814 	.word	0x0800d814

0800d06c <__swsetup_r>:
 800d06c:	4b32      	ldr	r3, [pc, #200]	; (800d138 <__swsetup_r+0xcc>)
 800d06e:	b570      	push	{r4, r5, r6, lr}
 800d070:	681d      	ldr	r5, [r3, #0]
 800d072:	4606      	mov	r6, r0
 800d074:	460c      	mov	r4, r1
 800d076:	b125      	cbz	r5, 800d082 <__swsetup_r+0x16>
 800d078:	69ab      	ldr	r3, [r5, #24]
 800d07a:	b913      	cbnz	r3, 800d082 <__swsetup_r+0x16>
 800d07c:	4628      	mov	r0, r5
 800d07e:	f7ff fd43 	bl	800cb08 <__sinit>
 800d082:	4b2e      	ldr	r3, [pc, #184]	; (800d13c <__swsetup_r+0xd0>)
 800d084:	429c      	cmp	r4, r3
 800d086:	d10f      	bne.n	800d0a8 <__swsetup_r+0x3c>
 800d088:	686c      	ldr	r4, [r5, #4]
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d090:	0719      	lsls	r1, r3, #28
 800d092:	d42c      	bmi.n	800d0ee <__swsetup_r+0x82>
 800d094:	06dd      	lsls	r5, r3, #27
 800d096:	d411      	bmi.n	800d0bc <__swsetup_r+0x50>
 800d098:	2309      	movs	r3, #9
 800d09a:	6033      	str	r3, [r6, #0]
 800d09c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a6:	e03e      	b.n	800d126 <__swsetup_r+0xba>
 800d0a8:	4b25      	ldr	r3, [pc, #148]	; (800d140 <__swsetup_r+0xd4>)
 800d0aa:	429c      	cmp	r4, r3
 800d0ac:	d101      	bne.n	800d0b2 <__swsetup_r+0x46>
 800d0ae:	68ac      	ldr	r4, [r5, #8]
 800d0b0:	e7eb      	b.n	800d08a <__swsetup_r+0x1e>
 800d0b2:	4b24      	ldr	r3, [pc, #144]	; (800d144 <__swsetup_r+0xd8>)
 800d0b4:	429c      	cmp	r4, r3
 800d0b6:	bf08      	it	eq
 800d0b8:	68ec      	ldreq	r4, [r5, #12]
 800d0ba:	e7e6      	b.n	800d08a <__swsetup_r+0x1e>
 800d0bc:	0758      	lsls	r0, r3, #29
 800d0be:	d512      	bpl.n	800d0e6 <__swsetup_r+0x7a>
 800d0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0c2:	b141      	cbz	r1, 800d0d6 <__swsetup_r+0x6a>
 800d0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0c8:	4299      	cmp	r1, r3
 800d0ca:	d002      	beq.n	800d0d2 <__swsetup_r+0x66>
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7fe fd4f 	bl	800bb70 <_free_r>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0dc:	81a3      	strh	r3, [r4, #12]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	6063      	str	r3, [r4, #4]
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	f043 0308 	orr.w	r3, r3, #8
 800d0ec:	81a3      	strh	r3, [r4, #12]
 800d0ee:	6923      	ldr	r3, [r4, #16]
 800d0f0:	b94b      	cbnz	r3, 800d106 <__swsetup_r+0x9a>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0fc:	d003      	beq.n	800d106 <__swsetup_r+0x9a>
 800d0fe:	4621      	mov	r1, r4
 800d100:	4630      	mov	r0, r6
 800d102:	f000 f84d 	bl	800d1a0 <__smakebuf_r>
 800d106:	89a0      	ldrh	r0, [r4, #12]
 800d108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d10c:	f010 0301 	ands.w	r3, r0, #1
 800d110:	d00a      	beq.n	800d128 <__swsetup_r+0xbc>
 800d112:	2300      	movs	r3, #0
 800d114:	60a3      	str	r3, [r4, #8]
 800d116:	6963      	ldr	r3, [r4, #20]
 800d118:	425b      	negs	r3, r3
 800d11a:	61a3      	str	r3, [r4, #24]
 800d11c:	6923      	ldr	r3, [r4, #16]
 800d11e:	b943      	cbnz	r3, 800d132 <__swsetup_r+0xc6>
 800d120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d124:	d1ba      	bne.n	800d09c <__swsetup_r+0x30>
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	0781      	lsls	r1, r0, #30
 800d12a:	bf58      	it	pl
 800d12c:	6963      	ldrpl	r3, [r4, #20]
 800d12e:	60a3      	str	r3, [r4, #8]
 800d130:	e7f4      	b.n	800d11c <__swsetup_r+0xb0>
 800d132:	2000      	movs	r0, #0
 800d134:	e7f7      	b.n	800d126 <__swsetup_r+0xba>
 800d136:	bf00      	nop
 800d138:	200000a8 	.word	0x200000a8
 800d13c:	0800d834 	.word	0x0800d834
 800d140:	0800d854 	.word	0x0800d854
 800d144:	0800d814 	.word	0x0800d814

0800d148 <abort>:
 800d148:	b508      	push	{r3, lr}
 800d14a:	2006      	movs	r0, #6
 800d14c:	f000 f898 	bl	800d280 <raise>
 800d150:	2001      	movs	r0, #1
 800d152:	f7f5 feb9 	bl	8002ec8 <_exit>

0800d156 <__swhatbuf_r>:
 800d156:	b570      	push	{r4, r5, r6, lr}
 800d158:	460e      	mov	r6, r1
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	2900      	cmp	r1, #0
 800d160:	b096      	sub	sp, #88	; 0x58
 800d162:	4614      	mov	r4, r2
 800d164:	461d      	mov	r5, r3
 800d166:	da08      	bge.n	800d17a <__swhatbuf_r+0x24>
 800d168:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	602a      	str	r2, [r5, #0]
 800d170:	061a      	lsls	r2, r3, #24
 800d172:	d410      	bmi.n	800d196 <__swhatbuf_r+0x40>
 800d174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d178:	e00e      	b.n	800d198 <__swhatbuf_r+0x42>
 800d17a:	466a      	mov	r2, sp
 800d17c:	f000 f89c 	bl	800d2b8 <_fstat_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	dbf1      	blt.n	800d168 <__swhatbuf_r+0x12>
 800d184:	9a01      	ldr	r2, [sp, #4]
 800d186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d18a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d18e:	425a      	negs	r2, r3
 800d190:	415a      	adcs	r2, r3
 800d192:	602a      	str	r2, [r5, #0]
 800d194:	e7ee      	b.n	800d174 <__swhatbuf_r+0x1e>
 800d196:	2340      	movs	r3, #64	; 0x40
 800d198:	2000      	movs	r0, #0
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	b016      	add	sp, #88	; 0x58
 800d19e:	bd70      	pop	{r4, r5, r6, pc}

0800d1a0 <__smakebuf_r>:
 800d1a0:	898b      	ldrh	r3, [r1, #12]
 800d1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1a4:	079d      	lsls	r5, r3, #30
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	d507      	bpl.n	800d1bc <__smakebuf_r+0x1c>
 800d1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	6123      	str	r3, [r4, #16]
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	6163      	str	r3, [r4, #20]
 800d1b8:	b002      	add	sp, #8
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	ab01      	add	r3, sp, #4
 800d1be:	466a      	mov	r2, sp
 800d1c0:	f7ff ffc9 	bl	800d156 <__swhatbuf_r>
 800d1c4:	9900      	ldr	r1, [sp, #0]
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f7fe fd3d 	bl	800bc48 <_malloc_r>
 800d1ce:	b948      	cbnz	r0, 800d1e4 <__smakebuf_r+0x44>
 800d1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d4:	059a      	lsls	r2, r3, #22
 800d1d6:	d4ef      	bmi.n	800d1b8 <__smakebuf_r+0x18>
 800d1d8:	f023 0303 	bic.w	r3, r3, #3
 800d1dc:	f043 0302 	orr.w	r3, r3, #2
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	e7e3      	b.n	800d1ac <__smakebuf_r+0xc>
 800d1e4:	4b0d      	ldr	r3, [pc, #52]	; (800d21c <__smakebuf_r+0x7c>)
 800d1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1e8:	89a3      	ldrh	r3, [r4, #12]
 800d1ea:	6020      	str	r0, [r4, #0]
 800d1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f0:	81a3      	strh	r3, [r4, #12]
 800d1f2:	9b00      	ldr	r3, [sp, #0]
 800d1f4:	6163      	str	r3, [r4, #20]
 800d1f6:	9b01      	ldr	r3, [sp, #4]
 800d1f8:	6120      	str	r0, [r4, #16]
 800d1fa:	b15b      	cbz	r3, 800d214 <__smakebuf_r+0x74>
 800d1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d200:	4630      	mov	r0, r6
 800d202:	f000 f86b 	bl	800d2dc <_isatty_r>
 800d206:	b128      	cbz	r0, 800d214 <__smakebuf_r+0x74>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	f023 0303 	bic.w	r3, r3, #3
 800d20e:	f043 0301 	orr.w	r3, r3, #1
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	89a0      	ldrh	r0, [r4, #12]
 800d216:	4305      	orrs	r5, r0
 800d218:	81a5      	strh	r5, [r4, #12]
 800d21a:	e7cd      	b.n	800d1b8 <__smakebuf_r+0x18>
 800d21c:	0800caa1 	.word	0x0800caa1

0800d220 <_malloc_usable_size_r>:
 800d220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d224:	1f18      	subs	r0, r3, #4
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfbc      	itt	lt
 800d22a:	580b      	ldrlt	r3, [r1, r0]
 800d22c:	18c0      	addlt	r0, r0, r3
 800d22e:	4770      	bx	lr

0800d230 <_raise_r>:
 800d230:	291f      	cmp	r1, #31
 800d232:	b538      	push	{r3, r4, r5, lr}
 800d234:	4604      	mov	r4, r0
 800d236:	460d      	mov	r5, r1
 800d238:	d904      	bls.n	800d244 <_raise_r+0x14>
 800d23a:	2316      	movs	r3, #22
 800d23c:	6003      	str	r3, [r0, #0]
 800d23e:	f04f 30ff 	mov.w	r0, #4294967295
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d246:	b112      	cbz	r2, 800d24e <_raise_r+0x1e>
 800d248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d24c:	b94b      	cbnz	r3, 800d262 <_raise_r+0x32>
 800d24e:	4620      	mov	r0, r4
 800d250:	f000 f830 	bl	800d2b4 <_getpid_r>
 800d254:	462a      	mov	r2, r5
 800d256:	4601      	mov	r1, r0
 800d258:	4620      	mov	r0, r4
 800d25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d25e:	f000 b817 	b.w	800d290 <_kill_r>
 800d262:	2b01      	cmp	r3, #1
 800d264:	d00a      	beq.n	800d27c <_raise_r+0x4c>
 800d266:	1c59      	adds	r1, r3, #1
 800d268:	d103      	bne.n	800d272 <_raise_r+0x42>
 800d26a:	2316      	movs	r3, #22
 800d26c:	6003      	str	r3, [r0, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	e7e7      	b.n	800d242 <_raise_r+0x12>
 800d272:	2400      	movs	r4, #0
 800d274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d278:	4628      	mov	r0, r5
 800d27a:	4798      	blx	r3
 800d27c:	2000      	movs	r0, #0
 800d27e:	e7e0      	b.n	800d242 <_raise_r+0x12>

0800d280 <raise>:
 800d280:	4b02      	ldr	r3, [pc, #8]	; (800d28c <raise+0xc>)
 800d282:	4601      	mov	r1, r0
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	f7ff bfd3 	b.w	800d230 <_raise_r>
 800d28a:	bf00      	nop
 800d28c:	200000a8 	.word	0x200000a8

0800d290 <_kill_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	; (800d2b0 <_kill_r+0x20>)
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	f7f5 fe03 	bl	8002ea8 <_kill>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	d102      	bne.n	800d2ac <_kill_r+0x1c>
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	b103      	cbz	r3, 800d2ac <_kill_r+0x1c>
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	bd38      	pop	{r3, r4, r5, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000498 	.word	0x20000498

0800d2b4 <_getpid_r>:
 800d2b4:	f7f5 bdf0 	b.w	8002e98 <_getpid>

0800d2b8 <_fstat_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d07      	ldr	r5, [pc, #28]	; (800d2d8 <_fstat_r+0x20>)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f7f5 fe4e 	bl	8002f66 <_fstat>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d102      	bne.n	800d2d4 <_fstat_r+0x1c>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	b103      	cbz	r3, 800d2d4 <_fstat_r+0x1c>
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20000498 	.word	0x20000498

0800d2dc <_isatty_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4d06      	ldr	r5, [pc, #24]	; (800d2f8 <_isatty_r+0x1c>)
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f5 fe4d 	bl	8002f86 <_isatty>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_isatty_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_isatty_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20000498 	.word	0x20000498

0800d2fc <_init>:
 800d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fe:	bf00      	nop
 800d300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d302:	bc08      	pop	{r3}
 800d304:	469e      	mov	lr, r3
 800d306:	4770      	bx	lr

0800d308 <_fini>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	bf00      	nop
 800d30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30e:	bc08      	pop	{r3}
 800d310:	469e      	mov	lr, r3
 800d312:	4770      	bx	lr
