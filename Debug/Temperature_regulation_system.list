
Temperature_regulation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800b0a0  0800b0a0  0001b0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b564  0800b564  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b56c  0800b56c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e0  0800b754  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800b754  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016379  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d70  00000000  00000000  00036589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00039300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039fa  00000000  00000000  0003b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017978  00000000  00000000  0003eff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b33  00000000  00000000  0005696a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a49d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  0014a4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b088 	.word	0x0800b088

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b088 	.word	0x0800b088

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_DMA_Init+0x38>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <MX_DMA_Init+0x38>)
 8001044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_DMA_Init+0x38>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200c      	movs	r0, #12
 800105c:	f001 f919 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001060:	200c      	movs	r0, #12
 8001062:	f001 f932 	bl	80022ca <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4bb4      	ldr	r3, [pc, #720]	; (800135c <MX_GPIO_Init+0x2e8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4ab3      	ldr	r2, [pc, #716]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4bb1      	ldr	r3, [pc, #708]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4bae      	ldr	r3, [pc, #696]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4aad      	ldr	r2, [pc, #692]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4bab      	ldr	r3, [pc, #684]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4ba8      	ldr	r3, [pc, #672]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4aa7      	ldr	r2, [pc, #668]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4ba5      	ldr	r3, [pc, #660]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	4ba2      	ldr	r3, [pc, #648]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4aa1      	ldr	r2, [pc, #644]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b9f      	ldr	r3, [pc, #636]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b9c      	ldr	r3, [pc, #624]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a9b      	ldr	r2, [pc, #620]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b99      	ldr	r3, [pc, #612]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b96      	ldr	r3, [pc, #600]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a95      	ldr	r2, [pc, #596]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b93      	ldr	r3, [pc, #588]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b90      	ldr	r3, [pc, #576]	; (800135c <MX_GPIO_Init+0x2e8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a8f      	ldr	r2, [pc, #572]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b8d      	ldr	r3, [pc, #564]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a89      	ldr	r2, [pc, #548]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b87      	ldr	r3, [pc, #540]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 800114a:	2200      	movs	r2, #0
 800114c:	f64f 5190 	movw	r1, #64912	; 0xfd90
 8001150:	4883      	ldr	r0, [pc, #524]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001152:	f001 fdfd 	bl	8002d50 <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|COOLING_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f24e 0108 	movw	r1, #57352	; 0xe008
 800115c:	4881      	ldr	r0, [pc, #516]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800115e:	f001 fdf7 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f244 0181 	movw	r1, #16513	; 0x4081
 8001168:	487f      	ldr	r0, [pc, #508]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800116a:	f001 fdf1 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	487a      	ldr	r0, [pc, #488]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001176:	f001 fdeb 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f244 2140 	movw	r1, #16960	; 0x4240
 8001180:	487a      	ldr	r0, [pc, #488]	; (800136c <MX_GPIO_Init+0x2f8>)
 8001182:	f001 fde5 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001196:	2305      	movs	r3, #5
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	486f      	ldr	r0, [pc, #444]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80011a2:	f001 fc29 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 80011a6:	f642 0310 	movw	r3, #10256	; 0x2810
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4868      	ldr	r0, [pc, #416]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80011c0:	f001 fc1a 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4865      	ldr	r0, [pc, #404]	; (8001370 <MX_GPIO_Init+0x2fc>)
 80011dc:	f001 fc0c 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80011e0:	2308      	movs	r3, #8
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	485b      	ldr	r0, [pc, #364]	; (8001364 <MX_GPIO_Init+0x2f0>)
 80011f8:	f001 fbfe 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4854      	ldr	r0, [pc, #336]	; (8001364 <MX_GPIO_Init+0x2f0>)
 8001212:	f001 fbf1 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4851      	ldr	r0, [pc, #324]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800122c:	f001 fbe4 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001240:	230b      	movs	r3, #11
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4849      	ldr	r0, [pc, #292]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800124c:	f001 fbd4 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 8001250:	2304      	movs	r3, #4
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	4843      	ldr	r0, [pc, #268]	; (8001370 <MX_GPIO_Init+0x2fc>)
 8001264:	f001 fbc8 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8001268:	2308      	movs	r3, #8
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001272:	2302      	movs	r3, #2
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	483c      	ldr	r0, [pc, #240]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800127e:	f001 fbbb 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001282:	2386      	movs	r3, #134	; 0x86
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001292:	230b      	movs	r3, #11
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <MX_GPIO_Init+0x300>)
 800129e:	f001 fbab 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a2:	2310      	movs	r3, #16
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	482f      	ldr	r0, [pc, #188]	; (8001374 <MX_GPIO_Init+0x300>)
 80012b6:	f001 fb9f 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80012ba:	2340      	movs	r3, #64	; 0x40
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ca:	2302      	movs	r3, #2
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4827      	ldr	r0, [pc, #156]	; (8001374 <MX_GPIO_Init+0x300>)
 80012d6:	f001 fb8f 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012da:	f244 0381 	movw	r3, #16513	; 0x4081
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <MX_GPIO_Init+0x2f4>)
 80012f4:	f001 fb80 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 80012f8:	2302      	movs	r3, #2
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800130c:	f001 fb74 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = COOLING_Pin|DISP_2_Pin|DISP_4_Pin;
 8001310:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800132a:	f001 fb65 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 800132e:	f24d 5380 	movw	r3, #54656	; 0xd580
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001334:	2311      	movs	r3, #17
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001348:	f001 fb56 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	e00e      	b.n	8001378 <MX_GPIO_Init+0x304>
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40020400 	.word	0x40020400
 800136c:	40021800 	.word	0x40021800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4848      	ldr	r0, [pc, #288]	; (80014a8 <MX_GPIO_Init+0x434>)
 8001386:	f001 fb37 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4841      	ldr	r0, [pc, #260]	; (80014ac <MX_GPIO_Init+0x438>)
 80013a8:	f001 fb26 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATERD13_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013be:	2302      	movs	r3, #2
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATERD13_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x43c>)
 80013ca:	f001 fb15 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4833      	ldr	r0, [pc, #204]	; (80014b4 <MX_GPIO_Init+0x440>)
 80013e6:	f001 fb07 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	482d      	ldr	r0, [pc, #180]	; (80014b4 <MX_GPIO_Init+0x440>)
 80013fe:	f001 fafb 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001412:	2302      	movs	r3, #2
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <MX_GPIO_Init+0x444>)
 800141e:	f001 faeb 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001422:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001434:	230a      	movs	r3, #10
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <MX_GPIO_Init+0x448>)
 8001440:	f001 fada 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_GPIO_Init+0x448>)
 800145a:	f001 facd 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 800145e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001464:	2311      	movs	r3, #17
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <MX_GPIO_Init+0x440>)
 8001478:	f001 fabe 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800147c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148e:	230b      	movs	r3, #11
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_GPIO_Init+0x440>)
 800149a:	f001 faad 	bl	80029f8 <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020000 	.word	0x40020000

080014c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_I2C1_Init+0x74>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <MX_I2C1_Init+0x78>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_I2C1_Init+0x74>)
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <MX_I2C1_Init+0x7c>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_I2C1_Init+0x74>)
 80014d8:	2201      	movs	r2, #1
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <MX_I2C1_Init+0x74>)
 80014fc:	f001 fc5c 	bl	8002db8 <HAL_I2C_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001506:	f000 f953 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <MX_I2C1_Init+0x74>)
 800150e:	f001 fce3 	bl	8002ed8 <HAL_I2CEx_ConfigAnalogFilter>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001518:	f000 f94a 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_I2C1_Init+0x74>)
 8001520:	f001 fd25 	bl	8002f6e <HAL_I2CEx_ConfigDigitalFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f941 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001fc 	.word	0x200001fc
 8001538:	40005400 	.word	0x40005400
 800153c:	20404768 	.word	0x20404768

08001540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0aa      	sub	sp, #168	; 0xa8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2284      	movs	r2, #132	; 0x84
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f005 f919 	bl	8006798 <memset>
  if(i2cHandle->Instance==I2C1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <HAL_I2C_MspInit+0xb4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d13c      	bne.n	80015ea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001574:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001576:	2300      	movs	r3, #0
 8001578:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fa6c 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800158a:	f000 f911 	bl	80017b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80015a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ae:	2312      	movs	r3, #18
 80015b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <HAL_I2C_MspInit+0xbc>)
 80015ce:	f001 fa13 	bl	80029f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 80015d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_I2C_MspInit+0xb8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ea:	bf00      	nop
 80015ec:	37a8      	adds	r7, #168	; 0xa8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_UART_RxCpltCallback>:
  * @param  huart UART handle.
  * @retval None
  */
//Test of UART and output pins
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	testVal++;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 8001610:	6013      	str	r3, [r2, #0]
	if(huart->Instance == USART3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_UART_RxCpltCallback+0x64>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d11c      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x56>
	{
		if(wiadomosc[0] == 'H' )
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_UART_RxCpltCallback+0x68>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b48      	cmp	r3, #72	; 0x48
 8001622:	d10a      	bne.n	800163a <HAL_UART_RxCpltCallback+0x3a>
		{
			HAL_GPIO_TogglePin(HEATER_GPIO_Port,HEATER_Pin);
 8001624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <HAL_UART_RxCpltCallback+0x6c>)
 800162a:	f001 fbaa 	bl	8002d82 <HAL_GPIO_TogglePin>
			testVal++;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e008      	b.n	800164c <HAL_UART_RxCpltCallback+0x4c>
		}else if(wiadomosc[0] == 'C' ){
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_UART_RxCpltCallback+0x68>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b43      	cmp	r3, #67	; 0x43
 8001640:	d104      	bne.n	800164c <HAL_UART_RxCpltCallback+0x4c>
//	HAL_GPIO_TogglePin(COOLING_PIN_GPIO_Port,COOLING_PIN_Pin);
			testVal++;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 800164a:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 2);
 800164c:	2202      	movs	r2, #2
 800164e:	4906      	ldr	r1, [pc, #24]	; (8001668 <HAL_UART_RxCpltCallback+0x68>)
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <HAL_UART_RxCpltCallback+0x70>)
 8001652:	f003 fe6d 	bl	8005330 <HAL_UART_Receive_IT>
	}
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000250 	.word	0x20000250
 8001664:	40004800 	.word	0x40004800
 8001668:	20000254 	.word	0x20000254
 800166c:	40021000 	.word	0x40021000
 8001670:	20000340 	.word	0x20000340

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001678:	f000 fcaf 	bl	8001fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167c:	f000 f82a 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001680:	f7ff fcf8 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8001684:	f7ff fcd8 	bl	8001038 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001688:	f000 fbb4 	bl	8001df4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800168c:	f000 faaa 	bl	8001be4 <MX_TIM6_Init>
  MX_TIM5_Init();
 8001690:	f000 fa30 	bl	8001af4 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001694:	f7ff ff14 	bl	80014c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001698:	f000 f9de 	bl	8001a58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 2);
 800169c:	2202      	movs	r2, #2
 800169e:	4909      	ldr	r1, [pc, #36]	; (80016c4 <main+0x50>)
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <main+0x54>)
 80016a2:	f003 fe45 	bl	8005330 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//Test of pin congiguration
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 80016a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <main+0x58>)
 80016ac:	f001 fb69 	bl	8002d82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_13);
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <main+0x5c>)
 80016b6:	f001 fb64 	bl	8002d82 <HAL_GPIO_TogglePin>
	HAL_Delay(10000);
 80016ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80016be:	f000 fce9 	bl	8002094 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 80016c2:	e7f0      	b.n	80016a6 <main+0x32>
 80016c4:	20000254 	.word	0x20000254
 80016c8:	20000340 	.word	0x20000340
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40021400 	.word	0x40021400

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f858 	bl	8006798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016f8:	f001 fc86 	bl	8003008 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <SystemClock_Config+0xd4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <SystemClock_Config+0xd4>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <SystemClock_Config+0xd4>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemClock_Config+0xd8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <SystemClock_Config+0xd8>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <SystemClock_Config+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001744:	23d8      	movs	r3, #216	; 0xd8
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800174c:	2303      	movs	r3, #3
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fcb7 	bl	80030c8 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001760:	f000 f826 	bl	80017b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001764:	f001 fc60 	bl	8003028 <HAL_PWREx_EnableOverDrive>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800176e:	f000 f81f 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800177e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2107      	movs	r1, #7
 8001790:	4618      	mov	r0, r3
 8001792:	f001 ff3d 	bl	8003610 <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800179c:	f000 f808 	bl	80017b0 <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>
	...

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_MspInit+0x44>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_MspInit+0x44>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_MspInit+0x44>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_MspInit+0x44>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_MspInit+0x44>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_MspInit+0x44>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 fc00 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA1_Stream1_IRQHandler+0x10>)
 800185e:	f000 fe8f 	bl	8002580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200003c8 	.word	0x200003c8

0800186c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM2_IRQHandler+0x10>)
 8001872:	f002 fd9b 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000025c 	.word	0x2000025c

08001880 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART3_IRQHandler+0x10>)
 8001886:	f003 fd97 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000340 	.word	0x20000340

08001894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM6_DAC_IRQHandler+0x10>)
 800189a:	f002 fd87 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002f4 	.word	0x200002f4

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_kill>:

int _kill(int pid, int sig)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c2:	f004 ff3f 	bl	8006744 <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2216      	movs	r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
	return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_exit>:

void _exit (int status)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ea:	e7fe      	b.n	80018ea <_exit+0x12>

080018ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00a      	b.n	8001914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018fe:	f3af 8000 	nop.w
 8001902:	4601      	mov	r1, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	b2ca      	uxtb	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf0      	blt.n	80018fe <_read+0x12>
	}

return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e009      	b.n	800194c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf1      	blt.n	8001938 <_write+0x12>
	}
	return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_close>:

int _close(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f004 fea4 	bl	8006744 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20050000 	.word	0x20050000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20000258 	.word	0x20000258
 8001a30:	20000440 	.word	0x20000440

08001a34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a80:	226b      	movs	r2, #107	; 0x6b
 8001a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000000;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <MX_TIM2_Init+0x94>)
 8001a9e:	f002 fbcd 	bl	800423c <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001aa8:	f7ff fe82 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM2_Init+0x94>)
 8001aba:	f002 feab 	bl	8004814 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ac4:	f7ff fe74 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM2_Init+0x94>)
 8001ad6:	f003 fb31 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f7ff fe66 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000025c 	.word	0x2000025c
 8001af0:	3b9aca00 	.word	0x3b9aca00

08001af4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <MX_TIM5_Init+0xec>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b2e:	226b      	movs	r2, #107	; 0x6b
 8001b30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b4c:	4823      	ldr	r0, [pc, #140]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b4e:	f002 fb75 	bl	800423c <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001b58:	f7ff fe2a 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b66:	4619      	mov	r1, r3
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b6a:	f002 fe53 	bl	8004814 <HAL_TIM_ConfigClockSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001b74:	f7ff fe1c 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b78:	4818      	ldr	r0, [pc, #96]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b7a:	f002 fbb6 	bl	80042ea <HAL_TIM_PWM_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001b84:	f7ff fe14 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001b98:	f003 fad0 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001ba2:	f7ff fe05 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba6:	2360      	movs	r3, #96	; 0x60
 8001ba8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001bbe:	f002 fd15 	bl	80045ec <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001bc8:	f7ff fdf2 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM5_Init+0xe8>)
 8001bce:	f000 f8d9 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3738      	adds	r7, #56	; 0x38
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002a8 	.word	0x200002a8
 8001be0:	40000c00 	.word	0x40000c00

08001be4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <MX_TIM6_Init+0x6c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1079;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001bfc:	f240 4237 	movw	r2, #1079	; 0x437
 8001c00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001c0a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001c18:	f002 fb10 	bl	800423c <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c22:	f7ff fdc5 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <MX_TIM6_Init+0x68>)
 8001c34:	f003 fa82 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c3e:	f7ff fdb7 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002f4 	.word	0x200002f4
 8001c50:	40001000 	.word	0x40001000

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d14d      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a3d      	ldr	r2, [pc, #244]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4826      	ldr	r0, [pc, #152]	; (8001d74 <HAL_TIM_Base_MspInit+0x120>)
 8001cda:	f000 fe8d 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 8001cde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481f      	ldr	r0, [pc, #124]	; (8001d78 <HAL_TIM_Base_MspInit+0x124>)
 8001cfc:	f000 fe7c 	bl	80029f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	201c      	movs	r0, #28
 8001d06:	f000 fac4 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d0a:	201c      	movs	r0, #28
 8001d0c:	f000 fadd 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d10:	e02a      	b.n	8001d68 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Base_MspInit+0x128>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d10c      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	e018      	b.n	8001d68 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM6)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_TIM_Base_MspInit+0x12c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_TIM_Base_MspInit+0x11c>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2036      	movs	r0, #54	; 0x36
 8001d5e:	f000 fa98 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d62:	2036      	movs	r0, #54	; 0x36
 8001d64:	f000 fab1 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8001d68:	bf00      	nop
 8001d6a:	3730      	adds	r7, #48	; 0x30
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40001000 	.word	0x40001000

08001d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_TIM_MspPostInit+0x64>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11b      	bne.n	8001dde <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = LD4_Pin;
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_TIM_MspPostInit+0x6c>)
 8001dda:	f000 fe0d 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART3_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e38:	f003 fa2c 	bl	8005294 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fcb5 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000340 	.word	0x20000340
 8001e50:	40004800 	.word	0x40004800

08001e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0aa      	sub	sp, #168	; 0xa8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2284      	movs	r2, #132	; 0x84
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fc8f 	bl	8006798 <memset>
  if(uartHandle->Instance==USART3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3d      	ldr	r2, [pc, #244]	; (8001f74 <HAL_UART_MspInit+0x120>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d172      	bne.n	8001f6a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fde2 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e9e:	f7ff fc87 	bl	80017b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_UART_MspInit+0x124>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ed2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eec:	2307      	movs	r3, #7
 8001eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4820      	ldr	r0, [pc, #128]	; (8001f7c <HAL_UART_MspInit+0x128>)
 8001efa:	f000 fd7d 	bl	80029f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_UART_MspInit+0x130>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f3e:	4810      	ldr	r0, [pc, #64]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f40:	f000 f9de 	bl	8002300 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f4a:	f7ff fc31 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f52:	675a      	str	r2, [r3, #116]	; 0x74
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_UART_MspInit+0x12c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2027      	movs	r0, #39	; 0x27
 8001f60:	f000 f997 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f64:	2027      	movs	r0, #39	; 0x27
 8001f66:	f000 f9b0 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	37a8      	adds	r7, #168	; 0xa8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004800 	.word	0x40004800
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	200003c8 	.word	0x200003c8
 8001f84:	40026028 	.word	0x40026028

08001f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb2:	f7ff fd3f 	bl	8001a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f004 fbcb 	bl	8006750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fba:	f7ff fb5b 	bl	8001674 <main>
  bx  lr    
 8001fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fcc:	0800b574 	.word	0x0800b574
  ldr r2, =_sbss
 8001fd0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fd4:	2000043c 	.word	0x2000043c

08001fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC_IRQHandler>

08001fda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f000 f94c 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 f805 	bl	8001ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fea:	f7ff fbe7 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x54>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_InitTick+0x58>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200a:	fbb3 f3f1 	udiv	r3, r3, r1
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f967 	bl	80022e6 <HAL_SYSTICK_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00e      	b.n	8002040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d80a      	bhi.n	800203e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002028:	2200      	movs	r2, #0
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f000 f92f 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_InitTick+0x5c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000000 	.word	0x20000000
 800204c:	20000008 	.word	0x20000008
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x20>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_IncTick+0x24>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	20000428 	.word	0x20000428

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000428 	.word	0x20000428

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff ffee 	bl	800207c <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d005      	beq.n	80020ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_Delay+0x44>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ba:	bf00      	nop
 80020bc:	f7ff ffde 	bl	800207c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d8f7      	bhi.n	80020bc <HAL_Delay+0x28>
  {
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000008 	.word	0x20000008

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	05fa0000 	.word	0x05fa0000

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff3e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff31 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff feb6 	bl	800207c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e099      	b.n	8002450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233c:	e00f      	b.n	800235e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233e:	f7ff fe9d 	bl	800207c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b05      	cmp	r3, #5
 800234a:	d908      	bls.n	800235e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e078      	b.n	8002450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e8      	bne.n	800233e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_DMA_Init+0x158>)
 8002378:	4013      	ands	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0307 	bic.w	r3, r3, #7
 80023de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d117      	bne.n	8002422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa7b 	bl	8002900 <DMA_CheckFifoParam>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800241e:	2301      	movs	r3, #1
 8002420:	e016      	b.n	8002450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa32 	bl	8002894 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	223f      	movs	r2, #63	; 0x3f
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	f010803f 	.word	0xf010803f

0800245c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800246a:	f7ff fe07 	bl	800207c <HAL_GetTick>
 800246e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e052      	b.n	8002534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0216 	bic.w	r2, r2, #22
 800249c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_DMA_Abort+0x62>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024de:	e013      	b.n	8002508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e0:	f7ff fdcc 	bl	800207c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d90c      	bls.n	8002508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e015      	b.n	8002534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e4      	bne.n	80024e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	223f      	movs	r2, #63	; 0x3f
 800251c:	409a      	lsls	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d004      	beq.n	800255a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00c      	b.n	8002574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_DMA_IRQHandler+0x248>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x24c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2208      	movs	r2, #8
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01a      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2201      	movs	r2, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2201      	movs	r2, #1
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2204      	movs	r2, #4
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2204      	movs	r2, #4
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2210      	movs	r2, #16
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d043      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2210      	movs	r2, #16
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e01f      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
 80026c0:	e016      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0208 	bic.w	r2, r2, #8
 80026de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2220      	movs	r2, #32
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 808f 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8087 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2220      	movs	r2, #32
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b05      	cmp	r3, #5
 8002728:	d136      	bne.n	8002798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0216 	bic.w	r2, r2, #22
 8002738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <HAL_DMA_IRQHandler+0x1da>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0208 	bic.w	r2, r2, #8
 8002768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	223f      	movs	r2, #63	; 0x3f
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07e      	beq.n	800288c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
        }
        return;
 8002796:	e079      	b.n	800288c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d031      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e02c      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000
 80027cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e01e      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0210 	bic.w	r2, r2, #16
 80027fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d032      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d022      	beq.n	800287a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2205      	movs	r2, #5
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d307      	bcc.n	8002868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f2      	bne.n	800284c <HAL_DMA_IRQHandler+0x2cc>
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x30e>
        return;
 800288c:	bf00      	nop
    }
  }
}
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b10      	subs	r3, #16
 80028a4:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <DMA_CalcBaseAndBitshift+0x60>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <DMA_CalcBaseAndBitshift+0x64>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d908      	bls.n	80028d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	659a      	str	r2, [r3, #88]	; 0x58
 80028d2:	e006      	b.n	80028e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	aaaaaaab 	.word	0xaaaaaaab
 80028f8:	0800b0b8 	.word	0x0800b0b8
 80028fc:	fffffc00 	.word	0xfffffc00

08002900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d856      	bhi.n	80029ce <DMA_CheckFifoParam+0xce>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x28>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002939 	.word	0x08002939
 8002934:	080029cf 	.word	0x080029cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d046      	beq.n	80029d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e043      	b.n	80029d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002952:	d140      	bne.n	80029d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e03d      	b.n	80029d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d121      	bne.n	80029a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d837      	bhi.n	80029da <DMA_CheckFifoParam+0xda>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <DMA_CheckFifoParam+0x70>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002987 	.word	0x08002987
 8002978:	08002981 	.word	0x08002981
 800297c:	08002999 	.word	0x08002999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e030      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d025      	beq.n	80029de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e022      	b.n	80029de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a0:	d11f      	bne.n	80029e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a6:	e01c      	b.n	80029e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d903      	bls.n	80029b6 <DMA_CheckFifoParam+0xb6>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d003      	beq.n	80029bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b4:	e018      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ba:	e015      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e00b      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029ce:	bf00      	nop
 80029d0:	e00a      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e008      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e006      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e004      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
    }
  } 
  
  return status; 
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e175      	b.n	8002d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 8164 	bne.w	8002cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d005      	beq.n	8002a4e <HAL_GPIO_Init+0x56>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d017      	beq.n	8002aec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d123      	bne.n	8002b40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80be 	beq.w	8002cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_GPIO_Init+0x324>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_GPIO_Init+0x324>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_GPIO_Init+0x324>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_GPIO_Init+0x328>)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_GPIO_Init+0x32c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d037      	beq.n	8002c36 <HAL_GPIO_Init+0x23e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_GPIO_Init+0x330>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_GPIO_Init+0x23a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a56      	ldr	r2, [pc, #344]	; (8002d2c <HAL_GPIO_Init+0x334>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02b      	beq.n	8002c2e <HAL_GPIO_Init+0x236>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <HAL_GPIO_Init+0x338>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d025      	beq.n	8002c2a <HAL_GPIO_Init+0x232>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a54      	ldr	r2, [pc, #336]	; (8002d34 <HAL_GPIO_Init+0x33c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01f      	beq.n	8002c26 <HAL_GPIO_Init+0x22e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a53      	ldr	r2, [pc, #332]	; (8002d38 <HAL_GPIO_Init+0x340>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x22a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_GPIO_Init+0x344>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x226>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a51      	ldr	r2, [pc, #324]	; (8002d40 <HAL_GPIO_Init+0x348>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x222>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a50      	ldr	r2, [pc, #320]	; (8002d44 <HAL_GPIO_Init+0x34c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x21e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <HAL_GPIO_Init+0x350>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x21a>
 8002c0e:	2309      	movs	r3, #9
 8002c10:	e012      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c12:	230a      	movs	r3, #10
 8002c14:	e010      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c16:	2308      	movs	r3, #8
 8002c18:	e00e      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	e00c      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c1e:	2306      	movs	r3, #6
 8002c20:	e00a      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c22:	2305      	movs	r3, #5
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x240>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x328>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c80:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_GPIO_Init+0x354>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f ae86 	bls.w	8002a18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40021400 	.word	0x40021400
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40022400 	.word	0x40022400
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d94:	887a      	ldrh	r2, [r7, #2]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	041a      	lsls	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	400b      	ands	r3, r1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07f      	b.n	8002eca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fbae 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e006      	b.n	8002e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d104      	bne.n	8002e52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_I2C_Init+0x11c>)
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	02008000 	.word	0x02008000

08002ed8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d138      	bne.n	8002f60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e032      	b.n	8002f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d139      	bne.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e033      	b.n	8002ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2224      	movs	r2, #36	; 0x24
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003056:	f7ff f811 	bl	800207c <HAL_GetTick>
 800305a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800305c:	e009      	b.n	8003072 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800305e:	f7ff f80d 	bl	800207c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306c:	d901      	bls.n	8003072 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e022      	b.n	80030b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d1ee      	bne.n	800305e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308c:	f7fe fff6 	bl	800207c <HAL_GetTick>
 8003090:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003092:	e009      	b.n	80030a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003094:	f7fe fff2 	bl	800207c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a2:	d901      	bls.n	80030a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e007      	b.n	80030b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b4:	d1ee      	bne.n	8003094 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40007000 	.word	0x40007000

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e291      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8087 	beq.w	80031fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ec:	4b96      	ldr	r3, [pc, #600]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d00c      	beq.n	8003112 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f8:	4b93      	ldr	r3, [pc, #588]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d112      	bne.n	800312a <HAL_RCC_OscConfig+0x62>
 8003104:	4b90      	ldr	r3, [pc, #576]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003110:	d10b      	bne.n	800312a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d06c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x130>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d168      	bne.n	80031f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e26b      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x7a>
 8003134:	4b84      	ldr	r3, [pc, #528]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a83      	ldr	r2, [pc, #524]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e02e      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x9c>
 800314a:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7e      	ldr	r2, [pc, #504]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b7c      	ldr	r3, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7b      	ldr	r2, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800315c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0xc0>
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a75      	ldr	r2, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b73      	ldr	r3, [pc, #460]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a72      	ldr	r2, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe ff68 	bl	800207c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe ff64 	bl	800207c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e21f      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe8>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe ff54 	bl	800207c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe ff50 	bl	800207c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e20b      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x110>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d069      	beq.n	80032da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x190>
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x17a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1df      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	493d      	ldr	r1, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e040      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a38      	ldr	r2, [pc, #224]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe ff06 	bl	800207c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe ff02 	bl	800207c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1bd      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4929      	ldr	r1, [pc, #164]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
 80032a6:	e018      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fee2 	bl	800207c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fede 	bl	800207c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e199      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d038      	beq.n	8003358 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe febf 	bl	800207c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003302:	f7fe febb 	bl	800207c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e176      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x23a>
 8003320:	e01a      	b.n	8003358 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fe fea5 	bl	800207c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7fe fea1 	bl	800207c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d903      	bls.n	800334c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e15c      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
 8003348:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ee      	bne.n	8003336 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a4 	beq.w	80034ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a87      	ldr	r2, [pc, #540]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338e:	4b82      	ldr	r3, [pc, #520]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800339a:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7e      	ldr	r2, [pc, #504]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fe69 	bl	800207c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fe fe65 	bl	800207c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e120      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x31a>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e02d      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x33c>
 80033ea:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a66      	ldr	r2, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	e01c      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d10c      	bne.n	8003426 <HAL_RCC_OscConfig+0x35e>
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	e00b      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b58      	ldr	r3, [pc, #352]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a57      	ldr	r2, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe fe19 	bl	800207c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe fe15 	bl	800207c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0ce      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCC_OscConfig+0x386>
 8003470:	e014      	b.n	800349c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fe fe03 	bl	800207c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe fdff 	bl	800207c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0b8      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b3c      	ldr	r3, [pc, #240]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a4 	beq.w	8003600 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d06b      	beq.n	800359c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d149      	bne.n	8003560 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fdd0 	bl	800207c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fdcc 	bl	800207c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e087      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	4313      	orrs	r3, r2
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800352a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fda0 	bl	800207c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fd9c 	bl	800207c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e057      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x478>
 800355e:	e04f      	b.n	8003600 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fd86 	bl	800207c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fd82 	bl	800207c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e03d      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_OscConfig+0x4cc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x4ac>
 8003592:	e035      	b.n	8003600 <HAL_RCC_OscConfig+0x538>
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x544>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d028      	beq.n	80035fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d121      	bne.n	80035fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11a      	bne.n	80035fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d111      	bne.n	80035fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0d0      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d910      	bls.n	8003658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 020f 	bic.w	r2, r3, #15
 800363e:	4965      	ldr	r1, [pc, #404]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b8      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d040      	beq.n	8003734 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d115      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e073      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06b      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4936      	ldr	r1, [pc, #216]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003704:	f7fe fcba 	bl	800207c <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	e00a      	b.n	8003722 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7fe fcb6 	bl	800207c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e053      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d1eb      	bne.n	800370c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d210      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 020f 	bic.w	r2, r3, #15
 800374a:	4922      	ldr	r1, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e032      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4916      	ldr	r1, [pc, #88]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037a2:	f000 f821 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b4:	5ccb      	ldrb	r3, [r1, r3]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1d4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fc16 	bl	8001ff4 <HAL_InitTick>

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023c00 	.word	0x40023c00
 80037d8:	40023800 	.word	0x40023800
 80037dc:	0800b0a0 	.word	0x0800b0a0
 80037e0:	20000000 	.word	0x20000000
 80037e4:	20000004 	.word	0x20000004

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b094      	sub	sp, #80	; 0x50
 80037ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	2300      	movs	r3, #0
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	2300      	movs	r3, #0
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003800:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d00d      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x40>
 800380c:	2b08      	cmp	r3, #8
 800380e:	f200 80e1 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x34>
 8003816:	2b04      	cmp	r3, #4
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x3a>
 800381a:	e0db      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003820:	e0db      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003822:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003826:	e0d8      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	2200      	movs	r2, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
 8003856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800385a:	4622      	mov	r2, r4
 800385c:	462b      	mov	r3, r5
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4621      	mov	r1, r4
 8003874:	1a51      	subs	r1, r2, r1
 8003876:	6139      	str	r1, [r7, #16]
 8003878:	4629      	mov	r1, r5
 800387a:	eb63 0301 	sbc.w	r3, r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	018b      	lsls	r3, r1, #6
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003896:	4651      	mov	r1, sl
 8003898:	018a      	lsls	r2, r1, #6
 800389a:	4651      	mov	r1, sl
 800389c:	ebb2 0801 	subs.w	r8, r2, r1
 80038a0:	4659      	mov	r1, fp
 80038a2:	eb63 0901 	sbc.w	r9, r3, r1
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ba:	4690      	mov	r8, r2
 80038bc:	4699      	mov	r9, r3
 80038be:	4623      	mov	r3, r4
 80038c0:	eb18 0303 	adds.w	r3, r8, r3
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	462b      	mov	r3, r5
 80038c8:	eb49 0303 	adc.w	r3, r9, r3
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038da:	4629      	mov	r1, r5
 80038dc:	024b      	lsls	r3, r1, #9
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038e4:	4621      	mov	r1, r4
 80038e6:	024a      	lsls	r2, r1, #9
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f8:	f7fd f9e6 	bl	8000cc8 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	e058      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	2200      	movs	r2, #0
 800390e:	4618      	mov	r0, r3
 8003910:	4611      	mov	r1, r2
 8003912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	0159      	lsls	r1, r3, #5
 800392e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003932:	0150      	lsls	r0, r2, #5
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4641      	mov	r1, r8
 800393a:	ebb2 0a01 	subs.w	sl, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb63 0b01 	sbc.w	fp, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003958:	ebb2 040a 	subs.w	r4, r2, sl
 800395c:	eb63 050b 	sbc.w	r5, r3, fp
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	00eb      	lsls	r3, r5, #3
 800396a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396e:	00e2      	lsls	r2, r4, #3
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4643      	mov	r3, r8
 8003976:	18e3      	adds	r3, r4, r3
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	464b      	mov	r3, r9
 800397c:	eb45 0303 	adc.w	r3, r5, r3
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	61fa      	str	r2, [r7, #28]
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	f7fd f98c 	bl	8000cc8 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3750      	adds	r7, #80	; 0x50
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a9b      	lsrs	r3, r3, #10
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0800b0b0 	.word	0x0800b0b0

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffdc 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0b5b      	lsrs	r3, r3, #13
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	0800b0b0 	.word	0x0800b0b0

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d012      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a84:	4b69      	ldr	r3, [pc, #420]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a68      	ldr	r2, [pc, #416]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a8e:	6093      	str	r3, [r2, #8]
 8003a90:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	4964      	ldr	r1, [pc, #400]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d017      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	4959      	ldr	r1, [pc, #356]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad4:	d101      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	494a      	ldr	r1, [pc, #296]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 808b 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b40:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4c:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b58:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a34      	ldr	r2, [pc, #208]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fe fa8a 	bl	800207c <HAL_GetTick>
 8003b68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fe fa86 	bl	800207c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e357      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d035      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d02e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bd0:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d114      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fa4e 	bl	800207c <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fe fa4a 	bl	800207c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e319      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ee      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c12:	d111      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c22:	400b      	ands	r3, r1
 8003c24:	4901      	ldr	r1, [pc, #4]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40007000 	.word	0x40007000
 8003c34:	0ffffcff 	.word	0x0ffffcff
 8003c38:	4baa      	ldr	r3, [pc, #680]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4aa9      	ldr	r2, [pc, #676]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c42:	6093      	str	r3, [r2, #8]
 8003c44:	4ba7      	ldr	r3, [pc, #668]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	49a4      	ldr	r1, [pc, #656]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d010      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c68:	4a9e      	ldr	r2, [pc, #632]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c72:	4b9c      	ldr	r3, [pc, #624]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	4999      	ldr	r1, [pc, #612]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c90:	4b94      	ldr	r3, [pc, #592]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	4991      	ldr	r1, [pc, #580]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb2:	4b8c      	ldr	r3, [pc, #560]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc0:	4988      	ldr	r1, [pc, #544]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd4:	4b83      	ldr	r3, [pc, #524]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce2:	4980      	ldr	r1, [pc, #512]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4977      	ldr	r1, [pc, #476]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d18:	4b72      	ldr	r3, [pc, #456]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	496f      	ldr	r1, [pc, #444]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f023 020c 	bic.w	r2, r3, #12
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	4966      	ldr	r1, [pc, #408]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	495e      	ldr	r1, [pc, #376]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d7e:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	4955      	ldr	r1, [pc, #340]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dc2:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	4944      	ldr	r1, [pc, #272]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	493c      	ldr	r1, [pc, #240]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	4933      	ldr	r1, [pc, #204]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e36:	492b      	ldr	r1, [pc, #172]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e58:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e68:	d101      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	4912      	ldr	r1, [pc, #72]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebc:	4909      	ldr	r1, [pc, #36]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d006      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80d9 	beq.w	800408a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed8:	4b02      	ldr	r3, [pc, #8]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a01      	ldr	r2, [pc, #4]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ede:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eea:	f7fe f8c7 	bl	800207c <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef2:	f7fe f8c3 	bl	800207c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	; 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e194      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f04:	4b6c      	ldr	r3, [pc, #432]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11d      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f32:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	019a      	lsls	r2, r3, #6
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	071b      	lsls	r3, r3, #28
 8003f58:	4957      	ldr	r1, [pc, #348]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d02e      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8a:	d129      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f8c:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9a:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa0:	0f1b      	lsrs	r3, r3, #28
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	019a      	lsls	r2, r3, #6
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	493d      	ldr	r1, [pc, #244]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fce:	f023 021f 	bic.w	r2, r3, #31
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	4937      	ldr	r1, [pc, #220]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fec:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff2:	0e1b      	lsrs	r3, r3, #24
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004000:	0f1b      	lsrs	r3, r3, #28
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	019a      	lsls	r2, r3, #6
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	071b      	lsls	r3, r3, #28
 8004020:	4925      	ldr	r1, [pc, #148]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d011      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	019a      	lsls	r2, r3, #6
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	071b      	lsls	r3, r3, #28
 8004050:	4919      	ldr	r1, [pc, #100]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004064:	f7fe f80a 	bl	800207c <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800406c:	f7fe f806 	bl	800207c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0d7      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 80cd 	bne.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409e:	f7fd ffed 	bl	800207c <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040a6:	f7fd ffe9 	bl	800207c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b64      	cmp	r3, #100	; 0x64
 80040b2:	d903      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e0ba      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c8:	d0ed      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02e      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d12a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0f1b      	lsrs	r3, r3, #28
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	4944      	ldr	r1, [pc, #272]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800412e:	4b42      	ldr	r3, [pc, #264]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004134:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	493d      	ldr	r1, [pc, #244]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d022      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415c:	d11d      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800415e:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800416c:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	0f1b      	lsrs	r3, r3, #28
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	019a      	lsls	r2, r3, #6
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	431a      	orrs	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	4929      	ldr	r1, [pc, #164]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d028      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	0e1b      	lsrs	r3, r3, #24
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041b4:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	019a      	lsls	r2, r3, #6
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	4917      	ldr	r1, [pc, #92]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4911      	ldr	r1, [pc, #68]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fd ff3a 	bl	800207c <HAL_GetTick>
 8004208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800420c:	f7fd ff36 	bl	800207c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e007      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422a:	d1ef      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e049      	b.n	80042e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd fcf6 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fbc6 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e049      	b.n	8004390 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f841 	bl	8004398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f000 fb6f 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 faee 	bl	80049d0 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fae0 	bl	80049bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 faf1 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fac4 	bl	80049d0 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fab6 	bl	80049bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fac7 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa9a 	bl	80049d0 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa8c 	bl	80049bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fa9d 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa70 	bl	80049d0 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa62 	bl	80049bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fa73 	bl	80049e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa3c 	bl	80049a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fe88 	bl	800526c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d10e      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d107      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fe7b 	bl	8005280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10e      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d107      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fa21 	bl	80049f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0220 	mvn.w	r2, #32
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fe3b 	bl	8005258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004606:	2302      	movs	r3, #2
 8004608:	e0ff      	b.n	800480a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b14      	cmp	r3, #20
 8004616:	f200 80f0 	bhi.w	80047fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004675 	.word	0x08004675
 8004624:	080047fb 	.word	0x080047fb
 8004628:	080047fb 	.word	0x080047fb
 800462c:	080047fb 	.word	0x080047fb
 8004630:	080046b5 	.word	0x080046b5
 8004634:	080047fb 	.word	0x080047fb
 8004638:	080047fb 	.word	0x080047fb
 800463c:	080047fb 	.word	0x080047fb
 8004640:	080046f7 	.word	0x080046f7
 8004644:	080047fb 	.word	0x080047fb
 8004648:	080047fb 	.word	0x080047fb
 800464c:	080047fb 	.word	0x080047fb
 8004650:	08004737 	.word	0x08004737
 8004654:	080047fb 	.word	0x080047fb
 8004658:	080047fb 	.word	0x080047fb
 800465c:	080047fb 	.word	0x080047fb
 8004660:	08004779 	.word	0x08004779
 8004664:	080047fb 	.word	0x080047fb
 8004668:	080047fb 	.word	0x080047fb
 800466c:	080047fb 	.word	0x080047fb
 8004670:	080047b9 	.word	0x080047b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fa66 	bl	8004b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0204 	bic.w	r2, r2, #4
 800469e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6999      	ldr	r1, [r3, #24]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	619a      	str	r2, [r3, #24]
      break;
 80046b2:	e0a5      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fab8 	bl	8004c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	619a      	str	r2, [r3, #24]
      break;
 80046f4:	e084      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fb0f 	bl	8004d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0208 	orr.w	r2, r2, #8
 8004710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0204 	bic.w	r2, r2, #4
 8004720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69d9      	ldr	r1, [r3, #28]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	61da      	str	r2, [r3, #28]
      break;
 8004734:	e064      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fb65 	bl	8004e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69d9      	ldr	r1, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	021a      	lsls	r2, r3, #8
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	61da      	str	r2, [r3, #28]
      break;
 8004776:	e043      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fb9c 	bl	8004ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0208 	orr.w	r2, r2, #8
 8004792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0204 	bic.w	r2, r2, #4
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047b6:	e023      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fbce 	bl	8004f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047f8:	e002      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	75fb      	strb	r3, [r7, #23]
      break;
 80047fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIM_ConfigClockSource+0x1c>
 800482c:	2302      	movs	r3, #2
 800482e:	e0b4      	b.n	800499a <HAL_TIM_ConfigClockSource+0x186>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4b56      	ldr	r3, [pc, #344]	; (80049a4 <HAL_TIM_ConfigClockSource+0x190>)
 800484c:	4013      	ands	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004868:	d03e      	beq.n	80048e8 <HAL_TIM_ConfigClockSource+0xd4>
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486e:	f200 8087 	bhi.w	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	f000 8086 	beq.w	8004986 <HAL_TIM_ConfigClockSource+0x172>
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d87f      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b70      	cmp	r3, #112	; 0x70
 8004882:	d01a      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xa6>
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d87b      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 8004888:	2b60      	cmp	r3, #96	; 0x60
 800488a:	d050      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x11a>
 800488c:	2b60      	cmp	r3, #96	; 0x60
 800488e:	d877      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b50      	cmp	r3, #80	; 0x50
 8004892:	d03c      	beq.n	800490e <HAL_TIM_ConfigClockSource+0xfa>
 8004894:	2b50      	cmp	r3, #80	; 0x50
 8004896:	d873      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d058      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x13a>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d86f      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b30      	cmp	r3, #48	; 0x30
 80048a2:	d064      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x15a>
 80048a4:	2b30      	cmp	r3, #48	; 0x30
 80048a6:	d86b      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d060      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x15a>
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d867      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05c      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x15a>
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d05a      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x15a>
 80048b8:	e062      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6899      	ldr	r1, [r3, #8]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f000 fc17 	bl	80050fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	609a      	str	r2, [r3, #8]
      break;
 80048e6:	e04f      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6899      	ldr	r1, [r3, #8]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f000 fc00 	bl	80050fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800490a:	609a      	str	r2, [r3, #8]
      break;
 800490c:	e03c      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fb74 	bl	8005008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2150      	movs	r1, #80	; 0x50
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fbcd 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800492c:	e02c      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	461a      	mov	r2, r3
 800493c:	f000 fb93 	bl	8005066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2160      	movs	r1, #96	; 0x60
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fbbd 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800494c:	e01c      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fb54 	bl	8005008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fbad 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800496c:	e00c      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f000 fba4 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800497e:	e003      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e000      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	fffeff88 	.word	0xfffeff88

080049a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a40      	ldr	r2, [pc, #256]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d00f      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3d      	ldr	r2, [pc, #244]	; (8004b24 <TIM_Base_SetConfig+0x118>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3c      	ldr	r2, [pc, #240]	; (8004b28 <TIM_Base_SetConfig+0x11c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3a      	ldr	r2, [pc, #232]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2f      	ldr	r2, [pc, #188]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d027      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <TIM_Base_SetConfig+0x118>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d023      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <TIM_Base_SetConfig+0x11c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <TIM_Base_SetConfig+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <TIM_Base_SetConfig+0x130>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a25      	ldr	r2, [pc, #148]	; (8004b40 <TIM_Base_SetConfig+0x134>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <TIM_Base_SetConfig+0x138>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40010400 	.word	0x40010400
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	40001800 	.word	0x40001800
 8004b44:	40001c00 	.word	0x40001c00
 8004b48:	40002000 	.word	0x40002000

08004b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <TIM_OC1_SetConfig+0xd8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 0302 	bic.w	r3, r3, #2
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <TIM_OC1_SetConfig+0xdc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC1_SetConfig+0x64>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <TIM_OC1_SetConfig+0xe0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <TIM_OC1_SetConfig+0xdc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC1_SetConfig+0x8e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <TIM_OC1_SetConfig+0xe0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d111      	bne.n	8004bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	621a      	str	r2, [r3, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	fffeff8f 	.word	0xfffeff8f
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400

08004c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0210 	bic.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <TIM_OC2_SetConfig+0xe4>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <TIM_OC2_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC2_SetConfig+0x68>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <TIM_OC2_SetConfig+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <TIM_OC2_SetConfig+0xe8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC2_SetConfig+0x94>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <TIM_OC2_SetConfig+0xec>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d113      	bne.n	8004cec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	feff8fff 	.word	0xfeff8fff
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010400 	.word	0x40010400

08004d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <TIM_OC3_SetConfig+0xe0>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <TIM_OC3_SetConfig+0xe4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_OC3_SetConfig+0x66>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <TIM_OC3_SetConfig+0xe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10d      	bne.n	8004da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <TIM_OC3_SetConfig+0xe4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC3_SetConfig+0x92>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <TIM_OC3_SetConfig+0xe8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d113      	bne.n	8004dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	621a      	str	r2, [r3, #32]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	fffeff8f 	.word	0xfffeff8f
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400

08004e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <TIM_OC4_SetConfig+0xa4>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <TIM_OC4_SetConfig+0xa8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC4_SetConfig+0x68>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <TIM_OC4_SetConfig+0xac>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	feff8fff 	.word	0xfeff8fff
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010400 	.word	0x40010400

08004ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <TIM_OC5_SetConfig+0x98>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <TIM_OC5_SetConfig+0x9c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC5_SetConfig+0x5e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a11      	ldr	r2, [pc, #68]	; (8004f5c <TIM_OC5_SetConfig+0xa0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d109      	bne.n	8004f2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	fffeff8f 	.word	0xfffeff8f
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400

08004f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <TIM_OC6_SetConfig+0x9c>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	051b      	lsls	r3, r3, #20
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <TIM_OC6_SetConfig+0xa0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x60>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <TIM_OC6_SetConfig+0xa4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	feff8fff 	.word	0xfeff8fff
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 030a 	bic.w	r3, r3, #10
 8005044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0210 	bic.w	r2, r3, #16
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	431a      	orrs	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e06d      	b.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a30      	ldr	r2, [pc, #192]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800518e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d01d      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a15      	ldr	r2, [pc, #84]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10c      	bne.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40010000 	.word	0x40010000
 8005240:	40010400 	.word	0x40010400
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40014000 	.word	0x40014000
 8005254:	40001800 	.word	0x40001800

08005258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e040      	b.n	8005328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fdcc 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fb62 	bl	800599c <UART_SetConfig>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e022      	b.n	8005328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fdba 	bl	8005e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fe41 	bl	8005fa8 <UART_CheckIdleState>
 8005326:	4603      	mov	r3, r0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005344:	2b20      	cmp	r3, #32
 8005346:	d132      	bne.n	80053ae <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_UART_Receive_IT+0x24>
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e02b      	b.n	80053b0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	613b      	str	r3, [r7, #16]
   return(result);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	69f9      	ldr	r1, [r7, #28]
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	61bb      	str	r3, [r7, #24]
   return(result);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e6      	bne.n	800536c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fefd 	bl	80061a4 <UART_Start_Receive_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	e000      	b.n	80053b0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b0ba      	sub	sp, #232	; 0xe8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80053e6:	4013      	ands	r3, r2
 80053e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d115      	bne.n	8005420 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00f      	beq.n	8005420 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8297 	beq.w	8005944 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
      }
      return;
 800541e:	e291      	b.n	8005944 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8117 	beq.w	8005658 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005436:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800543a:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_UART_IRQHandler+0x298>)
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 810a 	beq.w	8005658 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d011      	beq.n	8005474 <HAL_UART_IRQHandler+0xbc>
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546a:	f043 0201 	orr.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d011      	beq.n	80054a4 <HAL_UART_IRQHandler+0xec>
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2202      	movs	r2, #2
 8005492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549a:	f043 0204 	orr.w	r2, r3, #4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d011      	beq.n	80054d4 <HAL_UART_IRQHandler+0x11c>
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2204      	movs	r2, #4
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	f043 0202 	orr.w	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2208      	movs	r2, #8
 80054fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005506:	f043 0208 	orr.w	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <HAL_UART_IRQHandler+0x18a>
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 81fd 	beq.w	8005948 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800555a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04f      	beq.n	800563a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fec8 	bl	8006330 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d141      	bne.n	8005632 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1d9      	bne.n	80055ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d013      	beq.n	800562a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <HAL_UART_IRQHandler+0x29c>)
 8005608:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	4618      	mov	r0, r3
 8005610:	f7fc ff94 	bl	800253c <HAL_DMA_Abort_IT>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e00f      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9a0 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00b      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f99c 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e007      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f998 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005648:	e17e      	b.n	8005948 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	bf00      	nop
    return;
 800564c:	e17c      	b.n	8005948 <HAL_UART_IRQHandler+0x590>
 800564e:	bf00      	nop
 8005650:	04000120 	.word	0x04000120
 8005654:	080063f9 	.word	0x080063f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 814c 	bne.w	80058fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8145 	beq.w	80058fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 813e 	beq.w	80058fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2210      	movs	r2, #16
 8005684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	f040 80b6 	bne.w	8005802 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8150 	beq.w	800594c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f080 8148 	bcs.w	800594c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	f000 8086 	beq.w	80057e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005702:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800570a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1da      	bne.n	80056d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800572e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005742:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800574a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e1      	bne.n	800571e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800576a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800577e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e4      	bne.n	80057a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fc fe3e 	bl	800245c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8c2 	bl	8005984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005800:	e0a4      	b.n	800594c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580e:	b29b      	uxth	r3, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8096 	beq.w	8005950 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8091 	beq.w	8005950 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
 8005852:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e4      	bne.n	800582e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	623b      	str	r3, [r7, #32]
   return(result);
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005888:	633a      	str	r2, [r7, #48]	; 0x30
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800588e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	617b      	str	r3, [r7, #20]
   return(result);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e4      	bne.n	80058b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f846 	bl	8005984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058f8:	e02a      	b.n	8005950 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01c      	beq.n	8005954 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
    }
    return;
 8005922:	e017      	b.n	8005954 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <HAL_UART_IRQHandler+0x59e>
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fd71 	bl	8006424 <UART_EndTransmit_IT>
    return;
 8005942:	e008      	b.n	8005956 <HAL_UART_IRQHandler+0x59e>
      return;
 8005944:	bf00      	nop
 8005946:	e006      	b.n	8005956 <HAL_UART_IRQHandler+0x59e>
    return;
 8005948:	bf00      	nop
 800594a:	e004      	b.n	8005956 <HAL_UART_IRQHandler+0x59e>
      return;
 800594c:	bf00      	nop
 800594e:	e002      	b.n	8005956 <HAL_UART_IRQHandler+0x59e>
      return;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_UART_IRQHandler+0x59e>
    return;
 8005954:	bf00      	nop
  }

}
 8005956:	37e8      	adds	r7, #232	; 0xe8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4ba6      	ldr	r3, [pc, #664]	; (8005c60 <UART_SetConfig+0x2c4>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	6979      	ldr	r1, [r7, #20]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a94      	ldr	r2, [pc, #592]	; (8005c64 <UART_SetConfig+0x2c8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d120      	bne.n	8005a5a <UART_SetConfig+0xbe>
 8005a18:	4b93      	ldr	r3, [pc, #588]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d816      	bhi.n	8005a54 <UART_SetConfig+0xb8>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x90>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a49 	.word	0x08005a49
 8005a34:	08005a43 	.word	0x08005a43
 8005a38:	08005a4f 	.word	0x08005a4f
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e150      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e14d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e14a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e147      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e144      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a83      	ldr	r2, [pc, #524]	; (8005c6c <UART_SetConfig+0x2d0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d132      	bne.n	8005aca <UART_SetConfig+0x12e>
 8005a64:	4b80      	ldr	r3, [pc, #512]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d828      	bhi.n	8005ac4 <UART_SetConfig+0x128>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0xdc>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ab9 	.word	0x08005ab9
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ab3 	.word	0x08005ab3
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005ac5 	.word	0x08005ac5
 8005aa8:	08005abf 	.word	0x08005abf
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e118      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e115      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e112      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e10f      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e10c      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a68      	ldr	r2, [pc, #416]	; (8005c70 <UART_SetConfig+0x2d4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d120      	bne.n	8005b16 <UART_SetConfig+0x17a>
 8005ad4:	4b64      	ldr	r3, [pc, #400]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ade:	2b30      	cmp	r3, #48	; 0x30
 8005ae0:	d013      	beq.n	8005b0a <UART_SetConfig+0x16e>
 8005ae2:	2b30      	cmp	r3, #48	; 0x30
 8005ae4:	d814      	bhi.n	8005b10 <UART_SetConfig+0x174>
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d009      	beq.n	8005afe <UART_SetConfig+0x162>
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d810      	bhi.n	8005b10 <UART_SetConfig+0x174>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <UART_SetConfig+0x15c>
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d006      	beq.n	8005b04 <UART_SetConfig+0x168>
 8005af6:	e00b      	b.n	8005b10 <UART_SetConfig+0x174>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e0f2      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005afe:	2302      	movs	r3, #2
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e0ef      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b04:	2304      	movs	r3, #4
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e0ec      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e0e9      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b10:	2310      	movs	r3, #16
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e0e6      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a56      	ldr	r2, [pc, #344]	; (8005c74 <UART_SetConfig+0x2d8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d120      	bne.n	8005b62 <UART_SetConfig+0x1c6>
 8005b20:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b2c:	d013      	beq.n	8005b56 <UART_SetConfig+0x1ba>
 8005b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b30:	d814      	bhi.n	8005b5c <UART_SetConfig+0x1c0>
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d009      	beq.n	8005b4a <UART_SetConfig+0x1ae>
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d810      	bhi.n	8005b5c <UART_SetConfig+0x1c0>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <UART_SetConfig+0x1a8>
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d006      	beq.n	8005b50 <UART_SetConfig+0x1b4>
 8005b42:	e00b      	b.n	8005b5c <UART_SetConfig+0x1c0>
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e0cc      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e0c9      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b50:	2304      	movs	r3, #4
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e0c6      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b56:	2308      	movs	r3, #8
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e0c3      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e0c0      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a44      	ldr	r2, [pc, #272]	; (8005c78 <UART_SetConfig+0x2dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d125      	bne.n	8005bb8 <UART_SetConfig+0x21c>
 8005b6c:	4b3e      	ldr	r3, [pc, #248]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b7a:	d017      	beq.n	8005bac <UART_SetConfig+0x210>
 8005b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b80:	d817      	bhi.n	8005bb2 <UART_SetConfig+0x216>
 8005b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b86:	d00b      	beq.n	8005ba0 <UART_SetConfig+0x204>
 8005b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b8c:	d811      	bhi.n	8005bb2 <UART_SetConfig+0x216>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <UART_SetConfig+0x1fe>
 8005b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b96:	d006      	beq.n	8005ba6 <UART_SetConfig+0x20a>
 8005b98:	e00b      	b.n	8005bb2 <UART_SetConfig+0x216>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e0a1      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e09e      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e09b      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bac:	2308      	movs	r3, #8
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e098      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bb2:	2310      	movs	r3, #16
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e095      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <UART_SetConfig+0x2e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d125      	bne.n	8005c0e <UART_SetConfig+0x272>
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd0:	d017      	beq.n	8005c02 <UART_SetConfig+0x266>
 8005bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd6:	d817      	bhi.n	8005c08 <UART_SetConfig+0x26c>
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bdc:	d00b      	beq.n	8005bf6 <UART_SetConfig+0x25a>
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be2:	d811      	bhi.n	8005c08 <UART_SetConfig+0x26c>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <UART_SetConfig+0x254>
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d006      	beq.n	8005bfc <UART_SetConfig+0x260>
 8005bee:	e00b      	b.n	8005c08 <UART_SetConfig+0x26c>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e076      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e073      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e070      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c02:	2308      	movs	r3, #8
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e06d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e06a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <UART_SetConfig+0x2e4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d138      	bne.n	8005c8a <UART_SetConfig+0x2ee>
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <UART_SetConfig+0x2cc>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c26:	d017      	beq.n	8005c58 <UART_SetConfig+0x2bc>
 8005c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c2c:	d82a      	bhi.n	8005c84 <UART_SetConfig+0x2e8>
 8005c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c32:	d00b      	beq.n	8005c4c <UART_SetConfig+0x2b0>
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c38:	d824      	bhi.n	8005c84 <UART_SetConfig+0x2e8>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <UART_SetConfig+0x2aa>
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c42:	d006      	beq.n	8005c52 <UART_SetConfig+0x2b6>
 8005c44:	e01e      	b.n	8005c84 <UART_SetConfig+0x2e8>
 8005c46:	2300      	movs	r3, #0
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e04b      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e048      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c52:	2304      	movs	r3, #4
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e045      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e042      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c5e:	bf00      	nop
 8005c60:	efff69f3 	.word	0xefff69f3
 8005c64:	40011000 	.word	0x40011000
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	40004800 	.word	0x40004800
 8005c74:	40004c00 	.word	0x40004c00
 8005c78:	40005000 	.word	0x40005000
 8005c7c:	40011400 	.word	0x40011400
 8005c80:	40007800 	.word	0x40007800
 8005c84:	2310      	movs	r3, #16
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e02c      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a72      	ldr	r2, [pc, #456]	; (8005e58 <UART_SetConfig+0x4bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d125      	bne.n	8005ce0 <UART_SetConfig+0x344>
 8005c94:	4b71      	ldr	r3, [pc, #452]	; (8005e5c <UART_SetConfig+0x4c0>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ca2:	d017      	beq.n	8005cd4 <UART_SetConfig+0x338>
 8005ca4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ca8:	d817      	bhi.n	8005cda <UART_SetConfig+0x33e>
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cae:	d00b      	beq.n	8005cc8 <UART_SetConfig+0x32c>
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d811      	bhi.n	8005cda <UART_SetConfig+0x33e>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <UART_SetConfig+0x326>
 8005cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cbe:	d006      	beq.n	8005cce <UART_SetConfig+0x332>
 8005cc0:	e00b      	b.n	8005cda <UART_SetConfig+0x33e>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e00d      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e00a      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cce:	2304      	movs	r3, #4
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e007      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e004      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005cda:	2310      	movs	r3, #16
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e001      	b.n	8005ce4 <UART_SetConfig+0x348>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cec:	d15b      	bne.n	8005da6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005cee:	7ffb      	ldrb	r3, [r7, #31]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d828      	bhi.n	8005d46 <UART_SetConfig+0x3aa>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x360>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d47 	.word	0x08005d47
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d47 	.word	0x08005d47
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fd fe74 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8005d24:	61b8      	str	r0, [r7, #24]
        break;
 8005d26:	e013      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fd fe84 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <UART_SetConfig+0x4c4>)
 8005d32:	61bb      	str	r3, [r7, #24]
        break;
 8005d34:	e00c      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d36:	f7fd fd57 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8005d3a:	61b8      	str	r0, [r7, #24]
        break;
 8005d3c:	e008      	b.n	8005d50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d42:	61bb      	str	r3, [r7, #24]
        break;
 8005d44:	e004      	b.n	8005d50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d074      	beq.n	8005e40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	005a      	lsls	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d916      	bls.n	8005da0 <UART_SetConfig+0x404>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d212      	bcs.n	8005da0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f023 030f 	bic.w	r3, r3, #15
 8005d82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	89fa      	ldrh	r2, [r7, #14]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e04f      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	77bb      	strb	r3, [r7, #30]
 8005da4:	e04c      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da6:	7ffb      	ldrb	r3, [r7, #31]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d828      	bhi.n	8005dfe <UART_SetConfig+0x462>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x418>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005de1 	.word	0x08005de1
 8005dbc:	08005de9 	.word	0x08005de9
 8005dc0:	08005dff 	.word	0x08005dff
 8005dc4:	08005def 	.word	0x08005def
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005dff 	.word	0x08005dff
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fd fe18 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8005ddc:	61b8      	str	r0, [r7, #24]
        break;
 8005dde:	e013      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fd fe28 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8005de4:	61b8      	str	r0, [r7, #24]
        break;
 8005de6:	e00f      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <UART_SetConfig+0x4c4>)
 8005dea:	61bb      	str	r3, [r7, #24]
        break;
 8005dec:	e00c      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fd fcfb 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8005df2:	61b8      	str	r0, [r7, #24]
        break;
 8005df4:	e008      	b.n	8005e08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfa:	61bb      	str	r3, [r7, #24]
        break;
 8005dfc:	e004      	b.n	8005e08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	77bb      	strb	r3, [r7, #30]
        break;
 8005e06:	bf00      	nop
    }

    if (pclk != 0U)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	085a      	lsrs	r2, r3, #1
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	441a      	add	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b0f      	cmp	r3, #15
 8005e26:	d909      	bls.n	8005e3c <UART_SetConfig+0x4a0>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2e:	d205      	bcs.n	8005e3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	e001      	b.n	8005e40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40007c00 	.word	0x40007c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	00f42400 	.word	0x00f42400

08005e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f62:	d10a      	bne.n	8005f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fb8:	f7fc f860 	bl	800207c <HAL_GetTick>
 8005fbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d10e      	bne.n	8005fea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f81b 	bl	8006016 <UART_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e011      	b.n	800600e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b09c      	sub	sp, #112	; 0x70
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	e0a7      	b.n	8006178 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	f000 80a3 	beq.w	8006178 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006032:	f7fc f823 	bl	800207c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <UART_WaitOnFlagUntilTimeout+0x32>
 8006042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006044:	2b00      	cmp	r3, #0
 8006046:	d13f      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800605c:	667b      	str	r3, [r7, #100]	; 0x64
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006068:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800606c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e6      	bne.n	8006048 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800609a:	64ba      	str	r2, [r7, #72]	; 0x48
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e068      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d050      	beq.n	8006178 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d148      	bne.n	8006178 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006104:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
 8006110:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3308      	adds	r3, #8
 8006128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	66bb      	str	r3, [r7, #104]	; 0x68
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006142:	623a      	str	r2, [r7, #32]
 8006144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e010      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	429a      	cmp	r2, r3
 8006186:	bf0c      	ite	eq
 8006188:	2301      	moveq	r3, #1
 800618a:	2300      	movne	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	429a      	cmp	r2, r3
 8006194:	f43f af48 	beq.w	8006028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3770      	adds	r7, #112	; 0x70
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b097      	sub	sp, #92	; 0x5c
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d6:	d10e      	bne.n	80061f6 <UART_Start_Receive_IT+0x52>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <UART_Start_Receive_IT+0x48>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ea:	e02d      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	22ff      	movs	r2, #255	; 0xff
 80061f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061f4:	e028      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <UART_Start_Receive_IT+0x76>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <UART_Start_Receive_IT+0x6c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800620e:	e01b      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	227f      	movs	r2, #127	; 0x7f
 8006214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006218:	e016      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006222:	d10d      	bne.n	8006240 <UART_Start_Receive_IT+0x9c>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <UART_Start_Receive_IT+0x92>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	227f      	movs	r2, #127	; 0x7f
 8006230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006234:	e008      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	223f      	movs	r2, #63	; 0x3f
 800623a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800623e:	e003      	b.n	8006248 <UART_Start_Receive_IT+0xa4>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2222      	movs	r2, #34	; 0x22
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	657b      	str	r3, [r7, #84]	; 0x54
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006278:	64ba      	str	r2, [r7, #72]	; 0x48
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800627e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e5      	bne.n	8006258 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d107      	bne.n	80062a6 <UART_Start_Receive_IT+0x102>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a21      	ldr	r2, [pc, #132]	; (8006328 <UART_Start_Receive_IT+0x184>)
 80062a2:	669a      	str	r2, [r3, #104]	; 0x68
 80062a4:	e002      	b.n	80062ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a20      	ldr	r2, [pc, #128]	; (800632c <UART_Start_Receive_IT+0x188>)
 80062aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d019      	beq.n	80062e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
 80062d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_Start_Receive_IT+0x110>
 80062e6:	e018      	b.n	800631a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	613b      	str	r3, [r7, #16]
   return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f043 0320 	orr.w	r3, r3, #32
 80062fc:	653b      	str	r3, [r7, #80]	; 0x50
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	69f9      	ldr	r1, [r7, #28]
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	61bb      	str	r3, [r7, #24]
   return(result);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	375c      	adds	r7, #92	; 0x5c
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	080065df 	.word	0x080065df
 800632c:	08006479 	.word	0x08006479

08006330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b095      	sub	sp, #84	; 0x54
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800634c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006356:	643b      	str	r3, [r7, #64]	; 0x40
 8006358:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800635c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	61fb      	str	r3, [r7, #28]
   return(result);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d118      	bne.n	80063d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	647b      	str	r3, [r7, #68]	; 0x44
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	613b      	str	r3, [r7, #16]
   return(result);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063ec:	bf00      	nop
 80063ee:	3754      	adds	r7, #84	; 0x54
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff faaa 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	60bb      	str	r3, [r7, #8]
   return(result);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	613b      	str	r3, [r7, #16]
   return(result);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fa76 	bl	800595c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006470:	bf00      	nop
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b096      	sub	sp, #88	; 0x58
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006486:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006490:	2b22      	cmp	r3, #34	; 0x22
 8006492:	f040 8098 	bne.w	80065c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80064a4:	b2d9      	uxtb	r1, r3
 80064a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	400a      	ands	r2, r1
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d17b      	bne.n	80065d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064fc:	647b      	str	r3, [r7, #68]	; 0x44
 80064fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800650a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e6      	bne.n	80064de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	623b      	str	r3, [r7, #32]
   return(result);
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006530:	633a      	str	r2, [r7, #48]	; 0x30
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	2b01      	cmp	r3, #1
 800655e:	d12e      	bne.n	80065be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	60fb      	str	r3, [r7, #12]
   return(result);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0310 	bic.w	r3, r3, #16
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	617b      	str	r3, [r7, #20]
   return(result);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e6      	bne.n	8006566 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d103      	bne.n	80065ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2210      	movs	r2, #16
 80065ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff f9e4 	bl	8005984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065bc:	e00b      	b.n	80065d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb f81e 	bl	8001600 <HAL_UART_RxCpltCallback>
}
 80065c4:	e007      	b.n	80065d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0208 	orr.w	r2, r2, #8
 80065d4:	619a      	str	r2, [r3, #24]
}
 80065d6:	bf00      	nop
 80065d8:	3758      	adds	r7, #88	; 0x58
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b096      	sub	sp, #88	; 0x58
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f6:	2b22      	cmp	r3, #34	; 0x22
 80065f8:	f040 8098 	bne.w	800672c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800660c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006614:	4013      	ands	r3, r2
 8006616:	b29a      	uxth	r2, r3
 8006618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	1c9a      	adds	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d17b      	bne.n	800673c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
 8006664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	61fb      	str	r3, [r7, #28]
   return(result);
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	64bb      	str	r3, [r7, #72]	; 0x48
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d12e      	bne.n	8006724 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f023 0310 	bic.w	r3, r3, #16
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	613b      	str	r3, [r7, #16]
   return(result);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e6      	bne.n	80066cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d103      	bne.n	8006714 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2210      	movs	r2, #16
 8006712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f931 	bl	8005984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006722:	e00b      	b.n	800673c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fa ff6b 	bl	8001600 <HAL_UART_RxCpltCallback>
}
 800672a:	e007      	b.n	800673c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]
}
 800673c:	bf00      	nop
 800673e:	3758      	adds	r7, #88	; 0x58
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <__errno>:
 8006744:	4b01      	ldr	r3, [pc, #4]	; (800674c <__errno+0x8>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	2000000c 	.word	0x2000000c

08006750 <__libc_init_array>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4d0d      	ldr	r5, [pc, #52]	; (8006788 <__libc_init_array+0x38>)
 8006754:	4c0d      	ldr	r4, [pc, #52]	; (800678c <__libc_init_array+0x3c>)
 8006756:	1b64      	subs	r4, r4, r5
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	2600      	movs	r6, #0
 800675c:	42a6      	cmp	r6, r4
 800675e:	d109      	bne.n	8006774 <__libc_init_array+0x24>
 8006760:	4d0b      	ldr	r5, [pc, #44]	; (8006790 <__libc_init_array+0x40>)
 8006762:	4c0c      	ldr	r4, [pc, #48]	; (8006794 <__libc_init_array+0x44>)
 8006764:	f004 fc90 	bl	800b088 <_init>
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	2600      	movs	r6, #0
 800676e:	42a6      	cmp	r6, r4
 8006770:	d105      	bne.n	800677e <__libc_init_array+0x2e>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	f855 3b04 	ldr.w	r3, [r5], #4
 8006778:	4798      	blx	r3
 800677a:	3601      	adds	r6, #1
 800677c:	e7ee      	b.n	800675c <__libc_init_array+0xc>
 800677e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006782:	4798      	blx	r3
 8006784:	3601      	adds	r6, #1
 8006786:	e7f2      	b.n	800676e <__libc_init_array+0x1e>
 8006788:	0800b56c 	.word	0x0800b56c
 800678c:	0800b56c 	.word	0x0800b56c
 8006790:	0800b56c 	.word	0x0800b56c
 8006794:	0800b570 	.word	0x0800b570

08006798 <memset>:
 8006798:	4402      	add	r2, r0
 800679a:	4603      	mov	r3, r0
 800679c:	4293      	cmp	r3, r2
 800679e:	d100      	bne.n	80067a2 <memset+0xa>
 80067a0:	4770      	bx	lr
 80067a2:	f803 1b01 	strb.w	r1, [r3], #1
 80067a6:	e7f9      	b.n	800679c <memset+0x4>

080067a8 <__cvt>:
 80067a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	ec55 4b10 	vmov	r4, r5, d0
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	460e      	mov	r6, r1
 80067b4:	4619      	mov	r1, r3
 80067b6:	462b      	mov	r3, r5
 80067b8:	bfbb      	ittet	lt
 80067ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067be:	461d      	movlt	r5, r3
 80067c0:	2300      	movge	r3, #0
 80067c2:	232d      	movlt	r3, #45	; 0x2d
 80067c4:	700b      	strb	r3, [r1, #0]
 80067c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067cc:	4691      	mov	r9, r2
 80067ce:	f023 0820 	bic.w	r8, r3, #32
 80067d2:	bfbc      	itt	lt
 80067d4:	4622      	movlt	r2, r4
 80067d6:	4614      	movlt	r4, r2
 80067d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067dc:	d005      	beq.n	80067ea <__cvt+0x42>
 80067de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067e2:	d100      	bne.n	80067e6 <__cvt+0x3e>
 80067e4:	3601      	adds	r6, #1
 80067e6:	2102      	movs	r1, #2
 80067e8:	e000      	b.n	80067ec <__cvt+0x44>
 80067ea:	2103      	movs	r1, #3
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	ab02      	add	r3, sp, #8
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	ec45 4b10 	vmov	d0, r4, r5
 80067f8:	4653      	mov	r3, sl
 80067fa:	4632      	mov	r2, r6
 80067fc:	f001 fe28 	bl	8008450 <_dtoa_r>
 8006800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006804:	4607      	mov	r7, r0
 8006806:	d102      	bne.n	800680e <__cvt+0x66>
 8006808:	f019 0f01 	tst.w	r9, #1
 800680c:	d022      	beq.n	8006854 <__cvt+0xac>
 800680e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006812:	eb07 0906 	add.w	r9, r7, r6
 8006816:	d110      	bne.n	800683a <__cvt+0x92>
 8006818:	783b      	ldrb	r3, [r7, #0]
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	d10a      	bne.n	8006834 <__cvt+0x8c>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7fa f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800682a:	b918      	cbnz	r0, 8006834 <__cvt+0x8c>
 800682c:	f1c6 0601 	rsb	r6, r6, #1
 8006830:	f8ca 6000 	str.w	r6, [sl]
 8006834:	f8da 3000 	ldr.w	r3, [sl]
 8006838:	4499      	add	r9, r3
 800683a:	2200      	movs	r2, #0
 800683c:	2300      	movs	r3, #0
 800683e:	4620      	mov	r0, r4
 8006840:	4629      	mov	r1, r5
 8006842:	f7fa f961 	bl	8000b08 <__aeabi_dcmpeq>
 8006846:	b108      	cbz	r0, 800684c <__cvt+0xa4>
 8006848:	f8cd 900c 	str.w	r9, [sp, #12]
 800684c:	2230      	movs	r2, #48	; 0x30
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	454b      	cmp	r3, r9
 8006852:	d307      	bcc.n	8006864 <__cvt+0xbc>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006858:	1bdb      	subs	r3, r3, r7
 800685a:	4638      	mov	r0, r7
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	b004      	add	sp, #16
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	9103      	str	r1, [sp, #12]
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e7f0      	b.n	800684e <__cvt+0xa6>

0800686c <__exponent>:
 800686c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686e:	4603      	mov	r3, r0
 8006870:	2900      	cmp	r1, #0
 8006872:	bfb8      	it	lt
 8006874:	4249      	neglt	r1, r1
 8006876:	f803 2b02 	strb.w	r2, [r3], #2
 800687a:	bfb4      	ite	lt
 800687c:	222d      	movlt	r2, #45	; 0x2d
 800687e:	222b      	movge	r2, #43	; 0x2b
 8006880:	2909      	cmp	r1, #9
 8006882:	7042      	strb	r2, [r0, #1]
 8006884:	dd2a      	ble.n	80068dc <__exponent+0x70>
 8006886:	f10d 0407 	add.w	r4, sp, #7
 800688a:	46a4      	mov	ip, r4
 800688c:	270a      	movs	r7, #10
 800688e:	46a6      	mov	lr, r4
 8006890:	460a      	mov	r2, r1
 8006892:	fb91 f6f7 	sdiv	r6, r1, r7
 8006896:	fb07 1516 	mls	r5, r7, r6, r1
 800689a:	3530      	adds	r5, #48	; 0x30
 800689c:	2a63      	cmp	r2, #99	; 0x63
 800689e:	f104 34ff 	add.w	r4, r4, #4294967295
 80068a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068a6:	4631      	mov	r1, r6
 80068a8:	dcf1      	bgt.n	800688e <__exponent+0x22>
 80068aa:	3130      	adds	r1, #48	; 0x30
 80068ac:	f1ae 0502 	sub.w	r5, lr, #2
 80068b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068b4:	1c44      	adds	r4, r0, #1
 80068b6:	4629      	mov	r1, r5
 80068b8:	4561      	cmp	r1, ip
 80068ba:	d30a      	bcc.n	80068d2 <__exponent+0x66>
 80068bc:	f10d 0209 	add.w	r2, sp, #9
 80068c0:	eba2 020e 	sub.w	r2, r2, lr
 80068c4:	4565      	cmp	r5, ip
 80068c6:	bf88      	it	hi
 80068c8:	2200      	movhi	r2, #0
 80068ca:	4413      	add	r3, r2
 80068cc:	1a18      	subs	r0, r3, r0
 80068ce:	b003      	add	sp, #12
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068da:	e7ed      	b.n	80068b8 <__exponent+0x4c>
 80068dc:	2330      	movs	r3, #48	; 0x30
 80068de:	3130      	adds	r1, #48	; 0x30
 80068e0:	7083      	strb	r3, [r0, #2]
 80068e2:	70c1      	strb	r1, [r0, #3]
 80068e4:	1d03      	adds	r3, r0, #4
 80068e6:	e7f1      	b.n	80068cc <__exponent+0x60>

080068e8 <_printf_float>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ed2d 8b02 	vpush	{d8}
 80068f0:	b08d      	sub	sp, #52	; 0x34
 80068f2:	460c      	mov	r4, r1
 80068f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068f8:	4616      	mov	r6, r2
 80068fa:	461f      	mov	r7, r3
 80068fc:	4605      	mov	r5, r0
 80068fe:	f002 ff05 	bl	800970c <_localeconv_r>
 8006902:	f8d0 a000 	ldr.w	sl, [r0]
 8006906:	4650      	mov	r0, sl
 8006908:	f7f9 fc82 	bl	8000210 <strlen>
 800690c:	2300      	movs	r3, #0
 800690e:	930a      	str	r3, [sp, #40]	; 0x28
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f8d8 3000 	ldr.w	r3, [r8]
 8006918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800691c:	3307      	adds	r3, #7
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	f103 0208 	add.w	r2, r3, #8
 8006926:	f8c8 2000 	str.w	r2, [r8]
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006940:	ee08 0a10 	vmov	s16, r0
 8006944:	4b9f      	ldr	r3, [pc, #636]	; (8006bc4 <_printf_float+0x2dc>)
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	f04f 32ff 	mov.w	r2, #4294967295
 800694e:	f7fa f90d 	bl	8000b6c <__aeabi_dcmpun>
 8006952:	bb88      	cbnz	r0, 80069b8 <_printf_float+0xd0>
 8006954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006958:	4b9a      	ldr	r3, [pc, #616]	; (8006bc4 <_printf_float+0x2dc>)
 800695a:	f04f 32ff 	mov.w	r2, #4294967295
 800695e:	f7fa f8e7 	bl	8000b30 <__aeabi_dcmple>
 8006962:	bb48      	cbnz	r0, 80069b8 <_printf_float+0xd0>
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7fa f8d6 	bl	8000b1c <__aeabi_dcmplt>
 8006970:	b110      	cbz	r0, 8006978 <_printf_float+0x90>
 8006972:	232d      	movs	r3, #45	; 0x2d
 8006974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006978:	4b93      	ldr	r3, [pc, #588]	; (8006bc8 <_printf_float+0x2e0>)
 800697a:	4894      	ldr	r0, [pc, #592]	; (8006bcc <_printf_float+0x2e4>)
 800697c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006980:	bf94      	ite	ls
 8006982:	4698      	movls	r8, r3
 8006984:	4680      	movhi	r8, r0
 8006986:	2303      	movs	r3, #3
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	9b05      	ldr	r3, [sp, #20]
 800698c:	f023 0204 	bic.w	r2, r3, #4
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	9700      	str	r7, [sp, #0]
 8006998:	4633      	mov	r3, r6
 800699a:	aa0b      	add	r2, sp, #44	; 0x2c
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f9d8 	bl	8006d54 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	f040 8090 	bne.w	8006aca <_printf_float+0x1e2>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	b00d      	add	sp, #52	; 0x34
 80069b0:	ecbd 8b02 	vpop	{d8}
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7fa f8d4 	bl	8000b6c <__aeabi_dcmpun>
 80069c4:	b140      	cbz	r0, 80069d8 <_printf_float+0xf0>
 80069c6:	464b      	mov	r3, r9
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfbc      	itt	lt
 80069cc:	232d      	movlt	r3, #45	; 0x2d
 80069ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069d2:	487f      	ldr	r0, [pc, #508]	; (8006bd0 <_printf_float+0x2e8>)
 80069d4:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <_printf_float+0x2ec>)
 80069d6:	e7d1      	b.n	800697c <_printf_float+0x94>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069de:	9206      	str	r2, [sp, #24]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	d13f      	bne.n	8006a64 <_printf_float+0x17c>
 80069e4:	2306      	movs	r3, #6
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	6861      	ldr	r1, [r4, #4]
 80069ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069f0:	2300      	movs	r3, #0
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	ab0a      	add	r3, sp, #40	; 0x28
 80069f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069fa:	ab09      	add	r3, sp, #36	; 0x24
 80069fc:	ec49 8b10 	vmov	d0, r8, r9
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fecd 	bl	80067a8 <__cvt>
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a12:	2b47      	cmp	r3, #71	; 0x47
 8006a14:	4680      	mov	r8, r0
 8006a16:	d108      	bne.n	8006a2a <_printf_float+0x142>
 8006a18:	1cc8      	adds	r0, r1, #3
 8006a1a:	db02      	blt.n	8006a22 <_printf_float+0x13a>
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	dd41      	ble.n	8006aa6 <_printf_float+0x1be>
 8006a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a26:	fa5f fb8b 	uxtb.w	fp, fp
 8006a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a2e:	d820      	bhi.n	8006a72 <_printf_float+0x18a>
 8006a30:	3901      	subs	r1, #1
 8006a32:	465a      	mov	r2, fp
 8006a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a38:	9109      	str	r1, [sp, #36]	; 0x24
 8006a3a:	f7ff ff17 	bl	800686c <__exponent>
 8006a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a40:	1813      	adds	r3, r2, r0
 8006a42:	2a01      	cmp	r2, #1
 8006a44:	4681      	mov	r9, r0
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	dc02      	bgt.n	8006a50 <_printf_float+0x168>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	07d2      	lsls	r2, r2, #31
 8006a4e:	d501      	bpl.n	8006a54 <_printf_float+0x16c>
 8006a50:	3301      	adds	r3, #1
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d09c      	beq.n	8006996 <_printf_float+0xae>
 8006a5c:	232d      	movs	r3, #45	; 0x2d
 8006a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a62:	e798      	b.n	8006996 <_printf_float+0xae>
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	2a47      	cmp	r2, #71	; 0x47
 8006a68:	d1be      	bne.n	80069e8 <_printf_float+0x100>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1bc      	bne.n	80069e8 <_printf_float+0x100>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e7b9      	b.n	80069e6 <_printf_float+0xfe>
 8006a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a76:	d118      	bne.n	8006aaa <_printf_float+0x1c2>
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	6863      	ldr	r3, [r4, #4]
 8006a7c:	dd0b      	ble.n	8006a96 <_printf_float+0x1ae>
 8006a7e:	6121      	str	r1, [r4, #16]
 8006a80:	b913      	cbnz	r3, 8006a88 <_printf_float+0x1a0>
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d502      	bpl.n	8006a8e <_printf_float+0x1a6>
 8006a88:	3301      	adds	r3, #1
 8006a8a:	440b      	add	r3, r1
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	e7de      	b.n	8006a54 <_printf_float+0x16c>
 8006a96:	b913      	cbnz	r3, 8006a9e <_printf_float+0x1b6>
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	07d2      	lsls	r2, r2, #31
 8006a9c:	d501      	bpl.n	8006aa2 <_printf_float+0x1ba>
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	e7f4      	b.n	8006a8c <_printf_float+0x1a4>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7f2      	b.n	8006a8c <_printf_float+0x1a4>
 8006aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	4299      	cmp	r1, r3
 8006aae:	db05      	blt.n	8006abc <_printf_float+0x1d4>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	6121      	str	r1, [r4, #16]
 8006ab4:	07d8      	lsls	r0, r3, #31
 8006ab6:	d5ea      	bpl.n	8006a8e <_printf_float+0x1a6>
 8006ab8:	1c4b      	adds	r3, r1, #1
 8006aba:	e7e7      	b.n	8006a8c <_printf_float+0x1a4>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	bfd4      	ite	le
 8006ac0:	f1c1 0202 	rsble	r2, r1, #2
 8006ac4:	2201      	movgt	r2, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	e7e0      	b.n	8006a8c <_printf_float+0x1a4>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	055a      	lsls	r2, r3, #21
 8006ace:	d407      	bmi.n	8006ae0 <_printf_float+0x1f8>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	d12c      	bne.n	8006b38 <_printf_float+0x250>
 8006ade:	e764      	b.n	80069aa <_printf_float+0xc2>
 8006ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ae4:	f240 80e0 	bls.w	8006ca8 <_printf_float+0x3c0>
 8006ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	f7fa f80a 	bl	8000b08 <__aeabi_dcmpeq>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d034      	beq.n	8006b62 <_printf_float+0x27a>
 8006af8:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <_printf_float+0x2f0>)
 8006afa:	2301      	movs	r3, #1
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af51 	beq.w	80069aa <_printf_float+0xc2>
 8006b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	db02      	blt.n	8006b16 <_printf_float+0x22e>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07d8      	lsls	r0, r3, #31
 8006b14:	d510      	bpl.n	8006b38 <_printf_float+0x250>
 8006b16:	ee18 3a10 	vmov	r3, s16
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af41 	beq.w	80069aa <_printf_float+0xc2>
 8006b28:	f04f 0800 	mov.w	r8, #0
 8006b2c:	f104 091a 	add.w	r9, r4, #26
 8006b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	4543      	cmp	r3, r8
 8006b36:	dc09      	bgt.n	8006b4c <_printf_float+0x264>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	f100 8105 	bmi.w	8006d4a <_printf_float+0x462>
 8006b40:	68e0      	ldr	r0, [r4, #12]
 8006b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b44:	4298      	cmp	r0, r3
 8006b46:	bfb8      	it	lt
 8006b48:	4618      	movlt	r0, r3
 8006b4a:	e730      	b.n	80069ae <_printf_float+0xc6>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	464a      	mov	r2, r9
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f af27 	beq.w	80069aa <_printf_float+0xc2>
 8006b5c:	f108 0801 	add.w	r8, r8, #1
 8006b60:	e7e6      	b.n	8006b30 <_printf_float+0x248>
 8006b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc39      	bgt.n	8006bdc <_printf_float+0x2f4>
 8006b68:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <_printf_float+0x2f0>)
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	f43f af19 	beq.w	80069aa <_printf_float+0xc2>
 8006b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	d102      	bne.n	8006b86 <_printf_float+0x29e>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d5d8      	bpl.n	8006b38 <_printf_float+0x250>
 8006b86:	ee18 3a10 	vmov	r3, s16
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f af09 	beq.w	80069aa <_printf_float+0xc2>
 8006b98:	f04f 0900 	mov.w	r9, #0
 8006b9c:	f104 0a1a 	add.w	sl, r4, #26
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	425b      	negs	r3, r3
 8006ba4:	454b      	cmp	r3, r9
 8006ba6:	dc01      	bgt.n	8006bac <_printf_float+0x2c4>
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006baa:	e792      	b.n	8006ad2 <_printf_float+0x1ea>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f aef7 	beq.w	80069aa <_printf_float+0xc2>
 8006bbc:	f109 0901 	add.w	r9, r9, #1
 8006bc0:	e7ee      	b.n	8006ba0 <_printf_float+0x2b8>
 8006bc2:	bf00      	nop
 8006bc4:	7fefffff 	.word	0x7fefffff
 8006bc8:	0800b0c4 	.word	0x0800b0c4
 8006bcc:	0800b0c8 	.word	0x0800b0c8
 8006bd0:	0800b0d0 	.word	0x0800b0d0
 8006bd4:	0800b0cc 	.word	0x0800b0cc
 8006bd8:	0800b0d4 	.word	0x0800b0d4
 8006bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bfa8      	it	ge
 8006be4:	461a      	movge	r2, r3
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	4691      	mov	r9, r2
 8006bea:	dc37      	bgt.n	8006c5c <_printf_float+0x374>
 8006bec:	f04f 0b00 	mov.w	fp, #0
 8006bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bf4:	f104 021a 	add.w	r2, r4, #26
 8006bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	eba3 0309 	sub.w	r3, r3, r9
 8006c00:	455b      	cmp	r3, fp
 8006c02:	dc33      	bgt.n	8006c6c <_printf_float+0x384>
 8006c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	db3b      	blt.n	8006c84 <_printf_float+0x39c>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07da      	lsls	r2, r3, #31
 8006c10:	d438      	bmi.n	8006c84 <_printf_float+0x39c>
 8006c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c18:	1a9a      	subs	r2, r3, r2
 8006c1a:	eba3 0901 	sub.w	r9, r3, r1
 8006c1e:	4591      	cmp	r9, r2
 8006c20:	bfa8      	it	ge
 8006c22:	4691      	movge	r9, r2
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	dc35      	bgt.n	8006c96 <_printf_float+0x3ae>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c32:	f104 0a1a 	add.w	sl, r4, #26
 8006c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	eba3 0309 	sub.w	r3, r3, r9
 8006c40:	4543      	cmp	r3, r8
 8006c42:	f77f af79 	ble.w	8006b38 <_printf_float+0x250>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4652      	mov	r2, sl
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f aeaa 	beq.w	80069aa <_printf_float+0xc2>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	e7ec      	b.n	8006c36 <_printf_float+0x34e>
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4642      	mov	r2, r8
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	d1c0      	bne.n	8006bec <_printf_float+0x304>
 8006c6a:	e69e      	b.n	80069aa <_printf_float+0xc2>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	9205      	str	r2, [sp, #20]
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f ae97 	beq.w	80069aa <_printf_float+0xc2>
 8006c7c:	9a05      	ldr	r2, [sp, #20]
 8006c7e:	f10b 0b01 	add.w	fp, fp, #1
 8006c82:	e7b9      	b.n	8006bf8 <_printf_float+0x310>
 8006c84:	ee18 3a10 	vmov	r3, s16
 8006c88:	4652      	mov	r2, sl
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	d1be      	bne.n	8006c12 <_printf_float+0x32a>
 8006c94:	e689      	b.n	80069aa <_printf_float+0xc2>
 8006c96:	9a05      	ldr	r2, [sp, #20]
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4442      	add	r2, r8
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d1c1      	bne.n	8006c2a <_printf_float+0x342>
 8006ca6:	e680      	b.n	80069aa <_printf_float+0xc2>
 8006ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006caa:	2a01      	cmp	r2, #1
 8006cac:	dc01      	bgt.n	8006cb2 <_printf_float+0x3ca>
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	d538      	bpl.n	8006d24 <_printf_float+0x43c>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f ae74 	beq.w	80069aa <_printf_float+0xc2>
 8006cc2:	ee18 3a10 	vmov	r3, s16
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f ae6b 	beq.w	80069aa <_printf_float+0xc2>
 8006cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f7f9 ff14 	bl	8000b08 <__aeabi_dcmpeq>
 8006ce0:	b9d8      	cbnz	r0, 8006d1a <_printf_float+0x432>
 8006ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce4:	f108 0201 	add.w	r2, r8, #1
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4631      	mov	r1, r6
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b8      	blx	r7
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d10e      	bne.n	8006d12 <_printf_float+0x42a>
 8006cf4:	e659      	b.n	80069aa <_printf_float+0xc2>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae52 	beq.w	80069aa <_printf_float+0xc2>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4543      	cmp	r3, r8
 8006d10:	dcf1      	bgt.n	8006cf6 <_printf_float+0x40e>
 8006d12:	464b      	mov	r3, r9
 8006d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d18:	e6dc      	b.n	8006ad4 <_printf_float+0x1ec>
 8006d1a:	f04f 0800 	mov.w	r8, #0
 8006d1e:	f104 0a1a 	add.w	sl, r4, #26
 8006d22:	e7f2      	b.n	8006d0a <_printf_float+0x422>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4642      	mov	r2, r8
 8006d28:	e7df      	b.n	8006cea <_printf_float+0x402>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f ae38 	beq.w	80069aa <_printf_float+0xc2>
 8006d3a:	f108 0801 	add.w	r8, r8, #1
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	4543      	cmp	r3, r8
 8006d46:	dcf0      	bgt.n	8006d2a <_printf_float+0x442>
 8006d48:	e6fa      	b.n	8006b40 <_printf_float+0x258>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	f104 0919 	add.w	r9, r4, #25
 8006d52:	e7f4      	b.n	8006d3e <_printf_float+0x456>

08006d54 <_printf_common>:
 8006d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d58:	4616      	mov	r6, r2
 8006d5a:	4699      	mov	r9, r3
 8006d5c:	688a      	ldr	r2, [r1, #8]
 8006d5e:	690b      	ldr	r3, [r1, #16]
 8006d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d64:	4293      	cmp	r3, r2
 8006d66:	bfb8      	it	lt
 8006d68:	4613      	movlt	r3, r2
 8006d6a:	6033      	str	r3, [r6, #0]
 8006d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d70:	4607      	mov	r7, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b10a      	cbz	r2, 8006d7a <_printf_common+0x26>
 8006d76:	3301      	adds	r3, #1
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	0699      	lsls	r1, r3, #26
 8006d7e:	bf42      	ittt	mi
 8006d80:	6833      	ldrmi	r3, [r6, #0]
 8006d82:	3302      	addmi	r3, #2
 8006d84:	6033      	strmi	r3, [r6, #0]
 8006d86:	6825      	ldr	r5, [r4, #0]
 8006d88:	f015 0506 	ands.w	r5, r5, #6
 8006d8c:	d106      	bne.n	8006d9c <_printf_common+0x48>
 8006d8e:	f104 0a19 	add.w	sl, r4, #25
 8006d92:	68e3      	ldr	r3, [r4, #12]
 8006d94:	6832      	ldr	r2, [r6, #0]
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	dc26      	bgt.n	8006dea <_printf_common+0x96>
 8006d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da0:	1e13      	subs	r3, r2, #0
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	bf18      	it	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	0692      	lsls	r2, r2, #26
 8006daa:	d42b      	bmi.n	8006e04 <_printf_common+0xb0>
 8006dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db0:	4649      	mov	r1, r9
 8006db2:	4638      	mov	r0, r7
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d01e      	beq.n	8006df8 <_printf_common+0xa4>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	68e5      	ldr	r5, [r4, #12]
 8006dbe:	6832      	ldr	r2, [r6, #0]
 8006dc0:	f003 0306 	and.w	r3, r3, #6
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	bf08      	it	eq
 8006dc8:	1aad      	subeq	r5, r5, r2
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	bf0c      	ite	eq
 8006dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd4:	2500      	movne	r5, #0
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	bfc4      	itt	gt
 8006dda:	1a9b      	subgt	r3, r3, r2
 8006ddc:	18ed      	addgt	r5, r5, r3
 8006dde:	2600      	movs	r6, #0
 8006de0:	341a      	adds	r4, #26
 8006de2:	42b5      	cmp	r5, r6
 8006de4:	d11a      	bne.n	8006e1c <_printf_common+0xc8>
 8006de6:	2000      	movs	r0, #0
 8006de8:	e008      	b.n	8006dfc <_printf_common+0xa8>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4652      	mov	r2, sl
 8006dee:	4649      	mov	r1, r9
 8006df0:	4638      	mov	r0, r7
 8006df2:	47c0      	blx	r8
 8006df4:	3001      	adds	r0, #1
 8006df6:	d103      	bne.n	8006e00 <_printf_common+0xac>
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e00:	3501      	adds	r5, #1
 8006e02:	e7c6      	b.n	8006d92 <_printf_common+0x3e>
 8006e04:	18e1      	adds	r1, r4, r3
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	2030      	movs	r0, #48	; 0x30
 8006e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e0e:	4422      	add	r2, r4
 8006e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e18:	3302      	adds	r3, #2
 8006e1a:	e7c7      	b.n	8006dac <_printf_common+0x58>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4649      	mov	r1, r9
 8006e22:	4638      	mov	r0, r7
 8006e24:	47c0      	blx	r8
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0e6      	beq.n	8006df8 <_printf_common+0xa4>
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	e7d9      	b.n	8006de2 <_printf_common+0x8e>
	...

08006e30 <_printf_i>:
 8006e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	7e0f      	ldrb	r7, [r1, #24]
 8006e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e38:	2f78      	cmp	r7, #120	; 0x78
 8006e3a:	4691      	mov	r9, r2
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	469a      	mov	sl, r3
 8006e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e46:	d807      	bhi.n	8006e58 <_printf_i+0x28>
 8006e48:	2f62      	cmp	r7, #98	; 0x62
 8006e4a:	d80a      	bhi.n	8006e62 <_printf_i+0x32>
 8006e4c:	2f00      	cmp	r7, #0
 8006e4e:	f000 80d8 	beq.w	8007002 <_printf_i+0x1d2>
 8006e52:	2f58      	cmp	r7, #88	; 0x58
 8006e54:	f000 80a3 	beq.w	8006f9e <_printf_i+0x16e>
 8006e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e60:	e03a      	b.n	8006ed8 <_printf_i+0xa8>
 8006e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e66:	2b15      	cmp	r3, #21
 8006e68:	d8f6      	bhi.n	8006e58 <_printf_i+0x28>
 8006e6a:	a101      	add	r1, pc, #4	; (adr r1, 8006e70 <_printf_i+0x40>)
 8006e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006edd 	.word	0x08006edd
 8006e78:	08006e59 	.word	0x08006e59
 8006e7c:	08006e59 	.word	0x08006e59
 8006e80:	08006e59 	.word	0x08006e59
 8006e84:	08006e59 	.word	0x08006e59
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006e59 	.word	0x08006e59
 8006e90:	08006e59 	.word	0x08006e59
 8006e94:	08006e59 	.word	0x08006e59
 8006e98:	08006e59 	.word	0x08006e59
 8006e9c:	08006fe9 	.word	0x08006fe9
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006fcb 	.word	0x08006fcb
 8006ea8:	08006e59 	.word	0x08006e59
 8006eac:	08006e59 	.word	0x08006e59
 8006eb0:	0800700b 	.word	0x0800700b
 8006eb4:	08006e59 	.word	0x08006e59
 8006eb8:	08006f0d 	.word	0x08006f0d
 8006ebc:	08006e59 	.word	0x08006e59
 8006ec0:	08006e59 	.word	0x08006e59
 8006ec4:	08006fd3 	.word	0x08006fd3
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	1d1a      	adds	r2, r3, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	602a      	str	r2, [r5, #0]
 8006ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0a3      	b.n	8007024 <_printf_i+0x1f4>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	6829      	ldr	r1, [r5, #0]
 8006ee0:	0606      	lsls	r6, r0, #24
 8006ee2:	f101 0304 	add.w	r3, r1, #4
 8006ee6:	d50a      	bpl.n	8006efe <_printf_i+0xce>
 8006ee8:	680e      	ldr	r6, [r1, #0]
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	da03      	bge.n	8006ef8 <_printf_i+0xc8>
 8006ef0:	232d      	movs	r3, #45	; 0x2d
 8006ef2:	4276      	negs	r6, r6
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef8:	485e      	ldr	r0, [pc, #376]	; (8007074 <_printf_i+0x244>)
 8006efa:	230a      	movs	r3, #10
 8006efc:	e019      	b.n	8006f32 <_printf_i+0x102>
 8006efe:	680e      	ldr	r6, [r1, #0]
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f06:	bf18      	it	ne
 8006f08:	b236      	sxthne	r6, r6
 8006f0a:	e7ef      	b.n	8006eec <_printf_i+0xbc>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	6029      	str	r1, [r5, #0]
 8006f14:	0601      	lsls	r1, r0, #24
 8006f16:	d501      	bpl.n	8006f1c <_printf_i+0xec>
 8006f18:	681e      	ldr	r6, [r3, #0]
 8006f1a:	e002      	b.n	8006f22 <_printf_i+0xf2>
 8006f1c:	0646      	lsls	r6, r0, #25
 8006f1e:	d5fb      	bpl.n	8006f18 <_printf_i+0xe8>
 8006f20:	881e      	ldrh	r6, [r3, #0]
 8006f22:	4854      	ldr	r0, [pc, #336]	; (8007074 <_printf_i+0x244>)
 8006f24:	2f6f      	cmp	r7, #111	; 0x6f
 8006f26:	bf0c      	ite	eq
 8006f28:	2308      	moveq	r3, #8
 8006f2a:	230a      	movne	r3, #10
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f32:	6865      	ldr	r5, [r4, #4]
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	bfa2      	ittt	ge
 8006f3a:	6821      	ldrge	r1, [r4, #0]
 8006f3c:	f021 0104 	bicge.w	r1, r1, #4
 8006f40:	6021      	strge	r1, [r4, #0]
 8006f42:	b90e      	cbnz	r6, 8006f48 <_printf_i+0x118>
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d04d      	beq.n	8006fe4 <_printf_i+0x1b4>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f52:	5dc7      	ldrb	r7, [r0, r7]
 8006f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f58:	4637      	mov	r7, r6
 8006f5a:	42bb      	cmp	r3, r7
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	d9f4      	bls.n	8006f4a <_printf_i+0x11a>
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10b      	bne.n	8006f7c <_printf_i+0x14c>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07de      	lsls	r6, r3, #31
 8006f68:	d508      	bpl.n	8006f7c <_printf_i+0x14c>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	6861      	ldr	r1, [r4, #4]
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	bfde      	ittt	le
 8006f72:	2330      	movle	r3, #48	; 0x30
 8006f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f7c:	1b52      	subs	r2, r2, r5
 8006f7e:	6122      	str	r2, [r4, #16]
 8006f80:	f8cd a000 	str.w	sl, [sp]
 8006f84:	464b      	mov	r3, r9
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f7ff fee2 	bl	8006d54 <_printf_common>
 8006f90:	3001      	adds	r0, #1
 8006f92:	d14c      	bne.n	800702e <_printf_i+0x1fe>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	b004      	add	sp, #16
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9e:	4835      	ldr	r0, [pc, #212]	; (8007074 <_printf_i+0x244>)
 8006fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fa4:	6829      	ldr	r1, [r5, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	061d      	lsls	r5, r3, #24
 8006fb0:	d514      	bpl.n	8006fdc <_printf_i+0x1ac>
 8006fb2:	07df      	lsls	r7, r3, #31
 8006fb4:	bf44      	itt	mi
 8006fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fba:	6023      	strmi	r3, [r4, #0]
 8006fbc:	b91e      	cbnz	r6, 8006fc6 <_printf_i+0x196>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f023 0320 	bic.w	r3, r3, #32
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	e7b0      	b.n	8006f2c <_printf_i+0xfc>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	f043 0320 	orr.w	r3, r3, #32
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	2378      	movs	r3, #120	; 0x78
 8006fd4:	4828      	ldr	r0, [pc, #160]	; (8007078 <_printf_i+0x248>)
 8006fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fda:	e7e3      	b.n	8006fa4 <_printf_i+0x174>
 8006fdc:	0659      	lsls	r1, r3, #25
 8006fde:	bf48      	it	mi
 8006fe0:	b2b6      	uxthmi	r6, r6
 8006fe2:	e7e6      	b.n	8006fb2 <_printf_i+0x182>
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	e7bb      	b.n	8006f60 <_printf_i+0x130>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6826      	ldr	r6, [r4, #0]
 8006fec:	6961      	ldr	r1, [r4, #20]
 8006fee:	1d18      	adds	r0, r3, #4
 8006ff0:	6028      	str	r0, [r5, #0]
 8006ff2:	0635      	lsls	r5, r6, #24
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0x1cc>
 8006ff8:	6019      	str	r1, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0x1d2>
 8006ffc:	0670      	lsls	r0, r6, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0x1c8>
 8007000:	8019      	strh	r1, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	4615      	mov	r5, r2
 8007008:	e7ba      	b.n	8006f80 <_printf_i+0x150>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	2100      	movs	r1, #0
 8007016:	4628      	mov	r0, r5
 8007018:	f7f9 f902 	bl	8000220 <memchr>
 800701c:	b108      	cbz	r0, 8007022 <_printf_i+0x1f2>
 800701e:	1b40      	subs	r0, r0, r5
 8007020:	6060      	str	r0, [r4, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	2300      	movs	r3, #0
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	e7a8      	b.n	8006f80 <_printf_i+0x150>
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	462a      	mov	r2, r5
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d0ab      	beq.n	8006f94 <_printf_i+0x164>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	079b      	lsls	r3, r3, #30
 8007040:	d413      	bmi.n	800706a <_printf_i+0x23a>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	4298      	cmp	r0, r3
 8007048:	bfb8      	it	lt
 800704a:	4618      	movlt	r0, r3
 800704c:	e7a4      	b.n	8006f98 <_printf_i+0x168>
 800704e:	2301      	movs	r3, #1
 8007050:	4632      	mov	r2, r6
 8007052:	4649      	mov	r1, r9
 8007054:	4640      	mov	r0, r8
 8007056:	47d0      	blx	sl
 8007058:	3001      	adds	r0, #1
 800705a:	d09b      	beq.n	8006f94 <_printf_i+0x164>
 800705c:	3501      	adds	r5, #1
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	9903      	ldr	r1, [sp, #12]
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	42ab      	cmp	r3, r5
 8007066:	dcf2      	bgt.n	800704e <_printf_i+0x21e>
 8007068:	e7eb      	b.n	8007042 <_printf_i+0x212>
 800706a:	2500      	movs	r5, #0
 800706c:	f104 0619 	add.w	r6, r4, #25
 8007070:	e7f5      	b.n	800705e <_printf_i+0x22e>
 8007072:	bf00      	nop
 8007074:	0800b0d6 	.word	0x0800b0d6
 8007078:	0800b0e7 	.word	0x0800b0e7

0800707c <_scanf_float>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	b087      	sub	sp, #28
 8007082:	4617      	mov	r7, r2
 8007084:	9303      	str	r3, [sp, #12]
 8007086:	688b      	ldr	r3, [r1, #8]
 8007088:	1e5a      	subs	r2, r3, #1
 800708a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800708e:	bf83      	ittte	hi
 8007090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007094:	195b      	addhi	r3, r3, r5
 8007096:	9302      	strhi	r3, [sp, #8]
 8007098:	2300      	movls	r3, #0
 800709a:	bf86      	itte	hi
 800709c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070a0:	608b      	strhi	r3, [r1, #8]
 80070a2:	9302      	strls	r3, [sp, #8]
 80070a4:	680b      	ldr	r3, [r1, #0]
 80070a6:	468b      	mov	fp, r1
 80070a8:	2500      	movs	r5, #0
 80070aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80070ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80070b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070b6:	4680      	mov	r8, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	465e      	mov	r6, fp
 80070bc:	46aa      	mov	sl, r5
 80070be:	46a9      	mov	r9, r5
 80070c0:	9501      	str	r5, [sp, #4]
 80070c2:	68a2      	ldr	r2, [r4, #8]
 80070c4:	b152      	cbz	r2, 80070dc <_scanf_float+0x60>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b4e      	cmp	r3, #78	; 0x4e
 80070cc:	d864      	bhi.n	8007198 <_scanf_float+0x11c>
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d83c      	bhi.n	800714c <_scanf_float+0xd0>
 80070d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80070d6:	b2c8      	uxtb	r0, r1
 80070d8:	280e      	cmp	r0, #14
 80070da:	d93a      	bls.n	8007152 <_scanf_float+0xd6>
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	d003      	beq.n	80070ea <_scanf_float+0x6e>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ee:	f1ba 0f01 	cmp.w	sl, #1
 80070f2:	f200 8113 	bhi.w	800731c <_scanf_float+0x2a0>
 80070f6:	455e      	cmp	r6, fp
 80070f8:	f200 8105 	bhi.w	8007306 <_scanf_float+0x28a>
 80070fc:	2501      	movs	r5, #1
 80070fe:	4628      	mov	r0, r5
 8007100:	b007      	add	sp, #28
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800710a:	2a0d      	cmp	r2, #13
 800710c:	d8e6      	bhi.n	80070dc <_scanf_float+0x60>
 800710e:	a101      	add	r1, pc, #4	; (adr r1, 8007114 <_scanf_float+0x98>)
 8007110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007114:	08007253 	.word	0x08007253
 8007118:	080070dd 	.word	0x080070dd
 800711c:	080070dd 	.word	0x080070dd
 8007120:	080070dd 	.word	0x080070dd
 8007124:	080072b3 	.word	0x080072b3
 8007128:	0800728b 	.word	0x0800728b
 800712c:	080070dd 	.word	0x080070dd
 8007130:	080070dd 	.word	0x080070dd
 8007134:	08007261 	.word	0x08007261
 8007138:	080070dd 	.word	0x080070dd
 800713c:	080070dd 	.word	0x080070dd
 8007140:	080070dd 	.word	0x080070dd
 8007144:	080070dd 	.word	0x080070dd
 8007148:	08007219 	.word	0x08007219
 800714c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007150:	e7db      	b.n	800710a <_scanf_float+0x8e>
 8007152:	290e      	cmp	r1, #14
 8007154:	d8c2      	bhi.n	80070dc <_scanf_float+0x60>
 8007156:	a001      	add	r0, pc, #4	; (adr r0, 800715c <_scanf_float+0xe0>)
 8007158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800715c:	0800720b 	.word	0x0800720b
 8007160:	080070dd 	.word	0x080070dd
 8007164:	0800720b 	.word	0x0800720b
 8007168:	0800729f 	.word	0x0800729f
 800716c:	080070dd 	.word	0x080070dd
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071f5 	.word	0x080071f5
 8007178:	080071f5 	.word	0x080071f5
 800717c:	080071f5 	.word	0x080071f5
 8007180:	080071f5 	.word	0x080071f5
 8007184:	080071f5 	.word	0x080071f5
 8007188:	080071f5 	.word	0x080071f5
 800718c:	080071f5 	.word	0x080071f5
 8007190:	080071f5 	.word	0x080071f5
 8007194:	080071f5 	.word	0x080071f5
 8007198:	2b6e      	cmp	r3, #110	; 0x6e
 800719a:	d809      	bhi.n	80071b0 <_scanf_float+0x134>
 800719c:	2b60      	cmp	r3, #96	; 0x60
 800719e:	d8b2      	bhi.n	8007106 <_scanf_float+0x8a>
 80071a0:	2b54      	cmp	r3, #84	; 0x54
 80071a2:	d077      	beq.n	8007294 <_scanf_float+0x218>
 80071a4:	2b59      	cmp	r3, #89	; 0x59
 80071a6:	d199      	bne.n	80070dc <_scanf_float+0x60>
 80071a8:	2d07      	cmp	r5, #7
 80071aa:	d197      	bne.n	80070dc <_scanf_float+0x60>
 80071ac:	2508      	movs	r5, #8
 80071ae:	e029      	b.n	8007204 <_scanf_float+0x188>
 80071b0:	2b74      	cmp	r3, #116	; 0x74
 80071b2:	d06f      	beq.n	8007294 <_scanf_float+0x218>
 80071b4:	2b79      	cmp	r3, #121	; 0x79
 80071b6:	e7f6      	b.n	80071a6 <_scanf_float+0x12a>
 80071b8:	6821      	ldr	r1, [r4, #0]
 80071ba:	05c8      	lsls	r0, r1, #23
 80071bc:	d51a      	bpl.n	80071f4 <_scanf_float+0x178>
 80071be:	9b02      	ldr	r3, [sp, #8]
 80071c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071c4:	6021      	str	r1, [r4, #0]
 80071c6:	f109 0901 	add.w	r9, r9, #1
 80071ca:	b11b      	cbz	r3, 80071d4 <_scanf_float+0x158>
 80071cc:	3b01      	subs	r3, #1
 80071ce:	3201      	adds	r2, #1
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	60a2      	str	r2, [r4, #8]
 80071d4:	68a3      	ldr	r3, [r4, #8]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	60a3      	str	r3, [r4, #8]
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	3301      	adds	r3, #1
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	f340 8084 	ble.w	80072f4 <_scanf_float+0x278>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	e766      	b.n	80070c2 <_scanf_float+0x46>
 80071f4:	eb1a 0f05 	cmn.w	sl, r5
 80071f8:	f47f af70 	bne.w	80070dc <_scanf_float+0x60>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	f806 3b01 	strb.w	r3, [r6], #1
 8007208:	e7e4      	b.n	80071d4 <_scanf_float+0x158>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	0610      	lsls	r0, r2, #24
 800720e:	f57f af65 	bpl.w	80070dc <_scanf_float+0x60>
 8007212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007216:	e7f4      	b.n	8007202 <_scanf_float+0x186>
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	d10e      	bne.n	800723c <_scanf_float+0x1c0>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	d10e      	bne.n	8007242 <_scanf_float+0x1c6>
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800722a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800722e:	d108      	bne.n	8007242 <_scanf_float+0x1c6>
 8007230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	f04f 0a01 	mov.w	sl, #1
 800723a:	e7e3      	b.n	8007204 <_scanf_float+0x188>
 800723c:	f1ba 0f02 	cmp.w	sl, #2
 8007240:	d055      	beq.n	80072ee <_scanf_float+0x272>
 8007242:	2d01      	cmp	r5, #1
 8007244:	d002      	beq.n	800724c <_scanf_float+0x1d0>
 8007246:	2d04      	cmp	r5, #4
 8007248:	f47f af48 	bne.w	80070dc <_scanf_float+0x60>
 800724c:	3501      	adds	r5, #1
 800724e:	b2ed      	uxtb	r5, r5
 8007250:	e7d8      	b.n	8007204 <_scanf_float+0x188>
 8007252:	f1ba 0f01 	cmp.w	sl, #1
 8007256:	f47f af41 	bne.w	80070dc <_scanf_float+0x60>
 800725a:	f04f 0a02 	mov.w	sl, #2
 800725e:	e7d1      	b.n	8007204 <_scanf_float+0x188>
 8007260:	b97d      	cbnz	r5, 8007282 <_scanf_float+0x206>
 8007262:	f1b9 0f00 	cmp.w	r9, #0
 8007266:	f47f af3c 	bne.w	80070e2 <_scanf_float+0x66>
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007274:	f47f af39 	bne.w	80070ea <_scanf_float+0x6e>
 8007278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	2501      	movs	r5, #1
 8007280:	e7c0      	b.n	8007204 <_scanf_float+0x188>
 8007282:	2d03      	cmp	r5, #3
 8007284:	d0e2      	beq.n	800724c <_scanf_float+0x1d0>
 8007286:	2d05      	cmp	r5, #5
 8007288:	e7de      	b.n	8007248 <_scanf_float+0x1cc>
 800728a:	2d02      	cmp	r5, #2
 800728c:	f47f af26 	bne.w	80070dc <_scanf_float+0x60>
 8007290:	2503      	movs	r5, #3
 8007292:	e7b7      	b.n	8007204 <_scanf_float+0x188>
 8007294:	2d06      	cmp	r5, #6
 8007296:	f47f af21 	bne.w	80070dc <_scanf_float+0x60>
 800729a:	2507      	movs	r5, #7
 800729c:	e7b2      	b.n	8007204 <_scanf_float+0x188>
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	0591      	lsls	r1, r2, #22
 80072a2:	f57f af1b 	bpl.w	80070dc <_scanf_float+0x60>
 80072a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80072b0:	e7a8      	b.n	8007204 <_scanf_float+0x188>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80072b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80072bc:	d006      	beq.n	80072cc <_scanf_float+0x250>
 80072be:	0550      	lsls	r0, r2, #21
 80072c0:	f57f af0c 	bpl.w	80070dc <_scanf_float+0x60>
 80072c4:	f1b9 0f00 	cmp.w	r9, #0
 80072c8:	f43f af0f 	beq.w	80070ea <_scanf_float+0x6e>
 80072cc:	0591      	lsls	r1, r2, #22
 80072ce:	bf58      	it	pl
 80072d0:	9901      	ldrpl	r1, [sp, #4]
 80072d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072d6:	bf58      	it	pl
 80072d8:	eba9 0101 	subpl.w	r1, r9, r1
 80072dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80072e0:	bf58      	it	pl
 80072e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	f04f 0900 	mov.w	r9, #0
 80072ec:	e78a      	b.n	8007204 <_scanf_float+0x188>
 80072ee:	f04f 0a03 	mov.w	sl, #3
 80072f2:	e787      	b.n	8007204 <_scanf_float+0x188>
 80072f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072f8:	4639      	mov	r1, r7
 80072fa:	4640      	mov	r0, r8
 80072fc:	4798      	blx	r3
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f aedf 	beq.w	80070c2 <_scanf_float+0x46>
 8007304:	e6ea      	b.n	80070dc <_scanf_float+0x60>
 8007306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800730a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800730e:	463a      	mov	r2, r7
 8007310:	4640      	mov	r0, r8
 8007312:	4798      	blx	r3
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	e6ec      	b.n	80070f6 <_scanf_float+0x7a>
 800731c:	1e6b      	subs	r3, r5, #1
 800731e:	2b06      	cmp	r3, #6
 8007320:	d825      	bhi.n	800736e <_scanf_float+0x2f2>
 8007322:	2d02      	cmp	r5, #2
 8007324:	d836      	bhi.n	8007394 <_scanf_float+0x318>
 8007326:	455e      	cmp	r6, fp
 8007328:	f67f aee8 	bls.w	80070fc <_scanf_float+0x80>
 800732c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007334:	463a      	mov	r2, r7
 8007336:	4640      	mov	r0, r8
 8007338:	4798      	blx	r3
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	3b01      	subs	r3, #1
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	e7f1      	b.n	8007326 <_scanf_float+0x2aa>
 8007342:	9802      	ldr	r0, [sp, #8]
 8007344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800734c:	9002      	str	r0, [sp, #8]
 800734e:	463a      	mov	r2, r7
 8007350:	4640      	mov	r0, r8
 8007352:	4798      	blx	r3
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	3b01      	subs	r3, #1
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800735e:	fa5f fa8a 	uxtb.w	sl, sl
 8007362:	f1ba 0f02 	cmp.w	sl, #2
 8007366:	d1ec      	bne.n	8007342 <_scanf_float+0x2c6>
 8007368:	3d03      	subs	r5, #3
 800736a:	b2ed      	uxtb	r5, r5
 800736c:	1b76      	subs	r6, r6, r5
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	05da      	lsls	r2, r3, #23
 8007372:	d52f      	bpl.n	80073d4 <_scanf_float+0x358>
 8007374:	055b      	lsls	r3, r3, #21
 8007376:	d510      	bpl.n	800739a <_scanf_float+0x31e>
 8007378:	455e      	cmp	r6, fp
 800737a:	f67f aebf 	bls.w	80070fc <_scanf_float+0x80>
 800737e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007386:	463a      	mov	r2, r7
 8007388:	4640      	mov	r0, r8
 800738a:	4798      	blx	r3
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	3b01      	subs	r3, #1
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	e7f1      	b.n	8007378 <_scanf_float+0x2fc>
 8007394:	46aa      	mov	sl, r5
 8007396:	9602      	str	r6, [sp, #8]
 8007398:	e7df      	b.n	800735a <_scanf_float+0x2de>
 800739a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	2965      	cmp	r1, #101	; 0x65
 80073a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	d00c      	beq.n	80073c8 <_scanf_float+0x34c>
 80073ae:	2945      	cmp	r1, #69	; 0x45
 80073b0:	d00a      	beq.n	80073c8 <_scanf_float+0x34c>
 80073b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073b6:	463a      	mov	r2, r7
 80073b8:	4640      	mov	r0, r8
 80073ba:	4798      	blx	r3
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	1eb5      	subs	r5, r6, #2
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073cc:	463a      	mov	r2, r7
 80073ce:	4640      	mov	r0, r8
 80073d0:	4798      	blx	r3
 80073d2:	462e      	mov	r6, r5
 80073d4:	6825      	ldr	r5, [r4, #0]
 80073d6:	f015 0510 	ands.w	r5, r5, #16
 80073da:	d159      	bne.n	8007490 <_scanf_float+0x414>
 80073dc:	7035      	strb	r5, [r6, #0]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e8:	d11b      	bne.n	8007422 <_scanf_float+0x3a6>
 80073ea:	9b01      	ldr	r3, [sp, #4]
 80073ec:	454b      	cmp	r3, r9
 80073ee:	eba3 0209 	sub.w	r2, r3, r9
 80073f2:	d123      	bne.n	800743c <_scanf_float+0x3c0>
 80073f4:	2200      	movs	r2, #0
 80073f6:	4659      	mov	r1, fp
 80073f8:	4640      	mov	r0, r8
 80073fa:	f000 feef 	bl	80081dc <_strtod_r>
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	f012 0f02 	tst.w	r2, #2
 8007406:	ec57 6b10 	vmov	r6, r7, d0
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	d021      	beq.n	8007452 <_scanf_float+0x3d6>
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	600a      	str	r2, [r1, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	e9c3 6700 	strd	r6, r7, [r3]
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60e3      	str	r3, [r4, #12]
 8007420:	e66d      	b.n	80070fe <_scanf_float+0x82>
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0e5      	beq.n	80073f4 <_scanf_float+0x378>
 8007428:	9905      	ldr	r1, [sp, #20]
 800742a:	230a      	movs	r3, #10
 800742c:	462a      	mov	r2, r5
 800742e:	3101      	adds	r1, #1
 8007430:	4640      	mov	r0, r8
 8007432:	f000 ff5b 	bl	80082ec <_strtol_r>
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	9e05      	ldr	r6, [sp, #20]
 800743a:	1ac2      	subs	r2, r0, r3
 800743c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007440:	429e      	cmp	r6, r3
 8007442:	bf28      	it	cs
 8007444:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007448:	4912      	ldr	r1, [pc, #72]	; (8007494 <_scanf_float+0x418>)
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f82c 	bl	80074a8 <siprintf>
 8007450:	e7d0      	b.n	80073f4 <_scanf_float+0x378>
 8007452:	9903      	ldr	r1, [sp, #12]
 8007454:	f012 0f04 	tst.w	r2, #4
 8007458:	f103 0204 	add.w	r2, r3, #4
 800745c:	600a      	str	r2, [r1, #0]
 800745e:	d1d9      	bne.n	8007414 <_scanf_float+0x398>
 8007460:	f8d3 8000 	ldr.w	r8, [r3]
 8007464:	ee10 2a10 	vmov	r2, s0
 8007468:	ee10 0a10 	vmov	r0, s0
 800746c:	463b      	mov	r3, r7
 800746e:	4639      	mov	r1, r7
 8007470:	f7f9 fb7c 	bl	8000b6c <__aeabi_dcmpun>
 8007474:	b128      	cbz	r0, 8007482 <_scanf_float+0x406>
 8007476:	4808      	ldr	r0, [pc, #32]	; (8007498 <_scanf_float+0x41c>)
 8007478:	f000 f810 	bl	800749c <nanf>
 800747c:	ed88 0a00 	vstr	s0, [r8]
 8007480:	e7cb      	b.n	800741a <_scanf_float+0x39e>
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f9 fbcf 	bl	8000c28 <__aeabi_d2f>
 800748a:	f8c8 0000 	str.w	r0, [r8]
 800748e:	e7c4      	b.n	800741a <_scanf_float+0x39e>
 8007490:	2500      	movs	r5, #0
 8007492:	e634      	b.n	80070fe <_scanf_float+0x82>
 8007494:	0800b0f8 	.word	0x0800b0f8
 8007498:	0800b500 	.word	0x0800b500

0800749c <nanf>:
 800749c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074a4 <nanf+0x8>
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	7fc00000 	.word	0x7fc00000

080074a8 <siprintf>:
 80074a8:	b40e      	push	{r1, r2, r3}
 80074aa:	b500      	push	{lr}
 80074ac:	b09c      	sub	sp, #112	; 0x70
 80074ae:	ab1d      	add	r3, sp, #116	; 0x74
 80074b0:	9002      	str	r0, [sp, #8]
 80074b2:	9006      	str	r0, [sp, #24]
 80074b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074b8:	4809      	ldr	r0, [pc, #36]	; (80074e0 <siprintf+0x38>)
 80074ba:	9107      	str	r1, [sp, #28]
 80074bc:	9104      	str	r1, [sp, #16]
 80074be:	4909      	ldr	r1, [pc, #36]	; (80074e4 <siprintf+0x3c>)
 80074c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c4:	9105      	str	r1, [sp, #20]
 80074c6:	6800      	ldr	r0, [r0, #0]
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	a902      	add	r1, sp, #8
 80074cc:	f002 ff70 	bl	800a3b0 <_svfiprintf_r>
 80074d0:	9b02      	ldr	r3, [sp, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	b01c      	add	sp, #112	; 0x70
 80074d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074dc:	b003      	add	sp, #12
 80074de:	4770      	bx	lr
 80074e0:	2000000c 	.word	0x2000000c
 80074e4:	ffff0208 	.word	0xffff0208

080074e8 <__sread>:
 80074e8:	b510      	push	{r4, lr}
 80074ea:	460c      	mov	r4, r1
 80074ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f0:	f003 f85e 	bl	800a5b0 <_read_r>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	bfab      	itete	ge
 80074f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074fa:	89a3      	ldrhlt	r3, [r4, #12]
 80074fc:	181b      	addge	r3, r3, r0
 80074fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007502:	bfac      	ite	ge
 8007504:	6563      	strge	r3, [r4, #84]	; 0x54
 8007506:	81a3      	strhlt	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__swrite>:
 800750a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750e:	461f      	mov	r7, r3
 8007510:	898b      	ldrh	r3, [r1, #12]
 8007512:	05db      	lsls	r3, r3, #23
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	4616      	mov	r6, r2
 800751a:	d505      	bpl.n	8007528 <__swrite+0x1e>
 800751c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007520:	2302      	movs	r3, #2
 8007522:	2200      	movs	r2, #0
 8007524:	f002 f8f6 	bl	8009714 <_lseek_r>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800752e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	4632      	mov	r2, r6
 8007536:	463b      	mov	r3, r7
 8007538:	4628      	mov	r0, r5
 800753a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753e:	f000 bed7 	b.w	80082f0 <_write_r>

08007542 <__sseek>:
 8007542:	b510      	push	{r4, lr}
 8007544:	460c      	mov	r4, r1
 8007546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754a:	f002 f8e3 	bl	8009714 <_lseek_r>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	bf15      	itete	ne
 8007554:	6560      	strne	r0, [r4, #84]	; 0x54
 8007556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800755a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800755e:	81a3      	strheq	r3, [r4, #12]
 8007560:	bf18      	it	ne
 8007562:	81a3      	strhne	r3, [r4, #12]
 8007564:	bd10      	pop	{r4, pc}

08007566 <__sclose>:
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 bed3 	b.w	8008314 <_close_r>

0800756e <strncmp>:
 800756e:	b510      	push	{r4, lr}
 8007570:	b17a      	cbz	r2, 8007592 <strncmp+0x24>
 8007572:	4603      	mov	r3, r0
 8007574:	3901      	subs	r1, #1
 8007576:	1884      	adds	r4, r0, r2
 8007578:	f813 0b01 	ldrb.w	r0, [r3], #1
 800757c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007580:	4290      	cmp	r0, r2
 8007582:	d101      	bne.n	8007588 <strncmp+0x1a>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d101      	bne.n	800758c <strncmp+0x1e>
 8007588:	1a80      	subs	r0, r0, r2
 800758a:	bd10      	pop	{r4, pc}
 800758c:	2800      	cmp	r0, #0
 800758e:	d1f3      	bne.n	8007578 <strncmp+0xa>
 8007590:	e7fa      	b.n	8007588 <strncmp+0x1a>
 8007592:	4610      	mov	r0, r2
 8007594:	e7f9      	b.n	800758a <strncmp+0x1c>

08007596 <sulp>:
 8007596:	b570      	push	{r4, r5, r6, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	ec45 4b10 	vmov	d0, r4, r5
 80075a0:	4616      	mov	r6, r2
 80075a2:	f002 fc63 	bl	8009e6c <__ulp>
 80075a6:	ec51 0b10 	vmov	r0, r1, d0
 80075aa:	b17e      	cbz	r6, 80075cc <sulp+0x36>
 80075ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd09      	ble.n	80075cc <sulp+0x36>
 80075b8:	051b      	lsls	r3, r3, #20
 80075ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075be:	2400      	movs	r4, #0
 80075c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	f7f9 f836 	bl	8000638 <__aeabi_dmul>
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080075d0 <_strtod_l>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	ed2d 8b02 	vpush	{d8}
 80075d8:	b09d      	sub	sp, #116	; 0x74
 80075da:	461f      	mov	r7, r3
 80075dc:	2300      	movs	r3, #0
 80075de:	9318      	str	r3, [sp, #96]	; 0x60
 80075e0:	4ba2      	ldr	r3, [pc, #648]	; (800786c <_strtod_l+0x29c>)
 80075e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	9305      	str	r3, [sp, #20]
 80075e8:	4604      	mov	r4, r0
 80075ea:	4618      	mov	r0, r3
 80075ec:	4688      	mov	r8, r1
 80075ee:	f7f8 fe0f 	bl	8000210 <strlen>
 80075f2:	f04f 0a00 	mov.w	sl, #0
 80075f6:	4605      	mov	r5, r0
 80075f8:	f04f 0b00 	mov.w	fp, #0
 80075fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	2a2b      	cmp	r2, #43	; 0x2b
 8007606:	d04e      	beq.n	80076a6 <_strtod_l+0xd6>
 8007608:	d83b      	bhi.n	8007682 <_strtod_l+0xb2>
 800760a:	2a0d      	cmp	r2, #13
 800760c:	d834      	bhi.n	8007678 <_strtod_l+0xa8>
 800760e:	2a08      	cmp	r2, #8
 8007610:	d834      	bhi.n	800767c <_strtod_l+0xac>
 8007612:	2a00      	cmp	r2, #0
 8007614:	d03e      	beq.n	8007694 <_strtod_l+0xc4>
 8007616:	2300      	movs	r3, #0
 8007618:	930a      	str	r3, [sp, #40]	; 0x28
 800761a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800761c:	7833      	ldrb	r3, [r6, #0]
 800761e:	2b30      	cmp	r3, #48	; 0x30
 8007620:	f040 80b0 	bne.w	8007784 <_strtod_l+0x1b4>
 8007624:	7873      	ldrb	r3, [r6, #1]
 8007626:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800762a:	2b58      	cmp	r3, #88	; 0x58
 800762c:	d168      	bne.n	8007700 <_strtod_l+0x130>
 800762e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	ab18      	add	r3, sp, #96	; 0x60
 8007634:	9702      	str	r7, [sp, #8]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4a8d      	ldr	r2, [pc, #564]	; (8007870 <_strtod_l+0x2a0>)
 800763a:	ab19      	add	r3, sp, #100	; 0x64
 800763c:	a917      	add	r1, sp, #92	; 0x5c
 800763e:	4620      	mov	r0, r4
 8007640:	f001 fd5c 	bl	80090fc <__gethex>
 8007644:	f010 0707 	ands.w	r7, r0, #7
 8007648:	4605      	mov	r5, r0
 800764a:	d005      	beq.n	8007658 <_strtod_l+0x88>
 800764c:	2f06      	cmp	r7, #6
 800764e:	d12c      	bne.n	80076aa <_strtod_l+0xda>
 8007650:	3601      	adds	r6, #1
 8007652:	2300      	movs	r3, #0
 8007654:	9617      	str	r6, [sp, #92]	; 0x5c
 8007656:	930a      	str	r3, [sp, #40]	; 0x28
 8007658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 8590 	bne.w	8008180 <_strtod_l+0xbb0>
 8007660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007662:	b1eb      	cbz	r3, 80076a0 <_strtod_l+0xd0>
 8007664:	4652      	mov	r2, sl
 8007666:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800766a:	ec43 2b10 	vmov	d0, r2, r3
 800766e:	b01d      	add	sp, #116	; 0x74
 8007670:	ecbd 8b02 	vpop	{d8}
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	2a20      	cmp	r2, #32
 800767a:	d1cc      	bne.n	8007616 <_strtod_l+0x46>
 800767c:	3301      	adds	r3, #1
 800767e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007680:	e7be      	b.n	8007600 <_strtod_l+0x30>
 8007682:	2a2d      	cmp	r2, #45	; 0x2d
 8007684:	d1c7      	bne.n	8007616 <_strtod_l+0x46>
 8007686:	2201      	movs	r2, #1
 8007688:	920a      	str	r2, [sp, #40]	; 0x28
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	9217      	str	r2, [sp, #92]	; 0x5c
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1c2      	bne.n	800761a <_strtod_l+0x4a>
 8007694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007696:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 856e 	bne.w	800817c <_strtod_l+0xbac>
 80076a0:	4652      	mov	r2, sl
 80076a2:	465b      	mov	r3, fp
 80076a4:	e7e1      	b.n	800766a <_strtod_l+0x9a>
 80076a6:	2200      	movs	r2, #0
 80076a8:	e7ee      	b.n	8007688 <_strtod_l+0xb8>
 80076aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076ac:	b13a      	cbz	r2, 80076be <_strtod_l+0xee>
 80076ae:	2135      	movs	r1, #53	; 0x35
 80076b0:	a81a      	add	r0, sp, #104	; 0x68
 80076b2:	f002 fce6 	bl	800a082 <__copybits>
 80076b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076b8:	4620      	mov	r0, r4
 80076ba:	f002 f8a5 	bl	8009808 <_Bfree>
 80076be:	3f01      	subs	r7, #1
 80076c0:	2f04      	cmp	r7, #4
 80076c2:	d806      	bhi.n	80076d2 <_strtod_l+0x102>
 80076c4:	e8df f007 	tbb	[pc, r7]
 80076c8:	1714030a 	.word	0x1714030a
 80076cc:	0a          	.byte	0x0a
 80076cd:	00          	.byte	0x00
 80076ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80076d2:	0728      	lsls	r0, r5, #28
 80076d4:	d5c0      	bpl.n	8007658 <_strtod_l+0x88>
 80076d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80076da:	e7bd      	b.n	8007658 <_strtod_l+0x88>
 80076dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80076e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80076ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076ee:	e7f0      	b.n	80076d2 <_strtod_l+0x102>
 80076f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007874 <_strtod_l+0x2a4>
 80076f4:	e7ed      	b.n	80076d2 <_strtod_l+0x102>
 80076f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80076fa:	f04f 3aff 	mov.w	sl, #4294967295
 80076fe:	e7e8      	b.n	80076d2 <_strtod_l+0x102>
 8007700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	9217      	str	r2, [sp, #92]	; 0x5c
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d0f9      	beq.n	8007700 <_strtod_l+0x130>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0a3      	beq.n	8007658 <_strtod_l+0x88>
 8007710:	2301      	movs	r3, #1
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800771a:	9308      	str	r3, [sp, #32]
 800771c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007720:	464f      	mov	r7, r9
 8007722:	220a      	movs	r2, #10
 8007724:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007726:	7806      	ldrb	r6, [r0, #0]
 8007728:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800772c:	b2d9      	uxtb	r1, r3
 800772e:	2909      	cmp	r1, #9
 8007730:	d92a      	bls.n	8007788 <_strtod_l+0x1b8>
 8007732:	9905      	ldr	r1, [sp, #20]
 8007734:	462a      	mov	r2, r5
 8007736:	f7ff ff1a 	bl	800756e <strncmp>
 800773a:	b398      	cbz	r0, 80077a4 <_strtod_l+0x1d4>
 800773c:	2000      	movs	r0, #0
 800773e:	4632      	mov	r2, r6
 8007740:	463d      	mov	r5, r7
 8007742:	9005      	str	r0, [sp, #20]
 8007744:	4603      	mov	r3, r0
 8007746:	2a65      	cmp	r2, #101	; 0x65
 8007748:	d001      	beq.n	800774e <_strtod_l+0x17e>
 800774a:	2a45      	cmp	r2, #69	; 0x45
 800774c:	d118      	bne.n	8007780 <_strtod_l+0x1b0>
 800774e:	b91d      	cbnz	r5, 8007758 <_strtod_l+0x188>
 8007750:	9a04      	ldr	r2, [sp, #16]
 8007752:	4302      	orrs	r2, r0
 8007754:	d09e      	beq.n	8007694 <_strtod_l+0xc4>
 8007756:	2500      	movs	r5, #0
 8007758:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800775c:	f108 0201 	add.w	r2, r8, #1
 8007760:	9217      	str	r2, [sp, #92]	; 0x5c
 8007762:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007766:	2a2b      	cmp	r2, #43	; 0x2b
 8007768:	d075      	beq.n	8007856 <_strtod_l+0x286>
 800776a:	2a2d      	cmp	r2, #45	; 0x2d
 800776c:	d07b      	beq.n	8007866 <_strtod_l+0x296>
 800776e:	f04f 0c00 	mov.w	ip, #0
 8007772:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007776:	2909      	cmp	r1, #9
 8007778:	f240 8082 	bls.w	8007880 <_strtod_l+0x2b0>
 800777c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007780:	2600      	movs	r6, #0
 8007782:	e09d      	b.n	80078c0 <_strtod_l+0x2f0>
 8007784:	2300      	movs	r3, #0
 8007786:	e7c4      	b.n	8007712 <_strtod_l+0x142>
 8007788:	2f08      	cmp	r7, #8
 800778a:	bfd8      	it	le
 800778c:	9907      	ldrle	r1, [sp, #28]
 800778e:	f100 0001 	add.w	r0, r0, #1
 8007792:	bfda      	itte	le
 8007794:	fb02 3301 	mlale	r3, r2, r1, r3
 8007798:	9307      	strle	r3, [sp, #28]
 800779a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800779e:	3701      	adds	r7, #1
 80077a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80077a2:	e7bf      	b.n	8007724 <_strtod_l+0x154>
 80077a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a6:	195a      	adds	r2, r3, r5
 80077a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80077aa:	5d5a      	ldrb	r2, [r3, r5]
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	d037      	beq.n	8007820 <_strtod_l+0x250>
 80077b0:	9005      	str	r0, [sp, #20]
 80077b2:	463d      	mov	r5, r7
 80077b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d912      	bls.n	80077e2 <_strtod_l+0x212>
 80077bc:	2301      	movs	r3, #1
 80077be:	e7c2      	b.n	8007746 <_strtod_l+0x176>
 80077c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80077c6:	785a      	ldrb	r2, [r3, #1]
 80077c8:	3001      	adds	r0, #1
 80077ca:	2a30      	cmp	r2, #48	; 0x30
 80077cc:	d0f8      	beq.n	80077c0 <_strtod_l+0x1f0>
 80077ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	f200 84d9 	bhi.w	800818a <_strtod_l+0xbba>
 80077d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077da:	9005      	str	r0, [sp, #20]
 80077dc:	2000      	movs	r0, #0
 80077de:	9308      	str	r3, [sp, #32]
 80077e0:	4605      	mov	r5, r0
 80077e2:	3a30      	subs	r2, #48	; 0x30
 80077e4:	f100 0301 	add.w	r3, r0, #1
 80077e8:	d014      	beq.n	8007814 <_strtod_l+0x244>
 80077ea:	9905      	ldr	r1, [sp, #20]
 80077ec:	4419      	add	r1, r3
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	462b      	mov	r3, r5
 80077f2:	eb00 0e05 	add.w	lr, r0, r5
 80077f6:	210a      	movs	r1, #10
 80077f8:	4573      	cmp	r3, lr
 80077fa:	d113      	bne.n	8007824 <_strtod_l+0x254>
 80077fc:	182b      	adds	r3, r5, r0
 80077fe:	2b08      	cmp	r3, #8
 8007800:	f105 0501 	add.w	r5, r5, #1
 8007804:	4405      	add	r5, r0
 8007806:	dc1c      	bgt.n	8007842 <_strtod_l+0x272>
 8007808:	9907      	ldr	r1, [sp, #28]
 800780a:	230a      	movs	r3, #10
 800780c:	fb03 2301 	mla	r3, r3, r1, r2
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	2300      	movs	r3, #0
 8007814:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007816:	1c51      	adds	r1, r2, #1
 8007818:	9117      	str	r1, [sp, #92]	; 0x5c
 800781a:	7852      	ldrb	r2, [r2, #1]
 800781c:	4618      	mov	r0, r3
 800781e:	e7c9      	b.n	80077b4 <_strtod_l+0x1e4>
 8007820:	4638      	mov	r0, r7
 8007822:	e7d2      	b.n	80077ca <_strtod_l+0x1fa>
 8007824:	2b08      	cmp	r3, #8
 8007826:	dc04      	bgt.n	8007832 <_strtod_l+0x262>
 8007828:	9e07      	ldr	r6, [sp, #28]
 800782a:	434e      	muls	r6, r1
 800782c:	9607      	str	r6, [sp, #28]
 800782e:	3301      	adds	r3, #1
 8007830:	e7e2      	b.n	80077f8 <_strtod_l+0x228>
 8007832:	f103 0c01 	add.w	ip, r3, #1
 8007836:	f1bc 0f10 	cmp.w	ip, #16
 800783a:	bfd8      	it	le
 800783c:	fb01 f909 	mulle.w	r9, r1, r9
 8007840:	e7f5      	b.n	800782e <_strtod_l+0x25e>
 8007842:	2d10      	cmp	r5, #16
 8007844:	bfdc      	itt	le
 8007846:	230a      	movle	r3, #10
 8007848:	fb03 2909 	mlale	r9, r3, r9, r2
 800784c:	e7e1      	b.n	8007812 <_strtod_l+0x242>
 800784e:	2300      	movs	r3, #0
 8007850:	9305      	str	r3, [sp, #20]
 8007852:	2301      	movs	r3, #1
 8007854:	e77c      	b.n	8007750 <_strtod_l+0x180>
 8007856:	f04f 0c00 	mov.w	ip, #0
 800785a:	f108 0202 	add.w	r2, r8, #2
 800785e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007860:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007864:	e785      	b.n	8007772 <_strtod_l+0x1a2>
 8007866:	f04f 0c01 	mov.w	ip, #1
 800786a:	e7f6      	b.n	800785a <_strtod_l+0x28a>
 800786c:	0800b348 	.word	0x0800b348
 8007870:	0800b100 	.word	0x0800b100
 8007874:	7ff00000 	.word	0x7ff00000
 8007878:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800787a:	1c51      	adds	r1, r2, #1
 800787c:	9117      	str	r1, [sp, #92]	; 0x5c
 800787e:	7852      	ldrb	r2, [r2, #1]
 8007880:	2a30      	cmp	r2, #48	; 0x30
 8007882:	d0f9      	beq.n	8007878 <_strtod_l+0x2a8>
 8007884:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007888:	2908      	cmp	r1, #8
 800788a:	f63f af79 	bhi.w	8007780 <_strtod_l+0x1b0>
 800788e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007892:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007894:	9206      	str	r2, [sp, #24]
 8007896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007898:	1c51      	adds	r1, r2, #1
 800789a:	9117      	str	r1, [sp, #92]	; 0x5c
 800789c:	7852      	ldrb	r2, [r2, #1]
 800789e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80078a2:	2e09      	cmp	r6, #9
 80078a4:	d937      	bls.n	8007916 <_strtod_l+0x346>
 80078a6:	9e06      	ldr	r6, [sp, #24]
 80078a8:	1b89      	subs	r1, r1, r6
 80078aa:	2908      	cmp	r1, #8
 80078ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80078b0:	dc02      	bgt.n	80078b8 <_strtod_l+0x2e8>
 80078b2:	4576      	cmp	r6, lr
 80078b4:	bfa8      	it	ge
 80078b6:	4676      	movge	r6, lr
 80078b8:	f1bc 0f00 	cmp.w	ip, #0
 80078bc:	d000      	beq.n	80078c0 <_strtod_l+0x2f0>
 80078be:	4276      	negs	r6, r6
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	d14d      	bne.n	8007960 <_strtod_l+0x390>
 80078c4:	9904      	ldr	r1, [sp, #16]
 80078c6:	4301      	orrs	r1, r0
 80078c8:	f47f aec6 	bne.w	8007658 <_strtod_l+0x88>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f47f aee1 	bne.w	8007694 <_strtod_l+0xc4>
 80078d2:	2a69      	cmp	r2, #105	; 0x69
 80078d4:	d027      	beq.n	8007926 <_strtod_l+0x356>
 80078d6:	dc24      	bgt.n	8007922 <_strtod_l+0x352>
 80078d8:	2a49      	cmp	r2, #73	; 0x49
 80078da:	d024      	beq.n	8007926 <_strtod_l+0x356>
 80078dc:	2a4e      	cmp	r2, #78	; 0x4e
 80078de:	f47f aed9 	bne.w	8007694 <_strtod_l+0xc4>
 80078e2:	499f      	ldr	r1, [pc, #636]	; (8007b60 <_strtod_l+0x590>)
 80078e4:	a817      	add	r0, sp, #92	; 0x5c
 80078e6:	f001 fe61 	bl	80095ac <__match>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f43f aed2 	beq.w	8007694 <_strtod_l+0xc4>
 80078f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b28      	cmp	r3, #40	; 0x28
 80078f6:	d12d      	bne.n	8007954 <_strtod_l+0x384>
 80078f8:	499a      	ldr	r1, [pc, #616]	; (8007b64 <_strtod_l+0x594>)
 80078fa:	aa1a      	add	r2, sp, #104	; 0x68
 80078fc:	a817      	add	r0, sp, #92	; 0x5c
 80078fe:	f001 fe69 	bl	80095d4 <__hexnan>
 8007902:	2805      	cmp	r0, #5
 8007904:	d126      	bne.n	8007954 <_strtod_l+0x384>
 8007906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007908:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800790c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007910:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007914:	e6a0      	b.n	8007658 <_strtod_l+0x88>
 8007916:	210a      	movs	r1, #10
 8007918:	fb01 2e0e 	mla	lr, r1, lr, r2
 800791c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007920:	e7b9      	b.n	8007896 <_strtod_l+0x2c6>
 8007922:	2a6e      	cmp	r2, #110	; 0x6e
 8007924:	e7db      	b.n	80078de <_strtod_l+0x30e>
 8007926:	4990      	ldr	r1, [pc, #576]	; (8007b68 <_strtod_l+0x598>)
 8007928:	a817      	add	r0, sp, #92	; 0x5c
 800792a:	f001 fe3f 	bl	80095ac <__match>
 800792e:	2800      	cmp	r0, #0
 8007930:	f43f aeb0 	beq.w	8007694 <_strtod_l+0xc4>
 8007934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007936:	498d      	ldr	r1, [pc, #564]	; (8007b6c <_strtod_l+0x59c>)
 8007938:	3b01      	subs	r3, #1
 800793a:	a817      	add	r0, sp, #92	; 0x5c
 800793c:	9317      	str	r3, [sp, #92]	; 0x5c
 800793e:	f001 fe35 	bl	80095ac <__match>
 8007942:	b910      	cbnz	r0, 800794a <_strtod_l+0x37a>
 8007944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007946:	3301      	adds	r3, #1
 8007948:	9317      	str	r3, [sp, #92]	; 0x5c
 800794a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007b7c <_strtod_l+0x5ac>
 800794e:	f04f 0a00 	mov.w	sl, #0
 8007952:	e681      	b.n	8007658 <_strtod_l+0x88>
 8007954:	4886      	ldr	r0, [pc, #536]	; (8007b70 <_strtod_l+0x5a0>)
 8007956:	f002 fe3f 	bl	800a5d8 <nan>
 800795a:	ec5b ab10 	vmov	sl, fp, d0
 800795e:	e67b      	b.n	8007658 <_strtod_l+0x88>
 8007960:	9b05      	ldr	r3, [sp, #20]
 8007962:	9807      	ldr	r0, [sp, #28]
 8007964:	1af3      	subs	r3, r6, r3
 8007966:	2f00      	cmp	r7, #0
 8007968:	bf08      	it	eq
 800796a:	462f      	moveq	r7, r5
 800796c:	2d10      	cmp	r5, #16
 800796e:	9306      	str	r3, [sp, #24]
 8007970:	46a8      	mov	r8, r5
 8007972:	bfa8      	it	ge
 8007974:	f04f 0810 	movge.w	r8, #16
 8007978:	f7f8 fde4 	bl	8000544 <__aeabi_ui2d>
 800797c:	2d09      	cmp	r5, #9
 800797e:	4682      	mov	sl, r0
 8007980:	468b      	mov	fp, r1
 8007982:	dd13      	ble.n	80079ac <_strtod_l+0x3dc>
 8007984:	4b7b      	ldr	r3, [pc, #492]	; (8007b74 <_strtod_l+0x5a4>)
 8007986:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800798a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800798e:	f7f8 fe53 	bl	8000638 <__aeabi_dmul>
 8007992:	4682      	mov	sl, r0
 8007994:	4648      	mov	r0, r9
 8007996:	468b      	mov	fp, r1
 8007998:	f7f8 fdd4 	bl	8000544 <__aeabi_ui2d>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	f7f8 fc92 	bl	80002cc <__adddf3>
 80079a8:	4682      	mov	sl, r0
 80079aa:	468b      	mov	fp, r1
 80079ac:	2d0f      	cmp	r5, #15
 80079ae:	dc38      	bgt.n	8007a22 <_strtod_l+0x452>
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f43f ae50 	beq.w	8007658 <_strtod_l+0x88>
 80079b8:	dd24      	ble.n	8007a04 <_strtod_l+0x434>
 80079ba:	2b16      	cmp	r3, #22
 80079bc:	dc0b      	bgt.n	80079d6 <_strtod_l+0x406>
 80079be:	496d      	ldr	r1, [pc, #436]	; (8007b74 <_strtod_l+0x5a4>)
 80079c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c8:	4652      	mov	r2, sl
 80079ca:	465b      	mov	r3, fp
 80079cc:	f7f8 fe34 	bl	8000638 <__aeabi_dmul>
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	e640      	b.n	8007658 <_strtod_l+0x88>
 80079d6:	9a06      	ldr	r2, [sp, #24]
 80079d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80079dc:	4293      	cmp	r3, r2
 80079de:	db20      	blt.n	8007a22 <_strtod_l+0x452>
 80079e0:	4c64      	ldr	r4, [pc, #400]	; (8007b74 <_strtod_l+0x5a4>)
 80079e2:	f1c5 050f 	rsb	r5, r5, #15
 80079e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079ea:	4652      	mov	r2, sl
 80079ec:	465b      	mov	r3, fp
 80079ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f2:	f7f8 fe21 	bl	8000638 <__aeabi_dmul>
 80079f6:	9b06      	ldr	r3, [sp, #24]
 80079f8:	1b5d      	subs	r5, r3, r5
 80079fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80079fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a02:	e7e3      	b.n	80079cc <_strtod_l+0x3fc>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	3316      	adds	r3, #22
 8007a08:	db0b      	blt.n	8007a22 <_strtod_l+0x452>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	1b9e      	subs	r6, r3, r6
 8007a0e:	4b59      	ldr	r3, [pc, #356]	; (8007b74 <_strtod_l+0x5a4>)
 8007a10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007a14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	f7f8 ff36 	bl	800088c <__aeabi_ddiv>
 8007a20:	e7d6      	b.n	80079d0 <_strtod_l+0x400>
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	eba5 0808 	sub.w	r8, r5, r8
 8007a28:	4498      	add	r8, r3
 8007a2a:	f1b8 0f00 	cmp.w	r8, #0
 8007a2e:	dd74      	ble.n	8007b1a <_strtod_l+0x54a>
 8007a30:	f018 030f 	ands.w	r3, r8, #15
 8007a34:	d00a      	beq.n	8007a4c <_strtod_l+0x47c>
 8007a36:	494f      	ldr	r1, [pc, #316]	; (8007b74 <_strtod_l+0x5a4>)
 8007a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	465b      	mov	r3, fp
 8007a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a44:	f7f8 fdf8 	bl	8000638 <__aeabi_dmul>
 8007a48:	4682      	mov	sl, r0
 8007a4a:	468b      	mov	fp, r1
 8007a4c:	f038 080f 	bics.w	r8, r8, #15
 8007a50:	d04f      	beq.n	8007af2 <_strtod_l+0x522>
 8007a52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a56:	dd22      	ble.n	8007a9e <_strtod_l+0x4ce>
 8007a58:	2500      	movs	r5, #0
 8007a5a:	462e      	mov	r6, r5
 8007a5c:	9507      	str	r5, [sp, #28]
 8007a5e:	9505      	str	r5, [sp, #20]
 8007a60:	2322      	movs	r3, #34	; 0x22
 8007a62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007b7c <_strtod_l+0x5ac>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f43f adf2 	beq.w	8007658 <_strtod_l+0x88>
 8007a74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a76:	4620      	mov	r0, r4
 8007a78:	f001 fec6 	bl	8009808 <_Bfree>
 8007a7c:	9905      	ldr	r1, [sp, #20]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fec2 	bl	8009808 <_Bfree>
 8007a84:	4631      	mov	r1, r6
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 febe 	bl	8009808 <_Bfree>
 8007a8c:	9907      	ldr	r1, [sp, #28]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f001 feba 	bl	8009808 <_Bfree>
 8007a94:	4629      	mov	r1, r5
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 feb6 	bl	8009808 <_Bfree>
 8007a9c:	e5dc      	b.n	8007658 <_strtod_l+0x88>
 8007a9e:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <_strtod_l+0x5a8>)
 8007aa0:	9304      	str	r3, [sp, #16]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	4659      	mov	r1, fp
 8007aac:	4699      	mov	r9, r3
 8007aae:	f1b8 0f01 	cmp.w	r8, #1
 8007ab2:	dc21      	bgt.n	8007af8 <_strtod_l+0x528>
 8007ab4:	b10b      	cbz	r3, 8007aba <_strtod_l+0x4ea>
 8007ab6:	4682      	mov	sl, r0
 8007ab8:	468b      	mov	fp, r1
 8007aba:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <_strtod_l+0x5a8>)
 8007abc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007ac0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	465b      	mov	r3, fp
 8007ac8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007acc:	f7f8 fdb4 	bl	8000638 <__aeabi_dmul>
 8007ad0:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <_strtod_l+0x5ac>)
 8007ad2:	460a      	mov	r2, r1
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	492a      	ldr	r1, [pc, #168]	; (8007b80 <_strtod_l+0x5b0>)
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	4682      	mov	sl, r0
 8007adc:	d8bc      	bhi.n	8007a58 <_strtod_l+0x488>
 8007ade:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ae2:	428b      	cmp	r3, r1
 8007ae4:	bf86      	itte	hi
 8007ae6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007b84 <_strtod_l+0x5b4>
 8007aea:	f04f 3aff 	movhi.w	sl, #4294967295
 8007aee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007af2:	2300      	movs	r3, #0
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	e084      	b.n	8007c02 <_strtod_l+0x632>
 8007af8:	f018 0f01 	tst.w	r8, #1
 8007afc:	d005      	beq.n	8007b0a <_strtod_l+0x53a>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fd98 	bl	8000638 <__aeabi_dmul>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	9a04      	ldr	r2, [sp, #16]
 8007b0c:	3208      	adds	r2, #8
 8007b0e:	f109 0901 	add.w	r9, r9, #1
 8007b12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b16:	9204      	str	r2, [sp, #16]
 8007b18:	e7c9      	b.n	8007aae <_strtod_l+0x4de>
 8007b1a:	d0ea      	beq.n	8007af2 <_strtod_l+0x522>
 8007b1c:	f1c8 0800 	rsb	r8, r8, #0
 8007b20:	f018 020f 	ands.w	r2, r8, #15
 8007b24:	d00a      	beq.n	8007b3c <_strtod_l+0x56c>
 8007b26:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <_strtod_l+0x5a4>)
 8007b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 feaa 	bl	800088c <__aeabi_ddiv>
 8007b38:	4682      	mov	sl, r0
 8007b3a:	468b      	mov	fp, r1
 8007b3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b40:	d0d7      	beq.n	8007af2 <_strtod_l+0x522>
 8007b42:	f1b8 0f1f 	cmp.w	r8, #31
 8007b46:	dd1f      	ble.n	8007b88 <_strtod_l+0x5b8>
 8007b48:	2500      	movs	r5, #0
 8007b4a:	462e      	mov	r6, r5
 8007b4c:	9507      	str	r5, [sp, #28]
 8007b4e:	9505      	str	r5, [sp, #20]
 8007b50:	2322      	movs	r3, #34	; 0x22
 8007b52:	f04f 0a00 	mov.w	sl, #0
 8007b56:	f04f 0b00 	mov.w	fp, #0
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	e786      	b.n	8007a6c <_strtod_l+0x49c>
 8007b5e:	bf00      	nop
 8007b60:	0800b0d1 	.word	0x0800b0d1
 8007b64:	0800b114 	.word	0x0800b114
 8007b68:	0800b0c9 	.word	0x0800b0c9
 8007b6c:	0800b254 	.word	0x0800b254
 8007b70:	0800b500 	.word	0x0800b500
 8007b74:	0800b3e0 	.word	0x0800b3e0
 8007b78:	0800b3b8 	.word	0x0800b3b8
 8007b7c:	7ff00000 	.word	0x7ff00000
 8007b80:	7ca00000 	.word	0x7ca00000
 8007b84:	7fefffff 	.word	0x7fefffff
 8007b88:	f018 0310 	ands.w	r3, r8, #16
 8007b8c:	bf18      	it	ne
 8007b8e:	236a      	movne	r3, #106	; 0x6a
 8007b90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007f40 <_strtod_l+0x970>
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	4650      	mov	r0, sl
 8007b98:	4659      	mov	r1, fp
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f018 0f01 	tst.w	r8, #1
 8007ba0:	d004      	beq.n	8007bac <_strtod_l+0x5dc>
 8007ba2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ba6:	f7f8 fd47 	bl	8000638 <__aeabi_dmul>
 8007baa:	2301      	movs	r3, #1
 8007bac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007bb0:	f109 0908 	add.w	r9, r9, #8
 8007bb4:	d1f2      	bne.n	8007b9c <_strtod_l+0x5cc>
 8007bb6:	b10b      	cbz	r3, 8007bbc <_strtod_l+0x5ec>
 8007bb8:	4682      	mov	sl, r0
 8007bba:	468b      	mov	fp, r1
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	b1c3      	cbz	r3, 8007bf2 <_strtod_l+0x622>
 8007bc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007bc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	4659      	mov	r1, fp
 8007bcc:	dd11      	ble.n	8007bf2 <_strtod_l+0x622>
 8007bce:	2b1f      	cmp	r3, #31
 8007bd0:	f340 8124 	ble.w	8007e1c <_strtod_l+0x84c>
 8007bd4:	2b34      	cmp	r3, #52	; 0x34
 8007bd6:	bfde      	ittt	le
 8007bd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007bdc:	f04f 33ff 	movle.w	r3, #4294967295
 8007be0:	fa03 f202 	lslle.w	r2, r3, r2
 8007be4:	f04f 0a00 	mov.w	sl, #0
 8007be8:	bfcc      	ite	gt
 8007bea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007bee:	ea02 0b01 	andle.w	fp, r2, r1
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4650      	mov	r0, sl
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	f7f8 ff85 	bl	8000b08 <__aeabi_dcmpeq>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d1a2      	bne.n	8007b48 <_strtod_l+0x578>
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	9908      	ldr	r1, [sp, #32]
 8007c08:	462b      	mov	r3, r5
 8007c0a:	463a      	mov	r2, r7
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f001 fe63 	bl	80098d8 <__s2b>
 8007c12:	9007      	str	r0, [sp, #28]
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f43f af1f 	beq.w	8007a58 <_strtod_l+0x488>
 8007c1a:	9b05      	ldr	r3, [sp, #20]
 8007c1c:	1b9e      	subs	r6, r3, r6
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfb4      	ite	lt
 8007c24:	4633      	movlt	r3, r6
 8007c26:	2300      	movge	r3, #0
 8007c28:	930c      	str	r3, [sp, #48]	; 0x30
 8007c2a:	9b06      	ldr	r3, [sp, #24]
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c32:	9312      	str	r3, [sp, #72]	; 0x48
 8007c34:	462e      	mov	r6, r5
 8007c36:	9b07      	ldr	r3, [sp, #28]
 8007c38:	4620      	mov	r0, r4
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	f001 fda4 	bl	8009788 <_Balloc>
 8007c40:	9005      	str	r0, [sp, #20]
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f43f af0c 	beq.w	8007a60 <_strtod_l+0x490>
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	3202      	adds	r2, #2
 8007c4e:	f103 010c 	add.w	r1, r3, #12
 8007c52:	0092      	lsls	r2, r2, #2
 8007c54:	300c      	adds	r0, #12
 8007c56:	f001 fd89 	bl	800976c <memcpy>
 8007c5a:	ec4b ab10 	vmov	d0, sl, fp
 8007c5e:	aa1a      	add	r2, sp, #104	; 0x68
 8007c60:	a919      	add	r1, sp, #100	; 0x64
 8007c62:	4620      	mov	r0, r4
 8007c64:	f002 f97e 	bl	8009f64 <__d2b>
 8007c68:	ec4b ab18 	vmov	d8, sl, fp
 8007c6c:	9018      	str	r0, [sp, #96]	; 0x60
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f43f aef6 	beq.w	8007a60 <_strtod_l+0x490>
 8007c74:	2101      	movs	r1, #1
 8007c76:	4620      	mov	r0, r4
 8007c78:	f001 fec8 	bl	8009a0c <__i2b>
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f43f aeee 	beq.w	8007a60 <_strtod_l+0x490>
 8007c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c86:	9904      	ldr	r1, [sp, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfab      	itete	ge
 8007c8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007c8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007c90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007c92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007c96:	bfac      	ite	ge
 8007c98:	eb03 0902 	addge.w	r9, r3, r2
 8007c9c:	1ad7      	sublt	r7, r2, r3
 8007c9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ca0:	eba3 0801 	sub.w	r8, r3, r1
 8007ca4:	4490      	add	r8, r2
 8007ca6:	4ba1      	ldr	r3, [pc, #644]	; (8007f2c <_strtod_l+0x95c>)
 8007ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cac:	4598      	cmp	r8, r3
 8007cae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cb2:	f280 80c7 	bge.w	8007e44 <_strtod_l+0x874>
 8007cb6:	eba3 0308 	sub.w	r3, r3, r8
 8007cba:	2b1f      	cmp	r3, #31
 8007cbc:	eba2 0203 	sub.w	r2, r2, r3
 8007cc0:	f04f 0101 	mov.w	r1, #1
 8007cc4:	f300 80b1 	bgt.w	8007e2a <_strtod_l+0x85a>
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	eb09 0802 	add.w	r8, r9, r2
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	45c1      	cmp	r9, r8
 8007cda:	4417      	add	r7, r2
 8007cdc:	441f      	add	r7, r3
 8007cde:	464b      	mov	r3, r9
 8007ce0:	bfa8      	it	ge
 8007ce2:	4643      	movge	r3, r8
 8007ce4:	42bb      	cmp	r3, r7
 8007ce6:	bfa8      	it	ge
 8007ce8:	463b      	movge	r3, r7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bfc2      	ittt	gt
 8007cee:	eba8 0803 	subgt.w	r8, r8, r3
 8007cf2:	1aff      	subgt	r7, r7, r3
 8007cf4:	eba9 0903 	subgt.w	r9, r9, r3
 8007cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dd17      	ble.n	8007d2e <_strtod_l+0x75e>
 8007cfe:	4631      	mov	r1, r6
 8007d00:	461a      	mov	r2, r3
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 ff42 	bl	8009b8c <__pow5mult>
 8007d08:	4606      	mov	r6, r0
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f43f aea8 	beq.w	8007a60 <_strtod_l+0x490>
 8007d10:	4601      	mov	r1, r0
 8007d12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d14:	4620      	mov	r0, r4
 8007d16:	f001 fe8f 	bl	8009a38 <__multiply>
 8007d1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f43f ae9f 	beq.w	8007a60 <_strtod_l+0x490>
 8007d22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d24:	4620      	mov	r0, r4
 8007d26:	f001 fd6f 	bl	8009808 <_Bfree>
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2c:	9318      	str	r3, [sp, #96]	; 0x60
 8007d2e:	f1b8 0f00 	cmp.w	r8, #0
 8007d32:	f300 808c 	bgt.w	8007e4e <_strtod_l+0x87e>
 8007d36:	9b06      	ldr	r3, [sp, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dd08      	ble.n	8007d4e <_strtod_l+0x77e>
 8007d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d3e:	9905      	ldr	r1, [sp, #20]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f001 ff23 	bl	8009b8c <__pow5mult>
 8007d46:	9005      	str	r0, [sp, #20]
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f43f ae89 	beq.w	8007a60 <_strtod_l+0x490>
 8007d4e:	2f00      	cmp	r7, #0
 8007d50:	dd08      	ble.n	8007d64 <_strtod_l+0x794>
 8007d52:	9905      	ldr	r1, [sp, #20]
 8007d54:	463a      	mov	r2, r7
 8007d56:	4620      	mov	r0, r4
 8007d58:	f001 ff72 	bl	8009c40 <__lshift>
 8007d5c:	9005      	str	r0, [sp, #20]
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f43f ae7e 	beq.w	8007a60 <_strtod_l+0x490>
 8007d64:	f1b9 0f00 	cmp.w	r9, #0
 8007d68:	dd08      	ble.n	8007d7c <_strtod_l+0x7ac>
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	464a      	mov	r2, r9
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 ff66 	bl	8009c40 <__lshift>
 8007d74:	4606      	mov	r6, r0
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f ae72 	beq.w	8007a60 <_strtod_l+0x490>
 8007d7c:	9a05      	ldr	r2, [sp, #20]
 8007d7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d80:	4620      	mov	r0, r4
 8007d82:	f001 ffe9 	bl	8009d58 <__mdiff>
 8007d86:	4605      	mov	r5, r0
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f ae69 	beq.w	8007a60 <_strtod_l+0x490>
 8007d8e:	68c3      	ldr	r3, [r0, #12]
 8007d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d92:	2300      	movs	r3, #0
 8007d94:	60c3      	str	r3, [r0, #12]
 8007d96:	4631      	mov	r1, r6
 8007d98:	f001 ffc2 	bl	8009d20 <__mcmp>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	da60      	bge.n	8007e62 <_strtod_l+0x892>
 8007da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da2:	ea53 030a 	orrs.w	r3, r3, sl
 8007da6:	f040 8082 	bne.w	8007eae <_strtod_l+0x8de>
 8007daa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d17d      	bne.n	8007eae <_strtod_l+0x8de>
 8007db2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007db6:	0d1b      	lsrs	r3, r3, #20
 8007db8:	051b      	lsls	r3, r3, #20
 8007dba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dbe:	d976      	bls.n	8007eae <_strtod_l+0x8de>
 8007dc0:	696b      	ldr	r3, [r5, #20]
 8007dc2:	b913      	cbnz	r3, 8007dca <_strtod_l+0x7fa>
 8007dc4:	692b      	ldr	r3, [r5, #16]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	dd71      	ble.n	8007eae <_strtod_l+0x8de>
 8007dca:	4629      	mov	r1, r5
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f001 ff36 	bl	8009c40 <__lshift>
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	f001 ffa2 	bl	8009d20 <__mcmp>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	dd66      	ble.n	8007eae <_strtod_l+0x8de>
 8007de0:	9904      	ldr	r1, [sp, #16]
 8007de2:	4a53      	ldr	r2, [pc, #332]	; (8007f30 <_strtod_l+0x960>)
 8007de4:	465b      	mov	r3, fp
 8007de6:	2900      	cmp	r1, #0
 8007de8:	f000 8081 	beq.w	8007eee <_strtod_l+0x91e>
 8007dec:	ea02 010b 	and.w	r1, r2, fp
 8007df0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007df4:	dc7b      	bgt.n	8007eee <_strtod_l+0x91e>
 8007df6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007dfa:	f77f aea9 	ble.w	8007b50 <_strtod_l+0x580>
 8007dfe:	4b4d      	ldr	r3, [pc, #308]	; (8007f34 <_strtod_l+0x964>)
 8007e00:	4650      	mov	r0, sl
 8007e02:	4659      	mov	r1, fp
 8007e04:	2200      	movs	r2, #0
 8007e06:	f7f8 fc17 	bl	8000638 <__aeabi_dmul>
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4303      	orrs	r3, r0
 8007e0e:	bf08      	it	eq
 8007e10:	2322      	moveq	r3, #34	; 0x22
 8007e12:	4682      	mov	sl, r0
 8007e14:	468b      	mov	fp, r1
 8007e16:	bf08      	it	eq
 8007e18:	6023      	streq	r3, [r4, #0]
 8007e1a:	e62b      	b.n	8007a74 <_strtod_l+0x4a4>
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e20:	fa02 f303 	lsl.w	r3, r2, r3
 8007e24:	ea03 0a0a 	and.w	sl, r3, sl
 8007e28:	e6e3      	b.n	8007bf2 <_strtod_l+0x622>
 8007e2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007e2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007e32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007e36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007e3a:	fa01 f308 	lsl.w	r3, r1, r8
 8007e3e:	9308      	str	r3, [sp, #32]
 8007e40:	910d      	str	r1, [sp, #52]	; 0x34
 8007e42:	e746      	b.n	8007cd2 <_strtod_l+0x702>
 8007e44:	2300      	movs	r3, #0
 8007e46:	9308      	str	r3, [sp, #32]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e4c:	e741      	b.n	8007cd2 <_strtod_l+0x702>
 8007e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e50:	4642      	mov	r2, r8
 8007e52:	4620      	mov	r0, r4
 8007e54:	f001 fef4 	bl	8009c40 <__lshift>
 8007e58:	9018      	str	r0, [sp, #96]	; 0x60
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	f47f af6b 	bne.w	8007d36 <_strtod_l+0x766>
 8007e60:	e5fe      	b.n	8007a60 <_strtod_l+0x490>
 8007e62:	465f      	mov	r7, fp
 8007e64:	d16e      	bne.n	8007f44 <_strtod_l+0x974>
 8007e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e6c:	b342      	cbz	r2, 8007ec0 <_strtod_l+0x8f0>
 8007e6e:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <_strtod_l+0x968>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d128      	bne.n	8007ec6 <_strtod_l+0x8f6>
 8007e74:	9b04      	ldr	r3, [sp, #16]
 8007e76:	4651      	mov	r1, sl
 8007e78:	b1eb      	cbz	r3, 8007eb6 <_strtod_l+0x8e6>
 8007e7a:	4b2d      	ldr	r3, [pc, #180]	; (8007f30 <_strtod_l+0x960>)
 8007e7c:	403b      	ands	r3, r7
 8007e7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e82:	f04f 32ff 	mov.w	r2, #4294967295
 8007e86:	d819      	bhi.n	8007ebc <_strtod_l+0x8ec>
 8007e88:	0d1b      	lsrs	r3, r3, #20
 8007e8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	4299      	cmp	r1, r3
 8007e94:	d117      	bne.n	8007ec6 <_strtod_l+0x8f6>
 8007e96:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <_strtod_l+0x96c>)
 8007e98:	429f      	cmp	r7, r3
 8007e9a:	d102      	bne.n	8007ea2 <_strtod_l+0x8d2>
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	f43f addf 	beq.w	8007a60 <_strtod_l+0x490>
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <_strtod_l+0x960>)
 8007ea4:	403b      	ands	r3, r7
 8007ea6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007eaa:	f04f 0a00 	mov.w	sl, #0
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1a4      	bne.n	8007dfe <_strtod_l+0x82e>
 8007eb4:	e5de      	b.n	8007a74 <_strtod_l+0x4a4>
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	e7ea      	b.n	8007e92 <_strtod_l+0x8c2>
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	e7e8      	b.n	8007e92 <_strtod_l+0x8c2>
 8007ec0:	ea53 030a 	orrs.w	r3, r3, sl
 8007ec4:	d08c      	beq.n	8007de0 <_strtod_l+0x810>
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	b1db      	cbz	r3, 8007f02 <_strtod_l+0x932>
 8007eca:	423b      	tst	r3, r7
 8007ecc:	d0ef      	beq.n	8007eae <_strtod_l+0x8de>
 8007ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed0:	9a04      	ldr	r2, [sp, #16]
 8007ed2:	4650      	mov	r0, sl
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	b1c3      	cbz	r3, 8007f0a <_strtod_l+0x93a>
 8007ed8:	f7ff fb5d 	bl	8007596 <sulp>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	ec51 0b18 	vmov	r0, r1, d8
 8007ee4:	f7f8 f9f2 	bl	80002cc <__adddf3>
 8007ee8:	4682      	mov	sl, r0
 8007eea:	468b      	mov	fp, r1
 8007eec:	e7df      	b.n	8007eae <_strtod_l+0x8de>
 8007eee:	4013      	ands	r3, r2
 8007ef0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ef4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ef8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007efc:	f04f 3aff 	mov.w	sl, #4294967295
 8007f00:	e7d5      	b.n	8007eae <_strtod_l+0x8de>
 8007f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f04:	ea13 0f0a 	tst.w	r3, sl
 8007f08:	e7e0      	b.n	8007ecc <_strtod_l+0x8fc>
 8007f0a:	f7ff fb44 	bl	8007596 <sulp>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	ec51 0b18 	vmov	r0, r1, d8
 8007f16:	f7f8 f9d7 	bl	80002c8 <__aeabi_dsub>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4682      	mov	sl, r0
 8007f20:	468b      	mov	fp, r1
 8007f22:	f7f8 fdf1 	bl	8000b08 <__aeabi_dcmpeq>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0c1      	beq.n	8007eae <_strtod_l+0x8de>
 8007f2a:	e611      	b.n	8007b50 <_strtod_l+0x580>
 8007f2c:	fffffc02 	.word	0xfffffc02
 8007f30:	7ff00000 	.word	0x7ff00000
 8007f34:	39500000 	.word	0x39500000
 8007f38:	000fffff 	.word	0x000fffff
 8007f3c:	7fefffff 	.word	0x7fefffff
 8007f40:	0800b128 	.word	0x0800b128
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	f002 f868 	bl	800a01c <__ratio>
 8007f4c:	ec59 8b10 	vmov	r8, r9, d0
 8007f50:	ee10 0a10 	vmov	r0, s0
 8007f54:	2200      	movs	r2, #0
 8007f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fde8 	bl	8000b30 <__aeabi_dcmple>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d07a      	beq.n	800805a <_strtod_l+0xa8a>
 8007f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d04a      	beq.n	8008000 <_strtod_l+0xa30>
 8007f6a:	4b95      	ldr	r3, [pc, #596]	; (80081c0 <_strtod_l+0xbf0>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80081c0 <_strtod_l+0xbf0>
 8007f76:	f04f 0800 	mov.w	r8, #0
 8007f7a:	4b92      	ldr	r3, [pc, #584]	; (80081c4 <_strtod_l+0xbf4>)
 8007f7c:	403b      	ands	r3, r7
 8007f7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f82:	4b91      	ldr	r3, [pc, #580]	; (80081c8 <_strtod_l+0xbf8>)
 8007f84:	429a      	cmp	r2, r3
 8007f86:	f040 80b0 	bne.w	80080ea <_strtod_l+0xb1a>
 8007f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007f92:	ec4b ab10 	vmov	d0, sl, fp
 8007f96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f9a:	f001 ff67 	bl	8009e6c <__ulp>
 8007f9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fa2:	ec53 2b10 	vmov	r2, r3, d0
 8007fa6:	f7f8 fb47 	bl	8000638 <__aeabi_dmul>
 8007faa:	4652      	mov	r2, sl
 8007fac:	465b      	mov	r3, fp
 8007fae:	f7f8 f98d 	bl	80002cc <__adddf3>
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4983      	ldr	r1, [pc, #524]	; (80081c4 <_strtod_l+0xbf4>)
 8007fb6:	4a85      	ldr	r2, [pc, #532]	; (80081cc <_strtod_l+0xbfc>)
 8007fb8:	4019      	ands	r1, r3
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	d960      	bls.n	8008082 <_strtod_l+0xab2>
 8007fc0:	ee18 3a90 	vmov	r3, s17
 8007fc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d104      	bne.n	8007fd6 <_strtod_l+0xa06>
 8007fcc:	ee18 3a10 	vmov	r3, s16
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f43f ad45 	beq.w	8007a60 <_strtod_l+0x490>
 8007fd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80081d8 <_strtod_l+0xc08>
 8007fda:	f04f 3aff 	mov.w	sl, #4294967295
 8007fde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f001 fc11 	bl	8009808 <_Bfree>
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f001 fc0d 	bl	8009808 <_Bfree>
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f001 fc09 	bl	8009808 <_Bfree>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fc05 	bl	8009808 <_Bfree>
 8007ffe:	e61a      	b.n	8007c36 <_strtod_l+0x666>
 8008000:	f1ba 0f00 	cmp.w	sl, #0
 8008004:	d11b      	bne.n	800803e <_strtod_l+0xa6e>
 8008006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800800a:	b9f3      	cbnz	r3, 800804a <_strtod_l+0xa7a>
 800800c:	4b6c      	ldr	r3, [pc, #432]	; (80081c0 <_strtod_l+0xbf0>)
 800800e:	2200      	movs	r2, #0
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 fd82 	bl	8000b1c <__aeabi_dcmplt>
 8008018:	b9d0      	cbnz	r0, 8008050 <_strtod_l+0xa80>
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	4b6c      	ldr	r3, [pc, #432]	; (80081d0 <_strtod_l+0xc00>)
 8008020:	2200      	movs	r2, #0
 8008022:	f7f8 fb09 	bl	8000638 <__aeabi_dmul>
 8008026:	4680      	mov	r8, r0
 8008028:	4689      	mov	r9, r1
 800802a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800802e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008032:	9315      	str	r3, [sp, #84]	; 0x54
 8008034:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008038:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800803c:	e79d      	b.n	8007f7a <_strtod_l+0x9aa>
 800803e:	f1ba 0f01 	cmp.w	sl, #1
 8008042:	d102      	bne.n	800804a <_strtod_l+0xa7a>
 8008044:	2f00      	cmp	r7, #0
 8008046:	f43f ad83 	beq.w	8007b50 <_strtod_l+0x580>
 800804a:	4b62      	ldr	r3, [pc, #392]	; (80081d4 <_strtod_l+0xc04>)
 800804c:	2200      	movs	r2, #0
 800804e:	e78e      	b.n	8007f6e <_strtod_l+0x99e>
 8008050:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80081d0 <_strtod_l+0xc00>
 8008054:	f04f 0800 	mov.w	r8, #0
 8008058:	e7e7      	b.n	800802a <_strtod_l+0xa5a>
 800805a:	4b5d      	ldr	r3, [pc, #372]	; (80081d0 <_strtod_l+0xc00>)
 800805c:	4640      	mov	r0, r8
 800805e:	4649      	mov	r1, r9
 8008060:	2200      	movs	r2, #0
 8008062:	f7f8 fae9 	bl	8000638 <__aeabi_dmul>
 8008066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	b933      	cbnz	r3, 800807c <_strtod_l+0xaac>
 800806e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008072:	900e      	str	r0, [sp, #56]	; 0x38
 8008074:	930f      	str	r3, [sp, #60]	; 0x3c
 8008076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800807a:	e7dd      	b.n	8008038 <_strtod_l+0xa68>
 800807c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008080:	e7f9      	b.n	8008076 <_strtod_l+0xaa6>
 8008082:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1a8      	bne.n	8007fde <_strtod_l+0xa0e>
 800808c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008092:	0d1b      	lsrs	r3, r3, #20
 8008094:	051b      	lsls	r3, r3, #20
 8008096:	429a      	cmp	r2, r3
 8008098:	d1a1      	bne.n	8007fde <_strtod_l+0xa0e>
 800809a:	4640      	mov	r0, r8
 800809c:	4649      	mov	r1, r9
 800809e:	f7f8 fe2b 	bl	8000cf8 <__aeabi_d2lz>
 80080a2:	f7f8 fa9b 	bl	80005dc <__aeabi_l2d>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 f90b 	bl	80002c8 <__aeabi_dsub>
 80080b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b8:	ea43 030a 	orr.w	r3, r3, sl
 80080bc:	4313      	orrs	r3, r2
 80080be:	4680      	mov	r8, r0
 80080c0:	4689      	mov	r9, r1
 80080c2:	d055      	beq.n	8008170 <_strtod_l+0xba0>
 80080c4:	a336      	add	r3, pc, #216	; (adr r3, 80081a0 <_strtod_l+0xbd0>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fd27 	bl	8000b1c <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f47f acd0 	bne.w	8007a74 <_strtod_l+0x4a4>
 80080d4:	a334      	add	r3, pc, #208	; (adr r3, 80081a8 <_strtod_l+0xbd8>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 fd3b 	bl	8000b58 <__aeabi_dcmpgt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f43f af7b 	beq.w	8007fde <_strtod_l+0xa0e>
 80080e8:	e4c4      	b.n	8007a74 <_strtod_l+0x4a4>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	b333      	cbz	r3, 800813c <_strtod_l+0xb6c>
 80080ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080f4:	d822      	bhi.n	800813c <_strtod_l+0xb6c>
 80080f6:	a32e      	add	r3, pc, #184	; (adr r3, 80081b0 <_strtod_l+0xbe0>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	4640      	mov	r0, r8
 80080fe:	4649      	mov	r1, r9
 8008100:	f7f8 fd16 	bl	8000b30 <__aeabi_dcmple>
 8008104:	b1a0      	cbz	r0, 8008130 <_strtod_l+0xb60>
 8008106:	4649      	mov	r1, r9
 8008108:	4640      	mov	r0, r8
 800810a:	f7f8 fd6d 	bl	8000be8 <__aeabi_d2uiz>
 800810e:	2801      	cmp	r0, #1
 8008110:	bf38      	it	cc
 8008112:	2001      	movcc	r0, #1
 8008114:	f7f8 fa16 	bl	8000544 <__aeabi_ui2d>
 8008118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811a:	4680      	mov	r8, r0
 800811c:	4689      	mov	r9, r1
 800811e:	bb23      	cbnz	r3, 800816a <_strtod_l+0xb9a>
 8008120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008124:	9010      	str	r0, [sp, #64]	; 0x40
 8008126:	9311      	str	r3, [sp, #68]	; 0x44
 8008128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800812c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008134:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	9309      	str	r3, [sp, #36]	; 0x24
 800813c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008140:	eeb0 0a48 	vmov.f32	s0, s16
 8008144:	eef0 0a68 	vmov.f32	s1, s17
 8008148:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800814c:	f001 fe8e 	bl	8009e6c <__ulp>
 8008150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008154:	ec53 2b10 	vmov	r2, r3, d0
 8008158:	f7f8 fa6e 	bl	8000638 <__aeabi_dmul>
 800815c:	ec53 2b18 	vmov	r2, r3, d8
 8008160:	f7f8 f8b4 	bl	80002cc <__adddf3>
 8008164:	4682      	mov	sl, r0
 8008166:	468b      	mov	fp, r1
 8008168:	e78d      	b.n	8008086 <_strtod_l+0xab6>
 800816a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800816e:	e7db      	b.n	8008128 <_strtod_l+0xb58>
 8008170:	a311      	add	r3, pc, #68	; (adr r3, 80081b8 <_strtod_l+0xbe8>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fcd1 	bl	8000b1c <__aeabi_dcmplt>
 800817a:	e7b2      	b.n	80080e2 <_strtod_l+0xb12>
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	f7ff ba6b 	b.w	8007660 <_strtod_l+0x90>
 800818a:	2a65      	cmp	r2, #101	; 0x65
 800818c:	f43f ab5f 	beq.w	800784e <_strtod_l+0x27e>
 8008190:	2a45      	cmp	r2, #69	; 0x45
 8008192:	f43f ab5c 	beq.w	800784e <_strtod_l+0x27e>
 8008196:	2301      	movs	r3, #1
 8008198:	f7ff bb94 	b.w	80078c4 <_strtod_l+0x2f4>
 800819c:	f3af 8000 	nop.w
 80081a0:	94a03595 	.word	0x94a03595
 80081a4:	3fdfffff 	.word	0x3fdfffff
 80081a8:	35afe535 	.word	0x35afe535
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	ffc00000 	.word	0xffc00000
 80081b4:	41dfffff 	.word	0x41dfffff
 80081b8:	94a03595 	.word	0x94a03595
 80081bc:	3fcfffff 	.word	0x3fcfffff
 80081c0:	3ff00000 	.word	0x3ff00000
 80081c4:	7ff00000 	.word	0x7ff00000
 80081c8:	7fe00000 	.word	0x7fe00000
 80081cc:	7c9fffff 	.word	0x7c9fffff
 80081d0:	3fe00000 	.word	0x3fe00000
 80081d4:	bff00000 	.word	0xbff00000
 80081d8:	7fefffff 	.word	0x7fefffff

080081dc <_strtod_r>:
 80081dc:	4b01      	ldr	r3, [pc, #4]	; (80081e4 <_strtod_r+0x8>)
 80081de:	f7ff b9f7 	b.w	80075d0 <_strtod_l>
 80081e2:	bf00      	nop
 80081e4:	20000074 	.word	0x20000074

080081e8 <_strtol_l.constprop.0>:
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ee:	d001      	beq.n	80081f4 <_strtol_l.constprop.0+0xc>
 80081f0:	2b24      	cmp	r3, #36	; 0x24
 80081f2:	d906      	bls.n	8008202 <_strtol_l.constprop.0+0x1a>
 80081f4:	f7fe faa6 	bl	8006744 <__errno>
 80081f8:	2316      	movs	r3, #22
 80081fa:	6003      	str	r3, [r0, #0]
 80081fc:	2000      	movs	r0, #0
 80081fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008202:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80082e8 <_strtol_l.constprop.0+0x100>
 8008206:	460d      	mov	r5, r1
 8008208:	462e      	mov	r6, r5
 800820a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800820e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008212:	f017 0708 	ands.w	r7, r7, #8
 8008216:	d1f7      	bne.n	8008208 <_strtol_l.constprop.0+0x20>
 8008218:	2c2d      	cmp	r4, #45	; 0x2d
 800821a:	d132      	bne.n	8008282 <_strtol_l.constprop.0+0x9a>
 800821c:	782c      	ldrb	r4, [r5, #0]
 800821e:	2701      	movs	r7, #1
 8008220:	1cb5      	adds	r5, r6, #2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d05b      	beq.n	80082de <_strtol_l.constprop.0+0xf6>
 8008226:	2b10      	cmp	r3, #16
 8008228:	d109      	bne.n	800823e <_strtol_l.constprop.0+0x56>
 800822a:	2c30      	cmp	r4, #48	; 0x30
 800822c:	d107      	bne.n	800823e <_strtol_l.constprop.0+0x56>
 800822e:	782c      	ldrb	r4, [r5, #0]
 8008230:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008234:	2c58      	cmp	r4, #88	; 0x58
 8008236:	d14d      	bne.n	80082d4 <_strtol_l.constprop.0+0xec>
 8008238:	786c      	ldrb	r4, [r5, #1]
 800823a:	2310      	movs	r3, #16
 800823c:	3502      	adds	r5, #2
 800823e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008242:	f108 38ff 	add.w	r8, r8, #4294967295
 8008246:	f04f 0c00 	mov.w	ip, #0
 800824a:	fbb8 f9f3 	udiv	r9, r8, r3
 800824e:	4666      	mov	r6, ip
 8008250:	fb03 8a19 	mls	sl, r3, r9, r8
 8008254:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008258:	f1be 0f09 	cmp.w	lr, #9
 800825c:	d816      	bhi.n	800828c <_strtol_l.constprop.0+0xa4>
 800825e:	4674      	mov	r4, lr
 8008260:	42a3      	cmp	r3, r4
 8008262:	dd24      	ble.n	80082ae <_strtol_l.constprop.0+0xc6>
 8008264:	f1bc 0f00 	cmp.w	ip, #0
 8008268:	db1e      	blt.n	80082a8 <_strtol_l.constprop.0+0xc0>
 800826a:	45b1      	cmp	r9, r6
 800826c:	d31c      	bcc.n	80082a8 <_strtol_l.constprop.0+0xc0>
 800826e:	d101      	bne.n	8008274 <_strtol_l.constprop.0+0x8c>
 8008270:	45a2      	cmp	sl, r4
 8008272:	db19      	blt.n	80082a8 <_strtol_l.constprop.0+0xc0>
 8008274:	fb06 4603 	mla	r6, r6, r3, r4
 8008278:	f04f 0c01 	mov.w	ip, #1
 800827c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008280:	e7e8      	b.n	8008254 <_strtol_l.constprop.0+0x6c>
 8008282:	2c2b      	cmp	r4, #43	; 0x2b
 8008284:	bf04      	itt	eq
 8008286:	782c      	ldrbeq	r4, [r5, #0]
 8008288:	1cb5      	addeq	r5, r6, #2
 800828a:	e7ca      	b.n	8008222 <_strtol_l.constprop.0+0x3a>
 800828c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008290:	f1be 0f19 	cmp.w	lr, #25
 8008294:	d801      	bhi.n	800829a <_strtol_l.constprop.0+0xb2>
 8008296:	3c37      	subs	r4, #55	; 0x37
 8008298:	e7e2      	b.n	8008260 <_strtol_l.constprop.0+0x78>
 800829a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800829e:	f1be 0f19 	cmp.w	lr, #25
 80082a2:	d804      	bhi.n	80082ae <_strtol_l.constprop.0+0xc6>
 80082a4:	3c57      	subs	r4, #87	; 0x57
 80082a6:	e7db      	b.n	8008260 <_strtol_l.constprop.0+0x78>
 80082a8:	f04f 3cff 	mov.w	ip, #4294967295
 80082ac:	e7e6      	b.n	800827c <_strtol_l.constprop.0+0x94>
 80082ae:	f1bc 0f00 	cmp.w	ip, #0
 80082b2:	da05      	bge.n	80082c0 <_strtol_l.constprop.0+0xd8>
 80082b4:	2322      	movs	r3, #34	; 0x22
 80082b6:	6003      	str	r3, [r0, #0]
 80082b8:	4646      	mov	r6, r8
 80082ba:	b942      	cbnz	r2, 80082ce <_strtol_l.constprop.0+0xe6>
 80082bc:	4630      	mov	r0, r6
 80082be:	e79e      	b.n	80081fe <_strtol_l.constprop.0+0x16>
 80082c0:	b107      	cbz	r7, 80082c4 <_strtol_l.constprop.0+0xdc>
 80082c2:	4276      	negs	r6, r6
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d0f9      	beq.n	80082bc <_strtol_l.constprop.0+0xd4>
 80082c8:	f1bc 0f00 	cmp.w	ip, #0
 80082cc:	d000      	beq.n	80082d0 <_strtol_l.constprop.0+0xe8>
 80082ce:	1e69      	subs	r1, r5, #1
 80082d0:	6011      	str	r1, [r2, #0]
 80082d2:	e7f3      	b.n	80082bc <_strtol_l.constprop.0+0xd4>
 80082d4:	2430      	movs	r4, #48	; 0x30
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1b1      	bne.n	800823e <_strtol_l.constprop.0+0x56>
 80082da:	2308      	movs	r3, #8
 80082dc:	e7af      	b.n	800823e <_strtol_l.constprop.0+0x56>
 80082de:	2c30      	cmp	r4, #48	; 0x30
 80082e0:	d0a5      	beq.n	800822e <_strtol_l.constprop.0+0x46>
 80082e2:	230a      	movs	r3, #10
 80082e4:	e7ab      	b.n	800823e <_strtol_l.constprop.0+0x56>
 80082e6:	bf00      	nop
 80082e8:	0800b151 	.word	0x0800b151

080082ec <_strtol_r>:
 80082ec:	f7ff bf7c 	b.w	80081e8 <_strtol_l.constprop.0>

080082f0 <_write_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_write_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 fb11 	bl	8001926 <_write>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_write_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_write_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000434 	.word	0x20000434

08008314 <_close_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	; (8008330 <_close_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f9 fb1d 	bl	800195e <_close>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_close_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_close_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000434 	.word	0x20000434

08008334 <quorem>:
 8008334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	6903      	ldr	r3, [r0, #16]
 800833a:	690c      	ldr	r4, [r1, #16]
 800833c:	42a3      	cmp	r3, r4
 800833e:	4607      	mov	r7, r0
 8008340:	f2c0 8081 	blt.w	8008446 <quorem+0x112>
 8008344:	3c01      	subs	r4, #1
 8008346:	f101 0814 	add.w	r8, r1, #20
 800834a:	f100 0514 	add.w	r5, r0, #20
 800834e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800835c:	3301      	adds	r3, #1
 800835e:	429a      	cmp	r2, r3
 8008360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008368:	fbb2 f6f3 	udiv	r6, r2, r3
 800836c:	d331      	bcc.n	80083d2 <quorem+0x9e>
 800836e:	f04f 0e00 	mov.w	lr, #0
 8008372:	4640      	mov	r0, r8
 8008374:	46ac      	mov	ip, r5
 8008376:	46f2      	mov	sl, lr
 8008378:	f850 2b04 	ldr.w	r2, [r0], #4
 800837c:	b293      	uxth	r3, r2
 800837e:	fb06 e303 	mla	r3, r6, r3, lr
 8008382:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008386:	b29b      	uxth	r3, r3
 8008388:	ebaa 0303 	sub.w	r3, sl, r3
 800838c:	f8dc a000 	ldr.w	sl, [ip]
 8008390:	0c12      	lsrs	r2, r2, #16
 8008392:	fa13 f38a 	uxtah	r3, r3, sl
 8008396:	fb06 e202 	mla	r2, r6, r2, lr
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083a2:	b292      	uxth	r2, r2
 80083a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80083b0:	4581      	cmp	r9, r0
 80083b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b6:	f84c 3b04 	str.w	r3, [ip], #4
 80083ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083be:	d2db      	bcs.n	8008378 <quorem+0x44>
 80083c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80083c4:	b92b      	cbnz	r3, 80083d2 <quorem+0x9e>
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	3b04      	subs	r3, #4
 80083ca:	429d      	cmp	r5, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	d32e      	bcc.n	800842e <quorem+0xfa>
 80083d0:	613c      	str	r4, [r7, #16]
 80083d2:	4638      	mov	r0, r7
 80083d4:	f001 fca4 	bl	8009d20 <__mcmp>
 80083d8:	2800      	cmp	r0, #0
 80083da:	db24      	blt.n	8008426 <quorem+0xf2>
 80083dc:	3601      	adds	r6, #1
 80083de:	4628      	mov	r0, r5
 80083e0:	f04f 0c00 	mov.w	ip, #0
 80083e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80083e8:	f8d0 e000 	ldr.w	lr, [r0]
 80083ec:	b293      	uxth	r3, r2
 80083ee:	ebac 0303 	sub.w	r3, ip, r3
 80083f2:	0c12      	lsrs	r2, r2, #16
 80083f4:	fa13 f38e 	uxtah	r3, r3, lr
 80083f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008400:	b29b      	uxth	r3, r3
 8008402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008406:	45c1      	cmp	r9, r8
 8008408:	f840 3b04 	str.w	r3, [r0], #4
 800840c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008410:	d2e8      	bcs.n	80083e4 <quorem+0xb0>
 8008412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800841a:	b922      	cbnz	r2, 8008426 <quorem+0xf2>
 800841c:	3b04      	subs	r3, #4
 800841e:	429d      	cmp	r5, r3
 8008420:	461a      	mov	r2, r3
 8008422:	d30a      	bcc.n	800843a <quorem+0x106>
 8008424:	613c      	str	r4, [r7, #16]
 8008426:	4630      	mov	r0, r6
 8008428:	b003      	add	sp, #12
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	3b04      	subs	r3, #4
 8008432:	2a00      	cmp	r2, #0
 8008434:	d1cc      	bne.n	80083d0 <quorem+0x9c>
 8008436:	3c01      	subs	r4, #1
 8008438:	e7c7      	b.n	80083ca <quorem+0x96>
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	3b04      	subs	r3, #4
 800843e:	2a00      	cmp	r2, #0
 8008440:	d1f0      	bne.n	8008424 <quorem+0xf0>
 8008442:	3c01      	subs	r4, #1
 8008444:	e7eb      	b.n	800841e <quorem+0xea>
 8008446:	2000      	movs	r0, #0
 8008448:	e7ee      	b.n	8008428 <quorem+0xf4>
 800844a:	0000      	movs	r0, r0
 800844c:	0000      	movs	r0, r0
	...

08008450 <_dtoa_r>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	ed2d 8b04 	vpush	{d8-d9}
 8008458:	ec57 6b10 	vmov	r6, r7, d0
 800845c:	b093      	sub	sp, #76	; 0x4c
 800845e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008464:	9106      	str	r1, [sp, #24]
 8008466:	ee10 aa10 	vmov	sl, s0
 800846a:	4604      	mov	r4, r0
 800846c:	9209      	str	r2, [sp, #36]	; 0x24
 800846e:	930c      	str	r3, [sp, #48]	; 0x30
 8008470:	46bb      	mov	fp, r7
 8008472:	b975      	cbnz	r5, 8008492 <_dtoa_r+0x42>
 8008474:	2010      	movs	r0, #16
 8008476:	f001 f95f 	bl	8009738 <malloc>
 800847a:	4602      	mov	r2, r0
 800847c:	6260      	str	r0, [r4, #36]	; 0x24
 800847e:	b920      	cbnz	r0, 800848a <_dtoa_r+0x3a>
 8008480:	4ba7      	ldr	r3, [pc, #668]	; (8008720 <_dtoa_r+0x2d0>)
 8008482:	21ea      	movs	r1, #234	; 0xea
 8008484:	48a7      	ldr	r0, [pc, #668]	; (8008724 <_dtoa_r+0x2d4>)
 8008486:	f002 f8cd 	bl	800a624 <__assert_func>
 800848a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800848e:	6005      	str	r5, [r0, #0]
 8008490:	60c5      	str	r5, [r0, #12]
 8008492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008494:	6819      	ldr	r1, [r3, #0]
 8008496:	b151      	cbz	r1, 80084ae <_dtoa_r+0x5e>
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	604a      	str	r2, [r1, #4]
 800849c:	2301      	movs	r3, #1
 800849e:	4093      	lsls	r3, r2
 80084a0:	608b      	str	r3, [r1, #8]
 80084a2:	4620      	mov	r0, r4
 80084a4:	f001 f9b0 	bl	8009808 <_Bfree>
 80084a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	1e3b      	subs	r3, r7, #0
 80084b0:	bfaa      	itet	ge
 80084b2:	2300      	movge	r3, #0
 80084b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80084b8:	f8c8 3000 	strge.w	r3, [r8]
 80084bc:	4b9a      	ldr	r3, [pc, #616]	; (8008728 <_dtoa_r+0x2d8>)
 80084be:	bfbc      	itt	lt
 80084c0:	2201      	movlt	r2, #1
 80084c2:	f8c8 2000 	strlt.w	r2, [r8]
 80084c6:	ea33 030b 	bics.w	r3, r3, fp
 80084ca:	d11b      	bne.n	8008504 <_dtoa_r+0xb4>
 80084cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084d8:	4333      	orrs	r3, r6
 80084da:	f000 8592 	beq.w	8009002 <_dtoa_r+0xbb2>
 80084de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084e0:	b963      	cbnz	r3, 80084fc <_dtoa_r+0xac>
 80084e2:	4b92      	ldr	r3, [pc, #584]	; (800872c <_dtoa_r+0x2dc>)
 80084e4:	e022      	b.n	800852c <_dtoa_r+0xdc>
 80084e6:	4b92      	ldr	r3, [pc, #584]	; (8008730 <_dtoa_r+0x2e0>)
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	3308      	adds	r3, #8
 80084ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	b013      	add	sp, #76	; 0x4c
 80084f4:	ecbd 8b04 	vpop	{d8-d9}
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	4b8b      	ldr	r3, [pc, #556]	; (800872c <_dtoa_r+0x2dc>)
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	3303      	adds	r3, #3
 8008502:	e7f3      	b.n	80084ec <_dtoa_r+0x9c>
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4650      	mov	r0, sl
 800850a:	4659      	mov	r1, fp
 800850c:	f7f8 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8008510:	ec4b ab19 	vmov	d9, sl, fp
 8008514:	4680      	mov	r8, r0
 8008516:	b158      	cbz	r0, 8008530 <_dtoa_r+0xe0>
 8008518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800851a:	2301      	movs	r3, #1
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 856b 	beq.w	8008ffc <_dtoa_r+0xbac>
 8008526:	4883      	ldr	r0, [pc, #524]	; (8008734 <_dtoa_r+0x2e4>)
 8008528:	6018      	str	r0, [r3, #0]
 800852a:	1e43      	subs	r3, r0, #1
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	e7df      	b.n	80084f0 <_dtoa_r+0xa0>
 8008530:	ec4b ab10 	vmov	d0, sl, fp
 8008534:	aa10      	add	r2, sp, #64	; 0x40
 8008536:	a911      	add	r1, sp, #68	; 0x44
 8008538:	4620      	mov	r0, r4
 800853a:	f001 fd13 	bl	8009f64 <__d2b>
 800853e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008542:	ee08 0a10 	vmov	s16, r0
 8008546:	2d00      	cmp	r5, #0
 8008548:	f000 8084 	beq.w	8008654 <_dtoa_r+0x204>
 800854c:	ee19 3a90 	vmov	r3, s19
 8008550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008558:	4656      	mov	r6, sl
 800855a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800855e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008566:	4b74      	ldr	r3, [pc, #464]	; (8008738 <_dtoa_r+0x2e8>)
 8008568:	2200      	movs	r2, #0
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f7 feab 	bl	80002c8 <__aeabi_dsub>
 8008572:	a365      	add	r3, pc, #404	; (adr r3, 8008708 <_dtoa_r+0x2b8>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f7f8 f85e 	bl	8000638 <__aeabi_dmul>
 800857c:	a364      	add	r3, pc, #400	; (adr r3, 8008710 <_dtoa_r+0x2c0>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fea3 	bl	80002cc <__adddf3>
 8008586:	4606      	mov	r6, r0
 8008588:	4628      	mov	r0, r5
 800858a:	460f      	mov	r7, r1
 800858c:	f7f7 ffea 	bl	8000564 <__aeabi_i2d>
 8008590:	a361      	add	r3, pc, #388	; (adr r3, 8008718 <_dtoa_r+0x2c8>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4630      	mov	r0, r6
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f7 fe93 	bl	80002cc <__adddf3>
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	f7f8 faf5 	bl	8000b98 <__aeabi_d2iz>
 80085ae:	2200      	movs	r2, #0
 80085b0:	9000      	str	r0, [sp, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	f7f8 fab0 	bl	8000b1c <__aeabi_dcmplt>
 80085bc:	b150      	cbz	r0, 80085d4 <_dtoa_r+0x184>
 80085be:	9800      	ldr	r0, [sp, #0]
 80085c0:	f7f7 ffd0 	bl	8000564 <__aeabi_i2d>
 80085c4:	4632      	mov	r2, r6
 80085c6:	463b      	mov	r3, r7
 80085c8:	f7f8 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80085cc:	b910      	cbnz	r0, 80085d4 <_dtoa_r+0x184>
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	9b00      	ldr	r3, [sp, #0]
 80085d6:	2b16      	cmp	r3, #22
 80085d8:	d85a      	bhi.n	8008690 <_dtoa_r+0x240>
 80085da:	9a00      	ldr	r2, [sp, #0]
 80085dc:	4b57      	ldr	r3, [pc, #348]	; (800873c <_dtoa_r+0x2ec>)
 80085de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	ec51 0b19 	vmov	r0, r1, d9
 80085ea:	f7f8 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d050      	beq.n	8008694 <_dtoa_r+0x244>
 80085f2:	9b00      	ldr	r3, [sp, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	2300      	movs	r3, #0
 80085fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80085fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085fe:	1b5d      	subs	r5, r3, r5
 8008600:	1e6b      	subs	r3, r5, #1
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	bf45      	ittet	mi
 8008606:	f1c5 0301 	rsbmi	r3, r5, #1
 800860a:	9304      	strmi	r3, [sp, #16]
 800860c:	2300      	movpl	r3, #0
 800860e:	2300      	movmi	r3, #0
 8008610:	bf4c      	ite	mi
 8008612:	9305      	strmi	r3, [sp, #20]
 8008614:	9304      	strpl	r3, [sp, #16]
 8008616:	9b00      	ldr	r3, [sp, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	db3d      	blt.n	8008698 <_dtoa_r+0x248>
 800861c:	9b05      	ldr	r3, [sp, #20]
 800861e:	9a00      	ldr	r2, [sp, #0]
 8008620:	920a      	str	r2, [sp, #40]	; 0x28
 8008622:	4413      	add	r3, r2
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	2300      	movs	r3, #0
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	9b06      	ldr	r3, [sp, #24]
 800862c:	2b09      	cmp	r3, #9
 800862e:	f200 8089 	bhi.w	8008744 <_dtoa_r+0x2f4>
 8008632:	2b05      	cmp	r3, #5
 8008634:	bfc4      	itt	gt
 8008636:	3b04      	subgt	r3, #4
 8008638:	9306      	strgt	r3, [sp, #24]
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	f1a3 0302 	sub.w	r3, r3, #2
 8008640:	bfcc      	ite	gt
 8008642:	2500      	movgt	r5, #0
 8008644:	2501      	movle	r5, #1
 8008646:	2b03      	cmp	r3, #3
 8008648:	f200 8087 	bhi.w	800875a <_dtoa_r+0x30a>
 800864c:	e8df f003 	tbb	[pc, r3]
 8008650:	59383a2d 	.word	0x59383a2d
 8008654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008658:	441d      	add	r5, r3
 800865a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800865e:	2b20      	cmp	r3, #32
 8008660:	bfc1      	itttt	gt
 8008662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800866a:	fa0b f303 	lslgt.w	r3, fp, r3
 800866e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008672:	bfda      	itte	le
 8008674:	f1c3 0320 	rsble	r3, r3, #32
 8008678:	fa06 f003 	lslle.w	r0, r6, r3
 800867c:	4318      	orrgt	r0, r3
 800867e:	f7f7 ff61 	bl	8000544 <__aeabi_ui2d>
 8008682:	2301      	movs	r3, #1
 8008684:	4606      	mov	r6, r0
 8008686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800868a:	3d01      	subs	r5, #1
 800868c:	930e      	str	r3, [sp, #56]	; 0x38
 800868e:	e76a      	b.n	8008566 <_dtoa_r+0x116>
 8008690:	2301      	movs	r3, #1
 8008692:	e7b2      	b.n	80085fa <_dtoa_r+0x1aa>
 8008694:	900b      	str	r0, [sp, #44]	; 0x2c
 8008696:	e7b1      	b.n	80085fc <_dtoa_r+0x1ac>
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	9a00      	ldr	r2, [sp, #0]
 800869c:	1a9b      	subs	r3, r3, r2
 800869e:	9304      	str	r3, [sp, #16]
 80086a0:	4253      	negs	r3, r2
 80086a2:	9307      	str	r3, [sp, #28]
 80086a4:	2300      	movs	r3, #0
 80086a6:	930a      	str	r3, [sp, #40]	; 0x28
 80086a8:	e7bf      	b.n	800862a <_dtoa_r+0x1da>
 80086aa:	2300      	movs	r3, #0
 80086ac:	9308      	str	r3, [sp, #32]
 80086ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dc55      	bgt.n	8008760 <_dtoa_r+0x310>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086ba:	461a      	mov	r2, r3
 80086bc:	9209      	str	r2, [sp, #36]	; 0x24
 80086be:	e00c      	b.n	80086da <_dtoa_r+0x28a>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e7f3      	b.n	80086ac <_dtoa_r+0x25c>
 80086c4:	2300      	movs	r3, #0
 80086c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c8:	9308      	str	r3, [sp, #32]
 80086ca:	9b00      	ldr	r3, [sp, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	3301      	adds	r3, #1
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	bfb8      	it	lt
 80086d8:	2301      	movlt	r3, #1
 80086da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086dc:	2200      	movs	r2, #0
 80086de:	6042      	str	r2, [r0, #4]
 80086e0:	2204      	movs	r2, #4
 80086e2:	f102 0614 	add.w	r6, r2, #20
 80086e6:	429e      	cmp	r6, r3
 80086e8:	6841      	ldr	r1, [r0, #4]
 80086ea:	d93d      	bls.n	8008768 <_dtoa_r+0x318>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f001 f84b 	bl	8009788 <_Balloc>
 80086f2:	9001      	str	r0, [sp, #4]
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d13b      	bne.n	8008770 <_dtoa_r+0x320>
 80086f8:	4b11      	ldr	r3, [pc, #68]	; (8008740 <_dtoa_r+0x2f0>)
 80086fa:	4602      	mov	r2, r0
 80086fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008700:	e6c0      	b.n	8008484 <_dtoa_r+0x34>
 8008702:	2301      	movs	r3, #1
 8008704:	e7df      	b.n	80086c6 <_dtoa_r+0x276>
 8008706:	bf00      	nop
 8008708:	636f4361 	.word	0x636f4361
 800870c:	3fd287a7 	.word	0x3fd287a7
 8008710:	8b60c8b3 	.word	0x8b60c8b3
 8008714:	3fc68a28 	.word	0x3fc68a28
 8008718:	509f79fb 	.word	0x509f79fb
 800871c:	3fd34413 	.word	0x3fd34413
 8008720:	0800b25e 	.word	0x0800b25e
 8008724:	0800b275 	.word	0x0800b275
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	0800b25a 	.word	0x0800b25a
 8008730:	0800b251 	.word	0x0800b251
 8008734:	0800b0d5 	.word	0x0800b0d5
 8008738:	3ff80000 	.word	0x3ff80000
 800873c:	0800b3e0 	.word	0x0800b3e0
 8008740:	0800b2d0 	.word	0x0800b2d0
 8008744:	2501      	movs	r5, #1
 8008746:	2300      	movs	r3, #0
 8008748:	9306      	str	r3, [sp, #24]
 800874a:	9508      	str	r5, [sp, #32]
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	2312      	movs	r3, #18
 8008758:	e7b0      	b.n	80086bc <_dtoa_r+0x26c>
 800875a:	2301      	movs	r3, #1
 800875c:	9308      	str	r3, [sp, #32]
 800875e:	e7f5      	b.n	800874c <_dtoa_r+0x2fc>
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008766:	e7b8      	b.n	80086da <_dtoa_r+0x28a>
 8008768:	3101      	adds	r1, #1
 800876a:	6041      	str	r1, [r0, #4]
 800876c:	0052      	lsls	r2, r2, #1
 800876e:	e7b8      	b.n	80086e2 <_dtoa_r+0x292>
 8008770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	2b0e      	cmp	r3, #14
 800877a:	f200 809d 	bhi.w	80088b8 <_dtoa_r+0x468>
 800877e:	2d00      	cmp	r5, #0
 8008780:	f000 809a 	beq.w	80088b8 <_dtoa_r+0x468>
 8008784:	9b00      	ldr	r3, [sp, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	dd32      	ble.n	80087f0 <_dtoa_r+0x3a0>
 800878a:	4ab7      	ldr	r2, [pc, #732]	; (8008a68 <_dtoa_r+0x618>)
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008798:	9b00      	ldr	r3, [sp, #0]
 800879a:	05d8      	lsls	r0, r3, #23
 800879c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80087a0:	d516      	bpl.n	80087d0 <_dtoa_r+0x380>
 80087a2:	4bb2      	ldr	r3, [pc, #712]	; (8008a6c <_dtoa_r+0x61c>)
 80087a4:	ec51 0b19 	vmov	r0, r1, d9
 80087a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087ac:	f7f8 f86e 	bl	800088c <__aeabi_ddiv>
 80087b0:	f007 070f 	and.w	r7, r7, #15
 80087b4:	4682      	mov	sl, r0
 80087b6:	468b      	mov	fp, r1
 80087b8:	2503      	movs	r5, #3
 80087ba:	4eac      	ldr	r6, [pc, #688]	; (8008a6c <_dtoa_r+0x61c>)
 80087bc:	b957      	cbnz	r7, 80087d4 <_dtoa_r+0x384>
 80087be:	4642      	mov	r2, r8
 80087c0:	464b      	mov	r3, r9
 80087c2:	4650      	mov	r0, sl
 80087c4:	4659      	mov	r1, fp
 80087c6:	f7f8 f861 	bl	800088c <__aeabi_ddiv>
 80087ca:	4682      	mov	sl, r0
 80087cc:	468b      	mov	fp, r1
 80087ce:	e028      	b.n	8008822 <_dtoa_r+0x3d2>
 80087d0:	2502      	movs	r5, #2
 80087d2:	e7f2      	b.n	80087ba <_dtoa_r+0x36a>
 80087d4:	07f9      	lsls	r1, r7, #31
 80087d6:	d508      	bpl.n	80087ea <_dtoa_r+0x39a>
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087e0:	f7f7 ff2a 	bl	8000638 <__aeabi_dmul>
 80087e4:	3501      	adds	r5, #1
 80087e6:	4680      	mov	r8, r0
 80087e8:	4689      	mov	r9, r1
 80087ea:	107f      	asrs	r7, r7, #1
 80087ec:	3608      	adds	r6, #8
 80087ee:	e7e5      	b.n	80087bc <_dtoa_r+0x36c>
 80087f0:	f000 809b 	beq.w	800892a <_dtoa_r+0x4da>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	4f9d      	ldr	r7, [pc, #628]	; (8008a6c <_dtoa_r+0x61c>)
 80087f8:	425e      	negs	r6, r3
 80087fa:	4b9b      	ldr	r3, [pc, #620]	; (8008a68 <_dtoa_r+0x618>)
 80087fc:	f006 020f 	and.w	r2, r6, #15
 8008800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	ec51 0b19 	vmov	r0, r1, d9
 800880c:	f7f7 ff14 	bl	8000638 <__aeabi_dmul>
 8008810:	1136      	asrs	r6, r6, #4
 8008812:	4682      	mov	sl, r0
 8008814:	468b      	mov	fp, r1
 8008816:	2300      	movs	r3, #0
 8008818:	2502      	movs	r5, #2
 800881a:	2e00      	cmp	r6, #0
 800881c:	d17a      	bne.n	8008914 <_dtoa_r+0x4c4>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1d3      	bne.n	80087ca <_dtoa_r+0x37a>
 8008822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8082 	beq.w	800892e <_dtoa_r+0x4de>
 800882a:	4b91      	ldr	r3, [pc, #580]	; (8008a70 <_dtoa_r+0x620>)
 800882c:	2200      	movs	r2, #0
 800882e:	4650      	mov	r0, sl
 8008830:	4659      	mov	r1, fp
 8008832:	f7f8 f973 	bl	8000b1c <__aeabi_dcmplt>
 8008836:	2800      	cmp	r0, #0
 8008838:	d079      	beq.n	800892e <_dtoa_r+0x4de>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d076      	beq.n	800892e <_dtoa_r+0x4de>
 8008840:	9b02      	ldr	r3, [sp, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd36      	ble.n	80088b4 <_dtoa_r+0x464>
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	4650      	mov	r0, sl
 800884a:	4659      	mov	r1, fp
 800884c:	1e5f      	subs	r7, r3, #1
 800884e:	2200      	movs	r2, #0
 8008850:	4b88      	ldr	r3, [pc, #544]	; (8008a74 <_dtoa_r+0x624>)
 8008852:	f7f7 fef1 	bl	8000638 <__aeabi_dmul>
 8008856:	9e02      	ldr	r6, [sp, #8]
 8008858:	4682      	mov	sl, r0
 800885a:	468b      	mov	fp, r1
 800885c:	3501      	adds	r5, #1
 800885e:	4628      	mov	r0, r5
 8008860:	f7f7 fe80 	bl	8000564 <__aeabi_i2d>
 8008864:	4652      	mov	r2, sl
 8008866:	465b      	mov	r3, fp
 8008868:	f7f7 fee6 	bl	8000638 <__aeabi_dmul>
 800886c:	4b82      	ldr	r3, [pc, #520]	; (8008a78 <_dtoa_r+0x628>)
 800886e:	2200      	movs	r2, #0
 8008870:	f7f7 fd2c 	bl	80002cc <__adddf3>
 8008874:	46d0      	mov	r8, sl
 8008876:	46d9      	mov	r9, fp
 8008878:	4682      	mov	sl, r0
 800887a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800887e:	2e00      	cmp	r6, #0
 8008880:	d158      	bne.n	8008934 <_dtoa_r+0x4e4>
 8008882:	4b7e      	ldr	r3, [pc, #504]	; (8008a7c <_dtoa_r+0x62c>)
 8008884:	2200      	movs	r2, #0
 8008886:	4640      	mov	r0, r8
 8008888:	4649      	mov	r1, r9
 800888a:	f7f7 fd1d 	bl	80002c8 <__aeabi_dsub>
 800888e:	4652      	mov	r2, sl
 8008890:	465b      	mov	r3, fp
 8008892:	4680      	mov	r8, r0
 8008894:	4689      	mov	r9, r1
 8008896:	f7f8 f95f 	bl	8000b58 <__aeabi_dcmpgt>
 800889a:	2800      	cmp	r0, #0
 800889c:	f040 8295 	bne.w	8008dca <_dtoa_r+0x97a>
 80088a0:	4652      	mov	r2, sl
 80088a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f8 f937 	bl	8000b1c <__aeabi_dcmplt>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f040 8289 	bne.w	8008dc6 <_dtoa_r+0x976>
 80088b4:	ec5b ab19 	vmov	sl, fp, d9
 80088b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f2c0 8148 	blt.w	8008b50 <_dtoa_r+0x700>
 80088c0:	9a00      	ldr	r2, [sp, #0]
 80088c2:	2a0e      	cmp	r2, #14
 80088c4:	f300 8144 	bgt.w	8008b50 <_dtoa_r+0x700>
 80088c8:	4b67      	ldr	r3, [pc, #412]	; (8008a68 <_dtoa_r+0x618>)
 80088ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f280 80d5 	bge.w	8008a84 <_dtoa_r+0x634>
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f300 80d1 	bgt.w	8008a84 <_dtoa_r+0x634>
 80088e2:	f040 826f 	bne.w	8008dc4 <_dtoa_r+0x974>
 80088e6:	4b65      	ldr	r3, [pc, #404]	; (8008a7c <_dtoa_r+0x62c>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fea3 	bl	8000638 <__aeabi_dmul>
 80088f2:	4652      	mov	r2, sl
 80088f4:	465b      	mov	r3, fp
 80088f6:	f7f8 f925 	bl	8000b44 <__aeabi_dcmpge>
 80088fa:	9e03      	ldr	r6, [sp, #12]
 80088fc:	4637      	mov	r7, r6
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 8245 	bne.w	8008d8e <_dtoa_r+0x93e>
 8008904:	9d01      	ldr	r5, [sp, #4]
 8008906:	2331      	movs	r3, #49	; 0x31
 8008908:	f805 3b01 	strb.w	r3, [r5], #1
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	e240      	b.n	8008d96 <_dtoa_r+0x946>
 8008914:	07f2      	lsls	r2, r6, #31
 8008916:	d505      	bpl.n	8008924 <_dtoa_r+0x4d4>
 8008918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891c:	f7f7 fe8c 	bl	8000638 <__aeabi_dmul>
 8008920:	3501      	adds	r5, #1
 8008922:	2301      	movs	r3, #1
 8008924:	1076      	asrs	r6, r6, #1
 8008926:	3708      	adds	r7, #8
 8008928:	e777      	b.n	800881a <_dtoa_r+0x3ca>
 800892a:	2502      	movs	r5, #2
 800892c:	e779      	b.n	8008822 <_dtoa_r+0x3d2>
 800892e:	9f00      	ldr	r7, [sp, #0]
 8008930:	9e03      	ldr	r6, [sp, #12]
 8008932:	e794      	b.n	800885e <_dtoa_r+0x40e>
 8008934:	9901      	ldr	r1, [sp, #4]
 8008936:	4b4c      	ldr	r3, [pc, #304]	; (8008a68 <_dtoa_r+0x618>)
 8008938:	4431      	add	r1, r6
 800893a:	910d      	str	r1, [sp, #52]	; 0x34
 800893c:	9908      	ldr	r1, [sp, #32]
 800893e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008946:	2900      	cmp	r1, #0
 8008948:	d043      	beq.n	80089d2 <_dtoa_r+0x582>
 800894a:	494d      	ldr	r1, [pc, #308]	; (8008a80 <_dtoa_r+0x630>)
 800894c:	2000      	movs	r0, #0
 800894e:	f7f7 ff9d 	bl	800088c <__aeabi_ddiv>
 8008952:	4652      	mov	r2, sl
 8008954:	465b      	mov	r3, fp
 8008956:	f7f7 fcb7 	bl	80002c8 <__aeabi_dsub>
 800895a:	9d01      	ldr	r5, [sp, #4]
 800895c:	4682      	mov	sl, r0
 800895e:	468b      	mov	fp, r1
 8008960:	4649      	mov	r1, r9
 8008962:	4640      	mov	r0, r8
 8008964:	f7f8 f918 	bl	8000b98 <__aeabi_d2iz>
 8008968:	4606      	mov	r6, r0
 800896a:	f7f7 fdfb 	bl	8000564 <__aeabi_i2d>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	f7f7 fca7 	bl	80002c8 <__aeabi_dsub>
 800897a:	3630      	adds	r6, #48	; 0x30
 800897c:	f805 6b01 	strb.w	r6, [r5], #1
 8008980:	4652      	mov	r2, sl
 8008982:	465b      	mov	r3, fp
 8008984:	4680      	mov	r8, r0
 8008986:	4689      	mov	r9, r1
 8008988:	f7f8 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	d163      	bne.n	8008a58 <_dtoa_r+0x608>
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	4936      	ldr	r1, [pc, #216]	; (8008a70 <_dtoa_r+0x620>)
 8008996:	2000      	movs	r0, #0
 8008998:	f7f7 fc96 	bl	80002c8 <__aeabi_dsub>
 800899c:	4652      	mov	r2, sl
 800899e:	465b      	mov	r3, fp
 80089a0:	f7f8 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f040 80b5 	bne.w	8008b14 <_dtoa_r+0x6c4>
 80089aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ac:	429d      	cmp	r5, r3
 80089ae:	d081      	beq.n	80088b4 <_dtoa_r+0x464>
 80089b0:	4b30      	ldr	r3, [pc, #192]	; (8008a74 <_dtoa_r+0x624>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	4650      	mov	r0, sl
 80089b6:	4659      	mov	r1, fp
 80089b8:	f7f7 fe3e 	bl	8000638 <__aeabi_dmul>
 80089bc:	4b2d      	ldr	r3, [pc, #180]	; (8008a74 <_dtoa_r+0x624>)
 80089be:	4682      	mov	sl, r0
 80089c0:	468b      	mov	fp, r1
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	2200      	movs	r2, #0
 80089c8:	f7f7 fe36 	bl	8000638 <__aeabi_dmul>
 80089cc:	4680      	mov	r8, r0
 80089ce:	4689      	mov	r9, r1
 80089d0:	e7c6      	b.n	8008960 <_dtoa_r+0x510>
 80089d2:	4650      	mov	r0, sl
 80089d4:	4659      	mov	r1, fp
 80089d6:	f7f7 fe2f 	bl	8000638 <__aeabi_dmul>
 80089da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089dc:	9d01      	ldr	r5, [sp, #4]
 80089de:	930f      	str	r3, [sp, #60]	; 0x3c
 80089e0:	4682      	mov	sl, r0
 80089e2:	468b      	mov	fp, r1
 80089e4:	4649      	mov	r1, r9
 80089e6:	4640      	mov	r0, r8
 80089e8:	f7f8 f8d6 	bl	8000b98 <__aeabi_d2iz>
 80089ec:	4606      	mov	r6, r0
 80089ee:	f7f7 fdb9 	bl	8000564 <__aeabi_i2d>
 80089f2:	3630      	adds	r6, #48	; 0x30
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4640      	mov	r0, r8
 80089fa:	4649      	mov	r1, r9
 80089fc:	f7f7 fc64 	bl	80002c8 <__aeabi_dsub>
 8008a00:	f805 6b01 	strb.w	r6, [r5], #1
 8008a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a06:	429d      	cmp	r5, r3
 8008a08:	4680      	mov	r8, r0
 8008a0a:	4689      	mov	r9, r1
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	d124      	bne.n	8008a5c <_dtoa_r+0x60c>
 8008a12:	4b1b      	ldr	r3, [pc, #108]	; (8008a80 <_dtoa_r+0x630>)
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	f7f7 fc58 	bl	80002cc <__adddf3>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4640      	mov	r0, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	f7f8 f898 	bl	8000b58 <__aeabi_dcmpgt>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d173      	bne.n	8008b14 <_dtoa_r+0x6c4>
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	465b      	mov	r3, fp
 8008a30:	4913      	ldr	r1, [pc, #76]	; (8008a80 <_dtoa_r+0x630>)
 8008a32:	2000      	movs	r0, #0
 8008a34:	f7f7 fc48 	bl	80002c8 <__aeabi_dsub>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f7f8 f86c 	bl	8000b1c <__aeabi_dcmplt>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43f af35 	beq.w	80088b4 <_dtoa_r+0x464>
 8008a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a4c:	1e6b      	subs	r3, r5, #1
 8008a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a54:	2b30      	cmp	r3, #48	; 0x30
 8008a56:	d0f8      	beq.n	8008a4a <_dtoa_r+0x5fa>
 8008a58:	9700      	str	r7, [sp, #0]
 8008a5a:	e049      	b.n	8008af0 <_dtoa_r+0x6a0>
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <_dtoa_r+0x624>)
 8008a5e:	f7f7 fdeb 	bl	8000638 <__aeabi_dmul>
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	e7bd      	b.n	80089e4 <_dtoa_r+0x594>
 8008a68:	0800b3e0 	.word	0x0800b3e0
 8008a6c:	0800b3b8 	.word	0x0800b3b8
 8008a70:	3ff00000 	.word	0x3ff00000
 8008a74:	40240000 	.word	0x40240000
 8008a78:	401c0000 	.word	0x401c0000
 8008a7c:	40140000 	.word	0x40140000
 8008a80:	3fe00000 	.word	0x3fe00000
 8008a84:	9d01      	ldr	r5, [sp, #4]
 8008a86:	4656      	mov	r6, sl
 8008a88:	465f      	mov	r7, fp
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fefb 	bl	800088c <__aeabi_ddiv>
 8008a96:	f7f8 f87f 	bl	8000b98 <__aeabi_d2iz>
 8008a9a:	4682      	mov	sl, r0
 8008a9c:	f7f7 fd62 	bl	8000564 <__aeabi_i2d>
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008ab4:	f7f7 fc08 	bl	80002c8 <__aeabi_dsub>
 8008ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8008abc:	9e01      	ldr	r6, [sp, #4]
 8008abe:	9f03      	ldr	r7, [sp, #12]
 8008ac0:	1bae      	subs	r6, r5, r6
 8008ac2:	42b7      	cmp	r7, r6
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	d135      	bne.n	8008b36 <_dtoa_r+0x6e6>
 8008aca:	f7f7 fbff 	bl	80002cc <__adddf3>
 8008ace:	4642      	mov	r2, r8
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	f7f8 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8008ada:	b9d0      	cbnz	r0, 8008b12 <_dtoa_r+0x6c2>
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f8 f810 	bl	8000b08 <__aeabi_dcmpeq>
 8008ae8:	b110      	cbz	r0, 8008af0 <_dtoa_r+0x6a0>
 8008aea:	f01a 0f01 	tst.w	sl, #1
 8008aee:	d110      	bne.n	8008b12 <_dtoa_r+0x6c2>
 8008af0:	4620      	mov	r0, r4
 8008af2:	ee18 1a10 	vmov	r1, s16
 8008af6:	f000 fe87 	bl	8009808 <_Bfree>
 8008afa:	2300      	movs	r3, #0
 8008afc:	9800      	ldr	r0, [sp, #0]
 8008afe:	702b      	strb	r3, [r5, #0]
 8008b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b02:	3001      	adds	r0, #1
 8008b04:	6018      	str	r0, [r3, #0]
 8008b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f43f acf1 	beq.w	80084f0 <_dtoa_r+0xa0>
 8008b0e:	601d      	str	r5, [r3, #0]
 8008b10:	e4ee      	b.n	80084f0 <_dtoa_r+0xa0>
 8008b12:	9f00      	ldr	r7, [sp, #0]
 8008b14:	462b      	mov	r3, r5
 8008b16:	461d      	mov	r5, r3
 8008b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b1c:	2a39      	cmp	r2, #57	; 0x39
 8008b1e:	d106      	bne.n	8008b2e <_dtoa_r+0x6de>
 8008b20:	9a01      	ldr	r2, [sp, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d1f7      	bne.n	8008b16 <_dtoa_r+0x6c6>
 8008b26:	9901      	ldr	r1, [sp, #4]
 8008b28:	2230      	movs	r2, #48	; 0x30
 8008b2a:	3701      	adds	r7, #1
 8008b2c:	700a      	strb	r2, [r1, #0]
 8008b2e:	781a      	ldrb	r2, [r3, #0]
 8008b30:	3201      	adds	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e790      	b.n	8008a58 <_dtoa_r+0x608>
 8008b36:	4ba6      	ldr	r3, [pc, #664]	; (8008dd0 <_dtoa_r+0x980>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f7f7 fd7d 	bl	8000638 <__aeabi_dmul>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	f7f7 ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d09d      	beq.n	8008a8a <_dtoa_r+0x63a>
 8008b4e:	e7cf      	b.n	8008af0 <_dtoa_r+0x6a0>
 8008b50:	9a08      	ldr	r2, [sp, #32]
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	f000 80d7 	beq.w	8008d06 <_dtoa_r+0x8b6>
 8008b58:	9a06      	ldr	r2, [sp, #24]
 8008b5a:	2a01      	cmp	r2, #1
 8008b5c:	f300 80ba 	bgt.w	8008cd4 <_dtoa_r+0x884>
 8008b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	f000 80b2 	beq.w	8008ccc <_dtoa_r+0x87c>
 8008b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b6c:	9e07      	ldr	r6, [sp, #28]
 8008b6e:	9d04      	ldr	r5, [sp, #16]
 8008b70:	9a04      	ldr	r2, [sp, #16]
 8008b72:	441a      	add	r2, r3
 8008b74:	9204      	str	r2, [sp, #16]
 8008b76:	9a05      	ldr	r2, [sp, #20]
 8008b78:	2101      	movs	r1, #1
 8008b7a:	441a      	add	r2, r3
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	9205      	str	r2, [sp, #20]
 8008b80:	f000 ff44 	bl	8009a0c <__i2b>
 8008b84:	4607      	mov	r7, r0
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	dd0c      	ble.n	8008ba4 <_dtoa_r+0x754>
 8008b8a:	9b05      	ldr	r3, [sp, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd09      	ble.n	8008ba4 <_dtoa_r+0x754>
 8008b90:	42ab      	cmp	r3, r5
 8008b92:	9a04      	ldr	r2, [sp, #16]
 8008b94:	bfa8      	it	ge
 8008b96:	462b      	movge	r3, r5
 8008b98:	1ad2      	subs	r2, r2, r3
 8008b9a:	9204      	str	r2, [sp, #16]
 8008b9c:	9a05      	ldr	r2, [sp, #20]
 8008b9e:	1aed      	subs	r5, r5, r3
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	b31b      	cbz	r3, 8008bf0 <_dtoa_r+0x7a0>
 8008ba8:	9b08      	ldr	r3, [sp, #32]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80af 	beq.w	8008d0e <_dtoa_r+0x8be>
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd13      	ble.n	8008bdc <_dtoa_r+0x78c>
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4632      	mov	r2, r6
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 ffe7 	bl	8009b8c <__pow5mult>
 8008bbe:	ee18 2a10 	vmov	r2, s16
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 ff36 	bl	8009a38 <__multiply>
 8008bcc:	ee18 1a10 	vmov	r1, s16
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fe18 	bl	8009808 <_Bfree>
 8008bd8:	ee08 8a10 	vmov	s16, r8
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	1b9a      	subs	r2, r3, r6
 8008be0:	d006      	beq.n	8008bf0 <_dtoa_r+0x7a0>
 8008be2:	ee18 1a10 	vmov	r1, s16
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 ffd0 	bl	8009b8c <__pow5mult>
 8008bec:	ee08 0a10 	vmov	s16, r0
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 ff0a 	bl	8009a0c <__i2b>
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	f340 8088 	ble.w	8008d12 <_dtoa_r+0x8c2>
 8008c02:	461a      	mov	r2, r3
 8008c04:	4601      	mov	r1, r0
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 ffc0 	bl	8009b8c <__pow5mult>
 8008c0c:	9b06      	ldr	r3, [sp, #24]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	4606      	mov	r6, r0
 8008c12:	f340 8081 	ble.w	8008d18 <_dtoa_r+0x8c8>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	6933      	ldr	r3, [r6, #16]
 8008c1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c20:	6918      	ldr	r0, [r3, #16]
 8008c22:	f000 fea3 	bl	800996c <__hi0bits>
 8008c26:	f1c0 0020 	rsb	r0, r0, #32
 8008c2a:	9b05      	ldr	r3, [sp, #20]
 8008c2c:	4418      	add	r0, r3
 8008c2e:	f010 001f 	ands.w	r0, r0, #31
 8008c32:	f000 8092 	beq.w	8008d5a <_dtoa_r+0x90a>
 8008c36:	f1c0 0320 	rsb	r3, r0, #32
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	f340 808a 	ble.w	8008d54 <_dtoa_r+0x904>
 8008c40:	f1c0 001c 	rsb	r0, r0, #28
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	4403      	add	r3, r0
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	4403      	add	r3, r0
 8008c4e:	4405      	add	r5, r0
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	9b04      	ldr	r3, [sp, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd07      	ble.n	8008c68 <_dtoa_r+0x818>
 8008c58:	ee18 1a10 	vmov	r1, s16
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 ffee 	bl	8009c40 <__lshift>
 8008c64:	ee08 0a10 	vmov	s16, r0
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dd05      	ble.n	8008c7a <_dtoa_r+0x82a>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	461a      	mov	r2, r3
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 ffe4 	bl	8009c40 <__lshift>
 8008c78:	4606      	mov	r6, r0
 8008c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d06e      	beq.n	8008d5e <_dtoa_r+0x90e>
 8008c80:	ee18 0a10 	vmov	r0, s16
 8008c84:	4631      	mov	r1, r6
 8008c86:	f001 f84b 	bl	8009d20 <__mcmp>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	da67      	bge.n	8008d5e <_dtoa_r+0x90e>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	ee18 1a10 	vmov	r1, s16
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	220a      	movs	r2, #10
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fdd5 	bl	800984c <__multadd>
 8008ca2:	9b08      	ldr	r3, [sp, #32]
 8008ca4:	ee08 0a10 	vmov	s16, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 81b1 	beq.w	8009010 <_dtoa_r+0xbc0>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fdc9 	bl	800984c <__multadd>
 8008cba:	9b02      	ldr	r3, [sp, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	f300 808e 	bgt.w	8008de0 <_dtoa_r+0x990>
 8008cc4:	9b06      	ldr	r3, [sp, #24]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	dc51      	bgt.n	8008d6e <_dtoa_r+0x91e>
 8008cca:	e089      	b.n	8008de0 <_dtoa_r+0x990>
 8008ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cd2:	e74b      	b.n	8008b6c <_dtoa_r+0x71c>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1e5e      	subs	r6, r3, #1
 8008cd8:	9b07      	ldr	r3, [sp, #28]
 8008cda:	42b3      	cmp	r3, r6
 8008cdc:	bfbf      	itttt	lt
 8008cde:	9b07      	ldrlt	r3, [sp, #28]
 8008ce0:	9607      	strlt	r6, [sp, #28]
 8008ce2:	1af2      	sublt	r2, r6, r3
 8008ce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ce6:	bfb6      	itet	lt
 8008ce8:	189b      	addlt	r3, r3, r2
 8008cea:	1b9e      	subge	r6, r3, r6
 8008cec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	bfb8      	it	lt
 8008cf2:	2600      	movlt	r6, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfb7      	itett	lt
 8008cf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008cfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d00:	1a9d      	sublt	r5, r3, r2
 8008d02:	2300      	movlt	r3, #0
 8008d04:	e734      	b.n	8008b70 <_dtoa_r+0x720>
 8008d06:	9e07      	ldr	r6, [sp, #28]
 8008d08:	9d04      	ldr	r5, [sp, #16]
 8008d0a:	9f08      	ldr	r7, [sp, #32]
 8008d0c:	e73b      	b.n	8008b86 <_dtoa_r+0x736>
 8008d0e:	9a07      	ldr	r2, [sp, #28]
 8008d10:	e767      	b.n	8008be2 <_dtoa_r+0x792>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	dc18      	bgt.n	8008d4a <_dtoa_r+0x8fa>
 8008d18:	f1ba 0f00 	cmp.w	sl, #0
 8008d1c:	d115      	bne.n	8008d4a <_dtoa_r+0x8fa>
 8008d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d22:	b993      	cbnz	r3, 8008d4a <_dtoa_r+0x8fa>
 8008d24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d28:	0d1b      	lsrs	r3, r3, #20
 8008d2a:	051b      	lsls	r3, r3, #20
 8008d2c:	b183      	cbz	r3, 8008d50 <_dtoa_r+0x900>
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	9b05      	ldr	r3, [sp, #20]
 8008d36:	3301      	adds	r3, #1
 8008d38:	9305      	str	r3, [sp, #20]
 8008d3a:	f04f 0801 	mov.w	r8, #1
 8008d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f47f af6a 	bne.w	8008c1a <_dtoa_r+0x7ca>
 8008d46:	2001      	movs	r0, #1
 8008d48:	e76f      	b.n	8008c2a <_dtoa_r+0x7da>
 8008d4a:	f04f 0800 	mov.w	r8, #0
 8008d4e:	e7f6      	b.n	8008d3e <_dtoa_r+0x8ee>
 8008d50:	4698      	mov	r8, r3
 8008d52:	e7f4      	b.n	8008d3e <_dtoa_r+0x8ee>
 8008d54:	f43f af7d 	beq.w	8008c52 <_dtoa_r+0x802>
 8008d58:	4618      	mov	r0, r3
 8008d5a:	301c      	adds	r0, #28
 8008d5c:	e772      	b.n	8008c44 <_dtoa_r+0x7f4>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dc37      	bgt.n	8008dd4 <_dtoa_r+0x984>
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	dd34      	ble.n	8008dd4 <_dtoa_r+0x984>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	9302      	str	r3, [sp, #8]
 8008d6e:	9b02      	ldr	r3, [sp, #8]
 8008d70:	b96b      	cbnz	r3, 8008d8e <_dtoa_r+0x93e>
 8008d72:	4631      	mov	r1, r6
 8008d74:	2205      	movs	r2, #5
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 fd68 	bl	800984c <__multadd>
 8008d7c:	4601      	mov	r1, r0
 8008d7e:	4606      	mov	r6, r0
 8008d80:	ee18 0a10 	vmov	r0, s16
 8008d84:	f000 ffcc 	bl	8009d20 <__mcmp>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f73f adbb 	bgt.w	8008904 <_dtoa_r+0x4b4>
 8008d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d90:	9d01      	ldr	r5, [sp, #4]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fd33 	bl	8009808 <_Bfree>
 8008da2:	2f00      	cmp	r7, #0
 8008da4:	f43f aea4 	beq.w	8008af0 <_dtoa_r+0x6a0>
 8008da8:	f1b8 0f00 	cmp.w	r8, #0
 8008dac:	d005      	beq.n	8008dba <_dtoa_r+0x96a>
 8008dae:	45b8      	cmp	r8, r7
 8008db0:	d003      	beq.n	8008dba <_dtoa_r+0x96a>
 8008db2:	4641      	mov	r1, r8
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fd27 	bl	8009808 <_Bfree>
 8008dba:	4639      	mov	r1, r7
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fd23 	bl	8009808 <_Bfree>
 8008dc2:	e695      	b.n	8008af0 <_dtoa_r+0x6a0>
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	4637      	mov	r7, r6
 8008dc8:	e7e1      	b.n	8008d8e <_dtoa_r+0x93e>
 8008dca:	9700      	str	r7, [sp, #0]
 8008dcc:	4637      	mov	r7, r6
 8008dce:	e599      	b.n	8008904 <_dtoa_r+0x4b4>
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	9b08      	ldr	r3, [sp, #32]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 80ca 	beq.w	8008f70 <_dtoa_r+0xb20>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	dd05      	ble.n	8008df0 <_dtoa_r+0x9a0>
 8008de4:	4639      	mov	r1, r7
 8008de6:	462a      	mov	r2, r5
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 ff29 	bl	8009c40 <__lshift>
 8008dee:	4607      	mov	r7, r0
 8008df0:	f1b8 0f00 	cmp.w	r8, #0
 8008df4:	d05b      	beq.n	8008eae <_dtoa_r+0xa5e>
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fcc5 	bl	8009788 <_Balloc>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b928      	cbnz	r0, 8008e0e <_dtoa_r+0x9be>
 8008e02:	4b87      	ldr	r3, [pc, #540]	; (8009020 <_dtoa_r+0xbd0>)
 8008e04:	4602      	mov	r2, r0
 8008e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e0a:	f7ff bb3b 	b.w	8008484 <_dtoa_r+0x34>
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	3202      	adds	r2, #2
 8008e12:	0092      	lsls	r2, r2, #2
 8008e14:	f107 010c 	add.w	r1, r7, #12
 8008e18:	300c      	adds	r0, #12
 8008e1a:	f000 fca7 	bl	800976c <memcpy>
 8008e1e:	2201      	movs	r2, #1
 8008e20:	4629      	mov	r1, r5
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 ff0c 	bl	8009c40 <__lshift>
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	f103 0901 	add.w	r9, r3, #1
 8008e2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	f00a 0301 	and.w	r3, sl, #1
 8008e3a:	46b8      	mov	r8, r7
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	4607      	mov	r7, r0
 8008e40:	4631      	mov	r1, r6
 8008e42:	ee18 0a10 	vmov	r0, s16
 8008e46:	f7ff fa75 	bl	8008334 <quorem>
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	9002      	str	r0, [sp, #8]
 8008e4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e52:	ee18 0a10 	vmov	r0, s16
 8008e56:	f000 ff63 	bl	8009d20 <__mcmp>
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	9003      	str	r0, [sp, #12]
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 ff79 	bl	8009d58 <__mdiff>
 8008e66:	68c2      	ldr	r2, [r0, #12]
 8008e68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	bb02      	cbnz	r2, 8008eb2 <_dtoa_r+0xa62>
 8008e70:	4601      	mov	r1, r0
 8008e72:	ee18 0a10 	vmov	r0, s16
 8008e76:	f000 ff53 	bl	8009d20 <__mcmp>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4620      	mov	r0, r4
 8008e80:	9207      	str	r2, [sp, #28]
 8008e82:	f000 fcc1 	bl	8009808 <_Bfree>
 8008e86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e8a:	ea43 0102 	orr.w	r1, r3, r2
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	430b      	orrs	r3, r1
 8008e92:	464d      	mov	r5, r9
 8008e94:	d10f      	bne.n	8008eb6 <_dtoa_r+0xa66>
 8008e96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e9a:	d02a      	beq.n	8008ef2 <_dtoa_r+0xaa2>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dd02      	ble.n	8008ea8 <_dtoa_r+0xa58>
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ea8:	f88b a000 	strb.w	sl, [fp]
 8008eac:	e775      	b.n	8008d9a <_dtoa_r+0x94a>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	e7ba      	b.n	8008e28 <_dtoa_r+0x9d8>
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	e7e2      	b.n	8008e7c <_dtoa_r+0xa2c>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db04      	blt.n	8008ec6 <_dtoa_r+0xa76>
 8008ebc:	9906      	ldr	r1, [sp, #24]
 8008ebe:	430b      	orrs	r3, r1
 8008ec0:	9904      	ldr	r1, [sp, #16]
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	d122      	bne.n	8008f0c <_dtoa_r+0xabc>
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	ddee      	ble.n	8008ea8 <_dtoa_r+0xa58>
 8008eca:	ee18 1a10 	vmov	r1, s16
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 feb5 	bl	8009c40 <__lshift>
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	ee08 0a10 	vmov	s16, r0
 8008edc:	f000 ff20 	bl	8009d20 <__mcmp>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	dc03      	bgt.n	8008eec <_dtoa_r+0xa9c>
 8008ee4:	d1e0      	bne.n	8008ea8 <_dtoa_r+0xa58>
 8008ee6:	f01a 0f01 	tst.w	sl, #1
 8008eea:	d0dd      	beq.n	8008ea8 <_dtoa_r+0xa58>
 8008eec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ef0:	d1d7      	bne.n	8008ea2 <_dtoa_r+0xa52>
 8008ef2:	2339      	movs	r3, #57	; 0x39
 8008ef4:	f88b 3000 	strb.w	r3, [fp]
 8008ef8:	462b      	mov	r3, r5
 8008efa:	461d      	mov	r5, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f02:	2a39      	cmp	r2, #57	; 0x39
 8008f04:	d071      	beq.n	8008fea <_dtoa_r+0xb9a>
 8008f06:	3201      	adds	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e746      	b.n	8008d9a <_dtoa_r+0x94a>
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	dd07      	ble.n	8008f20 <_dtoa_r+0xad0>
 8008f10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f14:	d0ed      	beq.n	8008ef2 <_dtoa_r+0xaa2>
 8008f16:	f10a 0301 	add.w	r3, sl, #1
 8008f1a:	f88b 3000 	strb.w	r3, [fp]
 8008f1e:	e73c      	b.n	8008d9a <_dtoa_r+0x94a>
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f26:	4599      	cmp	r9, r3
 8008f28:	d047      	beq.n	8008fba <_dtoa_r+0xb6a>
 8008f2a:	ee18 1a10 	vmov	r1, s16
 8008f2e:	2300      	movs	r3, #0
 8008f30:	220a      	movs	r2, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fc8a 	bl	800984c <__multadd>
 8008f38:	45b8      	cmp	r8, r7
 8008f3a:	ee08 0a10 	vmov	s16, r0
 8008f3e:	f04f 0300 	mov.w	r3, #0
 8008f42:	f04f 020a 	mov.w	r2, #10
 8008f46:	4641      	mov	r1, r8
 8008f48:	4620      	mov	r0, r4
 8008f4a:	d106      	bne.n	8008f5a <_dtoa_r+0xb0a>
 8008f4c:	f000 fc7e 	bl	800984c <__multadd>
 8008f50:	4680      	mov	r8, r0
 8008f52:	4607      	mov	r7, r0
 8008f54:	f109 0901 	add.w	r9, r9, #1
 8008f58:	e772      	b.n	8008e40 <_dtoa_r+0x9f0>
 8008f5a:	f000 fc77 	bl	800984c <__multadd>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4680      	mov	r8, r0
 8008f62:	2300      	movs	r3, #0
 8008f64:	220a      	movs	r2, #10
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fc70 	bl	800984c <__multadd>
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	e7f1      	b.n	8008f54 <_dtoa_r+0xb04>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	9302      	str	r3, [sp, #8]
 8008f74:	9d01      	ldr	r5, [sp, #4]
 8008f76:	ee18 0a10 	vmov	r0, s16
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	f7ff f9da 	bl	8008334 <quorem>
 8008f80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	f805 ab01 	strb.w	sl, [r5], #1
 8008f8a:	1aea      	subs	r2, r5, r3
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	dd09      	ble.n	8008fa6 <_dtoa_r+0xb56>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	2300      	movs	r3, #0
 8008f98:	220a      	movs	r2, #10
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 fc56 	bl	800984c <__multadd>
 8008fa0:	ee08 0a10 	vmov	s16, r0
 8008fa4:	e7e7      	b.n	8008f76 <_dtoa_r+0xb26>
 8008fa6:	9b02      	ldr	r3, [sp, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfc8      	it	gt
 8008fac:	461d      	movgt	r5, r3
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	bfd8      	it	le
 8008fb2:	2501      	movle	r5, #1
 8008fb4:	441d      	add	r5, r3
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	ee18 1a10 	vmov	r1, s16
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fe3d 	bl	8009c40 <__lshift>
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	ee08 0a10 	vmov	s16, r0
 8008fcc:	f000 fea8 	bl	8009d20 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dc91      	bgt.n	8008ef8 <_dtoa_r+0xaa8>
 8008fd4:	d102      	bne.n	8008fdc <_dtoa_r+0xb8c>
 8008fd6:	f01a 0f01 	tst.w	sl, #1
 8008fda:	d18d      	bne.n	8008ef8 <_dtoa_r+0xaa8>
 8008fdc:	462b      	mov	r3, r5
 8008fde:	461d      	mov	r5, r3
 8008fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe4:	2a30      	cmp	r2, #48	; 0x30
 8008fe6:	d0fa      	beq.n	8008fde <_dtoa_r+0xb8e>
 8008fe8:	e6d7      	b.n	8008d9a <_dtoa_r+0x94a>
 8008fea:	9a01      	ldr	r2, [sp, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d184      	bne.n	8008efa <_dtoa_r+0xaaa>
 8008ff0:	9b00      	ldr	r3, [sp, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	2331      	movs	r3, #49	; 0x31
 8008ff8:	7013      	strb	r3, [r2, #0]
 8008ffa:	e6ce      	b.n	8008d9a <_dtoa_r+0x94a>
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <_dtoa_r+0xbd4>)
 8008ffe:	f7ff ba95 	b.w	800852c <_dtoa_r+0xdc>
 8009002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009004:	2b00      	cmp	r3, #0
 8009006:	f47f aa6e 	bne.w	80084e6 <_dtoa_r+0x96>
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <_dtoa_r+0xbd8>)
 800900c:	f7ff ba8e 	b.w	800852c <_dtoa_r+0xdc>
 8009010:	9b02      	ldr	r3, [sp, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dcae      	bgt.n	8008f74 <_dtoa_r+0xb24>
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	2b02      	cmp	r3, #2
 800901a:	f73f aea8 	bgt.w	8008d6e <_dtoa_r+0x91e>
 800901e:	e7a9      	b.n	8008f74 <_dtoa_r+0xb24>
 8009020:	0800b2d0 	.word	0x0800b2d0
 8009024:	0800b0d4 	.word	0x0800b0d4
 8009028:	0800b251 	.word	0x0800b251

0800902c <rshift>:
 800902c:	6903      	ldr	r3, [r0, #16]
 800902e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009036:	ea4f 1261 	mov.w	r2, r1, asr #5
 800903a:	f100 0414 	add.w	r4, r0, #20
 800903e:	dd45      	ble.n	80090cc <rshift+0xa0>
 8009040:	f011 011f 	ands.w	r1, r1, #31
 8009044:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009048:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800904c:	d10c      	bne.n	8009068 <rshift+0x3c>
 800904e:	f100 0710 	add.w	r7, r0, #16
 8009052:	4629      	mov	r1, r5
 8009054:	42b1      	cmp	r1, r6
 8009056:	d334      	bcc.n	80090c2 <rshift+0x96>
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	1eea      	subs	r2, r5, #3
 800905e:	4296      	cmp	r6, r2
 8009060:	bf38      	it	cc
 8009062:	2300      	movcc	r3, #0
 8009064:	4423      	add	r3, r4
 8009066:	e015      	b.n	8009094 <rshift+0x68>
 8009068:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800906c:	f1c1 0820 	rsb	r8, r1, #32
 8009070:	40cf      	lsrs	r7, r1
 8009072:	f105 0e04 	add.w	lr, r5, #4
 8009076:	46a1      	mov	r9, r4
 8009078:	4576      	cmp	r6, lr
 800907a:	46f4      	mov	ip, lr
 800907c:	d815      	bhi.n	80090aa <rshift+0x7e>
 800907e:	1a9a      	subs	r2, r3, r2
 8009080:	0092      	lsls	r2, r2, #2
 8009082:	3a04      	subs	r2, #4
 8009084:	3501      	adds	r5, #1
 8009086:	42ae      	cmp	r6, r5
 8009088:	bf38      	it	cc
 800908a:	2200      	movcc	r2, #0
 800908c:	18a3      	adds	r3, r4, r2
 800908e:	50a7      	str	r7, [r4, r2]
 8009090:	b107      	cbz	r7, 8009094 <rshift+0x68>
 8009092:	3304      	adds	r3, #4
 8009094:	1b1a      	subs	r2, r3, r4
 8009096:	42a3      	cmp	r3, r4
 8009098:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800909c:	bf08      	it	eq
 800909e:	2300      	moveq	r3, #0
 80090a0:	6102      	str	r2, [r0, #16]
 80090a2:	bf08      	it	eq
 80090a4:	6143      	streq	r3, [r0, #20]
 80090a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090aa:	f8dc c000 	ldr.w	ip, [ip]
 80090ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80090b2:	ea4c 0707 	orr.w	r7, ip, r7
 80090b6:	f849 7b04 	str.w	r7, [r9], #4
 80090ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090be:	40cf      	lsrs	r7, r1
 80090c0:	e7da      	b.n	8009078 <rshift+0x4c>
 80090c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80090c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80090ca:	e7c3      	b.n	8009054 <rshift+0x28>
 80090cc:	4623      	mov	r3, r4
 80090ce:	e7e1      	b.n	8009094 <rshift+0x68>

080090d0 <__hexdig_fun>:
 80090d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090d4:	2b09      	cmp	r3, #9
 80090d6:	d802      	bhi.n	80090de <__hexdig_fun+0xe>
 80090d8:	3820      	subs	r0, #32
 80090da:	b2c0      	uxtb	r0, r0
 80090dc:	4770      	bx	lr
 80090de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d801      	bhi.n	80090ea <__hexdig_fun+0x1a>
 80090e6:	3847      	subs	r0, #71	; 0x47
 80090e8:	e7f7      	b.n	80090da <__hexdig_fun+0xa>
 80090ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	d801      	bhi.n	80090f6 <__hexdig_fun+0x26>
 80090f2:	3827      	subs	r0, #39	; 0x27
 80090f4:	e7f1      	b.n	80090da <__hexdig_fun+0xa>
 80090f6:	2000      	movs	r0, #0
 80090f8:	4770      	bx	lr
	...

080090fc <__gethex>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	ed2d 8b02 	vpush	{d8}
 8009104:	b089      	sub	sp, #36	; 0x24
 8009106:	ee08 0a10 	vmov	s16, r0
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	4bb4      	ldr	r3, [pc, #720]	; (80093e0 <__gethex+0x2e4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	468b      	mov	fp, r1
 8009116:	4690      	mov	r8, r2
 8009118:	f7f7 f87a 	bl	8000210 <strlen>
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	f8db 2000 	ldr.w	r2, [fp]
 8009122:	4403      	add	r3, r0
 8009124:	4682      	mov	sl, r0
 8009126:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	1c93      	adds	r3, r2, #2
 800912e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009132:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009136:	32fe      	adds	r2, #254	; 0xfe
 8009138:	18d1      	adds	r1, r2, r3
 800913a:	461f      	mov	r7, r3
 800913c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009140:	9100      	str	r1, [sp, #0]
 8009142:	2830      	cmp	r0, #48	; 0x30
 8009144:	d0f8      	beq.n	8009138 <__gethex+0x3c>
 8009146:	f7ff ffc3 	bl	80090d0 <__hexdig_fun>
 800914a:	4604      	mov	r4, r0
 800914c:	2800      	cmp	r0, #0
 800914e:	d13a      	bne.n	80091c6 <__gethex+0xca>
 8009150:	9901      	ldr	r1, [sp, #4]
 8009152:	4652      	mov	r2, sl
 8009154:	4638      	mov	r0, r7
 8009156:	f7fe fa0a 	bl	800756e <strncmp>
 800915a:	4605      	mov	r5, r0
 800915c:	2800      	cmp	r0, #0
 800915e:	d168      	bne.n	8009232 <__gethex+0x136>
 8009160:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009164:	eb07 060a 	add.w	r6, r7, sl
 8009168:	f7ff ffb2 	bl	80090d0 <__hexdig_fun>
 800916c:	2800      	cmp	r0, #0
 800916e:	d062      	beq.n	8009236 <__gethex+0x13a>
 8009170:	4633      	mov	r3, r6
 8009172:	7818      	ldrb	r0, [r3, #0]
 8009174:	2830      	cmp	r0, #48	; 0x30
 8009176:	461f      	mov	r7, r3
 8009178:	f103 0301 	add.w	r3, r3, #1
 800917c:	d0f9      	beq.n	8009172 <__gethex+0x76>
 800917e:	f7ff ffa7 	bl	80090d0 <__hexdig_fun>
 8009182:	2301      	movs	r3, #1
 8009184:	fab0 f480 	clz	r4, r0
 8009188:	0964      	lsrs	r4, r4, #5
 800918a:	4635      	mov	r5, r6
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	463a      	mov	r2, r7
 8009190:	4616      	mov	r6, r2
 8009192:	3201      	adds	r2, #1
 8009194:	7830      	ldrb	r0, [r6, #0]
 8009196:	f7ff ff9b 	bl	80090d0 <__hexdig_fun>
 800919a:	2800      	cmp	r0, #0
 800919c:	d1f8      	bne.n	8009190 <__gethex+0x94>
 800919e:	9901      	ldr	r1, [sp, #4]
 80091a0:	4652      	mov	r2, sl
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7fe f9e3 	bl	800756e <strncmp>
 80091a8:	b980      	cbnz	r0, 80091cc <__gethex+0xd0>
 80091aa:	b94d      	cbnz	r5, 80091c0 <__gethex+0xc4>
 80091ac:	eb06 050a 	add.w	r5, r6, sl
 80091b0:	462a      	mov	r2, r5
 80091b2:	4616      	mov	r6, r2
 80091b4:	3201      	adds	r2, #1
 80091b6:	7830      	ldrb	r0, [r6, #0]
 80091b8:	f7ff ff8a 	bl	80090d0 <__hexdig_fun>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1f8      	bne.n	80091b2 <__gethex+0xb6>
 80091c0:	1bad      	subs	r5, r5, r6
 80091c2:	00ad      	lsls	r5, r5, #2
 80091c4:	e004      	b.n	80091d0 <__gethex+0xd4>
 80091c6:	2400      	movs	r4, #0
 80091c8:	4625      	mov	r5, r4
 80091ca:	e7e0      	b.n	800918e <__gethex+0x92>
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	d1f7      	bne.n	80091c0 <__gethex+0xc4>
 80091d0:	7833      	ldrb	r3, [r6, #0]
 80091d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091d6:	2b50      	cmp	r3, #80	; 0x50
 80091d8:	d13b      	bne.n	8009252 <__gethex+0x156>
 80091da:	7873      	ldrb	r3, [r6, #1]
 80091dc:	2b2b      	cmp	r3, #43	; 0x2b
 80091de:	d02c      	beq.n	800923a <__gethex+0x13e>
 80091e0:	2b2d      	cmp	r3, #45	; 0x2d
 80091e2:	d02e      	beq.n	8009242 <__gethex+0x146>
 80091e4:	1c71      	adds	r1, r6, #1
 80091e6:	f04f 0900 	mov.w	r9, #0
 80091ea:	7808      	ldrb	r0, [r1, #0]
 80091ec:	f7ff ff70 	bl	80090d0 <__hexdig_fun>
 80091f0:	1e43      	subs	r3, r0, #1
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b18      	cmp	r3, #24
 80091f6:	d82c      	bhi.n	8009252 <__gethex+0x156>
 80091f8:	f1a0 0210 	sub.w	r2, r0, #16
 80091fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009200:	f7ff ff66 	bl	80090d0 <__hexdig_fun>
 8009204:	1e43      	subs	r3, r0, #1
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b18      	cmp	r3, #24
 800920a:	d91d      	bls.n	8009248 <__gethex+0x14c>
 800920c:	f1b9 0f00 	cmp.w	r9, #0
 8009210:	d000      	beq.n	8009214 <__gethex+0x118>
 8009212:	4252      	negs	r2, r2
 8009214:	4415      	add	r5, r2
 8009216:	f8cb 1000 	str.w	r1, [fp]
 800921a:	b1e4      	cbz	r4, 8009256 <__gethex+0x15a>
 800921c:	9b00      	ldr	r3, [sp, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf14      	ite	ne
 8009222:	2700      	movne	r7, #0
 8009224:	2706      	moveq	r7, #6
 8009226:	4638      	mov	r0, r7
 8009228:	b009      	add	sp, #36	; 0x24
 800922a:	ecbd 8b02 	vpop	{d8}
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	463e      	mov	r6, r7
 8009234:	4625      	mov	r5, r4
 8009236:	2401      	movs	r4, #1
 8009238:	e7ca      	b.n	80091d0 <__gethex+0xd4>
 800923a:	f04f 0900 	mov.w	r9, #0
 800923e:	1cb1      	adds	r1, r6, #2
 8009240:	e7d3      	b.n	80091ea <__gethex+0xee>
 8009242:	f04f 0901 	mov.w	r9, #1
 8009246:	e7fa      	b.n	800923e <__gethex+0x142>
 8009248:	230a      	movs	r3, #10
 800924a:	fb03 0202 	mla	r2, r3, r2, r0
 800924e:	3a10      	subs	r2, #16
 8009250:	e7d4      	b.n	80091fc <__gethex+0x100>
 8009252:	4631      	mov	r1, r6
 8009254:	e7df      	b.n	8009216 <__gethex+0x11a>
 8009256:	1bf3      	subs	r3, r6, r7
 8009258:	3b01      	subs	r3, #1
 800925a:	4621      	mov	r1, r4
 800925c:	2b07      	cmp	r3, #7
 800925e:	dc0b      	bgt.n	8009278 <__gethex+0x17c>
 8009260:	ee18 0a10 	vmov	r0, s16
 8009264:	f000 fa90 	bl	8009788 <_Balloc>
 8009268:	4604      	mov	r4, r0
 800926a:	b940      	cbnz	r0, 800927e <__gethex+0x182>
 800926c:	4b5d      	ldr	r3, [pc, #372]	; (80093e4 <__gethex+0x2e8>)
 800926e:	4602      	mov	r2, r0
 8009270:	21de      	movs	r1, #222	; 0xde
 8009272:	485d      	ldr	r0, [pc, #372]	; (80093e8 <__gethex+0x2ec>)
 8009274:	f001 f9d6 	bl	800a624 <__assert_func>
 8009278:	3101      	adds	r1, #1
 800927a:	105b      	asrs	r3, r3, #1
 800927c:	e7ee      	b.n	800925c <__gethex+0x160>
 800927e:	f100 0914 	add.w	r9, r0, #20
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	f1ca 0301 	rsb	r3, sl, #1
 800928a:	f8cd 9008 	str.w	r9, [sp, #8]
 800928e:	f8cd b000 	str.w	fp, [sp]
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	42b7      	cmp	r7, r6
 8009296:	d340      	bcc.n	800931a <__gethex+0x21e>
 8009298:	9802      	ldr	r0, [sp, #8]
 800929a:	9b00      	ldr	r3, [sp, #0]
 800929c:	f840 3b04 	str.w	r3, [r0], #4
 80092a0:	eba0 0009 	sub.w	r0, r0, r9
 80092a4:	1080      	asrs	r0, r0, #2
 80092a6:	0146      	lsls	r6, r0, #5
 80092a8:	6120      	str	r0, [r4, #16]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fb5e 	bl	800996c <__hi0bits>
 80092b0:	1a30      	subs	r0, r6, r0
 80092b2:	f8d8 6000 	ldr.w	r6, [r8]
 80092b6:	42b0      	cmp	r0, r6
 80092b8:	dd63      	ble.n	8009382 <__gethex+0x286>
 80092ba:	1b87      	subs	r7, r0, r6
 80092bc:	4639      	mov	r1, r7
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 ff02 	bl	800a0c8 <__any_on>
 80092c4:	4682      	mov	sl, r0
 80092c6:	b1a8      	cbz	r0, 80092f4 <__gethex+0x1f8>
 80092c8:	1e7b      	subs	r3, r7, #1
 80092ca:	1159      	asrs	r1, r3, #5
 80092cc:	f003 021f 	and.w	r2, r3, #31
 80092d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092d4:	f04f 0a01 	mov.w	sl, #1
 80092d8:	fa0a f202 	lsl.w	r2, sl, r2
 80092dc:	420a      	tst	r2, r1
 80092de:	d009      	beq.n	80092f4 <__gethex+0x1f8>
 80092e0:	4553      	cmp	r3, sl
 80092e2:	dd05      	ble.n	80092f0 <__gethex+0x1f4>
 80092e4:	1eb9      	subs	r1, r7, #2
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 feee 	bl	800a0c8 <__any_on>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d145      	bne.n	800937c <__gethex+0x280>
 80092f0:	f04f 0a02 	mov.w	sl, #2
 80092f4:	4639      	mov	r1, r7
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7ff fe98 	bl	800902c <rshift>
 80092fc:	443d      	add	r5, r7
 80092fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009302:	42ab      	cmp	r3, r5
 8009304:	da4c      	bge.n	80093a0 <__gethex+0x2a4>
 8009306:	ee18 0a10 	vmov	r0, s16
 800930a:	4621      	mov	r1, r4
 800930c:	f000 fa7c 	bl	8009808 <_Bfree>
 8009310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009312:	2300      	movs	r3, #0
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	27a3      	movs	r7, #163	; 0xa3
 8009318:	e785      	b.n	8009226 <__gethex+0x12a>
 800931a:	1e73      	subs	r3, r6, #1
 800931c:	9a05      	ldr	r2, [sp, #20]
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009324:	4293      	cmp	r3, r2
 8009326:	d019      	beq.n	800935c <__gethex+0x260>
 8009328:	f1bb 0f20 	cmp.w	fp, #32
 800932c:	d107      	bne.n	800933e <__gethex+0x242>
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	9a00      	ldr	r2, [sp, #0]
 8009332:	f843 2b04 	str.w	r2, [r3], #4
 8009336:	9302      	str	r3, [sp, #8]
 8009338:	2300      	movs	r3, #0
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	469b      	mov	fp, r3
 800933e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009342:	f7ff fec5 	bl	80090d0 <__hexdig_fun>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	f000 000f 	and.w	r0, r0, #15
 800934c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009350:	4303      	orrs	r3, r0
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	f10b 0b04 	add.w	fp, fp, #4
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	e00d      	b.n	8009378 <__gethex+0x27c>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	9a06      	ldr	r2, [sp, #24]
 8009360:	4413      	add	r3, r2
 8009362:	42bb      	cmp	r3, r7
 8009364:	d3e0      	bcc.n	8009328 <__gethex+0x22c>
 8009366:	4618      	mov	r0, r3
 8009368:	9901      	ldr	r1, [sp, #4]
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	4652      	mov	r2, sl
 800936e:	f7fe f8fe 	bl	800756e <strncmp>
 8009372:	9b07      	ldr	r3, [sp, #28]
 8009374:	2800      	cmp	r0, #0
 8009376:	d1d7      	bne.n	8009328 <__gethex+0x22c>
 8009378:	461e      	mov	r6, r3
 800937a:	e78b      	b.n	8009294 <__gethex+0x198>
 800937c:	f04f 0a03 	mov.w	sl, #3
 8009380:	e7b8      	b.n	80092f4 <__gethex+0x1f8>
 8009382:	da0a      	bge.n	800939a <__gethex+0x29e>
 8009384:	1a37      	subs	r7, r6, r0
 8009386:	4621      	mov	r1, r4
 8009388:	ee18 0a10 	vmov	r0, s16
 800938c:	463a      	mov	r2, r7
 800938e:	f000 fc57 	bl	8009c40 <__lshift>
 8009392:	1bed      	subs	r5, r5, r7
 8009394:	4604      	mov	r4, r0
 8009396:	f100 0914 	add.w	r9, r0, #20
 800939a:	f04f 0a00 	mov.w	sl, #0
 800939e:	e7ae      	b.n	80092fe <__gethex+0x202>
 80093a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80093a4:	42a8      	cmp	r0, r5
 80093a6:	dd72      	ble.n	800948e <__gethex+0x392>
 80093a8:	1b45      	subs	r5, r0, r5
 80093aa:	42ae      	cmp	r6, r5
 80093ac:	dc36      	bgt.n	800941c <__gethex+0x320>
 80093ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d02a      	beq.n	800940c <__gethex+0x310>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d02c      	beq.n	8009414 <__gethex+0x318>
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d11c      	bne.n	80093f8 <__gethex+0x2fc>
 80093be:	42ae      	cmp	r6, r5
 80093c0:	d11a      	bne.n	80093f8 <__gethex+0x2fc>
 80093c2:	2e01      	cmp	r6, #1
 80093c4:	d112      	bne.n	80093ec <__gethex+0x2f0>
 80093c6:	9a04      	ldr	r2, [sp, #16]
 80093c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	2301      	movs	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	f8c9 3000 	str.w	r3, [r9]
 80093d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093d8:	2762      	movs	r7, #98	; 0x62
 80093da:	601c      	str	r4, [r3, #0]
 80093dc:	e723      	b.n	8009226 <__gethex+0x12a>
 80093de:	bf00      	nop
 80093e0:	0800b348 	.word	0x0800b348
 80093e4:	0800b2d0 	.word	0x0800b2d0
 80093e8:	0800b2e1 	.word	0x0800b2e1
 80093ec:	1e71      	subs	r1, r6, #1
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fe6a 	bl	800a0c8 <__any_on>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d1e6      	bne.n	80093c6 <__gethex+0x2ca>
 80093f8:	ee18 0a10 	vmov	r0, s16
 80093fc:	4621      	mov	r1, r4
 80093fe:	f000 fa03 	bl	8009808 <_Bfree>
 8009402:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009404:	2300      	movs	r3, #0
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	2750      	movs	r7, #80	; 0x50
 800940a:	e70c      	b.n	8009226 <__gethex+0x12a>
 800940c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f2      	bne.n	80093f8 <__gethex+0x2fc>
 8009412:	e7d8      	b.n	80093c6 <__gethex+0x2ca>
 8009414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1d5      	bne.n	80093c6 <__gethex+0x2ca>
 800941a:	e7ed      	b.n	80093f8 <__gethex+0x2fc>
 800941c:	1e6f      	subs	r7, r5, #1
 800941e:	f1ba 0f00 	cmp.w	sl, #0
 8009422:	d131      	bne.n	8009488 <__gethex+0x38c>
 8009424:	b127      	cbz	r7, 8009430 <__gethex+0x334>
 8009426:	4639      	mov	r1, r7
 8009428:	4620      	mov	r0, r4
 800942a:	f000 fe4d 	bl	800a0c8 <__any_on>
 800942e:	4682      	mov	sl, r0
 8009430:	117b      	asrs	r3, r7, #5
 8009432:	2101      	movs	r1, #1
 8009434:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009438:	f007 071f 	and.w	r7, r7, #31
 800943c:	fa01 f707 	lsl.w	r7, r1, r7
 8009440:	421f      	tst	r7, r3
 8009442:	4629      	mov	r1, r5
 8009444:	4620      	mov	r0, r4
 8009446:	bf18      	it	ne
 8009448:	f04a 0a02 	orrne.w	sl, sl, #2
 800944c:	1b76      	subs	r6, r6, r5
 800944e:	f7ff fded 	bl	800902c <rshift>
 8009452:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009456:	2702      	movs	r7, #2
 8009458:	f1ba 0f00 	cmp.w	sl, #0
 800945c:	d048      	beq.n	80094f0 <__gethex+0x3f4>
 800945e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d015      	beq.n	8009492 <__gethex+0x396>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d017      	beq.n	800949a <__gethex+0x39e>
 800946a:	2b01      	cmp	r3, #1
 800946c:	d109      	bne.n	8009482 <__gethex+0x386>
 800946e:	f01a 0f02 	tst.w	sl, #2
 8009472:	d006      	beq.n	8009482 <__gethex+0x386>
 8009474:	f8d9 0000 	ldr.w	r0, [r9]
 8009478:	ea4a 0a00 	orr.w	sl, sl, r0
 800947c:	f01a 0f01 	tst.w	sl, #1
 8009480:	d10e      	bne.n	80094a0 <__gethex+0x3a4>
 8009482:	f047 0710 	orr.w	r7, r7, #16
 8009486:	e033      	b.n	80094f0 <__gethex+0x3f4>
 8009488:	f04f 0a01 	mov.w	sl, #1
 800948c:	e7d0      	b.n	8009430 <__gethex+0x334>
 800948e:	2701      	movs	r7, #1
 8009490:	e7e2      	b.n	8009458 <__gethex+0x35c>
 8009492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009494:	f1c3 0301 	rsb	r3, r3, #1
 8009498:	9315      	str	r3, [sp, #84]	; 0x54
 800949a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f0      	beq.n	8009482 <__gethex+0x386>
 80094a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094a4:	f104 0314 	add.w	r3, r4, #20
 80094a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094b0:	f04f 0c00 	mov.w	ip, #0
 80094b4:	4618      	mov	r0, r3
 80094b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094be:	d01c      	beq.n	80094fa <__gethex+0x3fe>
 80094c0:	3201      	adds	r2, #1
 80094c2:	6002      	str	r2, [r0, #0]
 80094c4:	2f02      	cmp	r7, #2
 80094c6:	f104 0314 	add.w	r3, r4, #20
 80094ca:	d13f      	bne.n	800954c <__gethex+0x450>
 80094cc:	f8d8 2000 	ldr.w	r2, [r8]
 80094d0:	3a01      	subs	r2, #1
 80094d2:	42b2      	cmp	r2, r6
 80094d4:	d10a      	bne.n	80094ec <__gethex+0x3f0>
 80094d6:	1171      	asrs	r1, r6, #5
 80094d8:	2201      	movs	r2, #1
 80094da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094de:	f006 061f 	and.w	r6, r6, #31
 80094e2:	fa02 f606 	lsl.w	r6, r2, r6
 80094e6:	421e      	tst	r6, r3
 80094e8:	bf18      	it	ne
 80094ea:	4617      	movne	r7, r2
 80094ec:	f047 0720 	orr.w	r7, r7, #32
 80094f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094f2:	601c      	str	r4, [r3, #0]
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	601d      	str	r5, [r3, #0]
 80094f8:	e695      	b.n	8009226 <__gethex+0x12a>
 80094fa:	4299      	cmp	r1, r3
 80094fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009500:	d8d8      	bhi.n	80094b4 <__gethex+0x3b8>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	459b      	cmp	fp, r3
 8009506:	db19      	blt.n	800953c <__gethex+0x440>
 8009508:	6861      	ldr	r1, [r4, #4]
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	3101      	adds	r1, #1
 8009510:	f000 f93a 	bl	8009788 <_Balloc>
 8009514:	4681      	mov	r9, r0
 8009516:	b918      	cbnz	r0, 8009520 <__gethex+0x424>
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <__gethex+0x488>)
 800951a:	4602      	mov	r2, r0
 800951c:	2184      	movs	r1, #132	; 0x84
 800951e:	e6a8      	b.n	8009272 <__gethex+0x176>
 8009520:	6922      	ldr	r2, [r4, #16]
 8009522:	3202      	adds	r2, #2
 8009524:	f104 010c 	add.w	r1, r4, #12
 8009528:	0092      	lsls	r2, r2, #2
 800952a:	300c      	adds	r0, #12
 800952c:	f000 f91e 	bl	800976c <memcpy>
 8009530:	4621      	mov	r1, r4
 8009532:	ee18 0a10 	vmov	r0, s16
 8009536:	f000 f967 	bl	8009808 <_Bfree>
 800953a:	464c      	mov	r4, r9
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009544:	6122      	str	r2, [r4, #16]
 8009546:	2201      	movs	r2, #1
 8009548:	615a      	str	r2, [r3, #20]
 800954a:	e7bb      	b.n	80094c4 <__gethex+0x3c8>
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	455a      	cmp	r2, fp
 8009550:	dd0b      	ble.n	800956a <__gethex+0x46e>
 8009552:	2101      	movs	r1, #1
 8009554:	4620      	mov	r0, r4
 8009556:	f7ff fd69 	bl	800902c <rshift>
 800955a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800955e:	3501      	adds	r5, #1
 8009560:	42ab      	cmp	r3, r5
 8009562:	f6ff aed0 	blt.w	8009306 <__gethex+0x20a>
 8009566:	2701      	movs	r7, #1
 8009568:	e7c0      	b.n	80094ec <__gethex+0x3f0>
 800956a:	f016 061f 	ands.w	r6, r6, #31
 800956e:	d0fa      	beq.n	8009566 <__gethex+0x46a>
 8009570:	4453      	add	r3, sl
 8009572:	f1c6 0620 	rsb	r6, r6, #32
 8009576:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800957a:	f000 f9f7 	bl	800996c <__hi0bits>
 800957e:	42b0      	cmp	r0, r6
 8009580:	dbe7      	blt.n	8009552 <__gethex+0x456>
 8009582:	e7f0      	b.n	8009566 <__gethex+0x46a>
 8009584:	0800b2d0 	.word	0x0800b2d0

08009588 <L_shift>:
 8009588:	f1c2 0208 	rsb	r2, r2, #8
 800958c:	0092      	lsls	r2, r2, #2
 800958e:	b570      	push	{r4, r5, r6, lr}
 8009590:	f1c2 0620 	rsb	r6, r2, #32
 8009594:	6843      	ldr	r3, [r0, #4]
 8009596:	6804      	ldr	r4, [r0, #0]
 8009598:	fa03 f506 	lsl.w	r5, r3, r6
 800959c:	432c      	orrs	r4, r5
 800959e:	40d3      	lsrs	r3, r2
 80095a0:	6004      	str	r4, [r0, #0]
 80095a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80095a6:	4288      	cmp	r0, r1
 80095a8:	d3f4      	bcc.n	8009594 <L_shift+0xc>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}

080095ac <__match>:
 80095ac:	b530      	push	{r4, r5, lr}
 80095ae:	6803      	ldr	r3, [r0, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095b6:	b914      	cbnz	r4, 80095be <__match+0x12>
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	2001      	movs	r0, #1
 80095bc:	bd30      	pop	{r4, r5, pc}
 80095be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095c6:	2d19      	cmp	r5, #25
 80095c8:	bf98      	it	ls
 80095ca:	3220      	addls	r2, #32
 80095cc:	42a2      	cmp	r2, r4
 80095ce:	d0f0      	beq.n	80095b2 <__match+0x6>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7f3      	b.n	80095bc <__match+0x10>

080095d4 <__hexnan>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	680b      	ldr	r3, [r1, #0]
 80095da:	115e      	asrs	r6, r3, #5
 80095dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095e0:	f013 031f 	ands.w	r3, r3, #31
 80095e4:	b087      	sub	sp, #28
 80095e6:	bf18      	it	ne
 80095e8:	3604      	addne	r6, #4
 80095ea:	2500      	movs	r5, #0
 80095ec:	1f37      	subs	r7, r6, #4
 80095ee:	4690      	mov	r8, r2
 80095f0:	6802      	ldr	r2, [r0, #0]
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	4682      	mov	sl, r0
 80095f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80095fa:	46b9      	mov	r9, r7
 80095fc:	463c      	mov	r4, r7
 80095fe:	9502      	str	r5, [sp, #8]
 8009600:	46ab      	mov	fp, r5
 8009602:	7851      	ldrb	r1, [r2, #1]
 8009604:	1c53      	adds	r3, r2, #1
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	b341      	cbz	r1, 800965c <__hexnan+0x88>
 800960a:	4608      	mov	r0, r1
 800960c:	9205      	str	r2, [sp, #20]
 800960e:	9104      	str	r1, [sp, #16]
 8009610:	f7ff fd5e 	bl	80090d0 <__hexdig_fun>
 8009614:	2800      	cmp	r0, #0
 8009616:	d14f      	bne.n	80096b8 <__hexnan+0xe4>
 8009618:	9904      	ldr	r1, [sp, #16]
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	2920      	cmp	r1, #32
 800961e:	d818      	bhi.n	8009652 <__hexnan+0x7e>
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	459b      	cmp	fp, r3
 8009624:	dd13      	ble.n	800964e <__hexnan+0x7a>
 8009626:	454c      	cmp	r4, r9
 8009628:	d206      	bcs.n	8009638 <__hexnan+0x64>
 800962a:	2d07      	cmp	r5, #7
 800962c:	dc04      	bgt.n	8009638 <__hexnan+0x64>
 800962e:	462a      	mov	r2, r5
 8009630:	4649      	mov	r1, r9
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff ffa8 	bl	8009588 <L_shift>
 8009638:	4544      	cmp	r4, r8
 800963a:	d950      	bls.n	80096de <__hexnan+0x10a>
 800963c:	2300      	movs	r3, #0
 800963e:	f1a4 0904 	sub.w	r9, r4, #4
 8009642:	f844 3c04 	str.w	r3, [r4, #-4]
 8009646:	f8cd b008 	str.w	fp, [sp, #8]
 800964a:	464c      	mov	r4, r9
 800964c:	461d      	mov	r5, r3
 800964e:	9a03      	ldr	r2, [sp, #12]
 8009650:	e7d7      	b.n	8009602 <__hexnan+0x2e>
 8009652:	2929      	cmp	r1, #41	; 0x29
 8009654:	d156      	bne.n	8009704 <__hexnan+0x130>
 8009656:	3202      	adds	r2, #2
 8009658:	f8ca 2000 	str.w	r2, [sl]
 800965c:	f1bb 0f00 	cmp.w	fp, #0
 8009660:	d050      	beq.n	8009704 <__hexnan+0x130>
 8009662:	454c      	cmp	r4, r9
 8009664:	d206      	bcs.n	8009674 <__hexnan+0xa0>
 8009666:	2d07      	cmp	r5, #7
 8009668:	dc04      	bgt.n	8009674 <__hexnan+0xa0>
 800966a:	462a      	mov	r2, r5
 800966c:	4649      	mov	r1, r9
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff ff8a 	bl	8009588 <L_shift>
 8009674:	4544      	cmp	r4, r8
 8009676:	d934      	bls.n	80096e2 <__hexnan+0x10e>
 8009678:	f1a8 0204 	sub.w	r2, r8, #4
 800967c:	4623      	mov	r3, r4
 800967e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009682:	f842 1f04 	str.w	r1, [r2, #4]!
 8009686:	429f      	cmp	r7, r3
 8009688:	d2f9      	bcs.n	800967e <__hexnan+0xaa>
 800968a:	1b3b      	subs	r3, r7, r4
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	3304      	adds	r3, #4
 8009692:	3401      	adds	r4, #1
 8009694:	3e03      	subs	r6, #3
 8009696:	42b4      	cmp	r4, r6
 8009698:	bf88      	it	hi
 800969a:	2304      	movhi	r3, #4
 800969c:	4443      	add	r3, r8
 800969e:	2200      	movs	r2, #0
 80096a0:	f843 2b04 	str.w	r2, [r3], #4
 80096a4:	429f      	cmp	r7, r3
 80096a6:	d2fb      	bcs.n	80096a0 <__hexnan+0xcc>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	b91b      	cbnz	r3, 80096b4 <__hexnan+0xe0>
 80096ac:	4547      	cmp	r7, r8
 80096ae:	d127      	bne.n	8009700 <__hexnan+0x12c>
 80096b0:	2301      	movs	r3, #1
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	2005      	movs	r0, #5
 80096b6:	e026      	b.n	8009706 <__hexnan+0x132>
 80096b8:	3501      	adds	r5, #1
 80096ba:	2d08      	cmp	r5, #8
 80096bc:	f10b 0b01 	add.w	fp, fp, #1
 80096c0:	dd06      	ble.n	80096d0 <__hexnan+0xfc>
 80096c2:	4544      	cmp	r4, r8
 80096c4:	d9c3      	bls.n	800964e <__hexnan+0x7a>
 80096c6:	2300      	movs	r3, #0
 80096c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80096cc:	2501      	movs	r5, #1
 80096ce:	3c04      	subs	r4, #4
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	f000 000f 	and.w	r0, r0, #15
 80096d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80096da:	6022      	str	r2, [r4, #0]
 80096dc:	e7b7      	b.n	800964e <__hexnan+0x7a>
 80096de:	2508      	movs	r5, #8
 80096e0:	e7b5      	b.n	800964e <__hexnan+0x7a>
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0df      	beq.n	80096a8 <__hexnan+0xd4>
 80096e8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ec:	f1c3 0320 	rsb	r3, r3, #32
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
 80096f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096f8:	401a      	ands	r2, r3
 80096fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80096fe:	e7d3      	b.n	80096a8 <__hexnan+0xd4>
 8009700:	3f04      	subs	r7, #4
 8009702:	e7d1      	b.n	80096a8 <__hexnan+0xd4>
 8009704:	2004      	movs	r0, #4
 8009706:	b007      	add	sp, #28
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800970c <_localeconv_r>:
 800970c:	4800      	ldr	r0, [pc, #0]	; (8009710 <_localeconv_r+0x4>)
 800970e:	4770      	bx	lr
 8009710:	20000164 	.word	0x20000164

08009714 <_lseek_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	; (8009734 <_lseek_r+0x20>)
 8009718:	4604      	mov	r4, r0
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	2200      	movs	r2, #0
 8009720:	602a      	str	r2, [r5, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	f7f8 f942 	bl	80019ac <_lseek>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_lseek_r+0x1e>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_lseek_r+0x1e>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20000434 	.word	0x20000434

08009738 <malloc>:
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <malloc+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f000 bd67 	b.w	800a210 <_malloc_r>
 8009742:	bf00      	nop
 8009744:	2000000c 	.word	0x2000000c

08009748 <__ascii_mbtowc>:
 8009748:	b082      	sub	sp, #8
 800974a:	b901      	cbnz	r1, 800974e <__ascii_mbtowc+0x6>
 800974c:	a901      	add	r1, sp, #4
 800974e:	b142      	cbz	r2, 8009762 <__ascii_mbtowc+0x1a>
 8009750:	b14b      	cbz	r3, 8009766 <__ascii_mbtowc+0x1e>
 8009752:	7813      	ldrb	r3, [r2, #0]
 8009754:	600b      	str	r3, [r1, #0]
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	1e10      	subs	r0, r2, #0
 800975a:	bf18      	it	ne
 800975c:	2001      	movne	r0, #1
 800975e:	b002      	add	sp, #8
 8009760:	4770      	bx	lr
 8009762:	4610      	mov	r0, r2
 8009764:	e7fb      	b.n	800975e <__ascii_mbtowc+0x16>
 8009766:	f06f 0001 	mvn.w	r0, #1
 800976a:	e7f8      	b.n	800975e <__ascii_mbtowc+0x16>

0800976c <memcpy>:
 800976c:	440a      	add	r2, r1
 800976e:	4291      	cmp	r1, r2
 8009770:	f100 33ff 	add.w	r3, r0, #4294967295
 8009774:	d100      	bne.n	8009778 <memcpy+0xc>
 8009776:	4770      	bx	lr
 8009778:	b510      	push	{r4, lr}
 800977a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009782:	4291      	cmp	r1, r2
 8009784:	d1f9      	bne.n	800977a <memcpy+0xe>
 8009786:	bd10      	pop	{r4, pc}

08009788 <_Balloc>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800978c:	4604      	mov	r4, r0
 800978e:	460d      	mov	r5, r1
 8009790:	b976      	cbnz	r6, 80097b0 <_Balloc+0x28>
 8009792:	2010      	movs	r0, #16
 8009794:	f7ff ffd0 	bl	8009738 <malloc>
 8009798:	4602      	mov	r2, r0
 800979a:	6260      	str	r0, [r4, #36]	; 0x24
 800979c:	b920      	cbnz	r0, 80097a8 <_Balloc+0x20>
 800979e:	4b18      	ldr	r3, [pc, #96]	; (8009800 <_Balloc+0x78>)
 80097a0:	4818      	ldr	r0, [pc, #96]	; (8009804 <_Balloc+0x7c>)
 80097a2:	2166      	movs	r1, #102	; 0x66
 80097a4:	f000 ff3e 	bl	800a624 <__assert_func>
 80097a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097ac:	6006      	str	r6, [r0, #0]
 80097ae:	60c6      	str	r6, [r0, #12]
 80097b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097b2:	68f3      	ldr	r3, [r6, #12]
 80097b4:	b183      	cbz	r3, 80097d8 <_Balloc+0x50>
 80097b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097be:	b9b8      	cbnz	r0, 80097f0 <_Balloc+0x68>
 80097c0:	2101      	movs	r1, #1
 80097c2:	fa01 f605 	lsl.w	r6, r1, r5
 80097c6:	1d72      	adds	r2, r6, #5
 80097c8:	0092      	lsls	r2, r2, #2
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fc9d 	bl	800a10a <_calloc_r>
 80097d0:	b160      	cbz	r0, 80097ec <_Balloc+0x64>
 80097d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097d6:	e00e      	b.n	80097f6 <_Balloc+0x6e>
 80097d8:	2221      	movs	r2, #33	; 0x21
 80097da:	2104      	movs	r1, #4
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 fc94 	bl	800a10a <_calloc_r>
 80097e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e4:	60f0      	str	r0, [r6, #12]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e4      	bne.n	80097b6 <_Balloc+0x2e>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	6802      	ldr	r2, [r0, #0]
 80097f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097f6:	2300      	movs	r3, #0
 80097f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097fc:	e7f7      	b.n	80097ee <_Balloc+0x66>
 80097fe:	bf00      	nop
 8009800:	0800b25e 	.word	0x0800b25e
 8009804:	0800b35c 	.word	0x0800b35c

08009808 <_Bfree>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800980c:	4605      	mov	r5, r0
 800980e:	460c      	mov	r4, r1
 8009810:	b976      	cbnz	r6, 8009830 <_Bfree+0x28>
 8009812:	2010      	movs	r0, #16
 8009814:	f7ff ff90 	bl	8009738 <malloc>
 8009818:	4602      	mov	r2, r0
 800981a:	6268      	str	r0, [r5, #36]	; 0x24
 800981c:	b920      	cbnz	r0, 8009828 <_Bfree+0x20>
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <_Bfree+0x3c>)
 8009820:	4809      	ldr	r0, [pc, #36]	; (8009848 <_Bfree+0x40>)
 8009822:	218a      	movs	r1, #138	; 0x8a
 8009824:	f000 fefe 	bl	800a624 <__assert_func>
 8009828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800982c:	6006      	str	r6, [r0, #0]
 800982e:	60c6      	str	r6, [r0, #12]
 8009830:	b13c      	cbz	r4, 8009842 <_Bfree+0x3a>
 8009832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800983c:	6021      	str	r1, [r4, #0]
 800983e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	0800b25e 	.word	0x0800b25e
 8009848:	0800b35c 	.word	0x0800b35c

0800984c <__multadd>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	690d      	ldr	r5, [r1, #16]
 8009852:	4607      	mov	r7, r0
 8009854:	460c      	mov	r4, r1
 8009856:	461e      	mov	r6, r3
 8009858:	f101 0c14 	add.w	ip, r1, #20
 800985c:	2000      	movs	r0, #0
 800985e:	f8dc 3000 	ldr.w	r3, [ip]
 8009862:	b299      	uxth	r1, r3
 8009864:	fb02 6101 	mla	r1, r2, r1, r6
 8009868:	0c1e      	lsrs	r6, r3, #16
 800986a:	0c0b      	lsrs	r3, r1, #16
 800986c:	fb02 3306 	mla	r3, r2, r6, r3
 8009870:	b289      	uxth	r1, r1
 8009872:	3001      	adds	r0, #1
 8009874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009878:	4285      	cmp	r5, r0
 800987a:	f84c 1b04 	str.w	r1, [ip], #4
 800987e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009882:	dcec      	bgt.n	800985e <__multadd+0x12>
 8009884:	b30e      	cbz	r6, 80098ca <__multadd+0x7e>
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	42ab      	cmp	r3, r5
 800988a:	dc19      	bgt.n	80098c0 <__multadd+0x74>
 800988c:	6861      	ldr	r1, [r4, #4]
 800988e:	4638      	mov	r0, r7
 8009890:	3101      	adds	r1, #1
 8009892:	f7ff ff79 	bl	8009788 <_Balloc>
 8009896:	4680      	mov	r8, r0
 8009898:	b928      	cbnz	r0, 80098a6 <__multadd+0x5a>
 800989a:	4602      	mov	r2, r0
 800989c:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <__multadd+0x84>)
 800989e:	480d      	ldr	r0, [pc, #52]	; (80098d4 <__multadd+0x88>)
 80098a0:	21b5      	movs	r1, #181	; 0xb5
 80098a2:	f000 febf 	bl	800a624 <__assert_func>
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	3202      	adds	r2, #2
 80098aa:	f104 010c 	add.w	r1, r4, #12
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	300c      	adds	r0, #12
 80098b2:	f7ff ff5b 	bl	800976c <memcpy>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff ffa5 	bl	8009808 <_Bfree>
 80098be:	4644      	mov	r4, r8
 80098c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098c4:	3501      	adds	r5, #1
 80098c6:	615e      	str	r6, [r3, #20]
 80098c8:	6125      	str	r5, [r4, #16]
 80098ca:	4620      	mov	r0, r4
 80098cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d0:	0800b2d0 	.word	0x0800b2d0
 80098d4:	0800b35c 	.word	0x0800b35c

080098d8 <__s2b>:
 80098d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	4615      	mov	r5, r2
 80098e0:	461f      	mov	r7, r3
 80098e2:	2209      	movs	r2, #9
 80098e4:	3308      	adds	r3, #8
 80098e6:	4606      	mov	r6, r0
 80098e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80098ec:	2100      	movs	r1, #0
 80098ee:	2201      	movs	r2, #1
 80098f0:	429a      	cmp	r2, r3
 80098f2:	db09      	blt.n	8009908 <__s2b+0x30>
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff ff47 	bl	8009788 <_Balloc>
 80098fa:	b940      	cbnz	r0, 800990e <__s2b+0x36>
 80098fc:	4602      	mov	r2, r0
 80098fe:	4b19      	ldr	r3, [pc, #100]	; (8009964 <__s2b+0x8c>)
 8009900:	4819      	ldr	r0, [pc, #100]	; (8009968 <__s2b+0x90>)
 8009902:	21ce      	movs	r1, #206	; 0xce
 8009904:	f000 fe8e 	bl	800a624 <__assert_func>
 8009908:	0052      	lsls	r2, r2, #1
 800990a:	3101      	adds	r1, #1
 800990c:	e7f0      	b.n	80098f0 <__s2b+0x18>
 800990e:	9b08      	ldr	r3, [sp, #32]
 8009910:	6143      	str	r3, [r0, #20]
 8009912:	2d09      	cmp	r5, #9
 8009914:	f04f 0301 	mov.w	r3, #1
 8009918:	6103      	str	r3, [r0, #16]
 800991a:	dd16      	ble.n	800994a <__s2b+0x72>
 800991c:	f104 0909 	add.w	r9, r4, #9
 8009920:	46c8      	mov	r8, r9
 8009922:	442c      	add	r4, r5
 8009924:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009928:	4601      	mov	r1, r0
 800992a:	3b30      	subs	r3, #48	; 0x30
 800992c:	220a      	movs	r2, #10
 800992e:	4630      	mov	r0, r6
 8009930:	f7ff ff8c 	bl	800984c <__multadd>
 8009934:	45a0      	cmp	r8, r4
 8009936:	d1f5      	bne.n	8009924 <__s2b+0x4c>
 8009938:	f1a5 0408 	sub.w	r4, r5, #8
 800993c:	444c      	add	r4, r9
 800993e:	1b2d      	subs	r5, r5, r4
 8009940:	1963      	adds	r3, r4, r5
 8009942:	42bb      	cmp	r3, r7
 8009944:	db04      	blt.n	8009950 <__s2b+0x78>
 8009946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994a:	340a      	adds	r4, #10
 800994c:	2509      	movs	r5, #9
 800994e:	e7f6      	b.n	800993e <__s2b+0x66>
 8009950:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009954:	4601      	mov	r1, r0
 8009956:	3b30      	subs	r3, #48	; 0x30
 8009958:	220a      	movs	r2, #10
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ff76 	bl	800984c <__multadd>
 8009960:	e7ee      	b.n	8009940 <__s2b+0x68>
 8009962:	bf00      	nop
 8009964:	0800b2d0 	.word	0x0800b2d0
 8009968:	0800b35c 	.word	0x0800b35c

0800996c <__hi0bits>:
 800996c:	0c03      	lsrs	r3, r0, #16
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	b9d3      	cbnz	r3, 80099a8 <__hi0bits+0x3c>
 8009972:	0400      	lsls	r0, r0, #16
 8009974:	2310      	movs	r3, #16
 8009976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800997a:	bf04      	itt	eq
 800997c:	0200      	lsleq	r0, r0, #8
 800997e:	3308      	addeq	r3, #8
 8009980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009984:	bf04      	itt	eq
 8009986:	0100      	lsleq	r0, r0, #4
 8009988:	3304      	addeq	r3, #4
 800998a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800998e:	bf04      	itt	eq
 8009990:	0080      	lsleq	r0, r0, #2
 8009992:	3302      	addeq	r3, #2
 8009994:	2800      	cmp	r0, #0
 8009996:	db05      	blt.n	80099a4 <__hi0bits+0x38>
 8009998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800999c:	f103 0301 	add.w	r3, r3, #1
 80099a0:	bf08      	it	eq
 80099a2:	2320      	moveq	r3, #32
 80099a4:	4618      	mov	r0, r3
 80099a6:	4770      	bx	lr
 80099a8:	2300      	movs	r3, #0
 80099aa:	e7e4      	b.n	8009976 <__hi0bits+0xa>

080099ac <__lo0bits>:
 80099ac:	6803      	ldr	r3, [r0, #0]
 80099ae:	f013 0207 	ands.w	r2, r3, #7
 80099b2:	4601      	mov	r1, r0
 80099b4:	d00b      	beq.n	80099ce <__lo0bits+0x22>
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d423      	bmi.n	8009a02 <__lo0bits+0x56>
 80099ba:	0798      	lsls	r0, r3, #30
 80099bc:	bf49      	itett	mi
 80099be:	085b      	lsrmi	r3, r3, #1
 80099c0:	089b      	lsrpl	r3, r3, #2
 80099c2:	2001      	movmi	r0, #1
 80099c4:	600b      	strmi	r3, [r1, #0]
 80099c6:	bf5c      	itt	pl
 80099c8:	600b      	strpl	r3, [r1, #0]
 80099ca:	2002      	movpl	r0, #2
 80099cc:	4770      	bx	lr
 80099ce:	b298      	uxth	r0, r3
 80099d0:	b9a8      	cbnz	r0, 80099fe <__lo0bits+0x52>
 80099d2:	0c1b      	lsrs	r3, r3, #16
 80099d4:	2010      	movs	r0, #16
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	b90a      	cbnz	r2, 80099de <__lo0bits+0x32>
 80099da:	3008      	adds	r0, #8
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	071a      	lsls	r2, r3, #28
 80099e0:	bf04      	itt	eq
 80099e2:	091b      	lsreq	r3, r3, #4
 80099e4:	3004      	addeq	r0, #4
 80099e6:	079a      	lsls	r2, r3, #30
 80099e8:	bf04      	itt	eq
 80099ea:	089b      	lsreq	r3, r3, #2
 80099ec:	3002      	addeq	r0, #2
 80099ee:	07da      	lsls	r2, r3, #31
 80099f0:	d403      	bmi.n	80099fa <__lo0bits+0x4e>
 80099f2:	085b      	lsrs	r3, r3, #1
 80099f4:	f100 0001 	add.w	r0, r0, #1
 80099f8:	d005      	beq.n	8009a06 <__lo0bits+0x5a>
 80099fa:	600b      	str	r3, [r1, #0]
 80099fc:	4770      	bx	lr
 80099fe:	4610      	mov	r0, r2
 8009a00:	e7e9      	b.n	80099d6 <__lo0bits+0x2a>
 8009a02:	2000      	movs	r0, #0
 8009a04:	4770      	bx	lr
 8009a06:	2020      	movs	r0, #32
 8009a08:	4770      	bx	lr
	...

08009a0c <__i2b>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	2101      	movs	r1, #1
 8009a12:	f7ff feb9 	bl	8009788 <_Balloc>
 8009a16:	4602      	mov	r2, r0
 8009a18:	b928      	cbnz	r0, 8009a26 <__i2b+0x1a>
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <__i2b+0x24>)
 8009a1c:	4805      	ldr	r0, [pc, #20]	; (8009a34 <__i2b+0x28>)
 8009a1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a22:	f000 fdff 	bl	800a624 <__assert_func>
 8009a26:	2301      	movs	r3, #1
 8009a28:	6144      	str	r4, [r0, #20]
 8009a2a:	6103      	str	r3, [r0, #16]
 8009a2c:	bd10      	pop	{r4, pc}
 8009a2e:	bf00      	nop
 8009a30:	0800b2d0 	.word	0x0800b2d0
 8009a34:	0800b35c 	.word	0x0800b35c

08009a38 <__multiply>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	4691      	mov	r9, r2
 8009a3e:	690a      	ldr	r2, [r1, #16]
 8009a40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bfb8      	it	lt
 8009a48:	460b      	movlt	r3, r1
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	bfbc      	itt	lt
 8009a4e:	464c      	movlt	r4, r9
 8009a50:	4699      	movlt	r9, r3
 8009a52:	6927      	ldr	r7, [r4, #16]
 8009a54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a58:	68a3      	ldr	r3, [r4, #8]
 8009a5a:	6861      	ldr	r1, [r4, #4]
 8009a5c:	eb07 060a 	add.w	r6, r7, sl
 8009a60:	42b3      	cmp	r3, r6
 8009a62:	b085      	sub	sp, #20
 8009a64:	bfb8      	it	lt
 8009a66:	3101      	addlt	r1, #1
 8009a68:	f7ff fe8e 	bl	8009788 <_Balloc>
 8009a6c:	b930      	cbnz	r0, 8009a7c <__multiply+0x44>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b44      	ldr	r3, [pc, #272]	; (8009b84 <__multiply+0x14c>)
 8009a72:	4845      	ldr	r0, [pc, #276]	; (8009b88 <__multiply+0x150>)
 8009a74:	f240 115d 	movw	r1, #349	; 0x15d
 8009a78:	f000 fdd4 	bl	800a624 <__assert_func>
 8009a7c:	f100 0514 	add.w	r5, r0, #20
 8009a80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a84:	462b      	mov	r3, r5
 8009a86:	2200      	movs	r2, #0
 8009a88:	4543      	cmp	r3, r8
 8009a8a:	d321      	bcc.n	8009ad0 <__multiply+0x98>
 8009a8c:	f104 0314 	add.w	r3, r4, #20
 8009a90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a94:	f109 0314 	add.w	r3, r9, #20
 8009a98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a9c:	9202      	str	r2, [sp, #8]
 8009a9e:	1b3a      	subs	r2, r7, r4
 8009aa0:	3a15      	subs	r2, #21
 8009aa2:	f022 0203 	bic.w	r2, r2, #3
 8009aa6:	3204      	adds	r2, #4
 8009aa8:	f104 0115 	add.w	r1, r4, #21
 8009aac:	428f      	cmp	r7, r1
 8009aae:	bf38      	it	cc
 8009ab0:	2204      	movcc	r2, #4
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	9a02      	ldr	r2, [sp, #8]
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d80c      	bhi.n	8009ad6 <__multiply+0x9e>
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	dd03      	ble.n	8009ac8 <__multiply+0x90>
 8009ac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d05a      	beq.n	8009b7e <__multiply+0x146>
 8009ac8:	6106      	str	r6, [r0, #16]
 8009aca:	b005      	add	sp, #20
 8009acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad0:	f843 2b04 	str.w	r2, [r3], #4
 8009ad4:	e7d8      	b.n	8009a88 <__multiply+0x50>
 8009ad6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	d024      	beq.n	8009b2a <__multiply+0xf2>
 8009ae0:	f104 0e14 	add.w	lr, r4, #20
 8009ae4:	46a9      	mov	r9, r5
 8009ae6:	f04f 0c00 	mov.w	ip, #0
 8009aea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009aee:	f8d9 1000 	ldr.w	r1, [r9]
 8009af2:	fa1f fb82 	uxth.w	fp, r2
 8009af6:	b289      	uxth	r1, r1
 8009af8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009afc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b00:	f8d9 2000 	ldr.w	r2, [r9]
 8009b04:	4461      	add	r1, ip
 8009b06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b12:	b289      	uxth	r1, r1
 8009b14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b18:	4577      	cmp	r7, lr
 8009b1a:	f849 1b04 	str.w	r1, [r9], #4
 8009b1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b22:	d8e2      	bhi.n	8009aea <__multiply+0xb2>
 8009b24:	9a01      	ldr	r2, [sp, #4]
 8009b26:	f845 c002 	str.w	ip, [r5, r2]
 8009b2a:	9a03      	ldr	r2, [sp, #12]
 8009b2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b30:	3304      	adds	r3, #4
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	d020      	beq.n	8009b7a <__multiply+0x142>
 8009b38:	6829      	ldr	r1, [r5, #0]
 8009b3a:	f104 0c14 	add.w	ip, r4, #20
 8009b3e:	46ae      	mov	lr, r5
 8009b40:	f04f 0a00 	mov.w	sl, #0
 8009b44:	f8bc b000 	ldrh.w	fp, [ip]
 8009b48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009b50:	4492      	add	sl, r2
 8009b52:	b289      	uxth	r1, r1
 8009b54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b58:	f84e 1b04 	str.w	r1, [lr], #4
 8009b5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b60:	f8be 1000 	ldrh.w	r1, [lr]
 8009b64:	0c12      	lsrs	r2, r2, #16
 8009b66:	fb09 1102 	mla	r1, r9, r2, r1
 8009b6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b6e:	4567      	cmp	r7, ip
 8009b70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b74:	d8e6      	bhi.n	8009b44 <__multiply+0x10c>
 8009b76:	9a01      	ldr	r2, [sp, #4]
 8009b78:	50a9      	str	r1, [r5, r2]
 8009b7a:	3504      	adds	r5, #4
 8009b7c:	e79a      	b.n	8009ab4 <__multiply+0x7c>
 8009b7e:	3e01      	subs	r6, #1
 8009b80:	e79c      	b.n	8009abc <__multiply+0x84>
 8009b82:	bf00      	nop
 8009b84:	0800b2d0 	.word	0x0800b2d0
 8009b88:	0800b35c 	.word	0x0800b35c

08009b8c <__pow5mult>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	4615      	mov	r5, r2
 8009b92:	f012 0203 	ands.w	r2, r2, #3
 8009b96:	4606      	mov	r6, r0
 8009b98:	460f      	mov	r7, r1
 8009b9a:	d007      	beq.n	8009bac <__pow5mult+0x20>
 8009b9c:	4c25      	ldr	r4, [pc, #148]	; (8009c34 <__pow5mult+0xa8>)
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ba6:	f7ff fe51 	bl	800984c <__multadd>
 8009baa:	4607      	mov	r7, r0
 8009bac:	10ad      	asrs	r5, r5, #2
 8009bae:	d03d      	beq.n	8009c2c <__pow5mult+0xa0>
 8009bb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bb2:	b97c      	cbnz	r4, 8009bd4 <__pow5mult+0x48>
 8009bb4:	2010      	movs	r0, #16
 8009bb6:	f7ff fdbf 	bl	8009738 <malloc>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	6270      	str	r0, [r6, #36]	; 0x24
 8009bbe:	b928      	cbnz	r0, 8009bcc <__pow5mult+0x40>
 8009bc0:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <__pow5mult+0xac>)
 8009bc2:	481e      	ldr	r0, [pc, #120]	; (8009c3c <__pow5mult+0xb0>)
 8009bc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bc8:	f000 fd2c 	bl	800a624 <__assert_func>
 8009bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bd0:	6004      	str	r4, [r0, #0]
 8009bd2:	60c4      	str	r4, [r0, #12]
 8009bd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bdc:	b94c      	cbnz	r4, 8009bf2 <__pow5mult+0x66>
 8009bde:	f240 2171 	movw	r1, #625	; 0x271
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7ff ff12 	bl	8009a0c <__i2b>
 8009be8:	2300      	movs	r3, #0
 8009bea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bee:	4604      	mov	r4, r0
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	f04f 0900 	mov.w	r9, #0
 8009bf6:	07eb      	lsls	r3, r5, #31
 8009bf8:	d50a      	bpl.n	8009c10 <__pow5mult+0x84>
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ff1a 	bl	8009a38 <__multiply>
 8009c04:	4639      	mov	r1, r7
 8009c06:	4680      	mov	r8, r0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff fdfd 	bl	8009808 <_Bfree>
 8009c0e:	4647      	mov	r7, r8
 8009c10:	106d      	asrs	r5, r5, #1
 8009c12:	d00b      	beq.n	8009c2c <__pow5mult+0xa0>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	b938      	cbnz	r0, 8009c28 <__pow5mult+0x9c>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f7ff ff0b 	bl	8009a38 <__multiply>
 8009c22:	6020      	str	r0, [r4, #0]
 8009c24:	f8c0 9000 	str.w	r9, [r0]
 8009c28:	4604      	mov	r4, r0
 8009c2a:	e7e4      	b.n	8009bf6 <__pow5mult+0x6a>
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c32:	bf00      	nop
 8009c34:	0800b4a8 	.word	0x0800b4a8
 8009c38:	0800b25e 	.word	0x0800b25e
 8009c3c:	0800b35c 	.word	0x0800b35c

08009c40 <__lshift>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	6849      	ldr	r1, [r1, #4]
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	4607      	mov	r7, r0
 8009c52:	4691      	mov	r9, r2
 8009c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c58:	f108 0601 	add.w	r6, r8, #1
 8009c5c:	42b3      	cmp	r3, r6
 8009c5e:	db0b      	blt.n	8009c78 <__lshift+0x38>
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff fd91 	bl	8009788 <_Balloc>
 8009c66:	4605      	mov	r5, r0
 8009c68:	b948      	cbnz	r0, 8009c7e <__lshift+0x3e>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <__lshift+0xd8>)
 8009c6e:	482b      	ldr	r0, [pc, #172]	; (8009d1c <__lshift+0xdc>)
 8009c70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c74:	f000 fcd6 	bl	800a624 <__assert_func>
 8009c78:	3101      	adds	r1, #1
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	e7ee      	b.n	8009c5c <__lshift+0x1c>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f100 0114 	add.w	r1, r0, #20
 8009c84:	f100 0210 	add.w	r2, r0, #16
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4553      	cmp	r3, sl
 8009c8c:	db37      	blt.n	8009cfe <__lshift+0xbe>
 8009c8e:	6920      	ldr	r0, [r4, #16]
 8009c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c94:	f104 0314 	add.w	r3, r4, #20
 8009c98:	f019 091f 	ands.w	r9, r9, #31
 8009c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ca4:	d02f      	beq.n	8009d06 <__lshift+0xc6>
 8009ca6:	f1c9 0e20 	rsb	lr, r9, #32
 8009caa:	468a      	mov	sl, r1
 8009cac:	f04f 0c00 	mov.w	ip, #0
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	fa02 f209 	lsl.w	r2, r2, r9
 8009cb6:	ea42 020c 	orr.w	r2, r2, ip
 8009cba:	f84a 2b04 	str.w	r2, [sl], #4
 8009cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cc8:	d8f2      	bhi.n	8009cb0 <__lshift+0x70>
 8009cca:	1b03      	subs	r3, r0, r4
 8009ccc:	3b15      	subs	r3, #21
 8009cce:	f023 0303 	bic.w	r3, r3, #3
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	f104 0215 	add.w	r2, r4, #21
 8009cd8:	4290      	cmp	r0, r2
 8009cda:	bf38      	it	cc
 8009cdc:	2304      	movcc	r3, #4
 8009cde:	f841 c003 	str.w	ip, [r1, r3]
 8009ce2:	f1bc 0f00 	cmp.w	ip, #0
 8009ce6:	d001      	beq.n	8009cec <__lshift+0xac>
 8009ce8:	f108 0602 	add.w	r6, r8, #2
 8009cec:	3e01      	subs	r6, #1
 8009cee:	4638      	mov	r0, r7
 8009cf0:	612e      	str	r6, [r5, #16]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	f7ff fd88 	bl	8009808 <_Bfree>
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d02:	3301      	adds	r3, #1
 8009d04:	e7c1      	b.n	8009c8a <__lshift+0x4a>
 8009d06:	3904      	subs	r1, #4
 8009d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d10:	4298      	cmp	r0, r3
 8009d12:	d8f9      	bhi.n	8009d08 <__lshift+0xc8>
 8009d14:	e7ea      	b.n	8009cec <__lshift+0xac>
 8009d16:	bf00      	nop
 8009d18:	0800b2d0 	.word	0x0800b2d0
 8009d1c:	0800b35c 	.word	0x0800b35c

08009d20 <__mcmp>:
 8009d20:	b530      	push	{r4, r5, lr}
 8009d22:	6902      	ldr	r2, [r0, #16]
 8009d24:	690c      	ldr	r4, [r1, #16]
 8009d26:	1b12      	subs	r2, r2, r4
 8009d28:	d10e      	bne.n	8009d48 <__mcmp+0x28>
 8009d2a:	f100 0314 	add.w	r3, r0, #20
 8009d2e:	3114      	adds	r1, #20
 8009d30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d40:	42a5      	cmp	r5, r4
 8009d42:	d003      	beq.n	8009d4c <__mcmp+0x2c>
 8009d44:	d305      	bcc.n	8009d52 <__mcmp+0x32>
 8009d46:	2201      	movs	r2, #1
 8009d48:	4610      	mov	r0, r2
 8009d4a:	bd30      	pop	{r4, r5, pc}
 8009d4c:	4283      	cmp	r3, r0
 8009d4e:	d3f3      	bcc.n	8009d38 <__mcmp+0x18>
 8009d50:	e7fa      	b.n	8009d48 <__mcmp+0x28>
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	e7f7      	b.n	8009d48 <__mcmp+0x28>

08009d58 <__mdiff>:
 8009d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	4606      	mov	r6, r0
 8009d60:	4611      	mov	r1, r2
 8009d62:	4620      	mov	r0, r4
 8009d64:	4690      	mov	r8, r2
 8009d66:	f7ff ffdb 	bl	8009d20 <__mcmp>
 8009d6a:	1e05      	subs	r5, r0, #0
 8009d6c:	d110      	bne.n	8009d90 <__mdiff+0x38>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff fd09 	bl	8009788 <_Balloc>
 8009d76:	b930      	cbnz	r0, 8009d86 <__mdiff+0x2e>
 8009d78:	4b3a      	ldr	r3, [pc, #232]	; (8009e64 <__mdiff+0x10c>)
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f240 2132 	movw	r1, #562	; 0x232
 8009d80:	4839      	ldr	r0, [pc, #228]	; (8009e68 <__mdiff+0x110>)
 8009d82:	f000 fc4f 	bl	800a624 <__assert_func>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d90:	bfa4      	itt	ge
 8009d92:	4643      	movge	r3, r8
 8009d94:	46a0      	movge	r8, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d9c:	bfa6      	itte	ge
 8009d9e:	461c      	movge	r4, r3
 8009da0:	2500      	movge	r5, #0
 8009da2:	2501      	movlt	r5, #1
 8009da4:	f7ff fcf0 	bl	8009788 <_Balloc>
 8009da8:	b920      	cbnz	r0, 8009db4 <__mdiff+0x5c>
 8009daa:	4b2e      	ldr	r3, [pc, #184]	; (8009e64 <__mdiff+0x10c>)
 8009dac:	4602      	mov	r2, r0
 8009dae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009db2:	e7e5      	b.n	8009d80 <__mdiff+0x28>
 8009db4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009db8:	6926      	ldr	r6, [r4, #16]
 8009dba:	60c5      	str	r5, [r0, #12]
 8009dbc:	f104 0914 	add.w	r9, r4, #20
 8009dc0:	f108 0514 	add.w	r5, r8, #20
 8009dc4:	f100 0e14 	add.w	lr, r0, #20
 8009dc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009dcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dd0:	f108 0210 	add.w	r2, r8, #16
 8009dd4:	46f2      	mov	sl, lr
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ddc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009de0:	fa1f f883 	uxth.w	r8, r3
 8009de4:	fa11 f18b 	uxtah	r1, r1, fp
 8009de8:	0c1b      	lsrs	r3, r3, #16
 8009dea:	eba1 0808 	sub.w	r8, r1, r8
 8009dee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009df2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009df6:	fa1f f888 	uxth.w	r8, r8
 8009dfa:	1419      	asrs	r1, r3, #16
 8009dfc:	454e      	cmp	r6, r9
 8009dfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e02:	f84a 3b04 	str.w	r3, [sl], #4
 8009e06:	d8e7      	bhi.n	8009dd8 <__mdiff+0x80>
 8009e08:	1b33      	subs	r3, r6, r4
 8009e0a:	3b15      	subs	r3, #21
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	3304      	adds	r3, #4
 8009e12:	3415      	adds	r4, #21
 8009e14:	42a6      	cmp	r6, r4
 8009e16:	bf38      	it	cc
 8009e18:	2304      	movcc	r3, #4
 8009e1a:	441d      	add	r5, r3
 8009e1c:	4473      	add	r3, lr
 8009e1e:	469e      	mov	lr, r3
 8009e20:	462e      	mov	r6, r5
 8009e22:	4566      	cmp	r6, ip
 8009e24:	d30e      	bcc.n	8009e44 <__mdiff+0xec>
 8009e26:	f10c 0203 	add.w	r2, ip, #3
 8009e2a:	1b52      	subs	r2, r2, r5
 8009e2c:	f022 0203 	bic.w	r2, r2, #3
 8009e30:	3d03      	subs	r5, #3
 8009e32:	45ac      	cmp	ip, r5
 8009e34:	bf38      	it	cc
 8009e36:	2200      	movcc	r2, #0
 8009e38:	441a      	add	r2, r3
 8009e3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e3e:	b17b      	cbz	r3, 8009e60 <__mdiff+0x108>
 8009e40:	6107      	str	r7, [r0, #16]
 8009e42:	e7a3      	b.n	8009d8c <__mdiff+0x34>
 8009e44:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e48:	fa11 f288 	uxtah	r2, r1, r8
 8009e4c:	1414      	asrs	r4, r2, #16
 8009e4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e52:	b292      	uxth	r2, r2
 8009e54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e58:	f84e 2b04 	str.w	r2, [lr], #4
 8009e5c:	1421      	asrs	r1, r4, #16
 8009e5e:	e7e0      	b.n	8009e22 <__mdiff+0xca>
 8009e60:	3f01      	subs	r7, #1
 8009e62:	e7ea      	b.n	8009e3a <__mdiff+0xe2>
 8009e64:	0800b2d0 	.word	0x0800b2d0
 8009e68:	0800b35c 	.word	0x0800b35c

08009e6c <__ulp>:
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	ed8d 0b00 	vstr	d0, [sp]
 8009e72:	9b01      	ldr	r3, [sp, #4]
 8009e74:	4912      	ldr	r1, [pc, #72]	; (8009ec0 <__ulp+0x54>)
 8009e76:	4019      	ands	r1, r3
 8009e78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	dd05      	ble.n	8009e8c <__ulp+0x20>
 8009e80:	2200      	movs	r2, #0
 8009e82:	460b      	mov	r3, r1
 8009e84:	ec43 2b10 	vmov	d0, r2, r3
 8009e88:	b002      	add	sp, #8
 8009e8a:	4770      	bx	lr
 8009e8c:	4249      	negs	r1, r1
 8009e8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009e92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	da04      	bge.n	8009eaa <__ulp+0x3e>
 8009ea0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ea4:	fa41 f300 	asr.w	r3, r1, r0
 8009ea8:	e7ec      	b.n	8009e84 <__ulp+0x18>
 8009eaa:	f1a0 0114 	sub.w	r1, r0, #20
 8009eae:	291e      	cmp	r1, #30
 8009eb0:	bfda      	itte	le
 8009eb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009eb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009eba:	2101      	movgt	r1, #1
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	e7e1      	b.n	8009e84 <__ulp+0x18>
 8009ec0:	7ff00000 	.word	0x7ff00000

08009ec4 <__b2d>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	6905      	ldr	r5, [r0, #16]
 8009ec8:	f100 0714 	add.w	r7, r0, #20
 8009ecc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ed0:	1f2e      	subs	r6, r5, #4
 8009ed2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff fd48 	bl	800996c <__hi0bits>
 8009edc:	f1c0 0320 	rsb	r3, r0, #32
 8009ee0:	280a      	cmp	r0, #10
 8009ee2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009f60 <__b2d+0x9c>
 8009ee6:	600b      	str	r3, [r1, #0]
 8009ee8:	dc14      	bgt.n	8009f14 <__b2d+0x50>
 8009eea:	f1c0 0e0b 	rsb	lr, r0, #11
 8009eee:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ef2:	42b7      	cmp	r7, r6
 8009ef4:	ea41 030c 	orr.w	r3, r1, ip
 8009ef8:	bf34      	ite	cc
 8009efa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009efe:	2100      	movcs	r1, #0
 8009f00:	3015      	adds	r0, #21
 8009f02:	fa04 f000 	lsl.w	r0, r4, r0
 8009f06:	fa21 f10e 	lsr.w	r1, r1, lr
 8009f0a:	ea40 0201 	orr.w	r2, r0, r1
 8009f0e:	ec43 2b10 	vmov	d0, r2, r3
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	42b7      	cmp	r7, r6
 8009f16:	bf3a      	itte	cc
 8009f18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009f1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009f20:	2100      	movcs	r1, #0
 8009f22:	380b      	subs	r0, #11
 8009f24:	d017      	beq.n	8009f56 <__b2d+0x92>
 8009f26:	f1c0 0c20 	rsb	ip, r0, #32
 8009f2a:	fa04 f500 	lsl.w	r5, r4, r0
 8009f2e:	42be      	cmp	r6, r7
 8009f30:	fa21 f40c 	lsr.w	r4, r1, ip
 8009f34:	ea45 0504 	orr.w	r5, r5, r4
 8009f38:	bf8c      	ite	hi
 8009f3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009f3e:	2400      	movls	r4, #0
 8009f40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009f44:	fa01 f000 	lsl.w	r0, r1, r0
 8009f48:	fa24 f40c 	lsr.w	r4, r4, ip
 8009f4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f50:	ea40 0204 	orr.w	r2, r0, r4
 8009f54:	e7db      	b.n	8009f0e <__b2d+0x4a>
 8009f56:	ea44 030c 	orr.w	r3, r4, ip
 8009f5a:	460a      	mov	r2, r1
 8009f5c:	e7d7      	b.n	8009f0e <__b2d+0x4a>
 8009f5e:	bf00      	nop
 8009f60:	3ff00000 	.word	0x3ff00000

08009f64 <__d2b>:
 8009f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	4689      	mov	r9, r1
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	ec57 6b10 	vmov	r6, r7, d0
 8009f70:	4690      	mov	r8, r2
 8009f72:	f7ff fc09 	bl	8009788 <_Balloc>
 8009f76:	4604      	mov	r4, r0
 8009f78:	b930      	cbnz	r0, 8009f88 <__d2b+0x24>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	4b25      	ldr	r3, [pc, #148]	; (800a014 <__d2b+0xb0>)
 8009f7e:	4826      	ldr	r0, [pc, #152]	; (800a018 <__d2b+0xb4>)
 8009f80:	f240 310a 	movw	r1, #778	; 0x30a
 8009f84:	f000 fb4e 	bl	800a624 <__assert_func>
 8009f88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f90:	bb35      	cbnz	r5, 8009fe0 <__d2b+0x7c>
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	d028      	beq.n	8009fea <__d2b+0x86>
 8009f98:	4668      	mov	r0, sp
 8009f9a:	9600      	str	r6, [sp, #0]
 8009f9c:	f7ff fd06 	bl	80099ac <__lo0bits>
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	b300      	cbz	r0, 8009fe6 <__d2b+0x82>
 8009fa4:	9a01      	ldr	r2, [sp, #4]
 8009fa6:	f1c0 0320 	rsb	r3, r0, #32
 8009faa:	fa02 f303 	lsl.w	r3, r2, r3
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	40c2      	lsrs	r2, r0
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	61a3      	str	r3, [r4, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bf14      	ite	ne
 8009fbe:	2202      	movne	r2, #2
 8009fc0:	2201      	moveq	r2, #1
 8009fc2:	6122      	str	r2, [r4, #16]
 8009fc4:	b1d5      	cbz	r5, 8009ffc <__d2b+0x98>
 8009fc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fca:	4405      	add	r5, r0
 8009fcc:	f8c9 5000 	str.w	r5, [r9]
 8009fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fd4:	f8c8 0000 	str.w	r0, [r8]
 8009fd8:	4620      	mov	r0, r4
 8009fda:	b003      	add	sp, #12
 8009fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fe4:	e7d5      	b.n	8009f92 <__d2b+0x2e>
 8009fe6:	6161      	str	r1, [r4, #20]
 8009fe8:	e7e5      	b.n	8009fb6 <__d2b+0x52>
 8009fea:	a801      	add	r0, sp, #4
 8009fec:	f7ff fcde 	bl	80099ac <__lo0bits>
 8009ff0:	9b01      	ldr	r3, [sp, #4]
 8009ff2:	6163      	str	r3, [r4, #20]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	6122      	str	r2, [r4, #16]
 8009ff8:	3020      	adds	r0, #32
 8009ffa:	e7e3      	b.n	8009fc4 <__d2b+0x60>
 8009ffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a004:	f8c9 0000 	str.w	r0, [r9]
 800a008:	6918      	ldr	r0, [r3, #16]
 800a00a:	f7ff fcaf 	bl	800996c <__hi0bits>
 800a00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a012:	e7df      	b.n	8009fd4 <__d2b+0x70>
 800a014:	0800b2d0 	.word	0x0800b2d0
 800a018:	0800b35c 	.word	0x0800b35c

0800a01c <__ratio>:
 800a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4688      	mov	r8, r1
 800a022:	4669      	mov	r1, sp
 800a024:	4681      	mov	r9, r0
 800a026:	f7ff ff4d 	bl	8009ec4 <__b2d>
 800a02a:	a901      	add	r1, sp, #4
 800a02c:	4640      	mov	r0, r8
 800a02e:	ec55 4b10 	vmov	r4, r5, d0
 800a032:	f7ff ff47 	bl	8009ec4 <__b2d>
 800a036:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a03a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a03e:	eba3 0c02 	sub.w	ip, r3, r2
 800a042:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a04c:	ec51 0b10 	vmov	r0, r1, d0
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfd6      	itet	le
 800a054:	460a      	movle	r2, r1
 800a056:	462a      	movgt	r2, r5
 800a058:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a05c:	468b      	mov	fp, r1
 800a05e:	462f      	mov	r7, r5
 800a060:	bfd4      	ite	le
 800a062:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a066:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a06a:	4620      	mov	r0, r4
 800a06c:	ee10 2a10 	vmov	r2, s0
 800a070:	465b      	mov	r3, fp
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fc0a 	bl	800088c <__aeabi_ddiv>
 800a078:	ec41 0b10 	vmov	d0, r0, r1
 800a07c:	b003      	add	sp, #12
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a082 <__copybits>:
 800a082:	3901      	subs	r1, #1
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	1149      	asrs	r1, r1, #5
 800a088:	6914      	ldr	r4, [r2, #16]
 800a08a:	3101      	adds	r1, #1
 800a08c:	f102 0314 	add.w	r3, r2, #20
 800a090:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a094:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a098:	1f05      	subs	r5, r0, #4
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d30c      	bcc.n	800a0b8 <__copybits+0x36>
 800a09e:	1aa3      	subs	r3, r4, r2
 800a0a0:	3b11      	subs	r3, #17
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	3211      	adds	r2, #17
 800a0a8:	42a2      	cmp	r2, r4
 800a0aa:	bf88      	it	hi
 800a0ac:	2300      	movhi	r3, #0
 800a0ae:	4418      	add	r0, r3
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4288      	cmp	r0, r1
 800a0b4:	d305      	bcc.n	800a0c2 <__copybits+0x40>
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0c0:	e7eb      	b.n	800a09a <__copybits+0x18>
 800a0c2:	f840 3b04 	str.w	r3, [r0], #4
 800a0c6:	e7f4      	b.n	800a0b2 <__copybits+0x30>

0800a0c8 <__any_on>:
 800a0c8:	f100 0214 	add.w	r2, r0, #20
 800a0cc:	6900      	ldr	r0, [r0, #16]
 800a0ce:	114b      	asrs	r3, r1, #5
 800a0d0:	4298      	cmp	r0, r3
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	db11      	blt.n	800a0fa <__any_on+0x32>
 800a0d6:	dd0a      	ble.n	800a0ee <__any_on+0x26>
 800a0d8:	f011 011f 	ands.w	r1, r1, #31
 800a0dc:	d007      	beq.n	800a0ee <__any_on+0x26>
 800a0de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0e2:	fa24 f001 	lsr.w	r0, r4, r1
 800a0e6:	fa00 f101 	lsl.w	r1, r0, r1
 800a0ea:	428c      	cmp	r4, r1
 800a0ec:	d10b      	bne.n	800a106 <__any_on+0x3e>
 800a0ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d803      	bhi.n	800a0fe <__any_on+0x36>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	bd10      	pop	{r4, pc}
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	e7f7      	b.n	800a0ee <__any_on+0x26>
 800a0fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a102:	2900      	cmp	r1, #0
 800a104:	d0f5      	beq.n	800a0f2 <__any_on+0x2a>
 800a106:	2001      	movs	r0, #1
 800a108:	e7f6      	b.n	800a0f8 <__any_on+0x30>

0800a10a <_calloc_r>:
 800a10a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10c:	fba1 2402 	umull	r2, r4, r1, r2
 800a110:	b94c      	cbnz	r4, 800a126 <_calloc_r+0x1c>
 800a112:	4611      	mov	r1, r2
 800a114:	9201      	str	r2, [sp, #4]
 800a116:	f000 f87b 	bl	800a210 <_malloc_r>
 800a11a:	9a01      	ldr	r2, [sp, #4]
 800a11c:	4605      	mov	r5, r0
 800a11e:	b930      	cbnz	r0, 800a12e <_calloc_r+0x24>
 800a120:	4628      	mov	r0, r5
 800a122:	b003      	add	sp, #12
 800a124:	bd30      	pop	{r4, r5, pc}
 800a126:	220c      	movs	r2, #12
 800a128:	6002      	str	r2, [r0, #0]
 800a12a:	2500      	movs	r5, #0
 800a12c:	e7f8      	b.n	800a120 <_calloc_r+0x16>
 800a12e:	4621      	mov	r1, r4
 800a130:	f7fc fb32 	bl	8006798 <memset>
 800a134:	e7f4      	b.n	800a120 <_calloc_r+0x16>
	...

0800a138 <_free_r>:
 800a138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13a:	2900      	cmp	r1, #0
 800a13c:	d044      	beq.n	800a1c8 <_free_r+0x90>
 800a13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a142:	9001      	str	r0, [sp, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f1a1 0404 	sub.w	r4, r1, #4
 800a14a:	bfb8      	it	lt
 800a14c:	18e4      	addlt	r4, r4, r3
 800a14e:	f000 fc6d 	bl	800aa2c <__malloc_lock>
 800a152:	4a1e      	ldr	r2, [pc, #120]	; (800a1cc <_free_r+0x94>)
 800a154:	9801      	ldr	r0, [sp, #4]
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	b933      	cbnz	r3, 800a168 <_free_r+0x30>
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	6014      	str	r4, [r2, #0]
 800a15e:	b003      	add	sp, #12
 800a160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a164:	f000 bc68 	b.w	800aa38 <__malloc_unlock>
 800a168:	42a3      	cmp	r3, r4
 800a16a:	d908      	bls.n	800a17e <_free_r+0x46>
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	428b      	cmp	r3, r1
 800a172:	bf01      	itttt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	e7ed      	b.n	800a15a <_free_r+0x22>
 800a17e:	461a      	mov	r2, r3
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	b10b      	cbz	r3, 800a188 <_free_r+0x50>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d9fa      	bls.n	800a17e <_free_r+0x46>
 800a188:	6811      	ldr	r1, [r2, #0]
 800a18a:	1855      	adds	r5, r2, r1
 800a18c:	42a5      	cmp	r5, r4
 800a18e:	d10b      	bne.n	800a1a8 <_free_r+0x70>
 800a190:	6824      	ldr	r4, [r4, #0]
 800a192:	4421      	add	r1, r4
 800a194:	1854      	adds	r4, r2, r1
 800a196:	42a3      	cmp	r3, r4
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	d1e0      	bne.n	800a15e <_free_r+0x26>
 800a19c:	681c      	ldr	r4, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	6053      	str	r3, [r2, #4]
 800a1a2:	4421      	add	r1, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	e7da      	b.n	800a15e <_free_r+0x26>
 800a1a8:	d902      	bls.n	800a1b0 <_free_r+0x78>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	6003      	str	r3, [r0, #0]
 800a1ae:	e7d6      	b.n	800a15e <_free_r+0x26>
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	1961      	adds	r1, r4, r5
 800a1b4:	428b      	cmp	r3, r1
 800a1b6:	bf04      	itt	eq
 800a1b8:	6819      	ldreq	r1, [r3, #0]
 800a1ba:	685b      	ldreq	r3, [r3, #4]
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	bf04      	itt	eq
 800a1c0:	1949      	addeq	r1, r1, r5
 800a1c2:	6021      	streq	r1, [r4, #0]
 800a1c4:	6054      	str	r4, [r2, #4]
 800a1c6:	e7ca      	b.n	800a15e <_free_r+0x26>
 800a1c8:	b003      	add	sp, #12
 800a1ca:	bd30      	pop	{r4, r5, pc}
 800a1cc:	2000042c 	.word	0x2000042c

0800a1d0 <sbrk_aligned>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	4e0e      	ldr	r6, [pc, #56]	; (800a20c <sbrk_aligned+0x3c>)
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	6831      	ldr	r1, [r6, #0]
 800a1d8:	4605      	mov	r5, r0
 800a1da:	b911      	cbnz	r1, 800a1e2 <sbrk_aligned+0x12>
 800a1dc:	f000 fa04 	bl	800a5e8 <_sbrk_r>
 800a1e0:	6030      	str	r0, [r6, #0]
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 f9ff 	bl	800a5e8 <_sbrk_r>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d00a      	beq.n	800a204 <sbrk_aligned+0x34>
 800a1ee:	1cc4      	adds	r4, r0, #3
 800a1f0:	f024 0403 	bic.w	r4, r4, #3
 800a1f4:	42a0      	cmp	r0, r4
 800a1f6:	d007      	beq.n	800a208 <sbrk_aligned+0x38>
 800a1f8:	1a21      	subs	r1, r4, r0
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f000 f9f4 	bl	800a5e8 <_sbrk_r>
 800a200:	3001      	adds	r0, #1
 800a202:	d101      	bne.n	800a208 <sbrk_aligned+0x38>
 800a204:	f04f 34ff 	mov.w	r4, #4294967295
 800a208:	4620      	mov	r0, r4
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	20000430 	.word	0x20000430

0800a210 <_malloc_r>:
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	1ccd      	adds	r5, r1, #3
 800a216:	f025 0503 	bic.w	r5, r5, #3
 800a21a:	3508      	adds	r5, #8
 800a21c:	2d0c      	cmp	r5, #12
 800a21e:	bf38      	it	cc
 800a220:	250c      	movcc	r5, #12
 800a222:	2d00      	cmp	r5, #0
 800a224:	4607      	mov	r7, r0
 800a226:	db01      	blt.n	800a22c <_malloc_r+0x1c>
 800a228:	42a9      	cmp	r1, r5
 800a22a:	d905      	bls.n	800a238 <_malloc_r+0x28>
 800a22c:	230c      	movs	r3, #12
 800a22e:	603b      	str	r3, [r7, #0]
 800a230:	2600      	movs	r6, #0
 800a232:	4630      	mov	r0, r6
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a238:	4e2e      	ldr	r6, [pc, #184]	; (800a2f4 <_malloc_r+0xe4>)
 800a23a:	f000 fbf7 	bl	800aa2c <__malloc_lock>
 800a23e:	6833      	ldr	r3, [r6, #0]
 800a240:	461c      	mov	r4, r3
 800a242:	bb34      	cbnz	r4, 800a292 <_malloc_r+0x82>
 800a244:	4629      	mov	r1, r5
 800a246:	4638      	mov	r0, r7
 800a248:	f7ff ffc2 	bl	800a1d0 <sbrk_aligned>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	4604      	mov	r4, r0
 800a250:	d14d      	bne.n	800a2ee <_malloc_r+0xde>
 800a252:	6834      	ldr	r4, [r6, #0]
 800a254:	4626      	mov	r6, r4
 800a256:	2e00      	cmp	r6, #0
 800a258:	d140      	bne.n	800a2dc <_malloc_r+0xcc>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	4631      	mov	r1, r6
 800a25e:	4638      	mov	r0, r7
 800a260:	eb04 0803 	add.w	r8, r4, r3
 800a264:	f000 f9c0 	bl	800a5e8 <_sbrk_r>
 800a268:	4580      	cmp	r8, r0
 800a26a:	d13a      	bne.n	800a2e2 <_malloc_r+0xd2>
 800a26c:	6821      	ldr	r1, [r4, #0]
 800a26e:	3503      	adds	r5, #3
 800a270:	1a6d      	subs	r5, r5, r1
 800a272:	f025 0503 	bic.w	r5, r5, #3
 800a276:	3508      	adds	r5, #8
 800a278:	2d0c      	cmp	r5, #12
 800a27a:	bf38      	it	cc
 800a27c:	250c      	movcc	r5, #12
 800a27e:	4629      	mov	r1, r5
 800a280:	4638      	mov	r0, r7
 800a282:	f7ff ffa5 	bl	800a1d0 <sbrk_aligned>
 800a286:	3001      	adds	r0, #1
 800a288:	d02b      	beq.n	800a2e2 <_malloc_r+0xd2>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	442b      	add	r3, r5
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	e00e      	b.n	800a2b0 <_malloc_r+0xa0>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	1b52      	subs	r2, r2, r5
 800a296:	d41e      	bmi.n	800a2d6 <_malloc_r+0xc6>
 800a298:	2a0b      	cmp	r2, #11
 800a29a:	d916      	bls.n	800a2ca <_malloc_r+0xba>
 800a29c:	1961      	adds	r1, r4, r5
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	6025      	str	r5, [r4, #0]
 800a2a2:	bf18      	it	ne
 800a2a4:	6059      	strne	r1, [r3, #4]
 800a2a6:	6863      	ldr	r3, [r4, #4]
 800a2a8:	bf08      	it	eq
 800a2aa:	6031      	streq	r1, [r6, #0]
 800a2ac:	5162      	str	r2, [r4, r5]
 800a2ae:	604b      	str	r3, [r1, #4]
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f104 060b 	add.w	r6, r4, #11
 800a2b6:	f000 fbbf 	bl	800aa38 <__malloc_unlock>
 800a2ba:	f026 0607 	bic.w	r6, r6, #7
 800a2be:	1d23      	adds	r3, r4, #4
 800a2c0:	1af2      	subs	r2, r6, r3
 800a2c2:	d0b6      	beq.n	800a232 <_malloc_r+0x22>
 800a2c4:	1b9b      	subs	r3, r3, r6
 800a2c6:	50a3      	str	r3, [r4, r2]
 800a2c8:	e7b3      	b.n	800a232 <_malloc_r+0x22>
 800a2ca:	6862      	ldr	r2, [r4, #4]
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	bf0c      	ite	eq
 800a2d0:	6032      	streq	r2, [r6, #0]
 800a2d2:	605a      	strne	r2, [r3, #4]
 800a2d4:	e7ec      	b.n	800a2b0 <_malloc_r+0xa0>
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	6864      	ldr	r4, [r4, #4]
 800a2da:	e7b2      	b.n	800a242 <_malloc_r+0x32>
 800a2dc:	4634      	mov	r4, r6
 800a2de:	6876      	ldr	r6, [r6, #4]
 800a2e0:	e7b9      	b.n	800a256 <_malloc_r+0x46>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	603b      	str	r3, [r7, #0]
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f000 fba6 	bl	800aa38 <__malloc_unlock>
 800a2ec:	e7a1      	b.n	800a232 <_malloc_r+0x22>
 800a2ee:	6025      	str	r5, [r4, #0]
 800a2f0:	e7de      	b.n	800a2b0 <_malloc_r+0xa0>
 800a2f2:	bf00      	nop
 800a2f4:	2000042c 	.word	0x2000042c

0800a2f8 <__ssputs_r>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	688e      	ldr	r6, [r1, #8]
 800a2fe:	429e      	cmp	r6, r3
 800a300:	4682      	mov	sl, r0
 800a302:	460c      	mov	r4, r1
 800a304:	4690      	mov	r8, r2
 800a306:	461f      	mov	r7, r3
 800a308:	d838      	bhi.n	800a37c <__ssputs_r+0x84>
 800a30a:	898a      	ldrh	r2, [r1, #12]
 800a30c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a310:	d032      	beq.n	800a378 <__ssputs_r+0x80>
 800a312:	6825      	ldr	r5, [r4, #0]
 800a314:	6909      	ldr	r1, [r1, #16]
 800a316:	eba5 0901 	sub.w	r9, r5, r1
 800a31a:	6965      	ldr	r5, [r4, #20]
 800a31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a324:	3301      	adds	r3, #1
 800a326:	444b      	add	r3, r9
 800a328:	106d      	asrs	r5, r5, #1
 800a32a:	429d      	cmp	r5, r3
 800a32c:	bf38      	it	cc
 800a32e:	461d      	movcc	r5, r3
 800a330:	0553      	lsls	r3, r2, #21
 800a332:	d531      	bpl.n	800a398 <__ssputs_r+0xa0>
 800a334:	4629      	mov	r1, r5
 800a336:	f7ff ff6b 	bl	800a210 <_malloc_r>
 800a33a:	4606      	mov	r6, r0
 800a33c:	b950      	cbnz	r0, 800a354 <__ssputs_r+0x5c>
 800a33e:	230c      	movs	r3, #12
 800a340:	f8ca 3000 	str.w	r3, [sl]
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295
 800a350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a354:	6921      	ldr	r1, [r4, #16]
 800a356:	464a      	mov	r2, r9
 800a358:	f7ff fa08 	bl	800976c <memcpy>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	6126      	str	r6, [r4, #16]
 800a36a:	6165      	str	r5, [r4, #20]
 800a36c:	444e      	add	r6, r9
 800a36e:	eba5 0509 	sub.w	r5, r5, r9
 800a372:	6026      	str	r6, [r4, #0]
 800a374:	60a5      	str	r5, [r4, #8]
 800a376:	463e      	mov	r6, r7
 800a378:	42be      	cmp	r6, r7
 800a37a:	d900      	bls.n	800a37e <__ssputs_r+0x86>
 800a37c:	463e      	mov	r6, r7
 800a37e:	6820      	ldr	r0, [r4, #0]
 800a380:	4632      	mov	r2, r6
 800a382:	4641      	mov	r1, r8
 800a384:	f000 fb38 	bl	800a9f8 <memmove>
 800a388:	68a3      	ldr	r3, [r4, #8]
 800a38a:	1b9b      	subs	r3, r3, r6
 800a38c:	60a3      	str	r3, [r4, #8]
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	4433      	add	r3, r6
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	2000      	movs	r0, #0
 800a396:	e7db      	b.n	800a350 <__ssputs_r+0x58>
 800a398:	462a      	mov	r2, r5
 800a39a:	f000 fb53 	bl	800aa44 <_realloc_r>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d1e1      	bne.n	800a368 <__ssputs_r+0x70>
 800a3a4:	6921      	ldr	r1, [r4, #16]
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7ff fec6 	bl	800a138 <_free_r>
 800a3ac:	e7c7      	b.n	800a33e <__ssputs_r+0x46>
	...

0800a3b0 <_svfiprintf_r>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	4698      	mov	r8, r3
 800a3b6:	898b      	ldrh	r3, [r1, #12]
 800a3b8:	061b      	lsls	r3, r3, #24
 800a3ba:	b09d      	sub	sp, #116	; 0x74
 800a3bc:	4607      	mov	r7, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	d50e      	bpl.n	800a3e2 <_svfiprintf_r+0x32>
 800a3c4:	690b      	ldr	r3, [r1, #16]
 800a3c6:	b963      	cbnz	r3, 800a3e2 <_svfiprintf_r+0x32>
 800a3c8:	2140      	movs	r1, #64	; 0x40
 800a3ca:	f7ff ff21 	bl	800a210 <_malloc_r>
 800a3ce:	6028      	str	r0, [r5, #0]
 800a3d0:	6128      	str	r0, [r5, #16]
 800a3d2:	b920      	cbnz	r0, 800a3de <_svfiprintf_r+0x2e>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	e0d1      	b.n	800a582 <_svfiprintf_r+0x1d2>
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	616b      	str	r3, [r5, #20]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e6:	2320      	movs	r3, #32
 800a3e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f0:	2330      	movs	r3, #48	; 0x30
 800a3f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a59c <_svfiprintf_r+0x1ec>
 800a3f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3fa:	f04f 0901 	mov.w	r9, #1
 800a3fe:	4623      	mov	r3, r4
 800a400:	469a      	mov	sl, r3
 800a402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a406:	b10a      	cbz	r2, 800a40c <_svfiprintf_r+0x5c>
 800a408:	2a25      	cmp	r2, #37	; 0x25
 800a40a:	d1f9      	bne.n	800a400 <_svfiprintf_r+0x50>
 800a40c:	ebba 0b04 	subs.w	fp, sl, r4
 800a410:	d00b      	beq.n	800a42a <_svfiprintf_r+0x7a>
 800a412:	465b      	mov	r3, fp
 800a414:	4622      	mov	r2, r4
 800a416:	4629      	mov	r1, r5
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff ff6d 	bl	800a2f8 <__ssputs_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	f000 80aa 	beq.w	800a578 <_svfiprintf_r+0x1c8>
 800a424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a426:	445a      	add	r2, fp
 800a428:	9209      	str	r2, [sp, #36]	; 0x24
 800a42a:	f89a 3000 	ldrb.w	r3, [sl]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80a2 	beq.w	800a578 <_svfiprintf_r+0x1c8>
 800a434:	2300      	movs	r3, #0
 800a436:	f04f 32ff 	mov.w	r2, #4294967295
 800a43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43e:	f10a 0a01 	add.w	sl, sl, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	9307      	str	r3, [sp, #28]
 800a446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a44a:	931a      	str	r3, [sp, #104]	; 0x68
 800a44c:	4654      	mov	r4, sl
 800a44e:	2205      	movs	r2, #5
 800a450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a454:	4851      	ldr	r0, [pc, #324]	; (800a59c <_svfiprintf_r+0x1ec>)
 800a456:	f7f5 fee3 	bl	8000220 <memchr>
 800a45a:	9a04      	ldr	r2, [sp, #16]
 800a45c:	b9d8      	cbnz	r0, 800a496 <_svfiprintf_r+0xe6>
 800a45e:	06d0      	lsls	r0, r2, #27
 800a460:	bf44      	itt	mi
 800a462:	2320      	movmi	r3, #32
 800a464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a468:	0711      	lsls	r1, r2, #28
 800a46a:	bf44      	itt	mi
 800a46c:	232b      	movmi	r3, #43	; 0x2b
 800a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a472:	f89a 3000 	ldrb.w	r3, [sl]
 800a476:	2b2a      	cmp	r3, #42	; 0x2a
 800a478:	d015      	beq.n	800a4a6 <_svfiprintf_r+0xf6>
 800a47a:	9a07      	ldr	r2, [sp, #28]
 800a47c:	4654      	mov	r4, sl
 800a47e:	2000      	movs	r0, #0
 800a480:	f04f 0c0a 	mov.w	ip, #10
 800a484:	4621      	mov	r1, r4
 800a486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a48a:	3b30      	subs	r3, #48	; 0x30
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d94e      	bls.n	800a52e <_svfiprintf_r+0x17e>
 800a490:	b1b0      	cbz	r0, 800a4c0 <_svfiprintf_r+0x110>
 800a492:	9207      	str	r2, [sp, #28]
 800a494:	e014      	b.n	800a4c0 <_svfiprintf_r+0x110>
 800a496:	eba0 0308 	sub.w	r3, r0, r8
 800a49a:	fa09 f303 	lsl.w	r3, r9, r3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	46a2      	mov	sl, r4
 800a4a4:	e7d2      	b.n	800a44c <_svfiprintf_r+0x9c>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	1d19      	adds	r1, r3, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	9103      	str	r1, [sp, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfbb      	ittet	lt
 800a4b2:	425b      	neglt	r3, r3
 800a4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b8:	9307      	strge	r3, [sp, #28]
 800a4ba:	9307      	strlt	r3, [sp, #28]
 800a4bc:	bfb8      	it	lt
 800a4be:	9204      	strlt	r2, [sp, #16]
 800a4c0:	7823      	ldrb	r3, [r4, #0]
 800a4c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4c4:	d10c      	bne.n	800a4e0 <_svfiprintf_r+0x130>
 800a4c6:	7863      	ldrb	r3, [r4, #1]
 800a4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ca:	d135      	bne.n	800a538 <_svfiprintf_r+0x188>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	1d1a      	adds	r2, r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bfb8      	it	lt
 800a4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4dc:	3402      	adds	r4, #2
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5ac <_svfiprintf_r+0x1fc>
 800a4e4:	7821      	ldrb	r1, [r4, #0]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	f7f5 fe99 	bl	8000220 <memchr>
 800a4ee:	b140      	cbz	r0, 800a502 <_svfiprintf_r+0x152>
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	eba0 000a 	sub.w	r0, r0, sl
 800a4f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	4303      	orrs	r3, r0
 800a4fe:	3401      	adds	r4, #1
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a506:	4826      	ldr	r0, [pc, #152]	; (800a5a0 <_svfiprintf_r+0x1f0>)
 800a508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a50c:	2206      	movs	r2, #6
 800a50e:	f7f5 fe87 	bl	8000220 <memchr>
 800a512:	2800      	cmp	r0, #0
 800a514:	d038      	beq.n	800a588 <_svfiprintf_r+0x1d8>
 800a516:	4b23      	ldr	r3, [pc, #140]	; (800a5a4 <_svfiprintf_r+0x1f4>)
 800a518:	bb1b      	cbnz	r3, 800a562 <_svfiprintf_r+0x1b2>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	3307      	adds	r3, #7
 800a51e:	f023 0307 	bic.w	r3, r3, #7
 800a522:	3308      	adds	r3, #8
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a528:	4433      	add	r3, r6
 800a52a:	9309      	str	r3, [sp, #36]	; 0x24
 800a52c:	e767      	b.n	800a3fe <_svfiprintf_r+0x4e>
 800a52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a532:	460c      	mov	r4, r1
 800a534:	2001      	movs	r0, #1
 800a536:	e7a5      	b.n	800a484 <_svfiprintf_r+0xd4>
 800a538:	2300      	movs	r3, #0
 800a53a:	3401      	adds	r4, #1
 800a53c:	9305      	str	r3, [sp, #20]
 800a53e:	4619      	mov	r1, r3
 800a540:	f04f 0c0a 	mov.w	ip, #10
 800a544:	4620      	mov	r0, r4
 800a546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a54a:	3a30      	subs	r2, #48	; 0x30
 800a54c:	2a09      	cmp	r2, #9
 800a54e:	d903      	bls.n	800a558 <_svfiprintf_r+0x1a8>
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0c5      	beq.n	800a4e0 <_svfiprintf_r+0x130>
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	e7c3      	b.n	800a4e0 <_svfiprintf_r+0x130>
 800a558:	fb0c 2101 	mla	r1, ip, r1, r2
 800a55c:	4604      	mov	r4, r0
 800a55e:	2301      	movs	r3, #1
 800a560:	e7f0      	b.n	800a544 <_svfiprintf_r+0x194>
 800a562:	ab03      	add	r3, sp, #12
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	462a      	mov	r2, r5
 800a568:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <_svfiprintf_r+0x1f8>)
 800a56a:	a904      	add	r1, sp, #16
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7fc f9bb 	bl	80068e8 <_printf_float>
 800a572:	1c42      	adds	r2, r0, #1
 800a574:	4606      	mov	r6, r0
 800a576:	d1d6      	bne.n	800a526 <_svfiprintf_r+0x176>
 800a578:	89ab      	ldrh	r3, [r5, #12]
 800a57a:	065b      	lsls	r3, r3, #25
 800a57c:	f53f af2c 	bmi.w	800a3d8 <_svfiprintf_r+0x28>
 800a580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a582:	b01d      	add	sp, #116	; 0x74
 800a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a588:	ab03      	add	r3, sp, #12
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	462a      	mov	r2, r5
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <_svfiprintf_r+0x1f8>)
 800a590:	a904      	add	r1, sp, #16
 800a592:	4638      	mov	r0, r7
 800a594:	f7fc fc4c 	bl	8006e30 <_printf_i>
 800a598:	e7eb      	b.n	800a572 <_svfiprintf_r+0x1c2>
 800a59a:	bf00      	nop
 800a59c:	0800b4b4 	.word	0x0800b4b4
 800a5a0:	0800b4be 	.word	0x0800b4be
 800a5a4:	080068e9 	.word	0x080068e9
 800a5a8:	0800a2f9 	.word	0x0800a2f9
 800a5ac:	0800b4ba 	.word	0x0800b4ba

0800a5b0 <_read_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d07      	ldr	r5, [pc, #28]	; (800a5d0 <_read_r+0x20>)
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f7f7 f994 	bl	80018ec <_read>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_read_r+0x1e>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_read_r+0x1e>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20000434 	.word	0x20000434
 800a5d4:	00000000 	.word	0x00000000

0800a5d8 <nan>:
 800a5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a5e0 <nan+0x8>
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	7ff80000 	.word	0x7ff80000

0800a5e8 <_sbrk_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	; (800a604 <_sbrk_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7f7 f9e8 	bl	80019c8 <_sbrk>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_sbrk_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_sbrk_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20000434 	.word	0x20000434

0800a608 <__ascii_wctomb>:
 800a608:	b149      	cbz	r1, 800a61e <__ascii_wctomb+0x16>
 800a60a:	2aff      	cmp	r2, #255	; 0xff
 800a60c:	bf85      	ittet	hi
 800a60e:	238a      	movhi	r3, #138	; 0x8a
 800a610:	6003      	strhi	r3, [r0, #0]
 800a612:	700a      	strbls	r2, [r1, #0]
 800a614:	f04f 30ff 	movhi.w	r0, #4294967295
 800a618:	bf98      	it	ls
 800a61a:	2001      	movls	r0, #1
 800a61c:	4770      	bx	lr
 800a61e:	4608      	mov	r0, r1
 800a620:	4770      	bx	lr
	...

0800a624 <__assert_func>:
 800a624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a626:	4614      	mov	r4, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <__assert_func+0x2c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4605      	mov	r5, r0
 800a630:	68d8      	ldr	r0, [r3, #12]
 800a632:	b14c      	cbz	r4, 800a648 <__assert_func+0x24>
 800a634:	4b07      	ldr	r3, [pc, #28]	; (800a654 <__assert_func+0x30>)
 800a636:	9100      	str	r1, [sp, #0]
 800a638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a63c:	4906      	ldr	r1, [pc, #24]	; (800a658 <__assert_func+0x34>)
 800a63e:	462b      	mov	r3, r5
 800a640:	f000 f9a6 	bl	800a990 <fiprintf>
 800a644:	f000 fc46 	bl	800aed4 <abort>
 800a648:	4b04      	ldr	r3, [pc, #16]	; (800a65c <__assert_func+0x38>)
 800a64a:	461c      	mov	r4, r3
 800a64c:	e7f3      	b.n	800a636 <__assert_func+0x12>
 800a64e:	bf00      	nop
 800a650:	2000000c 	.word	0x2000000c
 800a654:	0800b4c5 	.word	0x0800b4c5
 800a658:	0800b4d2 	.word	0x0800b4d2
 800a65c:	0800b500 	.word	0x0800b500

0800a660 <__sflush_r>:
 800a660:	898a      	ldrh	r2, [r1, #12]
 800a662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a666:	4605      	mov	r5, r0
 800a668:	0710      	lsls	r0, r2, #28
 800a66a:	460c      	mov	r4, r1
 800a66c:	d458      	bmi.n	800a720 <__sflush_r+0xc0>
 800a66e:	684b      	ldr	r3, [r1, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc05      	bgt.n	800a680 <__sflush_r+0x20>
 800a674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	dc02      	bgt.n	800a680 <__sflush_r+0x20>
 800a67a:	2000      	movs	r0, #0
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a682:	2e00      	cmp	r6, #0
 800a684:	d0f9      	beq.n	800a67a <__sflush_r+0x1a>
 800a686:	2300      	movs	r3, #0
 800a688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a68c:	682f      	ldr	r7, [r5, #0]
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	d032      	beq.n	800a6f8 <__sflush_r+0x98>
 800a692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	075a      	lsls	r2, r3, #29
 800a698:	d505      	bpl.n	800a6a6 <__sflush_r+0x46>
 800a69a:	6863      	ldr	r3, [r4, #4]
 800a69c:	1ac0      	subs	r0, r0, r3
 800a69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6a0:	b10b      	cbz	r3, 800a6a6 <__sflush_r+0x46>
 800a6a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6a4:	1ac0      	subs	r0, r0, r3
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ac:	6a21      	ldr	r1, [r4, #32]
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	47b0      	blx	r6
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	d106      	bne.n	800a6c6 <__sflush_r+0x66>
 800a6b8:	6829      	ldr	r1, [r5, #0]
 800a6ba:	291d      	cmp	r1, #29
 800a6bc:	d82c      	bhi.n	800a718 <__sflush_r+0xb8>
 800a6be:	4a2a      	ldr	r2, [pc, #168]	; (800a768 <__sflush_r+0x108>)
 800a6c0:	40ca      	lsrs	r2, r1
 800a6c2:	07d6      	lsls	r6, r2, #31
 800a6c4:	d528      	bpl.n	800a718 <__sflush_r+0xb8>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	6062      	str	r2, [r4, #4]
 800a6ca:	04d9      	lsls	r1, r3, #19
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	6022      	str	r2, [r4, #0]
 800a6d0:	d504      	bpl.n	800a6dc <__sflush_r+0x7c>
 800a6d2:	1c42      	adds	r2, r0, #1
 800a6d4:	d101      	bne.n	800a6da <__sflush_r+0x7a>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	b903      	cbnz	r3, 800a6dc <__sflush_r+0x7c>
 800a6da:	6560      	str	r0, [r4, #84]	; 0x54
 800a6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6de:	602f      	str	r7, [r5, #0]
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	d0ca      	beq.n	800a67a <__sflush_r+0x1a>
 800a6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	d002      	beq.n	800a6f2 <__sflush_r+0x92>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7ff fd23 	bl	800a138 <_free_r>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f6:	e7c1      	b.n	800a67c <__sflush_r+0x1c>
 800a6f8:	6a21      	ldr	r1, [r4, #32]
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b0      	blx	r6
 800a700:	1c41      	adds	r1, r0, #1
 800a702:	d1c7      	bne.n	800a694 <__sflush_r+0x34>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0c4      	beq.n	800a694 <__sflush_r+0x34>
 800a70a:	2b1d      	cmp	r3, #29
 800a70c:	d001      	beq.n	800a712 <__sflush_r+0xb2>
 800a70e:	2b16      	cmp	r3, #22
 800a710:	d101      	bne.n	800a716 <__sflush_r+0xb6>
 800a712:	602f      	str	r7, [r5, #0]
 800a714:	e7b1      	b.n	800a67a <__sflush_r+0x1a>
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	e7ad      	b.n	800a67c <__sflush_r+0x1c>
 800a720:	690f      	ldr	r7, [r1, #16]
 800a722:	2f00      	cmp	r7, #0
 800a724:	d0a9      	beq.n	800a67a <__sflush_r+0x1a>
 800a726:	0793      	lsls	r3, r2, #30
 800a728:	680e      	ldr	r6, [r1, #0]
 800a72a:	bf08      	it	eq
 800a72c:	694b      	ldreq	r3, [r1, #20]
 800a72e:	600f      	str	r7, [r1, #0]
 800a730:	bf18      	it	ne
 800a732:	2300      	movne	r3, #0
 800a734:	eba6 0807 	sub.w	r8, r6, r7
 800a738:	608b      	str	r3, [r1, #8]
 800a73a:	f1b8 0f00 	cmp.w	r8, #0
 800a73e:	dd9c      	ble.n	800a67a <__sflush_r+0x1a>
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a744:	4643      	mov	r3, r8
 800a746:	463a      	mov	r2, r7
 800a748:	4628      	mov	r0, r5
 800a74a:	47b0      	blx	r6
 800a74c:	2800      	cmp	r0, #0
 800a74e:	dc06      	bgt.n	800a75e <__sflush_r+0xfe>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e78e      	b.n	800a67c <__sflush_r+0x1c>
 800a75e:	4407      	add	r7, r0
 800a760:	eba8 0800 	sub.w	r8, r8, r0
 800a764:	e7e9      	b.n	800a73a <__sflush_r+0xda>
 800a766:	bf00      	nop
 800a768:	20400001 	.word	0x20400001

0800a76c <_fflush_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	690b      	ldr	r3, [r1, #16]
 800a770:	4605      	mov	r5, r0
 800a772:	460c      	mov	r4, r1
 800a774:	b913      	cbnz	r3, 800a77c <_fflush_r+0x10>
 800a776:	2500      	movs	r5, #0
 800a778:	4628      	mov	r0, r5
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	b118      	cbz	r0, 800a786 <_fflush_r+0x1a>
 800a77e:	6983      	ldr	r3, [r0, #24]
 800a780:	b90b      	cbnz	r3, 800a786 <_fflush_r+0x1a>
 800a782:	f000 f887 	bl	800a894 <__sinit>
 800a786:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <_fflush_r+0x6c>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	d11b      	bne.n	800a7c4 <_fflush_r+0x58>
 800a78c:	686c      	ldr	r4, [r5, #4]
 800a78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0ef      	beq.n	800a776 <_fflush_r+0xa>
 800a796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a798:	07d0      	lsls	r0, r2, #31
 800a79a:	d404      	bmi.n	800a7a6 <_fflush_r+0x3a>
 800a79c:	0599      	lsls	r1, r3, #22
 800a79e:	d402      	bmi.n	800a7a6 <_fflush_r+0x3a>
 800a7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7a2:	f000 f927 	bl	800a9f4 <__retarget_lock_acquire_recursive>
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	f7ff ff59 	bl	800a660 <__sflush_r>
 800a7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7b0:	07da      	lsls	r2, r3, #31
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	d4e0      	bmi.n	800a778 <_fflush_r+0xc>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	059b      	lsls	r3, r3, #22
 800a7ba:	d4dd      	bmi.n	800a778 <_fflush_r+0xc>
 800a7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7be:	f000 f91a 	bl	800a9f6 <__retarget_lock_release_recursive>
 800a7c2:	e7d9      	b.n	800a778 <_fflush_r+0xc>
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <_fflush_r+0x70>)
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	d101      	bne.n	800a7ce <_fflush_r+0x62>
 800a7ca:	68ac      	ldr	r4, [r5, #8]
 800a7cc:	e7df      	b.n	800a78e <_fflush_r+0x22>
 800a7ce:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <_fflush_r+0x74>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	bf08      	it	eq
 800a7d4:	68ec      	ldreq	r4, [r5, #12]
 800a7d6:	e7da      	b.n	800a78e <_fflush_r+0x22>
 800a7d8:	0800b524 	.word	0x0800b524
 800a7dc:	0800b544 	.word	0x0800b544
 800a7e0:	0800b504 	.word	0x0800b504

0800a7e4 <std>:
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7f2:	6083      	str	r3, [r0, #8]
 800a7f4:	8181      	strh	r1, [r0, #12]
 800a7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7f8:	81c2      	strh	r2, [r0, #14]
 800a7fa:	6183      	str	r3, [r0, #24]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	2208      	movs	r2, #8
 800a800:	305c      	adds	r0, #92	; 0x5c
 800a802:	f7fb ffc9 	bl	8006798 <memset>
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x38>)
 800a808:	6263      	str	r3, [r4, #36]	; 0x24
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <std+0x3c>)
 800a80c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a80e:	4b05      	ldr	r3, [pc, #20]	; (800a824 <std+0x40>)
 800a810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <std+0x44>)
 800a814:	6224      	str	r4, [r4, #32]
 800a816:	6323      	str	r3, [r4, #48]	; 0x30
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	bf00      	nop
 800a81c:	080074e9 	.word	0x080074e9
 800a820:	0800750b 	.word	0x0800750b
 800a824:	08007543 	.word	0x08007543
 800a828:	08007567 	.word	0x08007567

0800a82c <_cleanup_r>:
 800a82c:	4901      	ldr	r1, [pc, #4]	; (800a834 <_cleanup_r+0x8>)
 800a82e:	f000 b8c1 	b.w	800a9b4 <_fwalk_reent>
 800a832:	bf00      	nop
 800a834:	0800a76d 	.word	0x0800a76d

0800a838 <__sfmoreglue>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	2268      	movs	r2, #104	; 0x68
 800a83c:	1e4d      	subs	r5, r1, #1
 800a83e:	4355      	muls	r5, r2
 800a840:	460e      	mov	r6, r1
 800a842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a846:	f7ff fce3 	bl	800a210 <_malloc_r>
 800a84a:	4604      	mov	r4, r0
 800a84c:	b140      	cbz	r0, 800a860 <__sfmoreglue+0x28>
 800a84e:	2100      	movs	r1, #0
 800a850:	e9c0 1600 	strd	r1, r6, [r0]
 800a854:	300c      	adds	r0, #12
 800a856:	60a0      	str	r0, [r4, #8]
 800a858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a85c:	f7fb ff9c 	bl	8006798 <memset>
 800a860:	4620      	mov	r0, r4
 800a862:	bd70      	pop	{r4, r5, r6, pc}

0800a864 <__sfp_lock_acquire>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__sfp_lock_acquire+0x8>)
 800a866:	f000 b8c5 	b.w	800a9f4 <__retarget_lock_acquire_recursive>
 800a86a:	bf00      	nop
 800a86c:	20000439 	.word	0x20000439

0800a870 <__sfp_lock_release>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__sfp_lock_release+0x8>)
 800a872:	f000 b8c0 	b.w	800a9f6 <__retarget_lock_release_recursive>
 800a876:	bf00      	nop
 800a878:	20000439 	.word	0x20000439

0800a87c <__sinit_lock_acquire>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sinit_lock_acquire+0x8>)
 800a87e:	f000 b8b9 	b.w	800a9f4 <__retarget_lock_acquire_recursive>
 800a882:	bf00      	nop
 800a884:	2000043a 	.word	0x2000043a

0800a888 <__sinit_lock_release>:
 800a888:	4801      	ldr	r0, [pc, #4]	; (800a890 <__sinit_lock_release+0x8>)
 800a88a:	f000 b8b4 	b.w	800a9f6 <__retarget_lock_release_recursive>
 800a88e:	bf00      	nop
 800a890:	2000043a 	.word	0x2000043a

0800a894 <__sinit>:
 800a894:	b510      	push	{r4, lr}
 800a896:	4604      	mov	r4, r0
 800a898:	f7ff fff0 	bl	800a87c <__sinit_lock_acquire>
 800a89c:	69a3      	ldr	r3, [r4, #24]
 800a89e:	b11b      	cbz	r3, 800a8a8 <__sinit+0x14>
 800a8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a4:	f7ff bff0 	b.w	800a888 <__sinit_lock_release>
 800a8a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <__sinit+0x68>)
 800a8b0:	4a13      	ldr	r2, [pc, #76]	; (800a900 <__sinit+0x6c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	bf04      	itt	eq
 800a8ba:	2301      	moveq	r3, #1
 800a8bc:	61a3      	streq	r3, [r4, #24]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f820 	bl	800a904 <__sfp>
 800a8c4:	6060      	str	r0, [r4, #4]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 f81c 	bl	800a904 <__sfp>
 800a8cc:	60a0      	str	r0, [r4, #8]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 f818 	bl	800a904 <__sfp>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	60e0      	str	r0, [r4, #12]
 800a8d8:	2104      	movs	r1, #4
 800a8da:	6860      	ldr	r0, [r4, #4]
 800a8dc:	f7ff ff82 	bl	800a7e4 <std>
 800a8e0:	68a0      	ldr	r0, [r4, #8]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	2109      	movs	r1, #9
 800a8e6:	f7ff ff7d 	bl	800a7e4 <std>
 800a8ea:	68e0      	ldr	r0, [r4, #12]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	2112      	movs	r1, #18
 800a8f0:	f7ff ff78 	bl	800a7e4 <std>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	61a3      	str	r3, [r4, #24]
 800a8f8:	e7d2      	b.n	800a8a0 <__sinit+0xc>
 800a8fa:	bf00      	nop
 800a8fc:	0800b0c0 	.word	0x0800b0c0
 800a900:	0800a82d 	.word	0x0800a82d

0800a904 <__sfp>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	4607      	mov	r7, r0
 800a908:	f7ff ffac 	bl	800a864 <__sfp_lock_acquire>
 800a90c:	4b1e      	ldr	r3, [pc, #120]	; (800a988 <__sfp+0x84>)
 800a90e:	681e      	ldr	r6, [r3, #0]
 800a910:	69b3      	ldr	r3, [r6, #24]
 800a912:	b913      	cbnz	r3, 800a91a <__sfp+0x16>
 800a914:	4630      	mov	r0, r6
 800a916:	f7ff ffbd 	bl	800a894 <__sinit>
 800a91a:	3648      	adds	r6, #72	; 0x48
 800a91c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a920:	3b01      	subs	r3, #1
 800a922:	d503      	bpl.n	800a92c <__sfp+0x28>
 800a924:	6833      	ldr	r3, [r6, #0]
 800a926:	b30b      	cbz	r3, 800a96c <__sfp+0x68>
 800a928:	6836      	ldr	r6, [r6, #0]
 800a92a:	e7f7      	b.n	800a91c <__sfp+0x18>
 800a92c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a930:	b9d5      	cbnz	r5, 800a968 <__sfp+0x64>
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <__sfp+0x88>)
 800a934:	60e3      	str	r3, [r4, #12]
 800a936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a93a:	6665      	str	r5, [r4, #100]	; 0x64
 800a93c:	f000 f859 	bl	800a9f2 <__retarget_lock_init_recursive>
 800a940:	f7ff ff96 	bl	800a870 <__sfp_lock_release>
 800a944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a94c:	6025      	str	r5, [r4, #0]
 800a94e:	61a5      	str	r5, [r4, #24]
 800a950:	2208      	movs	r2, #8
 800a952:	4629      	mov	r1, r5
 800a954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a958:	f7fb ff1e 	bl	8006798 <memset>
 800a95c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a964:	4620      	mov	r0, r4
 800a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a968:	3468      	adds	r4, #104	; 0x68
 800a96a:	e7d9      	b.n	800a920 <__sfp+0x1c>
 800a96c:	2104      	movs	r1, #4
 800a96e:	4638      	mov	r0, r7
 800a970:	f7ff ff62 	bl	800a838 <__sfmoreglue>
 800a974:	4604      	mov	r4, r0
 800a976:	6030      	str	r0, [r6, #0]
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1d5      	bne.n	800a928 <__sfp+0x24>
 800a97c:	f7ff ff78 	bl	800a870 <__sfp_lock_release>
 800a980:	230c      	movs	r3, #12
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	e7ee      	b.n	800a964 <__sfp+0x60>
 800a986:	bf00      	nop
 800a988:	0800b0c0 	.word	0x0800b0c0
 800a98c:	ffff0001 	.word	0xffff0001

0800a990 <fiprintf>:
 800a990:	b40e      	push	{r1, r2, r3}
 800a992:	b503      	push	{r0, r1, lr}
 800a994:	4601      	mov	r1, r0
 800a996:	ab03      	add	r3, sp, #12
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <fiprintf+0x20>)
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f000 f8a7 	bl	800aaf4 <_vfiprintf_r>
 800a9a6:	b002      	add	sp, #8
 800a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ac:	b003      	add	sp, #12
 800a9ae:	4770      	bx	lr
 800a9b0:	2000000c 	.word	0x2000000c

0800a9b4 <_fwalk_reent>:
 800a9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	4688      	mov	r8, r1
 800a9bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9c0:	2700      	movs	r7, #0
 800a9c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9c6:	f1b9 0901 	subs.w	r9, r9, #1
 800a9ca:	d505      	bpl.n	800a9d8 <_fwalk_reent+0x24>
 800a9cc:	6824      	ldr	r4, [r4, #0]
 800a9ce:	2c00      	cmp	r4, #0
 800a9d0:	d1f7      	bne.n	800a9c2 <_fwalk_reent+0xe>
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	89ab      	ldrh	r3, [r5, #12]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d907      	bls.n	800a9ee <_fwalk_reent+0x3a>
 800a9de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	d003      	beq.n	800a9ee <_fwalk_reent+0x3a>
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	47c0      	blx	r8
 800a9ec:	4307      	orrs	r7, r0
 800a9ee:	3568      	adds	r5, #104	; 0x68
 800a9f0:	e7e9      	b.n	800a9c6 <_fwalk_reent+0x12>

0800a9f2 <__retarget_lock_init_recursive>:
 800a9f2:	4770      	bx	lr

0800a9f4 <__retarget_lock_acquire_recursive>:
 800a9f4:	4770      	bx	lr

0800a9f6 <__retarget_lock_release_recursive>:
 800a9f6:	4770      	bx	lr

0800a9f8 <memmove>:
 800a9f8:	4288      	cmp	r0, r1
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	eb01 0402 	add.w	r4, r1, r2
 800aa00:	d902      	bls.n	800aa08 <memmove+0x10>
 800aa02:	4284      	cmp	r4, r0
 800aa04:	4623      	mov	r3, r4
 800aa06:	d807      	bhi.n	800aa18 <memmove+0x20>
 800aa08:	1e43      	subs	r3, r0, #1
 800aa0a:	42a1      	cmp	r1, r4
 800aa0c:	d008      	beq.n	800aa20 <memmove+0x28>
 800aa0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa16:	e7f8      	b.n	800aa0a <memmove+0x12>
 800aa18:	4402      	add	r2, r0
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	428a      	cmp	r2, r1
 800aa1e:	d100      	bne.n	800aa22 <memmove+0x2a>
 800aa20:	bd10      	pop	{r4, pc}
 800aa22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa2a:	e7f7      	b.n	800aa1c <memmove+0x24>

0800aa2c <__malloc_lock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__malloc_lock+0x8>)
 800aa2e:	f7ff bfe1 	b.w	800a9f4 <__retarget_lock_acquire_recursive>
 800aa32:	bf00      	nop
 800aa34:	20000438 	.word	0x20000438

0800aa38 <__malloc_unlock>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__malloc_unlock+0x8>)
 800aa3a:	f7ff bfdc 	b.w	800a9f6 <__retarget_lock_release_recursive>
 800aa3e:	bf00      	nop
 800aa40:	20000438 	.word	0x20000438

0800aa44 <_realloc_r>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4680      	mov	r8, r0
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	460e      	mov	r6, r1
 800aa4e:	b921      	cbnz	r1, 800aa5a <_realloc_r+0x16>
 800aa50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	4611      	mov	r1, r2
 800aa56:	f7ff bbdb 	b.w	800a210 <_malloc_r>
 800aa5a:	b92a      	cbnz	r2, 800aa68 <_realloc_r+0x24>
 800aa5c:	f7ff fb6c 	bl	800a138 <_free_r>
 800aa60:	4625      	mov	r5, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	f000 faa0 	bl	800afac <_malloc_usable_size_r>
 800aa6c:	4284      	cmp	r4, r0
 800aa6e:	4607      	mov	r7, r0
 800aa70:	d802      	bhi.n	800aa78 <_realloc_r+0x34>
 800aa72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa76:	d812      	bhi.n	800aa9e <_realloc_r+0x5a>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	f7ff fbc8 	bl	800a210 <_malloc_r>
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0ed      	beq.n	800aa62 <_realloc_r+0x1e>
 800aa86:	42bc      	cmp	r4, r7
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	bf28      	it	cs
 800aa8e:	463a      	movcs	r2, r7
 800aa90:	f7fe fe6c 	bl	800976c <memcpy>
 800aa94:	4631      	mov	r1, r6
 800aa96:	4640      	mov	r0, r8
 800aa98:	f7ff fb4e 	bl	800a138 <_free_r>
 800aa9c:	e7e1      	b.n	800aa62 <_realloc_r+0x1e>
 800aa9e:	4635      	mov	r5, r6
 800aaa0:	e7df      	b.n	800aa62 <_realloc_r+0x1e>

0800aaa2 <__sfputc_r>:
 800aaa2:	6893      	ldr	r3, [r2, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	b410      	push	{r4}
 800aaaa:	6093      	str	r3, [r2, #8]
 800aaac:	da08      	bge.n	800aac0 <__sfputc_r+0x1e>
 800aaae:	6994      	ldr	r4, [r2, #24]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	db01      	blt.n	800aab8 <__sfputc_r+0x16>
 800aab4:	290a      	cmp	r1, #10
 800aab6:	d103      	bne.n	800aac0 <__sfputc_r+0x1e>
 800aab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabc:	f000 b94a 	b.w	800ad54 <__swbuf_r>
 800aac0:	6813      	ldr	r3, [r2, #0]
 800aac2:	1c58      	adds	r0, r3, #1
 800aac4:	6010      	str	r0, [r2, #0]
 800aac6:	7019      	strb	r1, [r3, #0]
 800aac8:	4608      	mov	r0, r1
 800aaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <__sfputs_r>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	4614      	mov	r4, r2
 800aad8:	18d5      	adds	r5, r2, r3
 800aada:	42ac      	cmp	r4, r5
 800aadc:	d101      	bne.n	800aae2 <__sfputs_r+0x12>
 800aade:	2000      	movs	r0, #0
 800aae0:	e007      	b.n	800aaf2 <__sfputs_r+0x22>
 800aae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae6:	463a      	mov	r2, r7
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ffda 	bl	800aaa2 <__sfputc_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d1f3      	bne.n	800aada <__sfputs_r+0xa>
 800aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaf4 <_vfiprintf_r>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	460d      	mov	r5, r1
 800aafa:	b09d      	sub	sp, #116	; 0x74
 800aafc:	4614      	mov	r4, r2
 800aafe:	4698      	mov	r8, r3
 800ab00:	4606      	mov	r6, r0
 800ab02:	b118      	cbz	r0, 800ab0c <_vfiprintf_r+0x18>
 800ab04:	6983      	ldr	r3, [r0, #24]
 800ab06:	b90b      	cbnz	r3, 800ab0c <_vfiprintf_r+0x18>
 800ab08:	f7ff fec4 	bl	800a894 <__sinit>
 800ab0c:	4b89      	ldr	r3, [pc, #548]	; (800ad34 <_vfiprintf_r+0x240>)
 800ab0e:	429d      	cmp	r5, r3
 800ab10:	d11b      	bne.n	800ab4a <_vfiprintf_r+0x56>
 800ab12:	6875      	ldr	r5, [r6, #4]
 800ab14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab16:	07d9      	lsls	r1, r3, #31
 800ab18:	d405      	bmi.n	800ab26 <_vfiprintf_r+0x32>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	059a      	lsls	r2, r3, #22
 800ab1e:	d402      	bmi.n	800ab26 <_vfiprintf_r+0x32>
 800ab20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab22:	f7ff ff67 	bl	800a9f4 <__retarget_lock_acquire_recursive>
 800ab26:	89ab      	ldrh	r3, [r5, #12]
 800ab28:	071b      	lsls	r3, r3, #28
 800ab2a:	d501      	bpl.n	800ab30 <_vfiprintf_r+0x3c>
 800ab2c:	692b      	ldr	r3, [r5, #16]
 800ab2e:	b9eb      	cbnz	r3, 800ab6c <_vfiprintf_r+0x78>
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 f960 	bl	800adf8 <__swsetup_r>
 800ab38:	b1c0      	cbz	r0, 800ab6c <_vfiprintf_r+0x78>
 800ab3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab3c:	07dc      	lsls	r4, r3, #31
 800ab3e:	d50e      	bpl.n	800ab5e <_vfiprintf_r+0x6a>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	b01d      	add	sp, #116	; 0x74
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	4b7b      	ldr	r3, [pc, #492]	; (800ad38 <_vfiprintf_r+0x244>)
 800ab4c:	429d      	cmp	r5, r3
 800ab4e:	d101      	bne.n	800ab54 <_vfiprintf_r+0x60>
 800ab50:	68b5      	ldr	r5, [r6, #8]
 800ab52:	e7df      	b.n	800ab14 <_vfiprintf_r+0x20>
 800ab54:	4b79      	ldr	r3, [pc, #484]	; (800ad3c <_vfiprintf_r+0x248>)
 800ab56:	429d      	cmp	r5, r3
 800ab58:	bf08      	it	eq
 800ab5a:	68f5      	ldreq	r5, [r6, #12]
 800ab5c:	e7da      	b.n	800ab14 <_vfiprintf_r+0x20>
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	0598      	lsls	r0, r3, #22
 800ab62:	d4ed      	bmi.n	800ab40 <_vfiprintf_r+0x4c>
 800ab64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab66:	f7ff ff46 	bl	800a9f6 <__retarget_lock_release_recursive>
 800ab6a:	e7e9      	b.n	800ab40 <_vfiprintf_r+0x4c>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab70:	2320      	movs	r3, #32
 800ab72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab7a:	2330      	movs	r3, #48	; 0x30
 800ab7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad40 <_vfiprintf_r+0x24c>
 800ab80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab84:	f04f 0901 	mov.w	r9, #1
 800ab88:	4623      	mov	r3, r4
 800ab8a:	469a      	mov	sl, r3
 800ab8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab90:	b10a      	cbz	r2, 800ab96 <_vfiprintf_r+0xa2>
 800ab92:	2a25      	cmp	r2, #37	; 0x25
 800ab94:	d1f9      	bne.n	800ab8a <_vfiprintf_r+0x96>
 800ab96:	ebba 0b04 	subs.w	fp, sl, r4
 800ab9a:	d00b      	beq.n	800abb4 <_vfiprintf_r+0xc0>
 800ab9c:	465b      	mov	r3, fp
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	f7ff ff94 	bl	800aad0 <__sfputs_r>
 800aba8:	3001      	adds	r0, #1
 800abaa:	f000 80aa 	beq.w	800ad02 <_vfiprintf_r+0x20e>
 800abae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb0:	445a      	add	r2, fp
 800abb2:	9209      	str	r2, [sp, #36]	; 0x24
 800abb4:	f89a 3000 	ldrb.w	r3, [sl]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80a2 	beq.w	800ad02 <_vfiprintf_r+0x20e>
 800abbe:	2300      	movs	r3, #0
 800abc0:	f04f 32ff 	mov.w	r2, #4294967295
 800abc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc8:	f10a 0a01 	add.w	sl, sl, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abd4:	931a      	str	r3, [sp, #104]	; 0x68
 800abd6:	4654      	mov	r4, sl
 800abd8:	2205      	movs	r2, #5
 800abda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abde:	4858      	ldr	r0, [pc, #352]	; (800ad40 <_vfiprintf_r+0x24c>)
 800abe0:	f7f5 fb1e 	bl	8000220 <memchr>
 800abe4:	9a04      	ldr	r2, [sp, #16]
 800abe6:	b9d8      	cbnz	r0, 800ac20 <_vfiprintf_r+0x12c>
 800abe8:	06d1      	lsls	r1, r2, #27
 800abea:	bf44      	itt	mi
 800abec:	2320      	movmi	r3, #32
 800abee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf2:	0713      	lsls	r3, r2, #28
 800abf4:	bf44      	itt	mi
 800abf6:	232b      	movmi	r3, #43	; 0x2b
 800abf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ac00:	2b2a      	cmp	r3, #42	; 0x2a
 800ac02:	d015      	beq.n	800ac30 <_vfiprintf_r+0x13c>
 800ac04:	9a07      	ldr	r2, [sp, #28]
 800ac06:	4654      	mov	r4, sl
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f04f 0c0a 	mov.w	ip, #10
 800ac0e:	4621      	mov	r1, r4
 800ac10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac14:	3b30      	subs	r3, #48	; 0x30
 800ac16:	2b09      	cmp	r3, #9
 800ac18:	d94e      	bls.n	800acb8 <_vfiprintf_r+0x1c4>
 800ac1a:	b1b0      	cbz	r0, 800ac4a <_vfiprintf_r+0x156>
 800ac1c:	9207      	str	r2, [sp, #28]
 800ac1e:	e014      	b.n	800ac4a <_vfiprintf_r+0x156>
 800ac20:	eba0 0308 	sub.w	r3, r0, r8
 800ac24:	fa09 f303 	lsl.w	r3, r9, r3
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	46a2      	mov	sl, r4
 800ac2e:	e7d2      	b.n	800abd6 <_vfiprintf_r+0xe2>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	1d19      	adds	r1, r3, #4
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	9103      	str	r1, [sp, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bfbb      	ittet	lt
 800ac3c:	425b      	neglt	r3, r3
 800ac3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac42:	9307      	strge	r3, [sp, #28]
 800ac44:	9307      	strlt	r3, [sp, #28]
 800ac46:	bfb8      	it	lt
 800ac48:	9204      	strlt	r2, [sp, #16]
 800ac4a:	7823      	ldrb	r3, [r4, #0]
 800ac4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac4e:	d10c      	bne.n	800ac6a <_vfiprintf_r+0x176>
 800ac50:	7863      	ldrb	r3, [r4, #1]
 800ac52:	2b2a      	cmp	r3, #42	; 0x2a
 800ac54:	d135      	bne.n	800acc2 <_vfiprintf_r+0x1ce>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9203      	str	r2, [sp, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfb8      	it	lt
 800ac62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac66:	3402      	adds	r4, #2
 800ac68:	9305      	str	r3, [sp, #20]
 800ac6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad50 <_vfiprintf_r+0x25c>
 800ac6e:	7821      	ldrb	r1, [r4, #0]
 800ac70:	2203      	movs	r2, #3
 800ac72:	4650      	mov	r0, sl
 800ac74:	f7f5 fad4 	bl	8000220 <memchr>
 800ac78:	b140      	cbz	r0, 800ac8c <_vfiprintf_r+0x198>
 800ac7a:	2340      	movs	r3, #64	; 0x40
 800ac7c:	eba0 000a 	sub.w	r0, r0, sl
 800ac80:	fa03 f000 	lsl.w	r0, r3, r0
 800ac84:	9b04      	ldr	r3, [sp, #16]
 800ac86:	4303      	orrs	r3, r0
 800ac88:	3401      	adds	r4, #1
 800ac8a:	9304      	str	r3, [sp, #16]
 800ac8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac90:	482c      	ldr	r0, [pc, #176]	; (800ad44 <_vfiprintf_r+0x250>)
 800ac92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac96:	2206      	movs	r2, #6
 800ac98:	f7f5 fac2 	bl	8000220 <memchr>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d03f      	beq.n	800ad20 <_vfiprintf_r+0x22c>
 800aca0:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <_vfiprintf_r+0x254>)
 800aca2:	bb1b      	cbnz	r3, 800acec <_vfiprintf_r+0x1f8>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	3307      	adds	r3, #7
 800aca8:	f023 0307 	bic.w	r3, r3, #7
 800acac:	3308      	adds	r3, #8
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb2:	443b      	add	r3, r7
 800acb4:	9309      	str	r3, [sp, #36]	; 0x24
 800acb6:	e767      	b.n	800ab88 <_vfiprintf_r+0x94>
 800acb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acbc:	460c      	mov	r4, r1
 800acbe:	2001      	movs	r0, #1
 800acc0:	e7a5      	b.n	800ac0e <_vfiprintf_r+0x11a>
 800acc2:	2300      	movs	r3, #0
 800acc4:	3401      	adds	r4, #1
 800acc6:	9305      	str	r3, [sp, #20]
 800acc8:	4619      	mov	r1, r3
 800acca:	f04f 0c0a 	mov.w	ip, #10
 800acce:	4620      	mov	r0, r4
 800acd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd4:	3a30      	subs	r2, #48	; 0x30
 800acd6:	2a09      	cmp	r2, #9
 800acd8:	d903      	bls.n	800ace2 <_vfiprintf_r+0x1ee>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0c5      	beq.n	800ac6a <_vfiprintf_r+0x176>
 800acde:	9105      	str	r1, [sp, #20]
 800ace0:	e7c3      	b.n	800ac6a <_vfiprintf_r+0x176>
 800ace2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace6:	4604      	mov	r4, r0
 800ace8:	2301      	movs	r3, #1
 800acea:	e7f0      	b.n	800acce <_vfiprintf_r+0x1da>
 800acec:	ab03      	add	r3, sp, #12
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	462a      	mov	r2, r5
 800acf2:	4b16      	ldr	r3, [pc, #88]	; (800ad4c <_vfiprintf_r+0x258>)
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7fb fdf6 	bl	80068e8 <_printf_float>
 800acfc:	4607      	mov	r7, r0
 800acfe:	1c78      	adds	r0, r7, #1
 800ad00:	d1d6      	bne.n	800acb0 <_vfiprintf_r+0x1bc>
 800ad02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad04:	07d9      	lsls	r1, r3, #31
 800ad06:	d405      	bmi.n	800ad14 <_vfiprintf_r+0x220>
 800ad08:	89ab      	ldrh	r3, [r5, #12]
 800ad0a:	059a      	lsls	r2, r3, #22
 800ad0c:	d402      	bmi.n	800ad14 <_vfiprintf_r+0x220>
 800ad0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad10:	f7ff fe71 	bl	800a9f6 <__retarget_lock_release_recursive>
 800ad14:	89ab      	ldrh	r3, [r5, #12]
 800ad16:	065b      	lsls	r3, r3, #25
 800ad18:	f53f af12 	bmi.w	800ab40 <_vfiprintf_r+0x4c>
 800ad1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1e:	e711      	b.n	800ab44 <_vfiprintf_r+0x50>
 800ad20:	ab03      	add	r3, sp, #12
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	462a      	mov	r2, r5
 800ad26:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <_vfiprintf_r+0x258>)
 800ad28:	a904      	add	r1, sp, #16
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7fc f880 	bl	8006e30 <_printf_i>
 800ad30:	e7e4      	b.n	800acfc <_vfiprintf_r+0x208>
 800ad32:	bf00      	nop
 800ad34:	0800b524 	.word	0x0800b524
 800ad38:	0800b544 	.word	0x0800b544
 800ad3c:	0800b504 	.word	0x0800b504
 800ad40:	0800b4b4 	.word	0x0800b4b4
 800ad44:	0800b4be 	.word	0x0800b4be
 800ad48:	080068e9 	.word	0x080068e9
 800ad4c:	0800aad1 	.word	0x0800aad1
 800ad50:	0800b4ba 	.word	0x0800b4ba

0800ad54 <__swbuf_r>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	460e      	mov	r6, r1
 800ad58:	4614      	mov	r4, r2
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	b118      	cbz	r0, 800ad66 <__swbuf_r+0x12>
 800ad5e:	6983      	ldr	r3, [r0, #24]
 800ad60:	b90b      	cbnz	r3, 800ad66 <__swbuf_r+0x12>
 800ad62:	f7ff fd97 	bl	800a894 <__sinit>
 800ad66:	4b21      	ldr	r3, [pc, #132]	; (800adec <__swbuf_r+0x98>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d12b      	bne.n	800adc4 <__swbuf_r+0x70>
 800ad6c:	686c      	ldr	r4, [r5, #4]
 800ad6e:	69a3      	ldr	r3, [r4, #24]
 800ad70:	60a3      	str	r3, [r4, #8]
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	071a      	lsls	r2, r3, #28
 800ad76:	d52f      	bpl.n	800add8 <__swbuf_r+0x84>
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	b36b      	cbz	r3, 800add8 <__swbuf_r+0x84>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	6820      	ldr	r0, [r4, #0]
 800ad80:	1ac0      	subs	r0, r0, r3
 800ad82:	6963      	ldr	r3, [r4, #20]
 800ad84:	b2f6      	uxtb	r6, r6
 800ad86:	4283      	cmp	r3, r0
 800ad88:	4637      	mov	r7, r6
 800ad8a:	dc04      	bgt.n	800ad96 <__swbuf_r+0x42>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f7ff fcec 	bl	800a76c <_fflush_r>
 800ad94:	bb30      	cbnz	r0, 800ade4 <__swbuf_r+0x90>
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	60a3      	str	r3, [r4, #8]
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	6022      	str	r2, [r4, #0]
 800ada2:	701e      	strb	r6, [r3, #0]
 800ada4:	6963      	ldr	r3, [r4, #20]
 800ada6:	3001      	adds	r0, #1
 800ada8:	4283      	cmp	r3, r0
 800adaa:	d004      	beq.n	800adb6 <__swbuf_r+0x62>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	07db      	lsls	r3, r3, #31
 800adb0:	d506      	bpl.n	800adc0 <__swbuf_r+0x6c>
 800adb2:	2e0a      	cmp	r6, #10
 800adb4:	d104      	bne.n	800adc0 <__swbuf_r+0x6c>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f7ff fcd7 	bl	800a76c <_fflush_r>
 800adbe:	b988      	cbnz	r0, 800ade4 <__swbuf_r+0x90>
 800adc0:	4638      	mov	r0, r7
 800adc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <__swbuf_r+0x9c>)
 800adc6:	429c      	cmp	r4, r3
 800adc8:	d101      	bne.n	800adce <__swbuf_r+0x7a>
 800adca:	68ac      	ldr	r4, [r5, #8]
 800adcc:	e7cf      	b.n	800ad6e <__swbuf_r+0x1a>
 800adce:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <__swbuf_r+0xa0>)
 800add0:	429c      	cmp	r4, r3
 800add2:	bf08      	it	eq
 800add4:	68ec      	ldreq	r4, [r5, #12]
 800add6:	e7ca      	b.n	800ad6e <__swbuf_r+0x1a>
 800add8:	4621      	mov	r1, r4
 800adda:	4628      	mov	r0, r5
 800addc:	f000 f80c 	bl	800adf8 <__swsetup_r>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d0cb      	beq.n	800ad7c <__swbuf_r+0x28>
 800ade4:	f04f 37ff 	mov.w	r7, #4294967295
 800ade8:	e7ea      	b.n	800adc0 <__swbuf_r+0x6c>
 800adea:	bf00      	nop
 800adec:	0800b524 	.word	0x0800b524
 800adf0:	0800b544 	.word	0x0800b544
 800adf4:	0800b504 	.word	0x0800b504

0800adf8 <__swsetup_r>:
 800adf8:	4b32      	ldr	r3, [pc, #200]	; (800aec4 <__swsetup_r+0xcc>)
 800adfa:	b570      	push	{r4, r5, r6, lr}
 800adfc:	681d      	ldr	r5, [r3, #0]
 800adfe:	4606      	mov	r6, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	b125      	cbz	r5, 800ae0e <__swsetup_r+0x16>
 800ae04:	69ab      	ldr	r3, [r5, #24]
 800ae06:	b913      	cbnz	r3, 800ae0e <__swsetup_r+0x16>
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f7ff fd43 	bl	800a894 <__sinit>
 800ae0e:	4b2e      	ldr	r3, [pc, #184]	; (800aec8 <__swsetup_r+0xd0>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	d10f      	bne.n	800ae34 <__swsetup_r+0x3c>
 800ae14:	686c      	ldr	r4, [r5, #4]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae1c:	0719      	lsls	r1, r3, #28
 800ae1e:	d42c      	bmi.n	800ae7a <__swsetup_r+0x82>
 800ae20:	06dd      	lsls	r5, r3, #27
 800ae22:	d411      	bmi.n	800ae48 <__swsetup_r+0x50>
 800ae24:	2309      	movs	r3, #9
 800ae26:	6033      	str	r3, [r6, #0]
 800ae28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae32:	e03e      	b.n	800aeb2 <__swsetup_r+0xba>
 800ae34:	4b25      	ldr	r3, [pc, #148]	; (800aecc <__swsetup_r+0xd4>)
 800ae36:	429c      	cmp	r4, r3
 800ae38:	d101      	bne.n	800ae3e <__swsetup_r+0x46>
 800ae3a:	68ac      	ldr	r4, [r5, #8]
 800ae3c:	e7eb      	b.n	800ae16 <__swsetup_r+0x1e>
 800ae3e:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <__swsetup_r+0xd8>)
 800ae40:	429c      	cmp	r4, r3
 800ae42:	bf08      	it	eq
 800ae44:	68ec      	ldreq	r4, [r5, #12]
 800ae46:	e7e6      	b.n	800ae16 <__swsetup_r+0x1e>
 800ae48:	0758      	lsls	r0, r3, #29
 800ae4a:	d512      	bpl.n	800ae72 <__swsetup_r+0x7a>
 800ae4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae4e:	b141      	cbz	r1, 800ae62 <__swsetup_r+0x6a>
 800ae50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae54:	4299      	cmp	r1, r3
 800ae56:	d002      	beq.n	800ae5e <__swsetup_r+0x66>
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff f96d 	bl	800a138 <_free_r>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6363      	str	r3, [r4, #52]	; 0x34
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6063      	str	r3, [r4, #4]
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	f043 0308 	orr.w	r3, r3, #8
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	b94b      	cbnz	r3, 800ae92 <__swsetup_r+0x9a>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae88:	d003      	beq.n	800ae92 <__swsetup_r+0x9a>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f000 f84d 	bl	800af2c <__smakebuf_r>
 800ae92:	89a0      	ldrh	r0, [r4, #12]
 800ae94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae98:	f010 0301 	ands.w	r3, r0, #1
 800ae9c:	d00a      	beq.n	800aeb4 <__swsetup_r+0xbc>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60a3      	str	r3, [r4, #8]
 800aea2:	6963      	ldr	r3, [r4, #20]
 800aea4:	425b      	negs	r3, r3
 800aea6:	61a3      	str	r3, [r4, #24]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	b943      	cbnz	r3, 800aebe <__swsetup_r+0xc6>
 800aeac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aeb0:	d1ba      	bne.n	800ae28 <__swsetup_r+0x30>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	0781      	lsls	r1, r0, #30
 800aeb6:	bf58      	it	pl
 800aeb8:	6963      	ldrpl	r3, [r4, #20]
 800aeba:	60a3      	str	r3, [r4, #8]
 800aebc:	e7f4      	b.n	800aea8 <__swsetup_r+0xb0>
 800aebe:	2000      	movs	r0, #0
 800aec0:	e7f7      	b.n	800aeb2 <__swsetup_r+0xba>
 800aec2:	bf00      	nop
 800aec4:	2000000c 	.word	0x2000000c
 800aec8:	0800b524 	.word	0x0800b524
 800aecc:	0800b544 	.word	0x0800b544
 800aed0:	0800b504 	.word	0x0800b504

0800aed4 <abort>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	2006      	movs	r0, #6
 800aed8:	f000 f898 	bl	800b00c <raise>
 800aedc:	2001      	movs	r0, #1
 800aede:	f7f6 fcfb 	bl	80018d8 <_exit>

0800aee2 <__swhatbuf_r>:
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	460e      	mov	r6, r1
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	2900      	cmp	r1, #0
 800aeec:	b096      	sub	sp, #88	; 0x58
 800aeee:	4614      	mov	r4, r2
 800aef0:	461d      	mov	r5, r3
 800aef2:	da08      	bge.n	800af06 <__swhatbuf_r+0x24>
 800aef4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	602a      	str	r2, [r5, #0]
 800aefc:	061a      	lsls	r2, r3, #24
 800aefe:	d410      	bmi.n	800af22 <__swhatbuf_r+0x40>
 800af00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af04:	e00e      	b.n	800af24 <__swhatbuf_r+0x42>
 800af06:	466a      	mov	r2, sp
 800af08:	f000 f89c 	bl	800b044 <_fstat_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	dbf1      	blt.n	800aef4 <__swhatbuf_r+0x12>
 800af10:	9a01      	ldr	r2, [sp, #4]
 800af12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af1a:	425a      	negs	r2, r3
 800af1c:	415a      	adcs	r2, r3
 800af1e:	602a      	str	r2, [r5, #0]
 800af20:	e7ee      	b.n	800af00 <__swhatbuf_r+0x1e>
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	2000      	movs	r0, #0
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	b016      	add	sp, #88	; 0x58
 800af2a:	bd70      	pop	{r4, r5, r6, pc}

0800af2c <__smakebuf_r>:
 800af2c:	898b      	ldrh	r3, [r1, #12]
 800af2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af30:	079d      	lsls	r5, r3, #30
 800af32:	4606      	mov	r6, r0
 800af34:	460c      	mov	r4, r1
 800af36:	d507      	bpl.n	800af48 <__smakebuf_r+0x1c>
 800af38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	2301      	movs	r3, #1
 800af42:	6163      	str	r3, [r4, #20]
 800af44:	b002      	add	sp, #8
 800af46:	bd70      	pop	{r4, r5, r6, pc}
 800af48:	ab01      	add	r3, sp, #4
 800af4a:	466a      	mov	r2, sp
 800af4c:	f7ff ffc9 	bl	800aee2 <__swhatbuf_r>
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	4605      	mov	r5, r0
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff f95b 	bl	800a210 <_malloc_r>
 800af5a:	b948      	cbnz	r0, 800af70 <__smakebuf_r+0x44>
 800af5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af60:	059a      	lsls	r2, r3, #22
 800af62:	d4ef      	bmi.n	800af44 <__smakebuf_r+0x18>
 800af64:	f023 0303 	bic.w	r3, r3, #3
 800af68:	f043 0302 	orr.w	r3, r3, #2
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	e7e3      	b.n	800af38 <__smakebuf_r+0xc>
 800af70:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <__smakebuf_r+0x7c>)
 800af72:	62b3      	str	r3, [r6, #40]	; 0x28
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	6020      	str	r0, [r4, #0]
 800af78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	9b00      	ldr	r3, [sp, #0]
 800af80:	6163      	str	r3, [r4, #20]
 800af82:	9b01      	ldr	r3, [sp, #4]
 800af84:	6120      	str	r0, [r4, #16]
 800af86:	b15b      	cbz	r3, 800afa0 <__smakebuf_r+0x74>
 800af88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af8c:	4630      	mov	r0, r6
 800af8e:	f000 f86b 	bl	800b068 <_isatty_r>
 800af92:	b128      	cbz	r0, 800afa0 <__smakebuf_r+0x74>
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f023 0303 	bic.w	r3, r3, #3
 800af9a:	f043 0301 	orr.w	r3, r3, #1
 800af9e:	81a3      	strh	r3, [r4, #12]
 800afa0:	89a0      	ldrh	r0, [r4, #12]
 800afa2:	4305      	orrs	r5, r0
 800afa4:	81a5      	strh	r5, [r4, #12]
 800afa6:	e7cd      	b.n	800af44 <__smakebuf_r+0x18>
 800afa8:	0800a82d 	.word	0x0800a82d

0800afac <_malloc_usable_size_r>:
 800afac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb0:	1f18      	subs	r0, r3, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bfbc      	itt	lt
 800afb6:	580b      	ldrlt	r3, [r1, r0]
 800afb8:	18c0      	addlt	r0, r0, r3
 800afba:	4770      	bx	lr

0800afbc <_raise_r>:
 800afbc:	291f      	cmp	r1, #31
 800afbe:	b538      	push	{r3, r4, r5, lr}
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	d904      	bls.n	800afd0 <_raise_r+0x14>
 800afc6:	2316      	movs	r3, #22
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	f04f 30ff 	mov.w	r0, #4294967295
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afd2:	b112      	cbz	r2, 800afda <_raise_r+0x1e>
 800afd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd8:	b94b      	cbnz	r3, 800afee <_raise_r+0x32>
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 f830 	bl	800b040 <_getpid_r>
 800afe0:	462a      	mov	r2, r5
 800afe2:	4601      	mov	r1, r0
 800afe4:	4620      	mov	r0, r4
 800afe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afea:	f000 b817 	b.w	800b01c <_kill_r>
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d00a      	beq.n	800b008 <_raise_r+0x4c>
 800aff2:	1c59      	adds	r1, r3, #1
 800aff4:	d103      	bne.n	800affe <_raise_r+0x42>
 800aff6:	2316      	movs	r3, #22
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	2001      	movs	r0, #1
 800affc:	e7e7      	b.n	800afce <_raise_r+0x12>
 800affe:	2400      	movs	r4, #0
 800b000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b004:	4628      	mov	r0, r5
 800b006:	4798      	blx	r3
 800b008:	2000      	movs	r0, #0
 800b00a:	e7e0      	b.n	800afce <_raise_r+0x12>

0800b00c <raise>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <raise+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f7ff bfd3 	b.w	800afbc <_raise_r>
 800b016:	bf00      	nop
 800b018:	2000000c 	.word	0x2000000c

0800b01c <_kill_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	; (800b03c <_kill_r+0x20>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	f7f6 fc45 	bl	80018b8 <_kill>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d102      	bne.n	800b038 <_kill_r+0x1c>
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	b103      	cbz	r3, 800b038 <_kill_r+0x1c>
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	bf00      	nop
 800b03c:	20000434 	.word	0x20000434

0800b040 <_getpid_r>:
 800b040:	f7f6 bc32 	b.w	80018a8 <_getpid>

0800b044 <_fstat_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4d07      	ldr	r5, [pc, #28]	; (800b064 <_fstat_r+0x20>)
 800b048:	2300      	movs	r3, #0
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	602b      	str	r3, [r5, #0]
 800b052:	f7f6 fc90 	bl	8001976 <_fstat>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d102      	bne.n	800b060 <_fstat_r+0x1c>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	b103      	cbz	r3, 800b060 <_fstat_r+0x1c>
 800b05e:	6023      	str	r3, [r4, #0]
 800b060:	bd38      	pop	{r3, r4, r5, pc}
 800b062:	bf00      	nop
 800b064:	20000434 	.word	0x20000434

0800b068 <_isatty_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_isatty_r+0x1c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	f7f6 fc8f 	bl	8001996 <_isatty>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_isatty_r+0x1a>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_isatty_r+0x1a>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	20000434 	.word	0x20000434

0800b088 <_init>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr

0800b094 <_fini>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	bf00      	nop
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr
