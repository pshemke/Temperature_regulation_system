
Temperature_regulation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800ba88  0800ba88  0001ba88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf8c  0800bf8c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf94  0800bf94  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf98  0800bf98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bf9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001fc  0800c198  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800c198  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016478  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dce  00000000  00000000  000366a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b6f  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bd1  00000000  00000000  0003f32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ab0  00000000  00000000  00056f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a9b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006388  00000000  00000000  0014aa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba6c 	.word	0x0800ba6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800ba6c 	.word	0x0800ba6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_DMA_Init+0x38>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <MX_DMA_Init+0x38>)
 8001044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_DMA_Init+0x38>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200c      	movs	r0, #12
 800105c:	f001 f94f 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001060:	200c      	movs	r0, #12
 8001062:	f001 f968 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4bb4      	ldr	r3, [pc, #720]	; (800135c <MX_GPIO_Init+0x2e8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4ab3      	ldr	r2, [pc, #716]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4bb1      	ldr	r3, [pc, #708]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4bae      	ldr	r3, [pc, #696]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4aad      	ldr	r2, [pc, #692]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4bab      	ldr	r3, [pc, #684]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4ba8      	ldr	r3, [pc, #672]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4aa7      	ldr	r2, [pc, #668]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4ba5      	ldr	r3, [pc, #660]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	4ba2      	ldr	r3, [pc, #648]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4aa1      	ldr	r2, [pc, #644]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b9f      	ldr	r3, [pc, #636]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b9c      	ldr	r3, [pc, #624]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a9b      	ldr	r2, [pc, #620]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b99      	ldr	r3, [pc, #612]	; (800135c <MX_GPIO_Init+0x2e8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b96      	ldr	r3, [pc, #600]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a95      	ldr	r2, [pc, #596]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b93      	ldr	r3, [pc, #588]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b90      	ldr	r3, [pc, #576]	; (800135c <MX_GPIO_Init+0x2e8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a8f      	ldr	r2, [pc, #572]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b8d      	ldr	r3, [pc, #564]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a89      	ldr	r2, [pc, #548]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b87      	ldr	r3, [pc, #540]	; (800135c <MX_GPIO_Init+0x2e8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 800114a:	2200      	movs	r2, #0
 800114c:	f64f 5190 	movw	r1, #64912	; 0xfd90
 8001150:	4883      	ldr	r0, [pc, #524]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001152:	f001 fe33 	bl	8002dbc <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|COOLING_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f24e 0108 	movw	r1, #57352	; 0xe008
 800115c:	4881      	ldr	r0, [pc, #516]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800115e:	f001 fe2d 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f244 0181 	movw	r1, #16513	; 0x4081
 8001168:	487f      	ldr	r0, [pc, #508]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800116a:	f001 fe27 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	487a      	ldr	r0, [pc, #488]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001176:	f001 fe21 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f244 2140 	movw	r1, #16960	; 0x4240
 8001180:	487a      	ldr	r0, [pc, #488]	; (800136c <MX_GPIO_Init+0x2f8>)
 8001182:	f001 fe1b 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001196:	2305      	movs	r3, #5
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	486f      	ldr	r0, [pc, #444]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80011a2:	f001 fc5f 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 80011a6:	f642 0310 	movw	r3, #10256	; 0x2810
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4868      	ldr	r0, [pc, #416]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80011c0:	f001 fc50 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4865      	ldr	r0, [pc, #404]	; (8001370 <MX_GPIO_Init+0x2fc>)
 80011dc:	f001 fc42 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80011e0:	2308      	movs	r3, #8
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	485b      	ldr	r0, [pc, #364]	; (8001364 <MX_GPIO_Init+0x2f0>)
 80011f8:	f001 fc34 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4854      	ldr	r0, [pc, #336]	; (8001364 <MX_GPIO_Init+0x2f0>)
 8001212:	f001 fc27 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4851      	ldr	r0, [pc, #324]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800122c:	f001 fc1a 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001240:	230b      	movs	r3, #11
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4849      	ldr	r0, [pc, #292]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800124c:	f001 fc0a 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 8001250:	2304      	movs	r3, #4
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	4843      	ldr	r0, [pc, #268]	; (8001370 <MX_GPIO_Init+0x2fc>)
 8001264:	f001 fbfe 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8001268:	2308      	movs	r3, #8
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001272:	2302      	movs	r3, #2
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	483c      	ldr	r0, [pc, #240]	; (8001370 <MX_GPIO_Init+0x2fc>)
 800127e:	f001 fbf1 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001282:	2386      	movs	r3, #134	; 0x86
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001292:	230b      	movs	r3, #11
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <MX_GPIO_Init+0x300>)
 800129e:	f001 fbe1 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a2:	2310      	movs	r3, #16
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	482f      	ldr	r0, [pc, #188]	; (8001374 <MX_GPIO_Init+0x300>)
 80012b6:	f001 fbd5 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80012ba:	2340      	movs	r3, #64	; 0x40
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ca:	2302      	movs	r3, #2
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4827      	ldr	r0, [pc, #156]	; (8001374 <MX_GPIO_Init+0x300>)
 80012d6:	f001 fbc5 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012da:	f244 0381 	movw	r3, #16513	; 0x4081
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <MX_GPIO_Init+0x2f4>)
 80012f4:	f001 fbb6 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 80012f8:	2302      	movs	r3, #2
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800130c:	f001 fbaa 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = COOLING_Pin|DISP_2_Pin|DISP_4_Pin;
 8001310:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800132a:	f001 fb9b 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 800132e:	f24d 5380 	movw	r3, #54656	; 0xd580
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001334:	2311      	movs	r3, #17
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001348:	f001 fb8c 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	e00e      	b.n	8001378 <MX_GPIO_Init+0x304>
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40020400 	.word	0x40020400
 800136c:	40021800 	.word	0x40021800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4858      	ldr	r0, [pc, #352]	; (80014e8 <MX_GPIO_Init+0x474>)
 8001386:	f001 fb6d 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4851      	ldr	r0, [pc, #324]	; (80014ec <MX_GPIO_Init+0x478>)
 80013a8:	f001 fb5c 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATERD13_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013be:	2302      	movs	r3, #2
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATERD13_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4849      	ldr	r0, [pc, #292]	; (80014f0 <MX_GPIO_Init+0x47c>)
 80013ca:	f001 fb4b 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4843      	ldr	r0, [pc, #268]	; (80014f4 <MX_GPIO_Init+0x480>)
 80013e6:	f001 fb3d 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	483d      	ldr	r0, [pc, #244]	; (80014f4 <MX_GPIO_Init+0x480>)
 80013fe:	f001 fb31 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001412:	2302      	movs	r3, #2
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4836      	ldr	r0, [pc, #216]	; (80014f8 <MX_GPIO_Init+0x484>)
 800141e:	f001 fb21 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001422:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001434:	230a      	movs	r3, #10
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	482f      	ldr	r0, [pc, #188]	; (80014fc <MX_GPIO_Init+0x488>)
 8001440:	f001 fb10 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <MX_GPIO_Init+0x488>)
 800145a:	f001 fb03 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 800145e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001464:	2311      	movs	r3, #17
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	481f      	ldr	r0, [pc, #124]	; (80014f4 <MX_GPIO_Init+0x480>)
 8001478:	f001 faf4 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800147c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148e:	230b      	movs	r3, #11
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <MX_GPIO_Init+0x480>)
 800149a:	f001 fae3 	bl	8002a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2006      	movs	r0, #6
 80014a4:	f000 ff2b 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014a8:	2006      	movs	r0, #6
 80014aa:	f000 ff44 	bl	8002336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2009      	movs	r0, #9
 80014b4:	f000 ff23 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014b8:	2009      	movs	r0, #9
 80014ba:	f000 ff3c 	bl	8002336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2017      	movs	r0, #23
 80014c4:	f000 ff1b 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c8:	2017      	movs	r0, #23
 80014ca:	f000 ff34 	bl	8002336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f000 ff13 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f000 ff2c 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	; 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020000 	.word	0x40020000

08001500 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_I2C1_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_I2C1_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_I2C1_Init+0x74>)
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_I2C1_Init+0x7c>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_I2C1_Init+0x74>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <MX_I2C1_Init+0x74>)
 800153c:	f001 fc70 	bl	8002e20 <HAL_I2C_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001546:	f000 f96f 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <MX_I2C1_Init+0x74>)
 800154e:	f001 fcf7 	bl	8002f40 <HAL_I2CEx_ConfigAnalogFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001558:	f000 f966 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_I2C1_Init+0x74>)
 8001560:	f001 fd39 	bl	8002fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 f95d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000218 	.word	0x20000218
 8001578:	40005400 	.word	0x40005400
 800157c:	20404768 	.word	0x20404768

08001580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0aa      	sub	sp, #168	; 0xa8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2284      	movs	r2, #132	; 0x84
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 f9b1 	bl	8006908 <memset>
  if(i2cHandle->Instance==I2C1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_I2C_MspInit+0xb4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d13c      	bne.n	800162a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fa80 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ca:	f000 f92d 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80015e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800160a:	4619      	mov	r1, r3
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_I2C_MspInit+0xbc>)
 800160e:	f001 fa29 	bl	8002a64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 8001618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_I2C_MspInit+0xb8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	37a8      	adds	r7, #168	; 0xa8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_UART_RxCpltCallback>:
  * @param  huart UART handle.
  * @retval None
  */
//Test of UART and output pins
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_UART_RxCpltCallback+0x40>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d111      	bne.n	8001676 <HAL_UART_RxCpltCallback+0x36>
	{
		if(wiadomosc[2] == '.' && wiadomosc[5] == 'C')
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_UART_RxCpltCallback+0x44>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b2e      	cmp	r3, #46	; 0x2e
 8001658:	d108      	bne.n	800166c <HAL_UART_RxCpltCallback+0x2c>
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_UART_RxCpltCallback+0x44>)
 800165c:	795b      	ldrb	r3, [r3, #5]
 800165e:	2b43      	cmp	r3, #67	; 0x43
 8001660:	d104      	bne.n	800166c <HAL_UART_RxCpltCallback+0x2c>
		{
			sscanf (wiadomosc,"%fC", &ref);
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_UART_RxCpltCallback+0x48>)
 8001664:	4909      	ldr	r1, [pc, #36]	; (800168c <HAL_UART_RxCpltCallback+0x4c>)
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <HAL_UART_RxCpltCallback+0x44>)
 8001668:	f005 fff6 	bl	8007658 <siscanf>
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 800166c:	2206      	movs	r2, #6
 800166e:	4905      	ldr	r1, [pc, #20]	; (8001684 <HAL_UART_RxCpltCallback+0x44>)
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <HAL_UART_RxCpltCallback+0x50>)
 8001672:	f003 ff14 	bl	800549e <HAL_UART_Receive_IT>
	}
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40004800 	.word	0x40004800
 8001684:	2000026c 	.word	0x2000026c
 8001688:	20000000 	.word	0x20000000
 800168c:	0800ba88 	.word	0x0800ba88
 8001690:	2000035c 	.word	0x2000035c

08001694 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a4:	d115      	bne.n	80016d2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		//"Temp: 00000[degC] \r\n "
		//"Yr: 00000 \r\n Y: 00000 \r\n RED: 00 %, Green: 00 %, Blue: 00 % \r\n";
		//"Yr: %f lx \r\n Y: %f lx \r\n RED: %d , Green: %d , Blue: %d \r\n Sygnal sterujacy: %f \r\n \r\n"
		dl_kom = sprintf((char *)komunikat1, "Temp: %2.2f degC \r\n ",
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_GPIO_EXTI_Callback+0x48>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff6c 	bl	8000588 <__aeabi_f2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80016b8:	f005 ffae 	bl	8007618 <siprintf>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80016c2:	801a      	strh	r2, [r3, #0]
				ref);
	    HAL_UART_Transmit(&huart3, komunikat1, dl_kom, 100);
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80016c6:	881a      	ldrh	r2, [r3, #0]
 80016c8:	2364      	movs	r3, #100	; 0x64
 80016ca:	4906      	ldr	r1, [pc, #24]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <HAL_GPIO_EXTI_Callback+0x58>)
 80016ce:	f003 fe63 	bl	8005398 <HAL_UART_Transmit>
	}
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000000 	.word	0x20000000
 80016e0:	0800ba8c 	.word	0x0800ba8c
 80016e4:	20000004 	.word	0x20000004
 80016e8:	20000272 	.word	0x20000272
 80016ec:	2000035c 	.word	0x2000035c

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fccb 	bl	800208e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f828 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f7ff fcba 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8001700:	f7ff fc9a 	bl	8001038 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001704:	f000 fbd0 	bl	8001ea8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001708:	f000 fac6 	bl	8001c98 <MX_TIM6_Init>
  MX_TIM5_Init();
 800170c:	f000 fa4c 	bl	8001ba8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001710:	f7ff fef6 	bl	8001500 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001714:	f000 f9fa 	bl	8001b0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 8001718:	2206      	movs	r2, #6
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <main+0x4c>)
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <main+0x50>)
 800171e:	f003 febe 	bl	800549e <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <main+0x54>)
 800172a:	f001 fb47 	bl	8002dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <main+0x58>)
 8001736:	f001 fb41 	bl	8002dbc <HAL_GPIO_WritePin>
  while (1)
 800173a:	e7fe      	b.n	800173a <main+0x4a>
 800173c:	2000026c 	.word	0x2000026c
 8001740:	2000035c 	.word	0x2000035c
 8001744:	40021000 	.word	0x40021000
 8001748:	40021400 	.word	0x40021400

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	; 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2230      	movs	r2, #48	; 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 f8d4 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001770:	f001 fc7e 	bl	8003070 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <SystemClock_Config+0xd4>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <SystemClock_Config+0xd4>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <SystemClock_Config+0xd4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <SystemClock_Config+0xd8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <SystemClock_Config+0xd8>)
 8001792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <SystemClock_Config+0xd8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	2302      	movs	r3, #2
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80017bc:	23d8      	movs	r3, #216	; 0xd8
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017c4:	2303      	movs	r3, #3
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fcaf 	bl	8003130 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80017d8:	f000 f826 	bl	8001828 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017dc:	f001 fc58 	bl	8003090 <HAL_PWREx_EnableOverDrive>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017e6:	f000 f81f 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	230f      	movs	r3, #15
 80017ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2107      	movs	r1, #7
 8001808:	4618      	mov	r0, r3
 800180a:	f001 ff35 	bl	8003678 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001814:	f000 f808 	bl	8001828 <Error_Handler>
  }
}
 8001818:	bf00      	nop
 800181a:	3750      	adds	r7, #80	; 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x44>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x44>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x44>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x44>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x44>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 fc1e 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f001 fa8b 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}

080018de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 80018e2:	2008      	movs	r0, #8
 80018e4:	f001 fa84 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Stream1_IRQHandler+0x10>)
 80018f2:	f000 fe7b 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003e4 	.word	0x200003e4

08001900 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 8001904:	2020      	movs	r0, #32
 8001906:	f001 fa73 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM2_IRQHandler+0x10>)
 8001916:	f002 fd7d 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000278 	.word	0x20000278

08001924 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <USART3_IRQHandler+0x10>)
 800192a:	f003 fdfd 	bl	8005528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000035c 	.word	0x2000035c

08001938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800193c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001940:	f001 fa56 	bl	8002df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM6_DAC_IRQHandler+0x10>)
 800194e:	f002 fd61 	bl	8004414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000310 	.word	0x20000310

0800195c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_kill>:

int _kill(int pid, int sig)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001976:	f004 ff9d 	bl	80068b4 <__errno>
 800197a:	4603      	mov	r3, r0
 800197c:	2216      	movs	r2, #22
 800197e:	601a      	str	r2, [r3, #0]
	return -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_exit>:

void _exit (int status)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ffe7 	bl	800196c <_kill>
	while (1) {}		/* Make sure we hang here */
 800199e:	e7fe      	b.n	800199e <_exit+0x12>

080019a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e00a      	b.n	80019c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b2:	f3af 8000 	nop.w
 80019b6:	4601      	mov	r1, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	60ba      	str	r2, [r7, #8]
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf0      	blt.n	80019b2 <_read+0x12>
	}

return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e009      	b.n	8001a00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf1      	blt.n	80019ec <_write+0x12>
	}
	return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_close>:

int _close(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return -1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_isatty>:

int _isatty(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	return 1;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <_sbrk+0x5c>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <_sbrk+0x60>)
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_sbrk+0x64>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <_sbrk+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d207      	bcs.n	8001abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aac:	f004 ff02 	bl	80068b4 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e009      	b.n	8001ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <_sbrk+0x64>)
 8001acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20050000 	.word	0x20050000
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	20000274 	.word	0x20000274
 8001ae4:	20000458 	.word	0x20000458

08001ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SystemInit+0x20>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <SystemInit+0x20>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b34:	226b      	movs	r2, #107	; 0x6b
 8001b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000000;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <MX_TIM2_Init+0x98>)
 8001b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b52:	f002 fba7 	bl	80042a4 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b5c:	f7ff fe64 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b6e:	f002 fe85 	bl	800487c <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b78:	f7ff fe56 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b8a:	f003 fb0b 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f7ff fe48 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000278 	.word	0x20000278
 8001ba4:	3b9aca00 	.word	0x3b9aca00

08001ba8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <MX_TIM5_Init+0xec>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001be2:	226b      	movs	r2, #107	; 0x6b
 8001be4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c00:	4823      	ldr	r0, [pc, #140]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c02:	f002 fb4f 	bl	80042a4 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001c0c:	f7ff fe0c 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481c      	ldr	r0, [pc, #112]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c1e:	f002 fe2d 	bl	800487c <HAL_TIM_ConfigClockSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001c28:	f7ff fdfe 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c2e:	f002 fb90 	bl	8004352 <HAL_TIM_PWM_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001c38:	f7ff fdf6 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c4c:	f003 faaa 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c56:	f7ff fde7 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c72:	f002 fcef 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001c7c:	f7ff fdd4 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <MX_TIM5_Init+0xe8>)
 8001c82:	f000 f8d9 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3738      	adds	r7, #56	; 0x38
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002c4 	.word	0x200002c4
 8001c94:	40000c00 	.word	0x40000c00

08001c98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <MX_TIM6_Init+0x6c>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1079;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001cb0:	f240 4237 	movw	r2, #1079	; 0x437
 8001cb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001cbe:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001ccc:	f002 faea 	bl	80042a4 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001cd6:	f7ff fda7 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <MX_TIM6_Init+0x68>)
 8001ce8:	f003 fa5c 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001cf2:	f7ff fd99 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000310 	.word	0x20000310
 8001d04:	40001000 	.word	0x40001000

08001d08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d14d      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 8001d72:	2320      	movs	r3, #32
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d82:	2301      	movs	r3, #1
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4826      	ldr	r0, [pc, #152]	; (8001e28 <HAL_TIM_Base_MspInit+0x120>)
 8001d8e:	f000 fe69 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 8001d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	481f      	ldr	r0, [pc, #124]	; (8001e2c <HAL_TIM_Base_MspInit+0x124>)
 8001db0:	f000 fe58 	bl	8002a64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	201c      	movs	r0, #28
 8001dba:	f000 faa0 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dbe:	201c      	movs	r0, #28
 8001dc0:	f000 fab9 	bl	8002336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001dc4:	e02a      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_TIM_Base_MspInit+0x128>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10c      	bne.n	8001dea <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	e018      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM6)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d113      	bne.n	8001e1c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_TIM_Base_MspInit+0x11c>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2036      	movs	r0, #54	; 0x36
 8001e12:	f000 fa74 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e16:	2036      	movs	r0, #54	; 0x36
 8001e18:	f000 fa8d 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40001000 	.word	0x40001000

08001e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_TIM_MspPostInit+0x64>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = LD4_Pin;
 8001e72:	2308      	movs	r3, #8
 8001e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e8e:	f000 fde9 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_USART3_UART_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART3_UART_Init+0x58>)
 8001eec:	f003 fa06 	bl	80052fc <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff fc97 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000035c 	.word	0x2000035c
 8001f04:	40004800 	.word	0x40004800

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0aa      	sub	sp, #168	; 0xa8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	2284      	movs	r2, #132	; 0x84
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fced 	bl	8006908 <memset>
  if(uartHandle->Instance==USART3)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	; (8002028 <HAL_UART_MspInit+0x120>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d172      	bne.n	800201e <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fdbc 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f52:	f7ff fc69 	bl	8001828 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_UART_MspInit+0x124>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001faa:	4619      	mov	r1, r3
 8001fac:	4820      	ldr	r0, [pc, #128]	; (8002030 <HAL_UART_MspInit+0x128>)
 8001fae:	f000 fd59 	bl	8002a64 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_UART_MspInit+0x130>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8001ff4:	f000 f9ba 	bl	800236c <HAL_DMA_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ffe:	f7ff fc13 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_UART_MspInit+0x12c>)
 8002006:	675a      	str	r2, [r3, #116]	; 0x74
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_UART_MspInit+0x12c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2027      	movs	r0, #39	; 0x27
 8002014:	f000 f973 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002018:	2027      	movs	r0, #39	; 0x27
 800201a:	f000 f98c 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800201e:	bf00      	nop
 8002020:	37a8      	adds	r7, #168	; 0xa8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004800 	.word	0x40004800
 800202c:	40023800 	.word	0x40023800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	200003e4 	.word	0x200003e4
 8002038:	40026028 	.word	0x40026028

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002042:	490e      	ldr	r1, [pc, #56]	; (800207c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002058:	4c0b      	ldr	r4, [pc, #44]	; (8002088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002066:	f7ff fd3f 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f004 fc29 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7ff fb3f 	bl	80016f0 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002074:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002080:	0800bf9c 	.word	0x0800bf9c
  ldr r2, =_sbss
 8002084:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002088:	20000458 	.word	0x20000458

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>

0800208e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002092:	2003      	movs	r0, #3
 8002094:	f000 f928 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002098:	2000      	movs	r0, #0
 800209a:	f000 f805 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209e:	f7ff fbc9 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f943 	bl	8002352 <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 f90b 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000001c 	.word	0x2000001c
 8002100:	20000024 	.word	0x20000024
 8002104:	20000020 	.word	0x20000020

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000024 	.word	0x20000024
 800212c:	20000444 	.word	0x20000444

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000444 	.word	0x20000444

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <__NVIC_SetPriorityGrouping+0x40>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	4313      	orrs	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x40>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00
 800218c:	05fa0000 	.word	0x05fa0000

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	; (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	; (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff feda 	bl	8002130 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e099      	b.n	80024bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a8:	e00f      	b.n	80023ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023aa:	f7ff fec1 	bl	8002130 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d908      	bls.n	80023ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e078      	b.n	80024bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e8      	bne.n	80023aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_DMA_Init+0x158>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b04      	cmp	r3, #4
 8002422:	d107      	bne.n	8002434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4313      	orrs	r3, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b04      	cmp	r3, #4
 800245c:	d117      	bne.n	800248e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fa7b 	bl	800296c <DMA_CheckFifoParam>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800248a:	2301      	movs	r3, #1
 800248c:	e016      	b.n	80024bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa32 	bl	8002900 <DMA_CalcBaseAndBitshift>
 800249c:	4603      	mov	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	223f      	movs	r2, #63	; 0x3f
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	f010803f 	.word	0xf010803f

080024c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024d6:	f7ff fe2b 	bl	8002130 <HAL_GetTick>
 80024da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e052      	b.n	80025a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0216 	bic.w	r2, r2, #22
 8002508:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002518:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_DMA_Abort+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0208 	bic.w	r2, r2, #8
 8002538:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254a:	e013      	b.n	8002574 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254c:	f7ff fdf0 	bl	8002130 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b05      	cmp	r3, #5
 8002558:	d90c      	bls.n	8002574 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e015      	b.n	80025a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e4      	bne.n	800254c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	223f      	movs	r2, #63	; 0x3f
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d004      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00c      	b.n	80025e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025f8:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_DMA_IRQHandler+0x248>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a8e      	ldr	r2, [pc, #568]	; (8002838 <HAL_DMA_IRQHandler+0x24c>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2208      	movs	r2, #8
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01a      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2208      	movs	r2, #8
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2201      	movs	r2, #1
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2204      	movs	r2, #4
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2210      	movs	r2, #16
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d043      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03c      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2210      	movs	r2, #16
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
 800271a:	e01f      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e016      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0208 	bic.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2220      	movs	r2, #32
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 808f 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8087 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2220      	movs	r2, #32
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b05      	cmp	r3, #5
 8002794:	d136      	bne.n	8002804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0216 	bic.w	r2, r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x1da>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0208 	bic.w	r2, r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	223f      	movs	r2, #63	; 0x3f
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d07e      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
        }
        return;
 8002802:	e079      	b.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01d      	beq.n	800284e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	2b00      	cmp	r3, #0
 8002826:	d031      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e02c      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
 8002832:	bf00      	nop
 8002834:	2000001c 	.word	0x2000001c
 8002838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e01e      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0210 	bic.w	r2, r2, #16
 800286a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d032      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3301      	adds	r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d307      	bcc.n	80028d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f2      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x2cc>
 80028d2:	e000      	b.n	80028d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e000      	b.n	80028fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80028f8:	bf00      	nop
    }
  }
}
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3b10      	subs	r3, #16
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <DMA_CalcBaseAndBitshift+0x60>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <DMA_CalcBaseAndBitshift+0x64>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d908      	bls.n	8002940 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <DMA_CalcBaseAndBitshift+0x68>)
 8002936:	4013      	ands	r3, r2
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	; 0x58
 800293e:	e006      	b.n	800294e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <DMA_CalcBaseAndBitshift+0x68>)
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	aaaaaaab 	.word	0xaaaaaaab
 8002964:	0800bac8 	.word	0x0800bac8
 8002968:	fffffc00 	.word	0xfffffc00

0800296c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d856      	bhi.n	8002a3a <DMA_CheckFifoParam+0xce>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <DMA_CheckFifoParam+0x28>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b7 	.word	0x080029b7
 800299c:	080029a5 	.word	0x080029a5
 80029a0:	08002a3b 	.word	0x08002a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d046      	beq.n	8002a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e043      	b.n	8002a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029be:	d140      	bne.n	8002a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e03d      	b.n	8002a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	d121      	bne.n	8002a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d837      	bhi.n	8002a46 <DMA_CheckFifoParam+0xda>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <DMA_CheckFifoParam+0x70>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029f3 	.word	0x080029f3
 80029e4:	080029ed 	.word	0x080029ed
 80029e8:	08002a05 	.word	0x08002a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e030      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d025      	beq.n	8002a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a02:	e022      	b.n	8002a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0c:	d11f      	bne.n	8002a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a12:	e01c      	b.n	8002a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d903      	bls.n	8002a22 <DMA_CheckFifoParam+0xb6>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d003      	beq.n	8002a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a20:	e018      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      break;
 8002a26:	e015      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e00b      	b.n	8002a52 <DMA_CheckFifoParam+0xe6>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e00a      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e008      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
 8002a44:	e006      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e004      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
    }
  } 
  
  return status; 
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e175      	b.n	8002d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f040 8164 	bne.w	8002d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d005      	beq.n	8002aba <HAL_GPIO_Init+0x56>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d130      	bne.n	8002b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 0201 	and.w	r2, r3, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d017      	beq.n	8002b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d123      	bne.n	8002bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	69b9      	ldr	r1, [r7, #24]
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80be 	beq.w	8002d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a65      	ldr	r2, [pc, #404]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c06:	4a61      	ldr	r2, [pc, #388]	; (8002d8c <HAL_GPIO_Init+0x328>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_GPIO_Init+0x32c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d037      	beq.n	8002ca2 <HAL_GPIO_Init+0x23e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <HAL_GPIO_Init+0x330>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_GPIO_Init+0x23a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a56      	ldr	r2, [pc, #344]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x236>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a55      	ldr	r2, [pc, #340]	; (8002d9c <HAL_GPIO_Init+0x338>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x232>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a54      	ldr	r2, [pc, #336]	; (8002da0 <HAL_GPIO_Init+0x33c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x22e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a53      	ldr	r2, [pc, #332]	; (8002da4 <HAL_GPIO_Init+0x340>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x22a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_GPIO_Init+0x344>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x226>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_GPIO_Init+0x348>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x222>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a50      	ldr	r2, [pc, #320]	; (8002db0 <HAL_GPIO_Init+0x34c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x21e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4f      	ldr	r2, [pc, #316]	; (8002db4 <HAL_GPIO_Init+0x350>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x21a>
 8002c7a:	2309      	movs	r3, #9
 8002c7c:	e012      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c7e:	230a      	movs	r3, #10
 8002c80:	e010      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e00e      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e00c      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e00a      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c8e:	2305      	movs	r3, #5
 8002c90:	e008      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e004      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e002      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_GPIO_Init+0x240>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f002 0203 	and.w	r2, r2, #3
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	4093      	lsls	r3, r2
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cb4:	4935      	ldr	r1, [pc, #212]	; (8002d8c <HAL_GPIO_Init+0x328>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce6:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cec:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <HAL_GPIO_Init+0x354>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	f67f ae86 	bls.w	8002a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40020000 	.word	0x40020000
 8002d94:	40020400 	.word	0x40020400
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40021400 	.word	0x40021400
 8002da8:	40021800 	.word	0x40021800
 8002dac:	40021c00 	.word	0x40021c00
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40022400 	.word	0x40022400
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fc40 	bl	8001694 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fb9a 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d104      	bne.n	8002eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_I2C_Init+0x11c>)
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	02008000 	.word	0x02008000

08002f40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d138      	bne.n	8002fc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e032      	b.n	8002fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d139      	bne.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e033      	b.n	8003062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2224      	movs	r2, #36	; 0x24
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000

08003090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030be:	f7ff f837 	bl	8002130 <HAL_GetTick>
 80030c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c4:	e009      	b.n	80030da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c6:	f7ff f833 	bl	8002130 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d4:	d901      	bls.n	80030da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e022      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d1ee      	bne.n	80030c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f4:	f7ff f81c 	bl	8002130 <HAL_GetTick>
 80030f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030fa:	e009      	b.n	8003110 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030fc:	f7ff f818 	bl	8002130 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310a:	d901      	bls.n	8003110 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e007      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311c:	d1ee      	bne.n	80030fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e291      	b.n	800366a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b96      	ldr	r3, [pc, #600]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003160:	4b93      	ldr	r3, [pc, #588]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x62>
 800316c:	4b90      	ldr	r3, [pc, #576]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x130>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e26b      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x7a>
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x9c>
 80031b2:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7e      	ldr	r2, [pc, #504]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b7c      	ldr	r3, [pc, #496]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7b      	ldr	r2, [pc, #492]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a75      	ldr	r2, [pc, #468]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b73      	ldr	r3, [pc, #460]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a72      	ldr	r2, [pc, #456]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6b      	ldr	r2, [pc, #428]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe ff8e 	bl	8002130 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe ff8a 	bl	8002130 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e21f      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe ff7a 	bl	8002130 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe ff76 	bl	8002130 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e20b      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x110>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d069      	beq.n	8003342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x190>
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x17a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1df      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	493d      	ldr	r1, [pc, #244]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e040      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe ff2c 	bl	8002130 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe ff28 	bl	8002130 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e1bd      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4929      	ldr	r1, [pc, #164]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
 800330e:	e018      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe ff08 	bl	8002130 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fe ff04 	bl	8002130 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e199      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d038      	beq.n	80033c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe fee5 	bl	8002130 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fe fee1 	bl	8002130 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e176      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800337e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x23a>
 8003388:	e01a      	b.n	80033c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fe fecb 	bl	8002130 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fe fec7 	bl	8002130 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d903      	bls.n	80033b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e15c      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
 80033b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a4 	beq.w	8003516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a87      	ldr	r2, [pc, #540]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f6:	4b82      	ldr	r3, [pc, #520]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fe fe8f 	bl	8002130 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fe fe8b 	bl	8002130 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e120      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x31a>
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a6e      	ldr	r2, [pc, #440]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	e02d      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x33c>
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a69      	ldr	r2, [pc, #420]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a66      	ldr	r2, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	e01c      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b05      	cmp	r3, #5
 8003472:	d10c      	bne.n	800348e <HAL_RCC_OscConfig+0x35e>
 8003474:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a60      	ldr	r2, [pc, #384]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
 8003480:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d015      	beq.n	80034da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fe3f 	bl	8002130 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fe3b 	bl	8002130 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0ce      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ee      	beq.n	80034b6 <HAL_RCC_OscConfig+0x386>
 80034d8:	e014      	b.n	8003504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe fe29 	bl	8002130 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe fe25 	bl	8002130 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0b8      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ee      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a3b      	ldr	r2, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a4 	beq.w	8003668 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	d06b      	beq.n	8003604 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d149      	bne.n	80035c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800353a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fdf6 	bl	8002130 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fdf2 	bl	8002130 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e087      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	4313      	orrs	r3, r2
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800358e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003592:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fdc6 	bl	8002130 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fdc2 	bl	8002130 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e057      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x478>
 80035c6:	e04f      	b.n	8003668 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fdac 	bl	8002130 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe fda8 	bl	8002130 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e03d      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCC_OscConfig+0x4cc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x4ac>
 80035fa:	e035      	b.n	8003668 <HAL_RCC_OscConfig+0x538>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x544>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d028      	beq.n	8003664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d121      	bne.n	8003664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d11a      	bne.n	8003664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800363c:	4293      	cmp	r3, r2
 800363e:	d111      	bne.n	8003664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fce0 	bl	8002130 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fcdc 	bl	8002130 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 020f 	bic.w	r2, r3, #15
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d0>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fc3c 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	0800bab0 	.word	0x0800bab0
 8003848:	2000001c 	.word	0x2000001c
 800384c:	20000020 	.word	0x20000020

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b094      	sub	sp, #80	; 0x50
 8003856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
 800385c:	2300      	movs	r3, #0
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003860:	2300      	movs	r3, #0
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d00d      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 8003874:	2b08      	cmp	r3, #8
 8003876:	f200 80e1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x3a>
 8003882:	e0db      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	e0db      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388e:	e0d8      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4621      	mov	r1, r4
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4651      	mov	r1, sl
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	ebb2 0801 	subs.w	r8, r2, r1
 8003908:	4659      	mov	r1, fp
 800390a:	eb63 0901 	sbc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb18 0303 	adds.w	r3, r8, r3
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	462b      	mov	r3, r5
 8003930:	eb49 0303 	adc.w	r3, r9, r3
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003942:	4629      	mov	r1, r5
 8003944:	024b      	lsls	r3, r1, #9
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394c:	4621      	mov	r1, r4
 800394e:	024a      	lsls	r2, r1, #9
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
 800395a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003960:	f7fd f9b2 	bl	8000cc8 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	e058      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	4618      	mov	r0, r3
 8003978:	4611      	mov	r1, r2
 800397a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4641      	mov	r1, r8
 80039a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c0:	ebb2 040a 	subs.w	r4, r2, sl
 80039c4:	eb63 050b 	sbc.w	r5, r3, fp
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	00eb      	lsls	r3, r5, #3
 80039d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d6:	00e2      	lsls	r2, r4, #3
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	18e3      	adds	r3, r4, r3
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	464b      	mov	r3, r9
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	61fa      	str	r2, [r7, #28]
 8003a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a14:	f7fd f958 	bl	8000cc8 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3750      	adds	r7, #80	; 0x50
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	007a1200 	.word	0x007a1200

08003a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000001c 	.word	0x2000001c

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0800bac0 	.word	0x0800bac0

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	0800bac0 	.word	0x0800bac0

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aec:	4b69      	ldr	r3, [pc, #420]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a68      	ldr	r2, [pc, #416]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	4964      	ldr	r1, [pc, #400]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d017      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1e:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	4959      	ldr	r1, [pc, #356]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b5a:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	494a      	ldr	r1, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 808b 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a39      	ldr	r2, [pc, #228]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fab0 	bl	8002130 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe faac 	bl	8002130 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e357      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d035      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d02e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d114      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fa74 	bl	8002130 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fa70 	bl	8002130 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e319      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ee      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	4901      	ldr	r1, [pc, #4]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	e00b      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	0ffffcff 	.word	0x0ffffcff
 8003ca0:	4baa      	ldr	r3, [pc, #680]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4aa9      	ldr	r2, [pc, #676]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	4ba7      	ldr	r3, [pc, #668]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	49a4      	ldr	r1, [pc, #656]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cca:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	4a9e      	ldr	r2, [pc, #632]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cda:	4b9c      	ldr	r3, [pc, #624]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	4999      	ldr	r1, [pc, #612]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf8:	4b94      	ldr	r3, [pc, #592]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d06:	4991      	ldr	r1, [pc, #580]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1a:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d28:	4988      	ldr	r1, [pc, #544]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3c:	4b83      	ldr	r3, [pc, #524]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	4980      	ldr	r1, [pc, #512]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d5e:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4977      	ldr	r1, [pc, #476]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d80:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	496f      	ldr	r1, [pc, #444]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da2:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f023 020c 	bic.w	r2, r3, #12
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	4966      	ldr	r1, [pc, #408]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	495e      	ldr	r1, [pc, #376]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003de6:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	4955      	ldr	r1, [pc, #340]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	494d      	ldr	r1, [pc, #308]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e2a:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	4944      	ldr	r1, [pc, #272]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	493c      	ldr	r1, [pc, #240]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	4933      	ldr	r1, [pc, #204]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e90:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9e:	492b      	ldr	r1, [pc, #172]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d011      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec0:	4922      	ldr	r1, [pc, #136]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f24:	4909      	ldr	r1, [pc, #36]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d006      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80d9 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a01      	ldr	r2, [pc, #4]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f4a:	e001      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f52:	f7fe f8ed 	bl	8002130 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f5a:	f7fe f8e9 	bl	8002130 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e194      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d021      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f8c:	4b64      	ldr	r3, [pc, #400]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f9a:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa0:	0e1b      	lsrs	r3, r3, #24
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	019a      	lsls	r2, r3, #6
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	4957      	ldr	r1, [pc, #348]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff2:	d129      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ff4:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004008:	0f1b      	lsrs	r3, r3, #28
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	019a      	lsls	r2, r3, #6
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	071b      	lsls	r3, r3, #28
 8004028:	493d      	ldr	r1, [pc, #244]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004036:	f023 021f 	bic.w	r2, r3, #31
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	3b01      	subs	r3, #1
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405a:	0e1b      	lsrs	r3, r3, #24
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004062:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004068:	0f1b      	lsrs	r3, r3, #28
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	019a      	lsls	r2, r3, #6
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	431a      	orrs	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	071b      	lsls	r3, r3, #28
 8004088:	4925      	ldr	r1, [pc, #148]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	019a      	lsls	r2, r3, #6
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	061b      	lsls	r3, r3, #24
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	071b      	lsls	r3, r3, #28
 80040b8:	4919      	ldr	r1, [pc, #100]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fe f830 	bl	8002130 <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fe f82c 	bl	8002130 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0d7      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	f040 80cd 	bne.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004106:	f7fe f813 	bl	8002130 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800410e:	f7fe f80f 	bl	8002130 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	d903      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0ba      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004120:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004124:	4b5e      	ldr	r3, [pc, #376]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004130:	d0ed      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02e      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d12a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800415a:	4b51      	ldr	r3, [pc, #324]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004168:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	0f1b      	lsrs	r3, r3, #28
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	019a      	lsls	r2, r3, #6
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	4944      	ldr	r1, [pc, #272]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004196:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	493d      	ldr	r1, [pc, #244]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d022      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c4:	d11d      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	0e1b      	lsrs	r3, r3, #24
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	0f1b      	lsrs	r3, r3, #28
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	019a      	lsls	r2, r3, #6
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	071b      	lsls	r3, r3, #28
 80041fa:	4929      	ldr	r1, [pc, #164]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d028      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	0e1b      	lsrs	r3, r3, #24
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	019a      	lsls	r2, r3, #6
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	041b      	lsls	r3, r3, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	071b      	lsls	r3, r3, #28
 8004242:	4917      	ldr	r1, [pc, #92]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800424c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4911      	ldr	r1, [pc, #68]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fd ff60 	bl	8002130 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004274:	f7fd ff5c 	bl	8002130 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e007      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d1ef      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e049      	b.n	800434a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fd1c 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fbc6 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e049      	b.n	80043f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f841 	bl	8004400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f000 fb6f 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0202 	mvn.w	r2, #2
 8004440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 faee 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fae0 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 faf1 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0204 	mvn.w	r2, #4
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fac4 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fab6 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fac7 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0208 	mvn.w	r2, #8
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa9a 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa8c 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa9d 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b10      	cmp	r3, #16
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa70 	bl	8004a38 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa62 	bl	8004a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa73 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fa3c 	bl	8004a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fe88 	bl	80052d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fe7b 	bl	80052e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa21 	bl	8004a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b20      	cmp	r3, #32
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b20      	cmp	r3, #32
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0220 	mvn.w	r2, #32
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fe3b 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ff      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b14      	cmp	r3, #20
 800467e:	f200 80f0 	bhi.w	8004862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046dd 	.word	0x080046dd
 800468c:	08004863 	.word	0x08004863
 8004690:	08004863 	.word	0x08004863
 8004694:	08004863 	.word	0x08004863
 8004698:	0800471d 	.word	0x0800471d
 800469c:	08004863 	.word	0x08004863
 80046a0:	08004863 	.word	0x08004863
 80046a4:	08004863 	.word	0x08004863
 80046a8:	0800475f 	.word	0x0800475f
 80046ac:	08004863 	.word	0x08004863
 80046b0:	08004863 	.word	0x08004863
 80046b4:	08004863 	.word	0x08004863
 80046b8:	0800479f 	.word	0x0800479f
 80046bc:	08004863 	.word	0x08004863
 80046c0:	08004863 	.word	0x08004863
 80046c4:	08004863 	.word	0x08004863
 80046c8:	080047e1 	.word	0x080047e1
 80046cc:	08004863 	.word	0x08004863
 80046d0:	08004863 	.word	0x08004863
 80046d4:	08004863 	.word	0x08004863
 80046d8:	08004821 	.word	0x08004821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa66 	bl	8004bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e0a5      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fab8 	bl	8004c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e084      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb0f 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e064      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb65 	bl	8004e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e043      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fb9c 	bl	8004f24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800481e:	e023      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fbce 	bl	8004fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004860:	e002      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
      break;
 8004866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x1c>
 8004894:	2302      	movs	r3, #2
 8004896:	e0b4      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x186>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <HAL_TIM_ConfigClockSource+0x190>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d0:	d03e      	beq.n	8004950 <HAL_TIM_ConfigClockSource+0xd4>
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	f200 8087 	bhi.w	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048de:	f000 8086 	beq.w	80049ee <HAL_TIM_ConfigClockSource+0x172>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d87f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b70      	cmp	r3, #112	; 0x70
 80048ea:	d01a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xa6>
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d87b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b60      	cmp	r3, #96	; 0x60
 80048f2:	d050      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x11a>
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d877      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b50      	cmp	r3, #80	; 0x50
 80048fa:	d03c      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0xfa>
 80048fc:	2b50      	cmp	r3, #80	; 0x50
 80048fe:	d873      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d058      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d86f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	d064      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d86b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d060      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d867      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05c      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d05a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	e062      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f000 fc17 	bl	8005164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]
      break;
 800494e:	e04f      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f000 fc00 	bl	8005164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004972:	609a      	str	r2, [r3, #8]
      break;
 8004974:	e03c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 fb74 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2150      	movs	r1, #80	; 0x50
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fbcd 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004994:	e02c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f000 fb93 	bl	80050ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2160      	movs	r1, #96	; 0x60
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fbbd 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 80049b4:	e01c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f000 fb54 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2140      	movs	r1, #64	; 0x40
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fbad 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f000 fba4 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 80049e6:	e003      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	fffeff88 	.word	0xfffeff88

08004a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3d      	ldr	r2, [pc, #244]	; (8004b8c <TIM_Base_SetConfig+0x118>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3c      	ldr	r2, [pc, #240]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d027      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <TIM_Base_SetConfig+0x118>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d023      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <TIM_Base_SetConfig+0x128>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a24      	ldr	r2, [pc, #144]	; (8004bac <TIM_Base_SetConfig+0x138>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <TIM_Base_SetConfig+0x114>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800
 8004ba8:	40001800 	.word	0x40001800
 8004bac:	40001c00 	.word	0x40001c00
 8004bb0:	40002000 	.word	0x40002000

08004bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <TIM_OC1_SetConfig+0xd8>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0302 	bic.w	r3, r3, #2
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <TIM_OC1_SetConfig+0xdc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC1_SetConfig+0x64>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <TIM_OC1_SetConfig+0xe0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10c      	bne.n	8004c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0308 	bic.w	r3, r3, #8
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC1_SetConfig+0xdc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC1_SetConfig+0x8e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <TIM_OC1_SetConfig+0xe0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d111      	bne.n	8004c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	fffeff8f 	.word	0xfffeff8f
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0210 	bic.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <TIM_OC2_SetConfig+0xe4>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0320 	bic.w	r3, r3, #32
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a23      	ldr	r2, [pc, #140]	; (8004d80 <TIM_OC2_SetConfig+0xe8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC2_SetConfig+0x68>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <TIM_OC2_SetConfig+0xec>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10d      	bne.n	8004d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <TIM_OC2_SetConfig+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC2_SetConfig+0x94>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC2_SetConfig+0xec>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d113      	bne.n	8004d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	feff8fff 	.word	0xfeff8fff
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010400 	.word	0x40010400

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <TIM_OC3_SetConfig+0xe0>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <TIM_OC3_SetConfig+0xe4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC3_SetConfig+0x66>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_OC3_SetConfig+0xe8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10d      	bne.n	8004e0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <TIM_OC3_SetConfig+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_OC3_SetConfig+0x92>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <TIM_OC3_SetConfig+0xe8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d113      	bne.n	8004e42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	fffeff8f 	.word	0xfffeff8f
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <TIM_OC4_SetConfig+0xa4>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <TIM_OC4_SetConfig+0xa8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC4_SetConfig+0x68>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_OC4_SetConfig+0xac>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	feff8fff 	.word	0xfeff8fff
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40010400 	.word	0x40010400

08004f24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <TIM_OC5_SetConfig+0x98>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a12      	ldr	r2, [pc, #72]	; (8004fc0 <TIM_OC5_SetConfig+0x9c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC5_SetConfig+0x5e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a11      	ldr	r2, [pc, #68]	; (8004fc4 <TIM_OC5_SetConfig+0xa0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d109      	bne.n	8004f96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	621a      	str	r2, [r3, #32]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	fffeff8f 	.word	0xfffeff8f
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <TIM_OC6_SetConfig+0x9c>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800500a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_OC6_SetConfig+0xa0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC6_SetConfig+0x60>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a12      	ldr	r2, [pc, #72]	; (800506c <TIM_OC6_SetConfig+0xa4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	feff8fff 	.word	0xfeff8fff
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b087      	sub	sp, #28
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0210 	bic.w	r2, r3, #16
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	f043 0307 	orr.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	431a      	orrs	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e06d      	b.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d01d      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40001800 	.word	0x40001800

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e040      	b.n	8005390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc fdf2 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	; 0x24
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fbe6 	bl	8005b0c <UART_SetConfig>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e022      	b.n	8005390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fe3e 	bl	8005fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fec5 	bl	8006118 <UART_CheckIdleState>
 800538e:	4603      	mov	r3, r0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d171      	bne.n	8005494 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_UART_Transmit+0x24>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e06a      	b.n	8005496 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2221      	movs	r2, #33	; 0x21
 80053cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fc feaf 	bl	8002130 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x68>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005408:	e02c      	b.n	8005464 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 feb6 	bl	8006186 <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e038      	b.n	8005496 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10b      	bne.n	8005442 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	3302      	adds	r3, #2
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e007      	b.n	8005452 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1cc      	bne.n	800540a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	2140      	movs	r1, #64	; 0x40
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fe83 	bl	8006186 <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e005      	b.n	8005496 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b08a      	sub	sp, #40	; 0x28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d132      	bne.n	800551c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_UART_Receive_IT+0x24>
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e02b      	b.n	800551e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	61bb      	str	r3, [r7, #24]
   return(result);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	461a      	mov	r2, r3
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fefe 	bl	8006314 <UART_Start_Receive_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	e000      	b.n	800551e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3728      	adds	r7, #40	; 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0ba      	sub	sp, #232	; 0xe8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800554e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005552:	f640 030f 	movw	r3, #2063	; 0x80f
 8005556:	4013      	ands	r3, r2
 8005558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d115      	bne.n	8005590 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00f      	beq.n	8005590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8297 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      }
      return;
 800558e:	e291      	b.n	8005ab4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8117 	beq.w	80057c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800559a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055aa:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_UART_IRQHandler+0x298>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 810a 	beq.w	80057c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d011      	beq.n	80055e4 <HAL_UART_IRQHandler+0xbc>
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <HAL_UART_IRQHandler+0xec>
 80055f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2202      	movs	r2, #2
 8005602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_UART_IRQHandler+0x11c>
 8005620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2204      	movs	r2, #4
 8005632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563a:	f043 0202 	orr.w	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d017      	beq.n	8005680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800565c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2208      	movs	r2, #8
 800566e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005676:	f043 0208 	orr.w	r2, r3, #8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005688:	2b00      	cmp	r3, #0
 800568a:	d012      	beq.n	80056b2 <HAL_UART_IRQHandler+0x18a>
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 81fd 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d005      	beq.n	800570a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fec8 	bl	80064a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d141      	bne.n	80057a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_UART_IRQHandler+0x29c>)
 8005778:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc ff12 	bl	80025a8 <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	e00f      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9a0 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00b      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f99c 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e007      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f998 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80057b8:	e17e      	b.n	8005ab8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ba:	bf00      	nop
    return;
 80057bc:	e17c      	b.n	8005ab8 <HAL_UART_IRQHandler+0x590>
 80057be:	bf00      	nop
 80057c0:	04000120 	.word	0x04000120
 80057c4:	08006569 	.word	0x08006569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 814c 	bne.w	8005a6a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8145 	beq.w	8005a6a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 813e 	beq.w	8005a6a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2210      	movs	r2, #16
 80057f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	f040 80b6 	bne.w	8005972 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8150 	beq.w	8005abc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	429a      	cmp	r2, r3
 8005828:	f080 8148 	bcs.w	8005abc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005840:	f000 8086 	beq.w	8005950 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800586e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1da      	bne.n	8005844 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e1      	bne.n	800588e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800591e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005920:	f023 0310 	bic.w	r3, r3, #16
 8005924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005932:	65bb      	str	r3, [r7, #88]	; 0x58
 8005934:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e4      	bne.n	8005910 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594a:	4618      	mov	r0, r3
 800594c:	f7fc fdbc 	bl	80024c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005962:	b29b      	uxth	r3, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	b29b      	uxth	r3, r3
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8c2 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005970:	e0a4      	b.n	8005abc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597e:	b29b      	uxth	r3, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8096 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8091 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
 80059c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e4      	bne.n	800599e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	623b      	str	r3, [r7, #32]
   return(result);
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f8:	633a      	str	r2, [r7, #48]	; 0x30
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e3      	bne.n	80059d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f023 0310 	bic.w	r3, r3, #16
 8005a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e4      	bne.n	8005a20 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f846 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a68:	e02a      	b.n	8005ac0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01c      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
    }
    return;
 8005a92:	e017      	b.n	8005ac4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
 8005aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fd71 	bl	8006594 <UART_EndTransmit_IT>
    return;
 8005ab2:	e008      	b.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005ab4:	bf00      	nop
 8005ab6:	e006      	b.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005ab8:	bf00      	nop
 8005aba:	e004      	b.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005abc:	bf00      	nop
 8005abe:	e002      	b.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005ac4:	bf00      	nop
  }

}
 8005ac6:	37e8      	adds	r7, #232	; 0xe8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4ba6      	ldr	r3, [pc, #664]	; (8005dd0 <UART_SetConfig+0x2c4>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a94      	ldr	r2, [pc, #592]	; (8005dd4 <UART_SetConfig+0x2c8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d120      	bne.n	8005bca <UART_SetConfig+0xbe>
 8005b88:	4b93      	ldr	r3, [pc, #588]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d816      	bhi.n	8005bc4 <UART_SetConfig+0xb8>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x90>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bb3 	.word	0x08005bb3
 8005ba8:	08005bbf 	.word	0x08005bbf
 8005bac:	2301      	movs	r3, #1
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e150      	b.n	8005e54 <UART_SetConfig+0x348>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e14d      	b.n	8005e54 <UART_SetConfig+0x348>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e14a      	b.n	8005e54 <UART_SetConfig+0x348>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e147      	b.n	8005e54 <UART_SetConfig+0x348>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e144      	b.n	8005e54 <UART_SetConfig+0x348>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a83      	ldr	r2, [pc, #524]	; (8005ddc <UART_SetConfig+0x2d0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d132      	bne.n	8005c3a <UART_SetConfig+0x12e>
 8005bd4:	4b80      	ldr	r3, [pc, #512]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d828      	bhi.n	8005c34 <UART_SetConfig+0x128>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0xdc>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005c35 	.word	0x08005c35
 8005bf0:	08005c35 	.word	0x08005c35
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005c35 	.word	0x08005c35
 8005c00:	08005c35 	.word	0x08005c35
 8005c04:	08005c35 	.word	0x08005c35
 8005c08:	08005c23 	.word	0x08005c23
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005c2f 	.word	0x08005c2f
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e118      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e115      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e112      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e10f      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c34:	2310      	movs	r3, #16
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e10c      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a68      	ldr	r2, [pc, #416]	; (8005de0 <UART_SetConfig+0x2d4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d120      	bne.n	8005c86 <UART_SetConfig+0x17a>
 8005c44:	4b64      	ldr	r3, [pc, #400]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c4e:	2b30      	cmp	r3, #48	; 0x30
 8005c50:	d013      	beq.n	8005c7a <UART_SetConfig+0x16e>
 8005c52:	2b30      	cmp	r3, #48	; 0x30
 8005c54:	d814      	bhi.n	8005c80 <UART_SetConfig+0x174>
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d009      	beq.n	8005c6e <UART_SetConfig+0x162>
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d810      	bhi.n	8005c80 <UART_SetConfig+0x174>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <UART_SetConfig+0x15c>
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d006      	beq.n	8005c74 <UART_SetConfig+0x168>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x174>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e0f2      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e0ef      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e0ec      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e0e9      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e0e6      	b.n	8005e54 <UART_SetConfig+0x348>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a56      	ldr	r2, [pc, #344]	; (8005de4 <UART_SetConfig+0x2d8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d120      	bne.n	8005cd2 <UART_SetConfig+0x1c6>
 8005c90:	4b51      	ldr	r3, [pc, #324]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c9c:	d013      	beq.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005ca0:	d814      	bhi.n	8005ccc <UART_SetConfig+0x1c0>
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x1ae>
 8005ca6:	2b80      	cmp	r3, #128	; 0x80
 8005ca8:	d810      	bhi.n	8005ccc <UART_SetConfig+0x1c0>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <UART_SetConfig+0x1a8>
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d006      	beq.n	8005cc0 <UART_SetConfig+0x1b4>
 8005cb2:	e00b      	b.n	8005ccc <UART_SetConfig+0x1c0>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e0cc      	b.n	8005e54 <UART_SetConfig+0x348>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e0c9      	b.n	8005e54 <UART_SetConfig+0x348>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e0c6      	b.n	8005e54 <UART_SetConfig+0x348>
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e0c3      	b.n	8005e54 <UART_SetConfig+0x348>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e0c0      	b.n	8005e54 <UART_SetConfig+0x348>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a44      	ldr	r2, [pc, #272]	; (8005de8 <UART_SetConfig+0x2dc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d125      	bne.n	8005d28 <UART_SetConfig+0x21c>
 8005cdc:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cea:	d017      	beq.n	8005d1c <UART_SetConfig+0x210>
 8005cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf0:	d817      	bhi.n	8005d22 <UART_SetConfig+0x216>
 8005cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf6:	d00b      	beq.n	8005d10 <UART_SetConfig+0x204>
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfc:	d811      	bhi.n	8005d22 <UART_SetConfig+0x216>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <UART_SetConfig+0x1fe>
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d06:	d006      	beq.n	8005d16 <UART_SetConfig+0x20a>
 8005d08:	e00b      	b.n	8005d22 <UART_SetConfig+0x216>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e0a1      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d10:	2302      	movs	r3, #2
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e09e      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d16:	2304      	movs	r3, #4
 8005d18:	77fb      	strb	r3, [r7, #31]
 8005d1a:	e09b      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e098      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d22:	2310      	movs	r3, #16
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e095      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2f      	ldr	r2, [pc, #188]	; (8005dec <UART_SetConfig+0x2e0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d125      	bne.n	8005d7e <UART_SetConfig+0x272>
 8005d32:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d40:	d017      	beq.n	8005d72 <UART_SetConfig+0x266>
 8005d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d46:	d817      	bhi.n	8005d78 <UART_SetConfig+0x26c>
 8005d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4c:	d00b      	beq.n	8005d66 <UART_SetConfig+0x25a>
 8005d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d52:	d811      	bhi.n	8005d78 <UART_SetConfig+0x26c>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <UART_SetConfig+0x254>
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d006      	beq.n	8005d6c <UART_SetConfig+0x260>
 8005d5e:	e00b      	b.n	8005d78 <UART_SetConfig+0x26c>
 8005d60:	2301      	movs	r3, #1
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e076      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d66:	2302      	movs	r3, #2
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e073      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e070      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d72:	2308      	movs	r3, #8
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e06d      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e06a      	b.n	8005e54 <UART_SetConfig+0x348>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <UART_SetConfig+0x2e4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d138      	bne.n	8005dfa <UART_SetConfig+0x2ee>
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <UART_SetConfig+0x2cc>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d96:	d017      	beq.n	8005dc8 <UART_SetConfig+0x2bc>
 8005d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d9c:	d82a      	bhi.n	8005df4 <UART_SetConfig+0x2e8>
 8005d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da2:	d00b      	beq.n	8005dbc <UART_SetConfig+0x2b0>
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d824      	bhi.n	8005df4 <UART_SetConfig+0x2e8>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <UART_SetConfig+0x2aa>
 8005dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db2:	d006      	beq.n	8005dc2 <UART_SetConfig+0x2b6>
 8005db4:	e01e      	b.n	8005df4 <UART_SetConfig+0x2e8>
 8005db6:	2300      	movs	r3, #0
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e04b      	b.n	8005e54 <UART_SetConfig+0x348>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e048      	b.n	8005e54 <UART_SetConfig+0x348>
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e045      	b.n	8005e54 <UART_SetConfig+0x348>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e042      	b.n	8005e54 <UART_SetConfig+0x348>
 8005dce:	bf00      	nop
 8005dd0:	efff69f3 	.word	0xefff69f3
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40004400 	.word	0x40004400
 8005de0:	40004800 	.word	0x40004800
 8005de4:	40004c00 	.word	0x40004c00
 8005de8:	40005000 	.word	0x40005000
 8005dec:	40011400 	.word	0x40011400
 8005df0:	40007800 	.word	0x40007800
 8005df4:	2310      	movs	r3, #16
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e02c      	b.n	8005e54 <UART_SetConfig+0x348>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a72      	ldr	r2, [pc, #456]	; (8005fc8 <UART_SetConfig+0x4bc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d125      	bne.n	8005e50 <UART_SetConfig+0x344>
 8005e04:	4b71      	ldr	r3, [pc, #452]	; (8005fcc <UART_SetConfig+0x4c0>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e12:	d017      	beq.n	8005e44 <UART_SetConfig+0x338>
 8005e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e18:	d817      	bhi.n	8005e4a <UART_SetConfig+0x33e>
 8005e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1e:	d00b      	beq.n	8005e38 <UART_SetConfig+0x32c>
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d811      	bhi.n	8005e4a <UART_SetConfig+0x33e>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <UART_SetConfig+0x326>
 8005e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2e:	d006      	beq.n	8005e3e <UART_SetConfig+0x332>
 8005e30:	e00b      	b.n	8005e4a <UART_SetConfig+0x33e>
 8005e32:	2300      	movs	r3, #0
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e00d      	b.n	8005e54 <UART_SetConfig+0x348>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e00a      	b.n	8005e54 <UART_SetConfig+0x348>
 8005e3e:	2304      	movs	r3, #4
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e007      	b.n	8005e54 <UART_SetConfig+0x348>
 8005e44:	2308      	movs	r3, #8
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e004      	b.n	8005e54 <UART_SetConfig+0x348>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e001      	b.n	8005e54 <UART_SetConfig+0x348>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	d15b      	bne.n	8005f16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d828      	bhi.n	8005eb6 <UART_SetConfig+0x3aa>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0x360>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08005eb7 	.word	0x08005eb7
 8005e7c:	08005ea7 	.word	0x08005ea7
 8005e80:	08005eb7 	.word	0x08005eb7
 8005e84:	08005eb7 	.word	0x08005eb7
 8005e88:	08005eb7 	.word	0x08005eb7
 8005e8c:	08005eaf 	.word	0x08005eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e90:	f7fd fdf0 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8005e94:	61b8      	str	r0, [r7, #24]
        break;
 8005e96:	e013      	b.n	8005ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e98:	f7fd fe00 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8005e9c:	61b8      	str	r0, [r7, #24]
        break;
 8005e9e:	e00f      	b.n	8005ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea0:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <UART_SetConfig+0x4c4>)
 8005ea2:	61bb      	str	r3, [r7, #24]
        break;
 8005ea4:	e00c      	b.n	8005ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea6:	f7fd fcd3 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8005eaa:	61b8      	str	r0, [r7, #24]
        break;
 8005eac:	e008      	b.n	8005ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb2:	61bb      	str	r3, [r7, #24]
        break;
 8005eb4:	e004      	b.n	8005ec0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8005ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d074      	beq.n	8005fb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	005a      	lsls	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	441a      	add	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	d916      	bls.n	8005f10 <UART_SetConfig+0x404>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee8:	d212      	bcs.n	8005f10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f023 030f 	bic.w	r3, r3, #15
 8005ef2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	89fb      	ldrh	r3, [r7, #14]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	89fa      	ldrh	r2, [r7, #14]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e04f      	b.n	8005fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77bb      	strb	r3, [r7, #30]
 8005f14:	e04c      	b.n	8005fb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d828      	bhi.n	8005f6e <UART_SetConfig+0x462>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x418>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fd fd94 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61b8      	str	r0, [r7, #24]
        break;
 8005f4e:	e013      	b.n	8005f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fd fda4 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8005f54:	61b8      	str	r0, [r7, #24]
        break;
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <UART_SetConfig+0x4c4>)
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e00c      	b.n	8005f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fd fc77 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8005f62:	61b8      	str	r0, [r7, #24]
        break;
 8005f64:	e008      	b.n	8005f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61bb      	str	r3, [r7, #24]
        break;
 8005f6c:	e004      	b.n	8005f78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	77bb      	strb	r3, [r7, #30]
        break;
 8005f76:	bf00      	nop
    }

    if (pclk != 0U)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d018      	beq.n	8005fb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085a      	lsrs	r2, r3, #1
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	441a      	add	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b0f      	cmp	r3, #15
 8005f96:	d909      	bls.n	8005fac <UART_SetConfig+0x4a0>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9e:	d205      	bcs.n	8005fac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e001      	b.n	8005fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40007c00 	.word	0x40007c00
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	00f42400 	.word	0x00f42400

08005fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01a      	beq.n	80060ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d10a      	bne.n	80060ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006128:	f7fc f802 	bl	8002130 <HAL_GetTick>
 800612c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d10e      	bne.n	800615a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f81b 	bl	8006186 <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e011      	b.n	800617e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b09c      	sub	sp, #112	; 0x70
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006196:	e0a7      	b.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	f000 80a3 	beq.w	80062e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fb ffc5 	bl	8002130 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80061b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13f      	bne.n	8006238 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061cc:	667b      	str	r3, [r7, #100]	; 0x64
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	663b      	str	r3, [r7, #96]	; 0x60
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620a:	64ba      	str	r2, [r7, #72]	; 0x48
 800620c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e5      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e068      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d050      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006254:	d148      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800625e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
 8006280:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	613b      	str	r3, [r7, #16]
   return(result);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062b2:	623a      	str	r2, [r7, #32]
 80062b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	69f9      	ldr	r1, [r7, #28]
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e010      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	429a      	cmp	r2, r3
 8006304:	f43f af48 	beq.w	8006198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3770      	adds	r7, #112	; 0x70
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006314:	b480      	push	{r7}
 8006316:	b097      	sub	sp, #92	; 0x5c
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d10e      	bne.n	8006366 <UART_Start_Receive_IT+0x52>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <UART_Start_Receive_IT+0x48>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635a:	e02d      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006364:	e028      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <UART_Start_Receive_IT+0x76>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <UART_Start_Receive_IT+0x6c>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	22ff      	movs	r2, #255	; 0xff
 800637a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800637e:	e01b      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	227f      	movs	r2, #127	; 0x7f
 8006384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006388:	e016      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d10d      	bne.n	80063b0 <UART_Start_Receive_IT+0x9c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <UART_Start_Receive_IT+0x92>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	227f      	movs	r2, #127	; 0x7f
 80063a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a4:	e008      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	223f      	movs	r2, #63	; 0x3f
 80063aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ae:	e003      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2222      	movs	r2, #34	; 0x22
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	657b      	str	r3, [r7, #84]	; 0x54
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80063ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e5      	bne.n	80063c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d107      	bne.n	8006416 <UART_Start_Receive_IT+0x102>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a21      	ldr	r2, [pc, #132]	; (8006498 <UART_Start_Receive_IT+0x184>)
 8006412:	669a      	str	r2, [r3, #104]	; 0x68
 8006414:	e002      	b.n	800641c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a20      	ldr	r2, [pc, #128]	; (800649c <UART_Start_Receive_IT+0x188>)
 800641a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d019      	beq.n	8006458 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
 8006444:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_Start_Receive_IT+0x110>
 8006456:	e018      	b.n	800648a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	613b      	str	r3, [r7, #16]
   return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f043 0320 	orr.w	r3, r3, #32
 800646c:	653b      	str	r3, [r7, #80]	; 0x50
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61bb      	str	r3, [r7, #24]
   return(result);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e6      	bne.n	8006458 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	375c      	adds	r7, #92	; 0x5c
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	0800674f 	.word	0x0800674f
 800649c:	080065e9 	.word	0x080065e9

080064a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b095      	sub	sp, #84	; 0x54
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
 80064c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	2b01      	cmp	r3, #1
 8006514:	d118      	bne.n	8006548 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	60bb      	str	r3, [r7, #8]
   return(result);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f023 0310 	bic.w	r3, r3, #16
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e6      	bne.n	8006516 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800655c:	bf00      	nop
 800655e:	3754      	adds	r7, #84	; 0x54
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff faaa 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6979      	ldr	r1, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fa76 	bl	8005acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e0:	bf00      	nop
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b096      	sub	sp, #88	; 0x58
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006600:	2b22      	cmp	r3, #34	; 0x22
 8006602:	f040 8098 	bne.w	8006736 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006610:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006614:	b2d9      	uxtb	r1, r3
 8006616:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800661a:	b2da      	uxtb	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	400a      	ands	r2, r1
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d17b      	bne.n	8006746 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006662:	653b      	str	r3, [r7, #80]	; 0x50
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
 800666e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800667a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	623b      	str	r3, [r7, #32]
   return(result);
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066a0:	633a      	str	r2, [r7, #48]	; 0x30
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d12e      	bne.n	800672e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	617b      	str	r3, [r7, #20]
   return(result);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d103      	bne.n	800671e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2210      	movs	r2, #16
 800671c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff f9e4 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672c:	e00b      	b.n	8006746 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fa ff86 	bl	8001640 <HAL_UART_RxCpltCallback>
}
 8006734:	e007      	b.n	8006746 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0208 	orr.w	r2, r2, #8
 8006744:	619a      	str	r2, [r3, #24]
}
 8006746:	bf00      	nop
 8006748:	3758      	adds	r7, #88	; 0x58
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b096      	sub	sp, #88	; 0x58
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800675c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006766:	2b22      	cmp	r3, #34	; 0x22
 8006768:	f040 8098 	bne.w	800689c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800677c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006780:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006784:	4013      	ands	r3, r2
 8006786:	b29a      	uxth	r2, r3
 8006788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d17b      	bne.n	80068ac <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
 80067d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e6      	bne.n	80067b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800680c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006832:	2b01      	cmp	r3, #1
 8006834:	d12e      	bne.n	8006894 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60bb      	str	r3, [r7, #8]
   return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	647b      	str	r3, [r7, #68]	; 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b10      	cmp	r3, #16
 800687a:	d103      	bne.n	8006884 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2210      	movs	r2, #16
 8006882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff f931 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006892:	e00b      	b.n	80068ac <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fa fed3 	bl	8001640 <HAL_UART_RxCpltCallback>
}
 800689a:	e007      	b.n	80068ac <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0208 	orr.w	r2, r2, #8
 80068aa:	619a      	str	r2, [r3, #24]
}
 80068ac:	bf00      	nop
 80068ae:	3758      	adds	r7, #88	; 0x58
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000028 	.word	0x20000028

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <__libc_init_array+0x38>)
 80068c4:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	2600      	movs	r6, #0
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	4d0b      	ldr	r5, [pc, #44]	; (8006900 <__libc_init_array+0x40>)
 80068d2:	4c0c      	ldr	r4, [pc, #48]	; (8006904 <__libc_init_array+0x44>)
 80068d4:	f005 f8ca 	bl	800ba6c <_init>
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	2600      	movs	r6, #0
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	0800bf94 	.word	0x0800bf94
 80068fc:	0800bf94 	.word	0x0800bf94
 8006900:	0800bf94 	.word	0x0800bf94
 8006904:	0800bf98 	.word	0x0800bf98

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <__cvt>:
 8006918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	ec55 4b10 	vmov	r4, r5, d0
 8006920:	2d00      	cmp	r5, #0
 8006922:	460e      	mov	r6, r1
 8006924:	4619      	mov	r1, r3
 8006926:	462b      	mov	r3, r5
 8006928:	bfbb      	ittet	lt
 800692a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800692e:	461d      	movlt	r5, r3
 8006930:	2300      	movge	r3, #0
 8006932:	232d      	movlt	r3, #45	; 0x2d
 8006934:	700b      	strb	r3, [r1, #0]
 8006936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800693c:	4691      	mov	r9, r2
 800693e:	f023 0820 	bic.w	r8, r3, #32
 8006942:	bfbc      	itt	lt
 8006944:	4622      	movlt	r2, r4
 8006946:	4614      	movlt	r4, r2
 8006948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800694c:	d005      	beq.n	800695a <__cvt+0x42>
 800694e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006952:	d100      	bne.n	8006956 <__cvt+0x3e>
 8006954:	3601      	adds	r6, #1
 8006956:	2102      	movs	r1, #2
 8006958:	e000      	b.n	800695c <__cvt+0x44>
 800695a:	2103      	movs	r1, #3
 800695c:	ab03      	add	r3, sp, #12
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	ab02      	add	r3, sp, #8
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	ec45 4b10 	vmov	d0, r4, r5
 8006968:	4653      	mov	r3, sl
 800696a:	4632      	mov	r2, r6
 800696c:	f001 fe58 	bl	8008620 <_dtoa_r>
 8006970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006974:	4607      	mov	r7, r0
 8006976:	d102      	bne.n	800697e <__cvt+0x66>
 8006978:	f019 0f01 	tst.w	r9, #1
 800697c:	d022      	beq.n	80069c4 <__cvt+0xac>
 800697e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006982:	eb07 0906 	add.w	r9, r7, r6
 8006986:	d110      	bne.n	80069aa <__cvt+0x92>
 8006988:	783b      	ldrb	r3, [r7, #0]
 800698a:	2b30      	cmp	r3, #48	; 0x30
 800698c:	d10a      	bne.n	80069a4 <__cvt+0x8c>
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7fa f8b7 	bl	8000b08 <__aeabi_dcmpeq>
 800699a:	b918      	cbnz	r0, 80069a4 <__cvt+0x8c>
 800699c:	f1c6 0601 	rsb	r6, r6, #1
 80069a0:	f8ca 6000 	str.w	r6, [sl]
 80069a4:	f8da 3000 	ldr.w	r3, [sl]
 80069a8:	4499      	add	r9, r3
 80069aa:	2200      	movs	r2, #0
 80069ac:	2300      	movs	r3, #0
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	f7fa f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80069b6:	b108      	cbz	r0, 80069bc <__cvt+0xa4>
 80069b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80069bc:	2230      	movs	r2, #48	; 0x30
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	454b      	cmp	r3, r9
 80069c2:	d307      	bcc.n	80069d4 <__cvt+0xbc>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069c8:	1bdb      	subs	r3, r3, r7
 80069ca:	4638      	mov	r0, r7
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	b004      	add	sp, #16
 80069d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	9103      	str	r1, [sp, #12]
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e7f0      	b.n	80069be <__cvt+0xa6>

080069dc <__exponent>:
 80069dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069de:	4603      	mov	r3, r0
 80069e0:	2900      	cmp	r1, #0
 80069e2:	bfb8      	it	lt
 80069e4:	4249      	neglt	r1, r1
 80069e6:	f803 2b02 	strb.w	r2, [r3], #2
 80069ea:	bfb4      	ite	lt
 80069ec:	222d      	movlt	r2, #45	; 0x2d
 80069ee:	222b      	movge	r2, #43	; 0x2b
 80069f0:	2909      	cmp	r1, #9
 80069f2:	7042      	strb	r2, [r0, #1]
 80069f4:	dd2a      	ble.n	8006a4c <__exponent+0x70>
 80069f6:	f10d 0407 	add.w	r4, sp, #7
 80069fa:	46a4      	mov	ip, r4
 80069fc:	270a      	movs	r7, #10
 80069fe:	46a6      	mov	lr, r4
 8006a00:	460a      	mov	r2, r1
 8006a02:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a06:	fb07 1516 	mls	r5, r7, r6, r1
 8006a0a:	3530      	adds	r5, #48	; 0x30
 8006a0c:	2a63      	cmp	r2, #99	; 0x63
 8006a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a16:	4631      	mov	r1, r6
 8006a18:	dcf1      	bgt.n	80069fe <__exponent+0x22>
 8006a1a:	3130      	adds	r1, #48	; 0x30
 8006a1c:	f1ae 0502 	sub.w	r5, lr, #2
 8006a20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a24:	1c44      	adds	r4, r0, #1
 8006a26:	4629      	mov	r1, r5
 8006a28:	4561      	cmp	r1, ip
 8006a2a:	d30a      	bcc.n	8006a42 <__exponent+0x66>
 8006a2c:	f10d 0209 	add.w	r2, sp, #9
 8006a30:	eba2 020e 	sub.w	r2, r2, lr
 8006a34:	4565      	cmp	r5, ip
 8006a36:	bf88      	it	hi
 8006a38:	2200      	movhi	r2, #0
 8006a3a:	4413      	add	r3, r2
 8006a3c:	1a18      	subs	r0, r3, r0
 8006a3e:	b003      	add	sp, #12
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a4a:	e7ed      	b.n	8006a28 <__exponent+0x4c>
 8006a4c:	2330      	movs	r3, #48	; 0x30
 8006a4e:	3130      	adds	r1, #48	; 0x30
 8006a50:	7083      	strb	r3, [r0, #2]
 8006a52:	70c1      	strb	r1, [r0, #3]
 8006a54:	1d03      	adds	r3, r0, #4
 8006a56:	e7f1      	b.n	8006a3c <__exponent+0x60>

08006a58 <_printf_float>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	ed2d 8b02 	vpush	{d8}
 8006a60:	b08d      	sub	sp, #52	; 0x34
 8006a62:	460c      	mov	r4, r1
 8006a64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a68:	4616      	mov	r6, r2
 8006a6a:	461f      	mov	r7, r3
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	f002 ff35 	bl	80098dc <_localeconv_r>
 8006a72:	f8d0 a000 	ldr.w	sl, [r0]
 8006a76:	4650      	mov	r0, sl
 8006a78:	f7f9 fbca 	bl	8000210 <strlen>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	f8d8 3000 	ldr.w	r3, [r8]
 8006a88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a8c:	3307      	adds	r3, #7
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	f103 0208 	add.w	r2, r3, #8
 8006a96:	f8c8 2000 	str.w	r2, [r8]
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006aa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ab0:	ee08 0a10 	vmov	s16, r0
 8006ab4:	4b9f      	ldr	r3, [pc, #636]	; (8006d34 <_printf_float+0x2dc>)
 8006ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	f7fa f855 	bl	8000b6c <__aeabi_dcmpun>
 8006ac2:	bb88      	cbnz	r0, 8006b28 <_printf_float+0xd0>
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	4b9a      	ldr	r3, [pc, #616]	; (8006d34 <_printf_float+0x2dc>)
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	f7fa f82f 	bl	8000b30 <__aeabi_dcmple>
 8006ad2:	bb48      	cbnz	r0, 8006b28 <_printf_float+0xd0>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	f7fa f81e 	bl	8000b1c <__aeabi_dcmplt>
 8006ae0:	b110      	cbz	r0, 8006ae8 <_printf_float+0x90>
 8006ae2:	232d      	movs	r3, #45	; 0x2d
 8006ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae8:	4b93      	ldr	r3, [pc, #588]	; (8006d38 <_printf_float+0x2e0>)
 8006aea:	4894      	ldr	r0, [pc, #592]	; (8006d3c <_printf_float+0x2e4>)
 8006aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006af0:	bf94      	ite	ls
 8006af2:	4698      	movls	r8, r3
 8006af4:	4680      	movhi	r8, r0
 8006af6:	2303      	movs	r3, #3
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	f023 0204 	bic.w	r2, r3, #4
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	f04f 0900 	mov.w	r9, #0
 8006b06:	9700      	str	r7, [sp, #0]
 8006b08:	4633      	mov	r3, r6
 8006b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f9d8 	bl	8006ec4 <_printf_common>
 8006b14:	3001      	adds	r0, #1
 8006b16:	f040 8090 	bne.w	8006c3a <_printf_float+0x1e2>
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1e:	b00d      	add	sp, #52	; 0x34
 8006b20:	ecbd 8b02 	vpop	{d8}
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4649      	mov	r1, r9
 8006b30:	f7fa f81c 	bl	8000b6c <__aeabi_dcmpun>
 8006b34:	b140      	cbz	r0, 8006b48 <_printf_float+0xf0>
 8006b36:	464b      	mov	r3, r9
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bfbc      	itt	lt
 8006b3c:	232d      	movlt	r3, #45	; 0x2d
 8006b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b42:	487f      	ldr	r0, [pc, #508]	; (8006d40 <_printf_float+0x2e8>)
 8006b44:	4b7f      	ldr	r3, [pc, #508]	; (8006d44 <_printf_float+0x2ec>)
 8006b46:	e7d1      	b.n	8006aec <_printf_float+0x94>
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b4e:	9206      	str	r2, [sp, #24]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	d13f      	bne.n	8006bd4 <_printf_float+0x17c>
 8006b54:	2306      	movs	r3, #6
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	9b05      	ldr	r3, [sp, #20]
 8006b5a:	6861      	ldr	r1, [r4, #4]
 8006b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b60:	2300      	movs	r3, #0
 8006b62:	9303      	str	r3, [sp, #12]
 8006b64:	ab0a      	add	r3, sp, #40	; 0x28
 8006b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b6a:	ab09      	add	r3, sp, #36	; 0x24
 8006b6c:	ec49 8b10 	vmov	d0, r8, r9
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f7ff fecd 	bl	8006918 <__cvt>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b82:	2b47      	cmp	r3, #71	; 0x47
 8006b84:	4680      	mov	r8, r0
 8006b86:	d108      	bne.n	8006b9a <_printf_float+0x142>
 8006b88:	1cc8      	adds	r0, r1, #3
 8006b8a:	db02      	blt.n	8006b92 <_printf_float+0x13a>
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	dd41      	ble.n	8006c16 <_printf_float+0x1be>
 8006b92:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b96:	fa5f fb8b 	uxtb.w	fp, fp
 8006b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b9e:	d820      	bhi.n	8006be2 <_printf_float+0x18a>
 8006ba0:	3901      	subs	r1, #1
 8006ba2:	465a      	mov	r2, fp
 8006ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8006baa:	f7ff ff17 	bl	80069dc <__exponent>
 8006bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bb0:	1813      	adds	r3, r2, r0
 8006bb2:	2a01      	cmp	r2, #1
 8006bb4:	4681      	mov	r9, r0
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	dc02      	bgt.n	8006bc0 <_printf_float+0x168>
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	07d2      	lsls	r2, r2, #31
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_float+0x16c>
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d09c      	beq.n	8006b06 <_printf_float+0xae>
 8006bcc:	232d      	movs	r3, #45	; 0x2d
 8006bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd2:	e798      	b.n	8006b06 <_printf_float+0xae>
 8006bd4:	9a06      	ldr	r2, [sp, #24]
 8006bd6:	2a47      	cmp	r2, #71	; 0x47
 8006bd8:	d1be      	bne.n	8006b58 <_printf_float+0x100>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1bc      	bne.n	8006b58 <_printf_float+0x100>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7b9      	b.n	8006b56 <_printf_float+0xfe>
 8006be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006be6:	d118      	bne.n	8006c1a <_printf_float+0x1c2>
 8006be8:	2900      	cmp	r1, #0
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	dd0b      	ble.n	8006c06 <_printf_float+0x1ae>
 8006bee:	6121      	str	r1, [r4, #16]
 8006bf0:	b913      	cbnz	r3, 8006bf8 <_printf_float+0x1a0>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	07d0      	lsls	r0, r2, #31
 8006bf6:	d502      	bpl.n	8006bfe <_printf_float+0x1a6>
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	440b      	add	r3, r1
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c00:	f04f 0900 	mov.w	r9, #0
 8006c04:	e7de      	b.n	8006bc4 <_printf_float+0x16c>
 8006c06:	b913      	cbnz	r3, 8006c0e <_printf_float+0x1b6>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	07d2      	lsls	r2, r2, #31
 8006c0c:	d501      	bpl.n	8006c12 <_printf_float+0x1ba>
 8006c0e:	3302      	adds	r3, #2
 8006c10:	e7f4      	b.n	8006bfc <_printf_float+0x1a4>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7f2      	b.n	8006bfc <_printf_float+0x1a4>
 8006c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	db05      	blt.n	8006c2c <_printf_float+0x1d4>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	6121      	str	r1, [r4, #16]
 8006c24:	07d8      	lsls	r0, r3, #31
 8006c26:	d5ea      	bpl.n	8006bfe <_printf_float+0x1a6>
 8006c28:	1c4b      	adds	r3, r1, #1
 8006c2a:	e7e7      	b.n	8006bfc <_printf_float+0x1a4>
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	bfd4      	ite	le
 8006c30:	f1c1 0202 	rsble	r2, r1, #2
 8006c34:	2201      	movgt	r2, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	e7e0      	b.n	8006bfc <_printf_float+0x1a4>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	055a      	lsls	r2, r3, #21
 8006c3e:	d407      	bmi.n	8006c50 <_printf_float+0x1f8>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	4642      	mov	r2, r8
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d12c      	bne.n	8006ca8 <_printf_float+0x250>
 8006c4e:	e764      	b.n	8006b1a <_printf_float+0xc2>
 8006c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c54:	f240 80e0 	bls.w	8006e18 <_printf_float+0x3c0>
 8006c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f7f9 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d034      	beq.n	8006cd2 <_printf_float+0x27a>
 8006c68:	4a37      	ldr	r2, [pc, #220]	; (8006d48 <_printf_float+0x2f0>)
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f af51 	beq.w	8006b1a <_printf_float+0xc2>
 8006c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	db02      	blt.n	8006c86 <_printf_float+0x22e>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	07d8      	lsls	r0, r3, #31
 8006c84:	d510      	bpl.n	8006ca8 <_printf_float+0x250>
 8006c86:	ee18 3a10 	vmov	r3, s16
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af41 	beq.w	8006b1a <_printf_float+0xc2>
 8006c98:	f04f 0800 	mov.w	r8, #0
 8006c9c:	f104 091a 	add.w	r9, r4, #26
 8006ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	dc09      	bgt.n	8006cbc <_printf_float+0x264>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	079b      	lsls	r3, r3, #30
 8006cac:	f100 8105 	bmi.w	8006eba <_printf_float+0x462>
 8006cb0:	68e0      	ldr	r0, [r4, #12]
 8006cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb4:	4298      	cmp	r0, r3
 8006cb6:	bfb8      	it	lt
 8006cb8:	4618      	movlt	r0, r3
 8006cba:	e730      	b.n	8006b1e <_printf_float+0xc6>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	464a      	mov	r2, r9
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f af27 	beq.w	8006b1a <_printf_float+0xc2>
 8006ccc:	f108 0801 	add.w	r8, r8, #1
 8006cd0:	e7e6      	b.n	8006ca0 <_printf_float+0x248>
 8006cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dc39      	bgt.n	8006d4c <_printf_float+0x2f4>
 8006cd8:	4a1b      	ldr	r2, [pc, #108]	; (8006d48 <_printf_float+0x2f0>)
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f af19 	beq.w	8006b1a <_printf_float+0xc2>
 8006ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d102      	bne.n	8006cf6 <_printf_float+0x29e>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	d5d8      	bpl.n	8006ca8 <_printf_float+0x250>
 8006cf6:	ee18 3a10 	vmov	r3, s16
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af09 	beq.w	8006b1a <_printf_float+0xc2>
 8006d08:	f04f 0900 	mov.w	r9, #0
 8006d0c:	f104 0a1a 	add.w	sl, r4, #26
 8006d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d12:	425b      	negs	r3, r3
 8006d14:	454b      	cmp	r3, r9
 8006d16:	dc01      	bgt.n	8006d1c <_printf_float+0x2c4>
 8006d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1a:	e792      	b.n	8006c42 <_printf_float+0x1ea>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f aef7 	beq.w	8006b1a <_printf_float+0xc2>
 8006d2c:	f109 0901 	add.w	r9, r9, #1
 8006d30:	e7ee      	b.n	8006d10 <_printf_float+0x2b8>
 8006d32:	bf00      	nop
 8006d34:	7fefffff 	.word	0x7fefffff
 8006d38:	0800bad4 	.word	0x0800bad4
 8006d3c:	0800bad8 	.word	0x0800bad8
 8006d40:	0800bae0 	.word	0x0800bae0
 8006d44:	0800badc 	.word	0x0800badc
 8006d48:	0800bed9 	.word	0x0800bed9
 8006d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d50:	429a      	cmp	r2, r3
 8006d52:	bfa8      	it	ge
 8006d54:	461a      	movge	r2, r3
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	4691      	mov	r9, r2
 8006d5a:	dc37      	bgt.n	8006dcc <_printf_float+0x374>
 8006d5c:	f04f 0b00 	mov.w	fp, #0
 8006d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d64:	f104 021a 	add.w	r2, r4, #26
 8006d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	eba3 0309 	sub.w	r3, r3, r9
 8006d70:	455b      	cmp	r3, fp
 8006d72:	dc33      	bgt.n	8006ddc <_printf_float+0x384>
 8006d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	db3b      	blt.n	8006df4 <_printf_float+0x39c>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07da      	lsls	r2, r3, #31
 8006d80:	d438      	bmi.n	8006df4 <_printf_float+0x39c>
 8006d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d84:	9a05      	ldr	r2, [sp, #20]
 8006d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d88:	1a9a      	subs	r2, r3, r2
 8006d8a:	eba3 0901 	sub.w	r9, r3, r1
 8006d8e:	4591      	cmp	r9, r2
 8006d90:	bfa8      	it	ge
 8006d92:	4691      	movge	r9, r2
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	dc35      	bgt.n	8006e06 <_printf_float+0x3ae>
 8006d9a:	f04f 0800 	mov.w	r8, #0
 8006d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da2:	f104 0a1a 	add.w	sl, r4, #26
 8006da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	eba3 0309 	sub.w	r3, r3, r9
 8006db0:	4543      	cmp	r3, r8
 8006db2:	f77f af79 	ble.w	8006ca8 <_printf_float+0x250>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4652      	mov	r2, sl
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f aeaa 	beq.w	8006b1a <_printf_float+0xc2>
 8006dc6:	f108 0801 	add.w	r8, r8, #1
 8006dca:	e7ec      	b.n	8006da6 <_printf_float+0x34e>
 8006dcc:	4613      	mov	r3, r2
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d1c0      	bne.n	8006d5c <_printf_float+0x304>
 8006dda:	e69e      	b.n	8006b1a <_printf_float+0xc2>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	9205      	str	r2, [sp, #20]
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f ae97 	beq.w	8006b1a <_printf_float+0xc2>
 8006dec:	9a05      	ldr	r2, [sp, #20]
 8006dee:	f10b 0b01 	add.w	fp, fp, #1
 8006df2:	e7b9      	b.n	8006d68 <_printf_float+0x310>
 8006df4:	ee18 3a10 	vmov	r3, s16
 8006df8:	4652      	mov	r2, sl
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	d1be      	bne.n	8006d82 <_printf_float+0x32a>
 8006e04:	e689      	b.n	8006b1a <_printf_float+0xc2>
 8006e06:	9a05      	ldr	r2, [sp, #20]
 8006e08:	464b      	mov	r3, r9
 8006e0a:	4442      	add	r2, r8
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	d1c1      	bne.n	8006d9a <_printf_float+0x342>
 8006e16:	e680      	b.n	8006b1a <_printf_float+0xc2>
 8006e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1a:	2a01      	cmp	r2, #1
 8006e1c:	dc01      	bgt.n	8006e22 <_printf_float+0x3ca>
 8006e1e:	07db      	lsls	r3, r3, #31
 8006e20:	d538      	bpl.n	8006e94 <_printf_float+0x43c>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4642      	mov	r2, r8
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f ae74 	beq.w	8006b1a <_printf_float+0xc2>
 8006e32:	ee18 3a10 	vmov	r3, s16
 8006e36:	4652      	mov	r2, sl
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f ae6b 	beq.w	8006b1a <_printf_float+0xc2>
 8006e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f7f9 fe5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006e50:	b9d8      	cbnz	r0, 8006e8a <_printf_float+0x432>
 8006e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e54:	f108 0201 	add.w	r2, r8, #1
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d10e      	bne.n	8006e82 <_printf_float+0x42a>
 8006e64:	e659      	b.n	8006b1a <_printf_float+0xc2>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4652      	mov	r2, sl
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	f43f ae52 	beq.w	8006b1a <_printf_float+0xc2>
 8006e76:	f108 0801 	add.w	r8, r8, #1
 8006e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	4543      	cmp	r3, r8
 8006e80:	dcf1      	bgt.n	8006e66 <_printf_float+0x40e>
 8006e82:	464b      	mov	r3, r9
 8006e84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e88:	e6dc      	b.n	8006c44 <_printf_float+0x1ec>
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	f104 0a1a 	add.w	sl, r4, #26
 8006e92:	e7f2      	b.n	8006e7a <_printf_float+0x422>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4642      	mov	r2, r8
 8006e98:	e7df      	b.n	8006e5a <_printf_float+0x402>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	464a      	mov	r2, r9
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f43f ae38 	beq.w	8006b1a <_printf_float+0xc2>
 8006eaa:	f108 0801 	add.w	r8, r8, #1
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eb2:	1a5b      	subs	r3, r3, r1
 8006eb4:	4543      	cmp	r3, r8
 8006eb6:	dcf0      	bgt.n	8006e9a <_printf_float+0x442>
 8006eb8:	e6fa      	b.n	8006cb0 <_printf_float+0x258>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	f104 0919 	add.w	r9, r4, #25
 8006ec2:	e7f4      	b.n	8006eae <_printf_float+0x456>

08006ec4 <_printf_common>:
 8006ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec8:	4616      	mov	r6, r2
 8006eca:	4699      	mov	r9, r3
 8006ecc:	688a      	ldr	r2, [r1, #8]
 8006ece:	690b      	ldr	r3, [r1, #16]
 8006ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	bfb8      	it	lt
 8006ed8:	4613      	movlt	r3, r2
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	b10a      	cbz	r2, 8006eea <_printf_common+0x26>
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	0699      	lsls	r1, r3, #26
 8006eee:	bf42      	ittt	mi
 8006ef0:	6833      	ldrmi	r3, [r6, #0]
 8006ef2:	3302      	addmi	r3, #2
 8006ef4:	6033      	strmi	r3, [r6, #0]
 8006ef6:	6825      	ldr	r5, [r4, #0]
 8006ef8:	f015 0506 	ands.w	r5, r5, #6
 8006efc:	d106      	bne.n	8006f0c <_printf_common+0x48>
 8006efe:	f104 0a19 	add.w	sl, r4, #25
 8006f02:	68e3      	ldr	r3, [r4, #12]
 8006f04:	6832      	ldr	r2, [r6, #0]
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	42ab      	cmp	r3, r5
 8006f0a:	dc26      	bgt.n	8006f5a <_printf_common+0x96>
 8006f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f10:	1e13      	subs	r3, r2, #0
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	bf18      	it	ne
 8006f16:	2301      	movne	r3, #1
 8006f18:	0692      	lsls	r2, r2, #26
 8006f1a:	d42b      	bmi.n	8006f74 <_printf_common+0xb0>
 8006f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f20:	4649      	mov	r1, r9
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	3001      	adds	r0, #1
 8006f28:	d01e      	beq.n	8006f68 <_printf_common+0xa4>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	68e5      	ldr	r5, [r4, #12]
 8006f2e:	6832      	ldr	r2, [r6, #0]
 8006f30:	f003 0306 	and.w	r3, r3, #6
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	bf08      	it	eq
 8006f38:	1aad      	subeq	r5, r5, r2
 8006f3a:	68a3      	ldr	r3, [r4, #8]
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	bf0c      	ite	eq
 8006f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f44:	2500      	movne	r5, #0
 8006f46:	4293      	cmp	r3, r2
 8006f48:	bfc4      	itt	gt
 8006f4a:	1a9b      	subgt	r3, r3, r2
 8006f4c:	18ed      	addgt	r5, r5, r3
 8006f4e:	2600      	movs	r6, #0
 8006f50:	341a      	adds	r4, #26
 8006f52:	42b5      	cmp	r5, r6
 8006f54:	d11a      	bne.n	8006f8c <_printf_common+0xc8>
 8006f56:	2000      	movs	r0, #0
 8006f58:	e008      	b.n	8006f6c <_printf_common+0xa8>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	4649      	mov	r1, r9
 8006f60:	4638      	mov	r0, r7
 8006f62:	47c0      	blx	r8
 8006f64:	3001      	adds	r0, #1
 8006f66:	d103      	bne.n	8006f70 <_printf_common+0xac>
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f70:	3501      	adds	r5, #1
 8006f72:	e7c6      	b.n	8006f02 <_printf_common+0x3e>
 8006f74:	18e1      	adds	r1, r4, r3
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	2030      	movs	r0, #48	; 0x30
 8006f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f7e:	4422      	add	r2, r4
 8006f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f88:	3302      	adds	r3, #2
 8006f8a:	e7c7      	b.n	8006f1c <_printf_common+0x58>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4649      	mov	r1, r9
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	3001      	adds	r0, #1
 8006f98:	d0e6      	beq.n	8006f68 <_printf_common+0xa4>
 8006f9a:	3601      	adds	r6, #1
 8006f9c:	e7d9      	b.n	8006f52 <_printf_common+0x8e>
	...

08006fa0 <_printf_i>:
 8006fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	7e0f      	ldrb	r7, [r1, #24]
 8006fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fa8:	2f78      	cmp	r7, #120	; 0x78
 8006faa:	4691      	mov	r9, r2
 8006fac:	4680      	mov	r8, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	469a      	mov	sl, r3
 8006fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fb6:	d807      	bhi.n	8006fc8 <_printf_i+0x28>
 8006fb8:	2f62      	cmp	r7, #98	; 0x62
 8006fba:	d80a      	bhi.n	8006fd2 <_printf_i+0x32>
 8006fbc:	2f00      	cmp	r7, #0
 8006fbe:	f000 80d8 	beq.w	8007172 <_printf_i+0x1d2>
 8006fc2:	2f58      	cmp	r7, #88	; 0x58
 8006fc4:	f000 80a3 	beq.w	800710e <_printf_i+0x16e>
 8006fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd0:	e03a      	b.n	8007048 <_printf_i+0xa8>
 8006fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fd6:	2b15      	cmp	r3, #21
 8006fd8:	d8f6      	bhi.n	8006fc8 <_printf_i+0x28>
 8006fda:	a101      	add	r1, pc, #4	; (adr r1, 8006fe0 <_printf_i+0x40>)
 8006fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	0800704d 	.word	0x0800704d
 8006fe8:	08006fc9 	.word	0x08006fc9
 8006fec:	08006fc9 	.word	0x08006fc9
 8006ff0:	08006fc9 	.word	0x08006fc9
 8006ff4:	08006fc9 	.word	0x08006fc9
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08006fc9 	.word	0x08006fc9
 8007000:	08006fc9 	.word	0x08006fc9
 8007004:	08006fc9 	.word	0x08006fc9
 8007008:	08006fc9 	.word	0x08006fc9
 800700c:	08007159 	.word	0x08007159
 8007010:	0800707d 	.word	0x0800707d
 8007014:	0800713b 	.word	0x0800713b
 8007018:	08006fc9 	.word	0x08006fc9
 800701c:	08006fc9 	.word	0x08006fc9
 8007020:	0800717b 	.word	0x0800717b
 8007024:	08006fc9 	.word	0x08006fc9
 8007028:	0800707d 	.word	0x0800707d
 800702c:	08006fc9 	.word	0x08006fc9
 8007030:	08006fc9 	.word	0x08006fc9
 8007034:	08007143 	.word	0x08007143
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	602a      	str	r2, [r5, #0]
 8007040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007048:	2301      	movs	r3, #1
 800704a:	e0a3      	b.n	8007194 <_printf_i+0x1f4>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	6829      	ldr	r1, [r5, #0]
 8007050:	0606      	lsls	r6, r0, #24
 8007052:	f101 0304 	add.w	r3, r1, #4
 8007056:	d50a      	bpl.n	800706e <_printf_i+0xce>
 8007058:	680e      	ldr	r6, [r1, #0]
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	2e00      	cmp	r6, #0
 800705e:	da03      	bge.n	8007068 <_printf_i+0xc8>
 8007060:	232d      	movs	r3, #45	; 0x2d
 8007062:	4276      	negs	r6, r6
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007068:	485e      	ldr	r0, [pc, #376]	; (80071e4 <_printf_i+0x244>)
 800706a:	230a      	movs	r3, #10
 800706c:	e019      	b.n	80070a2 <_printf_i+0x102>
 800706e:	680e      	ldr	r6, [r1, #0]
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007076:	bf18      	it	ne
 8007078:	b236      	sxthne	r6, r6
 800707a:	e7ef      	b.n	800705c <_printf_i+0xbc>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	6820      	ldr	r0, [r4, #0]
 8007080:	1d19      	adds	r1, r3, #4
 8007082:	6029      	str	r1, [r5, #0]
 8007084:	0601      	lsls	r1, r0, #24
 8007086:	d501      	bpl.n	800708c <_printf_i+0xec>
 8007088:	681e      	ldr	r6, [r3, #0]
 800708a:	e002      	b.n	8007092 <_printf_i+0xf2>
 800708c:	0646      	lsls	r6, r0, #25
 800708e:	d5fb      	bpl.n	8007088 <_printf_i+0xe8>
 8007090:	881e      	ldrh	r6, [r3, #0]
 8007092:	4854      	ldr	r0, [pc, #336]	; (80071e4 <_printf_i+0x244>)
 8007094:	2f6f      	cmp	r7, #111	; 0x6f
 8007096:	bf0c      	ite	eq
 8007098:	2308      	moveq	r3, #8
 800709a:	230a      	movne	r3, #10
 800709c:	2100      	movs	r1, #0
 800709e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070a2:	6865      	ldr	r5, [r4, #4]
 80070a4:	60a5      	str	r5, [r4, #8]
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	bfa2      	ittt	ge
 80070aa:	6821      	ldrge	r1, [r4, #0]
 80070ac:	f021 0104 	bicge.w	r1, r1, #4
 80070b0:	6021      	strge	r1, [r4, #0]
 80070b2:	b90e      	cbnz	r6, 80070b8 <_printf_i+0x118>
 80070b4:	2d00      	cmp	r5, #0
 80070b6:	d04d      	beq.n	8007154 <_printf_i+0x1b4>
 80070b8:	4615      	mov	r5, r2
 80070ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80070be:	fb03 6711 	mls	r7, r3, r1, r6
 80070c2:	5dc7      	ldrb	r7, [r0, r7]
 80070c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070c8:	4637      	mov	r7, r6
 80070ca:	42bb      	cmp	r3, r7
 80070cc:	460e      	mov	r6, r1
 80070ce:	d9f4      	bls.n	80070ba <_printf_i+0x11a>
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d10b      	bne.n	80070ec <_printf_i+0x14c>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	07de      	lsls	r6, r3, #31
 80070d8:	d508      	bpl.n	80070ec <_printf_i+0x14c>
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	6861      	ldr	r1, [r4, #4]
 80070de:	4299      	cmp	r1, r3
 80070e0:	bfde      	ittt	le
 80070e2:	2330      	movle	r3, #48	; 0x30
 80070e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070ec:	1b52      	subs	r2, r2, r5
 80070ee:	6122      	str	r2, [r4, #16]
 80070f0:	f8cd a000 	str.w	sl, [sp]
 80070f4:	464b      	mov	r3, r9
 80070f6:	aa03      	add	r2, sp, #12
 80070f8:	4621      	mov	r1, r4
 80070fa:	4640      	mov	r0, r8
 80070fc:	f7ff fee2 	bl	8006ec4 <_printf_common>
 8007100:	3001      	adds	r0, #1
 8007102:	d14c      	bne.n	800719e <_printf_i+0x1fe>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	b004      	add	sp, #16
 800710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710e:	4835      	ldr	r0, [pc, #212]	; (80071e4 <_printf_i+0x244>)
 8007110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007114:	6829      	ldr	r1, [r5, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f851 6b04 	ldr.w	r6, [r1], #4
 800711c:	6029      	str	r1, [r5, #0]
 800711e:	061d      	lsls	r5, r3, #24
 8007120:	d514      	bpl.n	800714c <_printf_i+0x1ac>
 8007122:	07df      	lsls	r7, r3, #31
 8007124:	bf44      	itt	mi
 8007126:	f043 0320 	orrmi.w	r3, r3, #32
 800712a:	6023      	strmi	r3, [r4, #0]
 800712c:	b91e      	cbnz	r6, 8007136 <_printf_i+0x196>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	f023 0320 	bic.w	r3, r3, #32
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	2310      	movs	r3, #16
 8007138:	e7b0      	b.n	800709c <_printf_i+0xfc>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	f043 0320 	orr.w	r3, r3, #32
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	2378      	movs	r3, #120	; 0x78
 8007144:	4828      	ldr	r0, [pc, #160]	; (80071e8 <_printf_i+0x248>)
 8007146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800714a:	e7e3      	b.n	8007114 <_printf_i+0x174>
 800714c:	0659      	lsls	r1, r3, #25
 800714e:	bf48      	it	mi
 8007150:	b2b6      	uxthmi	r6, r6
 8007152:	e7e6      	b.n	8007122 <_printf_i+0x182>
 8007154:	4615      	mov	r5, r2
 8007156:	e7bb      	b.n	80070d0 <_printf_i+0x130>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	6826      	ldr	r6, [r4, #0]
 800715c:	6961      	ldr	r1, [r4, #20]
 800715e:	1d18      	adds	r0, r3, #4
 8007160:	6028      	str	r0, [r5, #0]
 8007162:	0635      	lsls	r5, r6, #24
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	d501      	bpl.n	800716c <_printf_i+0x1cc>
 8007168:	6019      	str	r1, [r3, #0]
 800716a:	e002      	b.n	8007172 <_printf_i+0x1d2>
 800716c:	0670      	lsls	r0, r6, #25
 800716e:	d5fb      	bpl.n	8007168 <_printf_i+0x1c8>
 8007170:	8019      	strh	r1, [r3, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	4615      	mov	r5, r2
 8007178:	e7ba      	b.n	80070f0 <_printf_i+0x150>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	1d1a      	adds	r2, r3, #4
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	2100      	movs	r1, #0
 8007186:	4628      	mov	r0, r5
 8007188:	f7f9 f84a 	bl	8000220 <memchr>
 800718c:	b108      	cbz	r0, 8007192 <_printf_i+0x1f2>
 800718e:	1b40      	subs	r0, r0, r5
 8007190:	6060      	str	r0, [r4, #4]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	2300      	movs	r3, #0
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	e7a8      	b.n	80070f0 <_printf_i+0x150>
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4649      	mov	r1, r9
 80071a4:	4640      	mov	r0, r8
 80071a6:	47d0      	blx	sl
 80071a8:	3001      	adds	r0, #1
 80071aa:	d0ab      	beq.n	8007104 <_printf_i+0x164>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	079b      	lsls	r3, r3, #30
 80071b0:	d413      	bmi.n	80071da <_printf_i+0x23a>
 80071b2:	68e0      	ldr	r0, [r4, #12]
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	4298      	cmp	r0, r3
 80071b8:	bfb8      	it	lt
 80071ba:	4618      	movlt	r0, r3
 80071bc:	e7a4      	b.n	8007108 <_printf_i+0x168>
 80071be:	2301      	movs	r3, #1
 80071c0:	4632      	mov	r2, r6
 80071c2:	4649      	mov	r1, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	47d0      	blx	sl
 80071c8:	3001      	adds	r0, #1
 80071ca:	d09b      	beq.n	8007104 <_printf_i+0x164>
 80071cc:	3501      	adds	r5, #1
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	9903      	ldr	r1, [sp, #12]
 80071d2:	1a5b      	subs	r3, r3, r1
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dcf2      	bgt.n	80071be <_printf_i+0x21e>
 80071d8:	e7eb      	b.n	80071b2 <_printf_i+0x212>
 80071da:	2500      	movs	r5, #0
 80071dc:	f104 0619 	add.w	r6, r4, #25
 80071e0:	e7f5      	b.n	80071ce <_printf_i+0x22e>
 80071e2:	bf00      	nop
 80071e4:	0800bae4 	.word	0x0800bae4
 80071e8:	0800baf5 	.word	0x0800baf5

080071ec <_scanf_float>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	b087      	sub	sp, #28
 80071f2:	4617      	mov	r7, r2
 80071f4:	9303      	str	r3, [sp, #12]
 80071f6:	688b      	ldr	r3, [r1, #8]
 80071f8:	1e5a      	subs	r2, r3, #1
 80071fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80071fe:	bf83      	ittte	hi
 8007200:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007204:	195b      	addhi	r3, r3, r5
 8007206:	9302      	strhi	r3, [sp, #8]
 8007208:	2300      	movls	r3, #0
 800720a:	bf86      	itte	hi
 800720c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007210:	608b      	strhi	r3, [r1, #8]
 8007212:	9302      	strls	r3, [sp, #8]
 8007214:	680b      	ldr	r3, [r1, #0]
 8007216:	468b      	mov	fp, r1
 8007218:	2500      	movs	r5, #0
 800721a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800721e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007222:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007226:	4680      	mov	r8, r0
 8007228:	460c      	mov	r4, r1
 800722a:	465e      	mov	r6, fp
 800722c:	46aa      	mov	sl, r5
 800722e:	46a9      	mov	r9, r5
 8007230:	9501      	str	r5, [sp, #4]
 8007232:	68a2      	ldr	r2, [r4, #8]
 8007234:	b152      	cbz	r2, 800724c <_scanf_float+0x60>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b4e      	cmp	r3, #78	; 0x4e
 800723c:	d864      	bhi.n	8007308 <_scanf_float+0x11c>
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d83c      	bhi.n	80072bc <_scanf_float+0xd0>
 8007242:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007246:	b2c8      	uxtb	r0, r1
 8007248:	280e      	cmp	r0, #14
 800724a:	d93a      	bls.n	80072c2 <_scanf_float+0xd6>
 800724c:	f1b9 0f00 	cmp.w	r9, #0
 8007250:	d003      	beq.n	800725a <_scanf_float+0x6e>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800725e:	f1ba 0f01 	cmp.w	sl, #1
 8007262:	f200 8113 	bhi.w	800748c <_scanf_float+0x2a0>
 8007266:	455e      	cmp	r6, fp
 8007268:	f200 8105 	bhi.w	8007476 <_scanf_float+0x28a>
 800726c:	2501      	movs	r5, #1
 800726e:	4628      	mov	r0, r5
 8007270:	b007      	add	sp, #28
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800727a:	2a0d      	cmp	r2, #13
 800727c:	d8e6      	bhi.n	800724c <_scanf_float+0x60>
 800727e:	a101      	add	r1, pc, #4	; (adr r1, 8007284 <_scanf_float+0x98>)
 8007280:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007284:	080073c3 	.word	0x080073c3
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	0800724d 	.word	0x0800724d
 8007294:	08007423 	.word	0x08007423
 8007298:	080073fb 	.word	0x080073fb
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073d1 	.word	0x080073d1
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	0800724d 	.word	0x0800724d
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	08007389 	.word	0x08007389
 80072bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80072c0:	e7db      	b.n	800727a <_scanf_float+0x8e>
 80072c2:	290e      	cmp	r1, #14
 80072c4:	d8c2      	bhi.n	800724c <_scanf_float+0x60>
 80072c6:	a001      	add	r0, pc, #4	; (adr r0, 80072cc <_scanf_float+0xe0>)
 80072c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072cc:	0800737b 	.word	0x0800737b
 80072d0:	0800724d 	.word	0x0800724d
 80072d4:	0800737b 	.word	0x0800737b
 80072d8:	0800740f 	.word	0x0800740f
 80072dc:	0800724d 	.word	0x0800724d
 80072e0:	08007329 	.word	0x08007329
 80072e4:	08007365 	.word	0x08007365
 80072e8:	08007365 	.word	0x08007365
 80072ec:	08007365 	.word	0x08007365
 80072f0:	08007365 	.word	0x08007365
 80072f4:	08007365 	.word	0x08007365
 80072f8:	08007365 	.word	0x08007365
 80072fc:	08007365 	.word	0x08007365
 8007300:	08007365 	.word	0x08007365
 8007304:	08007365 	.word	0x08007365
 8007308:	2b6e      	cmp	r3, #110	; 0x6e
 800730a:	d809      	bhi.n	8007320 <_scanf_float+0x134>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d8b2      	bhi.n	8007276 <_scanf_float+0x8a>
 8007310:	2b54      	cmp	r3, #84	; 0x54
 8007312:	d077      	beq.n	8007404 <_scanf_float+0x218>
 8007314:	2b59      	cmp	r3, #89	; 0x59
 8007316:	d199      	bne.n	800724c <_scanf_float+0x60>
 8007318:	2d07      	cmp	r5, #7
 800731a:	d197      	bne.n	800724c <_scanf_float+0x60>
 800731c:	2508      	movs	r5, #8
 800731e:	e029      	b.n	8007374 <_scanf_float+0x188>
 8007320:	2b74      	cmp	r3, #116	; 0x74
 8007322:	d06f      	beq.n	8007404 <_scanf_float+0x218>
 8007324:	2b79      	cmp	r3, #121	; 0x79
 8007326:	e7f6      	b.n	8007316 <_scanf_float+0x12a>
 8007328:	6821      	ldr	r1, [r4, #0]
 800732a:	05c8      	lsls	r0, r1, #23
 800732c:	d51a      	bpl.n	8007364 <_scanf_float+0x178>
 800732e:	9b02      	ldr	r3, [sp, #8]
 8007330:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	f109 0901 	add.w	r9, r9, #1
 800733a:	b11b      	cbz	r3, 8007344 <_scanf_float+0x158>
 800733c:	3b01      	subs	r3, #1
 800733e:	3201      	adds	r2, #1
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	60a2      	str	r2, [r4, #8]
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	3b01      	subs	r3, #1
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	3301      	adds	r3, #1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3b01      	subs	r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	f340 8084 	ble.w	8007464 <_scanf_float+0x278>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	e766      	b.n	8007232 <_scanf_float+0x46>
 8007364:	eb1a 0f05 	cmn.w	sl, r5
 8007368:	f47f af70 	bne.w	800724c <_scanf_float+0x60>
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	f806 3b01 	strb.w	r3, [r6], #1
 8007378:	e7e4      	b.n	8007344 <_scanf_float+0x158>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	0610      	lsls	r0, r2, #24
 800737e:	f57f af65 	bpl.w	800724c <_scanf_float+0x60>
 8007382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007386:	e7f4      	b.n	8007372 <_scanf_float+0x186>
 8007388:	f1ba 0f00 	cmp.w	sl, #0
 800738c:	d10e      	bne.n	80073ac <_scanf_float+0x1c0>
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	d10e      	bne.n	80073b2 <_scanf_float+0x1c6>
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800739a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800739e:	d108      	bne.n	80073b2 <_scanf_float+0x1c6>
 80073a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073a4:	6022      	str	r2, [r4, #0]
 80073a6:	f04f 0a01 	mov.w	sl, #1
 80073aa:	e7e3      	b.n	8007374 <_scanf_float+0x188>
 80073ac:	f1ba 0f02 	cmp.w	sl, #2
 80073b0:	d055      	beq.n	800745e <_scanf_float+0x272>
 80073b2:	2d01      	cmp	r5, #1
 80073b4:	d002      	beq.n	80073bc <_scanf_float+0x1d0>
 80073b6:	2d04      	cmp	r5, #4
 80073b8:	f47f af48 	bne.w	800724c <_scanf_float+0x60>
 80073bc:	3501      	adds	r5, #1
 80073be:	b2ed      	uxtb	r5, r5
 80073c0:	e7d8      	b.n	8007374 <_scanf_float+0x188>
 80073c2:	f1ba 0f01 	cmp.w	sl, #1
 80073c6:	f47f af41 	bne.w	800724c <_scanf_float+0x60>
 80073ca:	f04f 0a02 	mov.w	sl, #2
 80073ce:	e7d1      	b.n	8007374 <_scanf_float+0x188>
 80073d0:	b97d      	cbnz	r5, 80073f2 <_scanf_float+0x206>
 80073d2:	f1b9 0f00 	cmp.w	r9, #0
 80073d6:	f47f af3c 	bne.w	8007252 <_scanf_float+0x66>
 80073da:	6822      	ldr	r2, [r4, #0]
 80073dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80073e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80073e4:	f47f af39 	bne.w	800725a <_scanf_float+0x6e>
 80073e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073ec:	6022      	str	r2, [r4, #0]
 80073ee:	2501      	movs	r5, #1
 80073f0:	e7c0      	b.n	8007374 <_scanf_float+0x188>
 80073f2:	2d03      	cmp	r5, #3
 80073f4:	d0e2      	beq.n	80073bc <_scanf_float+0x1d0>
 80073f6:	2d05      	cmp	r5, #5
 80073f8:	e7de      	b.n	80073b8 <_scanf_float+0x1cc>
 80073fa:	2d02      	cmp	r5, #2
 80073fc:	f47f af26 	bne.w	800724c <_scanf_float+0x60>
 8007400:	2503      	movs	r5, #3
 8007402:	e7b7      	b.n	8007374 <_scanf_float+0x188>
 8007404:	2d06      	cmp	r5, #6
 8007406:	f47f af21 	bne.w	800724c <_scanf_float+0x60>
 800740a:	2507      	movs	r5, #7
 800740c:	e7b2      	b.n	8007374 <_scanf_float+0x188>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	0591      	lsls	r1, r2, #22
 8007412:	f57f af1b 	bpl.w	800724c <_scanf_float+0x60>
 8007416:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007420:	e7a8      	b.n	8007374 <_scanf_float+0x188>
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007428:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800742c:	d006      	beq.n	800743c <_scanf_float+0x250>
 800742e:	0550      	lsls	r0, r2, #21
 8007430:	f57f af0c 	bpl.w	800724c <_scanf_float+0x60>
 8007434:	f1b9 0f00 	cmp.w	r9, #0
 8007438:	f43f af0f 	beq.w	800725a <_scanf_float+0x6e>
 800743c:	0591      	lsls	r1, r2, #22
 800743e:	bf58      	it	pl
 8007440:	9901      	ldrpl	r1, [sp, #4]
 8007442:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007446:	bf58      	it	pl
 8007448:	eba9 0101 	subpl.w	r1, r9, r1
 800744c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007450:	bf58      	it	pl
 8007452:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	f04f 0900 	mov.w	r9, #0
 800745c:	e78a      	b.n	8007374 <_scanf_float+0x188>
 800745e:	f04f 0a03 	mov.w	sl, #3
 8007462:	e787      	b.n	8007374 <_scanf_float+0x188>
 8007464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007468:	4639      	mov	r1, r7
 800746a:	4640      	mov	r0, r8
 800746c:	4798      	blx	r3
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f aedf 	beq.w	8007232 <_scanf_float+0x46>
 8007474:	e6ea      	b.n	800724c <_scanf_float+0x60>
 8007476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800747a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800747e:	463a      	mov	r2, r7
 8007480:	4640      	mov	r0, r8
 8007482:	4798      	blx	r3
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	3b01      	subs	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	e6ec      	b.n	8007266 <_scanf_float+0x7a>
 800748c:	1e6b      	subs	r3, r5, #1
 800748e:	2b06      	cmp	r3, #6
 8007490:	d825      	bhi.n	80074de <_scanf_float+0x2f2>
 8007492:	2d02      	cmp	r5, #2
 8007494:	d836      	bhi.n	8007504 <_scanf_float+0x318>
 8007496:	455e      	cmp	r6, fp
 8007498:	f67f aee8 	bls.w	800726c <_scanf_float+0x80>
 800749c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074a4:	463a      	mov	r2, r7
 80074a6:	4640      	mov	r0, r8
 80074a8:	4798      	blx	r3
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	e7f1      	b.n	8007496 <_scanf_float+0x2aa>
 80074b2:	9802      	ldr	r0, [sp, #8]
 80074b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80074bc:	9002      	str	r0, [sp, #8]
 80074be:	463a      	mov	r2, r7
 80074c0:	4640      	mov	r0, r8
 80074c2:	4798      	blx	r3
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074ce:	fa5f fa8a 	uxtb.w	sl, sl
 80074d2:	f1ba 0f02 	cmp.w	sl, #2
 80074d6:	d1ec      	bne.n	80074b2 <_scanf_float+0x2c6>
 80074d8:	3d03      	subs	r5, #3
 80074da:	b2ed      	uxtb	r5, r5
 80074dc:	1b76      	subs	r6, r6, r5
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	05da      	lsls	r2, r3, #23
 80074e2:	d52f      	bpl.n	8007544 <_scanf_float+0x358>
 80074e4:	055b      	lsls	r3, r3, #21
 80074e6:	d510      	bpl.n	800750a <_scanf_float+0x31e>
 80074e8:	455e      	cmp	r6, fp
 80074ea:	f67f aebf 	bls.w	800726c <_scanf_float+0x80>
 80074ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074f6:	463a      	mov	r2, r7
 80074f8:	4640      	mov	r0, r8
 80074fa:	4798      	blx	r3
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	3b01      	subs	r3, #1
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	e7f1      	b.n	80074e8 <_scanf_float+0x2fc>
 8007504:	46aa      	mov	sl, r5
 8007506:	9602      	str	r6, [sp, #8]
 8007508:	e7df      	b.n	80074ca <_scanf_float+0x2de>
 800750a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	2965      	cmp	r1, #101	; 0x65
 8007512:	f103 33ff 	add.w	r3, r3, #4294967295
 8007516:	f106 35ff 	add.w	r5, r6, #4294967295
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	d00c      	beq.n	8007538 <_scanf_float+0x34c>
 800751e:	2945      	cmp	r1, #69	; 0x45
 8007520:	d00a      	beq.n	8007538 <_scanf_float+0x34c>
 8007522:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007526:	463a      	mov	r2, r7
 8007528:	4640      	mov	r0, r8
 800752a:	4798      	blx	r3
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007532:	3b01      	subs	r3, #1
 8007534:	1eb5      	subs	r5, r6, #2
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800753c:	463a      	mov	r2, r7
 800753e:	4640      	mov	r0, r8
 8007540:	4798      	blx	r3
 8007542:	462e      	mov	r6, r5
 8007544:	6825      	ldr	r5, [r4, #0]
 8007546:	f015 0510 	ands.w	r5, r5, #16
 800754a:	d159      	bne.n	8007600 <_scanf_float+0x414>
 800754c:	7035      	strb	r5, [r6, #0]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007558:	d11b      	bne.n	8007592 <_scanf_float+0x3a6>
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	454b      	cmp	r3, r9
 800755e:	eba3 0209 	sub.w	r2, r3, r9
 8007562:	d123      	bne.n	80075ac <_scanf_float+0x3c0>
 8007564:	2200      	movs	r2, #0
 8007566:	4659      	mov	r1, fp
 8007568:	4640      	mov	r0, r8
 800756a:	f000 ff1f 	bl	80083ac <_strtod_r>
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	f012 0f02 	tst.w	r2, #2
 8007576:	ec57 6b10 	vmov	r6, r7, d0
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	d021      	beq.n	80075c2 <_scanf_float+0x3d6>
 800757e:	9903      	ldr	r1, [sp, #12]
 8007580:	1d1a      	adds	r2, r3, #4
 8007582:	600a      	str	r2, [r1, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	e9c3 6700 	strd	r6, r7, [r3]
 800758a:	68e3      	ldr	r3, [r4, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60e3      	str	r3, [r4, #12]
 8007590:	e66d      	b.n	800726e <_scanf_float+0x82>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0e5      	beq.n	8007564 <_scanf_float+0x378>
 8007598:	9905      	ldr	r1, [sp, #20]
 800759a:	230a      	movs	r3, #10
 800759c:	462a      	mov	r2, r5
 800759e:	3101      	adds	r1, #1
 80075a0:	4640      	mov	r0, r8
 80075a2:	f000 ff8b 	bl	80084bc <_strtol_r>
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	9e05      	ldr	r6, [sp, #20]
 80075aa:	1ac2      	subs	r2, r0, r3
 80075ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80075b0:	429e      	cmp	r6, r3
 80075b2:	bf28      	it	cs
 80075b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80075b8:	4912      	ldr	r1, [pc, #72]	; (8007604 <_scanf_float+0x418>)
 80075ba:	4630      	mov	r0, r6
 80075bc:	f000 f82c 	bl	8007618 <siprintf>
 80075c0:	e7d0      	b.n	8007564 <_scanf_float+0x378>
 80075c2:	9903      	ldr	r1, [sp, #12]
 80075c4:	f012 0f04 	tst.w	r2, #4
 80075c8:	f103 0204 	add.w	r2, r3, #4
 80075cc:	600a      	str	r2, [r1, #0]
 80075ce:	d1d9      	bne.n	8007584 <_scanf_float+0x398>
 80075d0:	f8d3 8000 	ldr.w	r8, [r3]
 80075d4:	ee10 2a10 	vmov	r2, s0
 80075d8:	ee10 0a10 	vmov	r0, s0
 80075dc:	463b      	mov	r3, r7
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 fac4 	bl	8000b6c <__aeabi_dcmpun>
 80075e4:	b128      	cbz	r0, 80075f2 <_scanf_float+0x406>
 80075e6:	4808      	ldr	r0, [pc, #32]	; (8007608 <_scanf_float+0x41c>)
 80075e8:	f000 f810 	bl	800760c <nanf>
 80075ec:	ed88 0a00 	vstr	s0, [r8]
 80075f0:	e7cb      	b.n	800758a <_scanf_float+0x39e>
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f9 fb17 	bl	8000c28 <__aeabi_d2f>
 80075fa:	f8c8 0000 	str.w	r0, [r8]
 80075fe:	e7c4      	b.n	800758a <_scanf_float+0x39e>
 8007600:	2500      	movs	r5, #0
 8007602:	e634      	b.n	800726e <_scanf_float+0x82>
 8007604:	0800bb06 	.word	0x0800bb06
 8007608:	0800bf2b 	.word	0x0800bf2b

0800760c <nanf>:
 800760c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007614 <nanf+0x8>
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	7fc00000 	.word	0x7fc00000

08007618 <siprintf>:
 8007618:	b40e      	push	{r1, r2, r3}
 800761a:	b500      	push	{lr}
 800761c:	b09c      	sub	sp, #112	; 0x70
 800761e:	ab1d      	add	r3, sp, #116	; 0x74
 8007620:	9002      	str	r0, [sp, #8]
 8007622:	9006      	str	r0, [sp, #24]
 8007624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007628:	4809      	ldr	r0, [pc, #36]	; (8007650 <siprintf+0x38>)
 800762a:	9107      	str	r1, [sp, #28]
 800762c:	9104      	str	r1, [sp, #16]
 800762e:	4909      	ldr	r1, [pc, #36]	; (8007654 <siprintf+0x3c>)
 8007630:	f853 2b04 	ldr.w	r2, [r3], #4
 8007634:	9105      	str	r1, [sp, #20]
 8007636:	6800      	ldr	r0, [r0, #0]
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	a902      	add	r1, sp, #8
 800763c:	f002 ffa0 	bl	800a580 <_svfiprintf_r>
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	b01c      	add	sp, #112	; 0x70
 8007648:	f85d eb04 	ldr.w	lr, [sp], #4
 800764c:	b003      	add	sp, #12
 800764e:	4770      	bx	lr
 8007650:	20000028 	.word	0x20000028
 8007654:	ffff0208 	.word	0xffff0208

08007658 <siscanf>:
 8007658:	b40e      	push	{r1, r2, r3}
 800765a:	b510      	push	{r4, lr}
 800765c:	b09f      	sub	sp, #124	; 0x7c
 800765e:	ac21      	add	r4, sp, #132	; 0x84
 8007660:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007664:	f854 2b04 	ldr.w	r2, [r4], #4
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800766e:	9004      	str	r0, [sp, #16]
 8007670:	9008      	str	r0, [sp, #32]
 8007672:	f7f8 fdcd 	bl	8000210 <strlen>
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <siscanf+0x50>)
 8007678:	9005      	str	r0, [sp, #20]
 800767a:	9009      	str	r0, [sp, #36]	; 0x24
 800767c:	930d      	str	r3, [sp, #52]	; 0x34
 800767e:	480b      	ldr	r0, [pc, #44]	; (80076ac <siscanf+0x54>)
 8007680:	9a01      	ldr	r2, [sp, #4]
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	9403      	str	r4, [sp, #12]
 8007686:	2300      	movs	r3, #0
 8007688:	9311      	str	r3, [sp, #68]	; 0x44
 800768a:	9316      	str	r3, [sp, #88]	; 0x58
 800768c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007690:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007694:	a904      	add	r1, sp, #16
 8007696:	4623      	mov	r3, r4
 8007698:	f003 f8cc 	bl	800a834 <__ssvfiscanf_r>
 800769c:	b01f      	add	sp, #124	; 0x7c
 800769e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a2:	b003      	add	sp, #12
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	20000028 	.word	0x20000028

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f003 fb86 	bl	800adc8 <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__seofread>:
 80076d2:	2000      	movs	r0, #0
 80076d4:	4770      	bx	lr

080076d6 <__swrite>:
 80076d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	461f      	mov	r7, r3
 80076dc:	898b      	ldrh	r3, [r1, #12]
 80076de:	05db      	lsls	r3, r3, #23
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	4616      	mov	r6, r2
 80076e6:	d505      	bpl.n	80076f4 <__swrite+0x1e>
 80076e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ec:	2302      	movs	r3, #2
 80076ee:	2200      	movs	r2, #0
 80076f0:	f002 f8f8 	bl	80098e4 <_lseek_r>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	4632      	mov	r2, r6
 8007702:	463b      	mov	r3, r7
 8007704:	4628      	mov	r0, r5
 8007706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	f000 bed9 	b.w	80084c0 <_write_r>

0800770e <__sseek>:
 800770e:	b510      	push	{r4, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007716:	f002 f8e5 	bl	80098e4 <_lseek_r>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	bf15      	itete	ne
 8007720:	6560      	strne	r0, [r4, #84]	; 0x54
 8007722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800772a:	81a3      	strheq	r3, [r4, #12]
 800772c:	bf18      	it	ne
 800772e:	81a3      	strhne	r3, [r4, #12]
 8007730:	bd10      	pop	{r4, pc}

08007732 <__sclose>:
 8007732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007736:	f000 bed5 	b.w	80084e4 <_close_r>

0800773a <strncmp>:
 800773a:	b510      	push	{r4, lr}
 800773c:	b17a      	cbz	r2, 800775e <strncmp+0x24>
 800773e:	4603      	mov	r3, r0
 8007740:	3901      	subs	r1, #1
 8007742:	1884      	adds	r4, r0, r2
 8007744:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007748:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800774c:	4290      	cmp	r0, r2
 800774e:	d101      	bne.n	8007754 <strncmp+0x1a>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d101      	bne.n	8007758 <strncmp+0x1e>
 8007754:	1a80      	subs	r0, r0, r2
 8007756:	bd10      	pop	{r4, pc}
 8007758:	2800      	cmp	r0, #0
 800775a:	d1f3      	bne.n	8007744 <strncmp+0xa>
 800775c:	e7fa      	b.n	8007754 <strncmp+0x1a>
 800775e:	4610      	mov	r0, r2
 8007760:	e7f9      	b.n	8007756 <strncmp+0x1c>

08007762 <sulp>:
 8007762:	b570      	push	{r4, r5, r6, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	460d      	mov	r5, r1
 8007768:	ec45 4b10 	vmov	d0, r4, r5
 800776c:	4616      	mov	r6, r2
 800776e:	f002 fc65 	bl	800a03c <__ulp>
 8007772:	ec51 0b10 	vmov	r0, r1, d0
 8007776:	b17e      	cbz	r6, 8007798 <sulp+0x36>
 8007778:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800777c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007780:	2b00      	cmp	r3, #0
 8007782:	dd09      	ble.n	8007798 <sulp+0x36>
 8007784:	051b      	lsls	r3, r3, #20
 8007786:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800778a:	2400      	movs	r4, #0
 800778c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007790:	4622      	mov	r2, r4
 8007792:	462b      	mov	r3, r5
 8007794:	f7f8 ff50 	bl	8000638 <__aeabi_dmul>
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	0000      	movs	r0, r0
 800779c:	0000      	movs	r0, r0
	...

080077a0 <_strtod_l>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ed2d 8b02 	vpush	{d8}
 80077a8:	b09d      	sub	sp, #116	; 0x74
 80077aa:	461f      	mov	r7, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	9318      	str	r3, [sp, #96]	; 0x60
 80077b0:	4ba2      	ldr	r3, [pc, #648]	; (8007a3c <_strtod_l+0x29c>)
 80077b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	4604      	mov	r4, r0
 80077ba:	4618      	mov	r0, r3
 80077bc:	4688      	mov	r8, r1
 80077be:	f7f8 fd27 	bl	8000210 <strlen>
 80077c2:	f04f 0a00 	mov.w	sl, #0
 80077c6:	4605      	mov	r5, r0
 80077c8:	f04f 0b00 	mov.w	fp, #0
 80077cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80077d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	2a2b      	cmp	r2, #43	; 0x2b
 80077d6:	d04e      	beq.n	8007876 <_strtod_l+0xd6>
 80077d8:	d83b      	bhi.n	8007852 <_strtod_l+0xb2>
 80077da:	2a0d      	cmp	r2, #13
 80077dc:	d834      	bhi.n	8007848 <_strtod_l+0xa8>
 80077de:	2a08      	cmp	r2, #8
 80077e0:	d834      	bhi.n	800784c <_strtod_l+0xac>
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d03e      	beq.n	8007864 <_strtod_l+0xc4>
 80077e6:	2300      	movs	r3, #0
 80077e8:	930a      	str	r3, [sp, #40]	; 0x28
 80077ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80077ec:	7833      	ldrb	r3, [r6, #0]
 80077ee:	2b30      	cmp	r3, #48	; 0x30
 80077f0:	f040 80b0 	bne.w	8007954 <_strtod_l+0x1b4>
 80077f4:	7873      	ldrb	r3, [r6, #1]
 80077f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077fa:	2b58      	cmp	r3, #88	; 0x58
 80077fc:	d168      	bne.n	80078d0 <_strtod_l+0x130>
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	ab18      	add	r3, sp, #96	; 0x60
 8007804:	9702      	str	r7, [sp, #8]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4a8d      	ldr	r2, [pc, #564]	; (8007a40 <_strtod_l+0x2a0>)
 800780a:	ab19      	add	r3, sp, #100	; 0x64
 800780c:	a917      	add	r1, sp, #92	; 0x5c
 800780e:	4620      	mov	r0, r4
 8007810:	f001 fd5c 	bl	80092cc <__gethex>
 8007814:	f010 0707 	ands.w	r7, r0, #7
 8007818:	4605      	mov	r5, r0
 800781a:	d005      	beq.n	8007828 <_strtod_l+0x88>
 800781c:	2f06      	cmp	r7, #6
 800781e:	d12c      	bne.n	800787a <_strtod_l+0xda>
 8007820:	3601      	adds	r6, #1
 8007822:	2300      	movs	r3, #0
 8007824:	9617      	str	r6, [sp, #92]	; 0x5c
 8007826:	930a      	str	r3, [sp, #40]	; 0x28
 8007828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800782a:	2b00      	cmp	r3, #0
 800782c:	f040 8590 	bne.w	8008350 <_strtod_l+0xbb0>
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	b1eb      	cbz	r3, 8007870 <_strtod_l+0xd0>
 8007834:	4652      	mov	r2, sl
 8007836:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800783a:	ec43 2b10 	vmov	d0, r2, r3
 800783e:	b01d      	add	sp, #116	; 0x74
 8007840:	ecbd 8b02 	vpop	{d8}
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007848:	2a20      	cmp	r2, #32
 800784a:	d1cc      	bne.n	80077e6 <_strtod_l+0x46>
 800784c:	3301      	adds	r3, #1
 800784e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007850:	e7be      	b.n	80077d0 <_strtod_l+0x30>
 8007852:	2a2d      	cmp	r2, #45	; 0x2d
 8007854:	d1c7      	bne.n	80077e6 <_strtod_l+0x46>
 8007856:	2201      	movs	r2, #1
 8007858:	920a      	str	r2, [sp, #40]	; 0x28
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	9217      	str	r2, [sp, #92]	; 0x5c
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1c2      	bne.n	80077ea <_strtod_l+0x4a>
 8007864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007866:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 856e 	bne.w	800834c <_strtod_l+0xbac>
 8007870:	4652      	mov	r2, sl
 8007872:	465b      	mov	r3, fp
 8007874:	e7e1      	b.n	800783a <_strtod_l+0x9a>
 8007876:	2200      	movs	r2, #0
 8007878:	e7ee      	b.n	8007858 <_strtod_l+0xb8>
 800787a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800787c:	b13a      	cbz	r2, 800788e <_strtod_l+0xee>
 800787e:	2135      	movs	r1, #53	; 0x35
 8007880:	a81a      	add	r0, sp, #104	; 0x68
 8007882:	f002 fce6 	bl	800a252 <__copybits>
 8007886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007888:	4620      	mov	r0, r4
 800788a:	f002 f8a5 	bl	80099d8 <_Bfree>
 800788e:	3f01      	subs	r7, #1
 8007890:	2f04      	cmp	r7, #4
 8007892:	d806      	bhi.n	80078a2 <_strtod_l+0x102>
 8007894:	e8df f007 	tbb	[pc, r7]
 8007898:	1714030a 	.word	0x1714030a
 800789c:	0a          	.byte	0x0a
 800789d:	00          	.byte	0x00
 800789e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80078a2:	0728      	lsls	r0, r5, #28
 80078a4:	d5c0      	bpl.n	8007828 <_strtod_l+0x88>
 80078a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80078aa:	e7bd      	b.n	8007828 <_strtod_l+0x88>
 80078ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80078b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078be:	e7f0      	b.n	80078a2 <_strtod_l+0x102>
 80078c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007a44 <_strtod_l+0x2a4>
 80078c4:	e7ed      	b.n	80078a2 <_strtod_l+0x102>
 80078c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078ca:	f04f 3aff 	mov.w	sl, #4294967295
 80078ce:	e7e8      	b.n	80078a2 <_strtod_l+0x102>
 80078d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b30      	cmp	r3, #48	; 0x30
 80078da:	d0f9      	beq.n	80078d0 <_strtod_l+0x130>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0a3      	beq.n	8007828 <_strtod_l+0x88>
 80078e0:	2301      	movs	r3, #1
 80078e2:	f04f 0900 	mov.w	r9, #0
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ea:	9308      	str	r3, [sp, #32]
 80078ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80078f0:	464f      	mov	r7, r9
 80078f2:	220a      	movs	r2, #10
 80078f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80078f6:	7806      	ldrb	r6, [r0, #0]
 80078f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078fc:	b2d9      	uxtb	r1, r3
 80078fe:	2909      	cmp	r1, #9
 8007900:	d92a      	bls.n	8007958 <_strtod_l+0x1b8>
 8007902:	9905      	ldr	r1, [sp, #20]
 8007904:	462a      	mov	r2, r5
 8007906:	f7ff ff18 	bl	800773a <strncmp>
 800790a:	b398      	cbz	r0, 8007974 <_strtod_l+0x1d4>
 800790c:	2000      	movs	r0, #0
 800790e:	4632      	mov	r2, r6
 8007910:	463d      	mov	r5, r7
 8007912:	9005      	str	r0, [sp, #20]
 8007914:	4603      	mov	r3, r0
 8007916:	2a65      	cmp	r2, #101	; 0x65
 8007918:	d001      	beq.n	800791e <_strtod_l+0x17e>
 800791a:	2a45      	cmp	r2, #69	; 0x45
 800791c:	d118      	bne.n	8007950 <_strtod_l+0x1b0>
 800791e:	b91d      	cbnz	r5, 8007928 <_strtod_l+0x188>
 8007920:	9a04      	ldr	r2, [sp, #16]
 8007922:	4302      	orrs	r2, r0
 8007924:	d09e      	beq.n	8007864 <_strtod_l+0xc4>
 8007926:	2500      	movs	r5, #0
 8007928:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800792c:	f108 0201 	add.w	r2, r8, #1
 8007930:	9217      	str	r2, [sp, #92]	; 0x5c
 8007932:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007936:	2a2b      	cmp	r2, #43	; 0x2b
 8007938:	d075      	beq.n	8007a26 <_strtod_l+0x286>
 800793a:	2a2d      	cmp	r2, #45	; 0x2d
 800793c:	d07b      	beq.n	8007a36 <_strtod_l+0x296>
 800793e:	f04f 0c00 	mov.w	ip, #0
 8007942:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007946:	2909      	cmp	r1, #9
 8007948:	f240 8082 	bls.w	8007a50 <_strtod_l+0x2b0>
 800794c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007950:	2600      	movs	r6, #0
 8007952:	e09d      	b.n	8007a90 <_strtod_l+0x2f0>
 8007954:	2300      	movs	r3, #0
 8007956:	e7c4      	b.n	80078e2 <_strtod_l+0x142>
 8007958:	2f08      	cmp	r7, #8
 800795a:	bfd8      	it	le
 800795c:	9907      	ldrle	r1, [sp, #28]
 800795e:	f100 0001 	add.w	r0, r0, #1
 8007962:	bfda      	itte	le
 8007964:	fb02 3301 	mlale	r3, r2, r1, r3
 8007968:	9307      	strle	r3, [sp, #28]
 800796a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800796e:	3701      	adds	r7, #1
 8007970:	9017      	str	r0, [sp, #92]	; 0x5c
 8007972:	e7bf      	b.n	80078f4 <_strtod_l+0x154>
 8007974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007976:	195a      	adds	r2, r3, r5
 8007978:	9217      	str	r2, [sp, #92]	; 0x5c
 800797a:	5d5a      	ldrb	r2, [r3, r5]
 800797c:	2f00      	cmp	r7, #0
 800797e:	d037      	beq.n	80079f0 <_strtod_l+0x250>
 8007980:	9005      	str	r0, [sp, #20]
 8007982:	463d      	mov	r5, r7
 8007984:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007988:	2b09      	cmp	r3, #9
 800798a:	d912      	bls.n	80079b2 <_strtod_l+0x212>
 800798c:	2301      	movs	r3, #1
 800798e:	e7c2      	b.n	8007916 <_strtod_l+0x176>
 8007990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	9217      	str	r2, [sp, #92]	; 0x5c
 8007996:	785a      	ldrb	r2, [r3, #1]
 8007998:	3001      	adds	r0, #1
 800799a:	2a30      	cmp	r2, #48	; 0x30
 800799c:	d0f8      	beq.n	8007990 <_strtod_l+0x1f0>
 800799e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	f200 84d9 	bhi.w	800835a <_strtod_l+0xbba>
 80079a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079aa:	9005      	str	r0, [sp, #20]
 80079ac:	2000      	movs	r0, #0
 80079ae:	9308      	str	r3, [sp, #32]
 80079b0:	4605      	mov	r5, r0
 80079b2:	3a30      	subs	r2, #48	; 0x30
 80079b4:	f100 0301 	add.w	r3, r0, #1
 80079b8:	d014      	beq.n	80079e4 <_strtod_l+0x244>
 80079ba:	9905      	ldr	r1, [sp, #20]
 80079bc:	4419      	add	r1, r3
 80079be:	9105      	str	r1, [sp, #20]
 80079c0:	462b      	mov	r3, r5
 80079c2:	eb00 0e05 	add.w	lr, r0, r5
 80079c6:	210a      	movs	r1, #10
 80079c8:	4573      	cmp	r3, lr
 80079ca:	d113      	bne.n	80079f4 <_strtod_l+0x254>
 80079cc:	182b      	adds	r3, r5, r0
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	f105 0501 	add.w	r5, r5, #1
 80079d4:	4405      	add	r5, r0
 80079d6:	dc1c      	bgt.n	8007a12 <_strtod_l+0x272>
 80079d8:	9907      	ldr	r1, [sp, #28]
 80079da:	230a      	movs	r3, #10
 80079dc:	fb03 2301 	mla	r3, r3, r1, r2
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079e6:	1c51      	adds	r1, r2, #1
 80079e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80079ea:	7852      	ldrb	r2, [r2, #1]
 80079ec:	4618      	mov	r0, r3
 80079ee:	e7c9      	b.n	8007984 <_strtod_l+0x1e4>
 80079f0:	4638      	mov	r0, r7
 80079f2:	e7d2      	b.n	800799a <_strtod_l+0x1fa>
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	dc04      	bgt.n	8007a02 <_strtod_l+0x262>
 80079f8:	9e07      	ldr	r6, [sp, #28]
 80079fa:	434e      	muls	r6, r1
 80079fc:	9607      	str	r6, [sp, #28]
 80079fe:	3301      	adds	r3, #1
 8007a00:	e7e2      	b.n	80079c8 <_strtod_l+0x228>
 8007a02:	f103 0c01 	add.w	ip, r3, #1
 8007a06:	f1bc 0f10 	cmp.w	ip, #16
 8007a0a:	bfd8      	it	le
 8007a0c:	fb01 f909 	mulle.w	r9, r1, r9
 8007a10:	e7f5      	b.n	80079fe <_strtod_l+0x25e>
 8007a12:	2d10      	cmp	r5, #16
 8007a14:	bfdc      	itt	le
 8007a16:	230a      	movle	r3, #10
 8007a18:	fb03 2909 	mlale	r9, r3, r9, r2
 8007a1c:	e7e1      	b.n	80079e2 <_strtod_l+0x242>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	2301      	movs	r3, #1
 8007a24:	e77c      	b.n	8007920 <_strtod_l+0x180>
 8007a26:	f04f 0c00 	mov.w	ip, #0
 8007a2a:	f108 0202 	add.w	r2, r8, #2
 8007a2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007a34:	e785      	b.n	8007942 <_strtod_l+0x1a2>
 8007a36:	f04f 0c01 	mov.w	ip, #1
 8007a3a:	e7f6      	b.n	8007a2a <_strtod_l+0x28a>
 8007a3c:	0800bd58 	.word	0x0800bd58
 8007a40:	0800bb0c 	.word	0x0800bb0c
 8007a44:	7ff00000 	.word	0x7ff00000
 8007a48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a4a:	1c51      	adds	r1, r2, #1
 8007a4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a4e:	7852      	ldrb	r2, [r2, #1]
 8007a50:	2a30      	cmp	r2, #48	; 0x30
 8007a52:	d0f9      	beq.n	8007a48 <_strtod_l+0x2a8>
 8007a54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a58:	2908      	cmp	r1, #8
 8007a5a:	f63f af79 	bhi.w	8007950 <_strtod_l+0x1b0>
 8007a5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007a62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a64:	9206      	str	r2, [sp, #24]
 8007a66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a68:	1c51      	adds	r1, r2, #1
 8007a6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a6c:	7852      	ldrb	r2, [r2, #1]
 8007a6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007a72:	2e09      	cmp	r6, #9
 8007a74:	d937      	bls.n	8007ae6 <_strtod_l+0x346>
 8007a76:	9e06      	ldr	r6, [sp, #24]
 8007a78:	1b89      	subs	r1, r1, r6
 8007a7a:	2908      	cmp	r1, #8
 8007a7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007a80:	dc02      	bgt.n	8007a88 <_strtod_l+0x2e8>
 8007a82:	4576      	cmp	r6, lr
 8007a84:	bfa8      	it	ge
 8007a86:	4676      	movge	r6, lr
 8007a88:	f1bc 0f00 	cmp.w	ip, #0
 8007a8c:	d000      	beq.n	8007a90 <_strtod_l+0x2f0>
 8007a8e:	4276      	negs	r6, r6
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d14d      	bne.n	8007b30 <_strtod_l+0x390>
 8007a94:	9904      	ldr	r1, [sp, #16]
 8007a96:	4301      	orrs	r1, r0
 8007a98:	f47f aec6 	bne.w	8007828 <_strtod_l+0x88>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f47f aee1 	bne.w	8007864 <_strtod_l+0xc4>
 8007aa2:	2a69      	cmp	r2, #105	; 0x69
 8007aa4:	d027      	beq.n	8007af6 <_strtod_l+0x356>
 8007aa6:	dc24      	bgt.n	8007af2 <_strtod_l+0x352>
 8007aa8:	2a49      	cmp	r2, #73	; 0x49
 8007aaa:	d024      	beq.n	8007af6 <_strtod_l+0x356>
 8007aac:	2a4e      	cmp	r2, #78	; 0x4e
 8007aae:	f47f aed9 	bne.w	8007864 <_strtod_l+0xc4>
 8007ab2:	499f      	ldr	r1, [pc, #636]	; (8007d30 <_strtod_l+0x590>)
 8007ab4:	a817      	add	r0, sp, #92	; 0x5c
 8007ab6:	f001 fe61 	bl	800977c <__match>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f aed2 	beq.w	8007864 <_strtod_l+0xc4>
 8007ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b28      	cmp	r3, #40	; 0x28
 8007ac6:	d12d      	bne.n	8007b24 <_strtod_l+0x384>
 8007ac8:	499a      	ldr	r1, [pc, #616]	; (8007d34 <_strtod_l+0x594>)
 8007aca:	aa1a      	add	r2, sp, #104	; 0x68
 8007acc:	a817      	add	r0, sp, #92	; 0x5c
 8007ace:	f001 fe69 	bl	80097a4 <__hexnan>
 8007ad2:	2805      	cmp	r0, #5
 8007ad4:	d126      	bne.n	8007b24 <_strtod_l+0x384>
 8007ad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ad8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007adc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ae0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ae4:	e6a0      	b.n	8007828 <_strtod_l+0x88>
 8007ae6:	210a      	movs	r1, #10
 8007ae8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007aec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007af0:	e7b9      	b.n	8007a66 <_strtod_l+0x2c6>
 8007af2:	2a6e      	cmp	r2, #110	; 0x6e
 8007af4:	e7db      	b.n	8007aae <_strtod_l+0x30e>
 8007af6:	4990      	ldr	r1, [pc, #576]	; (8007d38 <_strtod_l+0x598>)
 8007af8:	a817      	add	r0, sp, #92	; 0x5c
 8007afa:	f001 fe3f 	bl	800977c <__match>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f aeb0 	beq.w	8007864 <_strtod_l+0xc4>
 8007b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b06:	498d      	ldr	r1, [pc, #564]	; (8007d3c <_strtod_l+0x59c>)
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	a817      	add	r0, sp, #92	; 0x5c
 8007b0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b0e:	f001 fe35 	bl	800977c <__match>
 8007b12:	b910      	cbnz	r0, 8007b1a <_strtod_l+0x37a>
 8007b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b16:	3301      	adds	r3, #1
 8007b18:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007d4c <_strtod_l+0x5ac>
 8007b1e:	f04f 0a00 	mov.w	sl, #0
 8007b22:	e681      	b.n	8007828 <_strtod_l+0x88>
 8007b24:	4886      	ldr	r0, [pc, #536]	; (8007d40 <_strtod_l+0x5a0>)
 8007b26:	f003 f963 	bl	800adf0 <nan>
 8007b2a:	ec5b ab10 	vmov	sl, fp, d0
 8007b2e:	e67b      	b.n	8007828 <_strtod_l+0x88>
 8007b30:	9b05      	ldr	r3, [sp, #20]
 8007b32:	9807      	ldr	r0, [sp, #28]
 8007b34:	1af3      	subs	r3, r6, r3
 8007b36:	2f00      	cmp	r7, #0
 8007b38:	bf08      	it	eq
 8007b3a:	462f      	moveq	r7, r5
 8007b3c:	2d10      	cmp	r5, #16
 8007b3e:	9306      	str	r3, [sp, #24]
 8007b40:	46a8      	mov	r8, r5
 8007b42:	bfa8      	it	ge
 8007b44:	f04f 0810 	movge.w	r8, #16
 8007b48:	f7f8 fcfc 	bl	8000544 <__aeabi_ui2d>
 8007b4c:	2d09      	cmp	r5, #9
 8007b4e:	4682      	mov	sl, r0
 8007b50:	468b      	mov	fp, r1
 8007b52:	dd13      	ble.n	8007b7c <_strtod_l+0x3dc>
 8007b54:	4b7b      	ldr	r3, [pc, #492]	; (8007d44 <_strtod_l+0x5a4>)
 8007b56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b5e:	f7f8 fd6b 	bl	8000638 <__aeabi_dmul>
 8007b62:	4682      	mov	sl, r0
 8007b64:	4648      	mov	r0, r9
 8007b66:	468b      	mov	fp, r1
 8007b68:	f7f8 fcec 	bl	8000544 <__aeabi_ui2d>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f8 fbaa 	bl	80002cc <__adddf3>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	2d0f      	cmp	r5, #15
 8007b7e:	dc38      	bgt.n	8007bf2 <_strtod_l+0x452>
 8007b80:	9b06      	ldr	r3, [sp, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f43f ae50 	beq.w	8007828 <_strtod_l+0x88>
 8007b88:	dd24      	ble.n	8007bd4 <_strtod_l+0x434>
 8007b8a:	2b16      	cmp	r3, #22
 8007b8c:	dc0b      	bgt.n	8007ba6 <_strtod_l+0x406>
 8007b8e:	496d      	ldr	r1, [pc, #436]	; (8007d44 <_strtod_l+0x5a4>)
 8007b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b98:	4652      	mov	r2, sl
 8007b9a:	465b      	mov	r3, fp
 8007b9c:	f7f8 fd4c 	bl	8000638 <__aeabi_dmul>
 8007ba0:	4682      	mov	sl, r0
 8007ba2:	468b      	mov	fp, r1
 8007ba4:	e640      	b.n	8007828 <_strtod_l+0x88>
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007bac:	4293      	cmp	r3, r2
 8007bae:	db20      	blt.n	8007bf2 <_strtod_l+0x452>
 8007bb0:	4c64      	ldr	r4, [pc, #400]	; (8007d44 <_strtod_l+0x5a4>)
 8007bb2:	f1c5 050f 	rsb	r5, r5, #15
 8007bb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007bba:	4652      	mov	r2, sl
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bc2:	f7f8 fd39 	bl	8000638 <__aeabi_dmul>
 8007bc6:	9b06      	ldr	r3, [sp, #24]
 8007bc8:	1b5d      	subs	r5, r3, r5
 8007bca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007bce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007bd2:	e7e3      	b.n	8007b9c <_strtod_l+0x3fc>
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	3316      	adds	r3, #22
 8007bd8:	db0b      	blt.n	8007bf2 <_strtod_l+0x452>
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	1b9e      	subs	r6, r3, r6
 8007bde:	4b59      	ldr	r3, [pc, #356]	; (8007d44 <_strtod_l+0x5a4>)
 8007be0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	f7f8 fe4e 	bl	800088c <__aeabi_ddiv>
 8007bf0:	e7d6      	b.n	8007ba0 <_strtod_l+0x400>
 8007bf2:	9b06      	ldr	r3, [sp, #24]
 8007bf4:	eba5 0808 	sub.w	r8, r5, r8
 8007bf8:	4498      	add	r8, r3
 8007bfa:	f1b8 0f00 	cmp.w	r8, #0
 8007bfe:	dd74      	ble.n	8007cea <_strtod_l+0x54a>
 8007c00:	f018 030f 	ands.w	r3, r8, #15
 8007c04:	d00a      	beq.n	8007c1c <_strtod_l+0x47c>
 8007c06:	494f      	ldr	r1, [pc, #316]	; (8007d44 <_strtod_l+0x5a4>)
 8007c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	465b      	mov	r3, fp
 8007c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c14:	f7f8 fd10 	bl	8000638 <__aeabi_dmul>
 8007c18:	4682      	mov	sl, r0
 8007c1a:	468b      	mov	fp, r1
 8007c1c:	f038 080f 	bics.w	r8, r8, #15
 8007c20:	d04f      	beq.n	8007cc2 <_strtod_l+0x522>
 8007c22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c26:	dd22      	ble.n	8007c6e <_strtod_l+0x4ce>
 8007c28:	2500      	movs	r5, #0
 8007c2a:	462e      	mov	r6, r5
 8007c2c:	9507      	str	r5, [sp, #28]
 8007c2e:	9505      	str	r5, [sp, #20]
 8007c30:	2322      	movs	r3, #34	; 0x22
 8007c32:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007d4c <_strtod_l+0x5ac>
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	f04f 0a00 	mov.w	sl, #0
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f43f adf2 	beq.w	8007828 <_strtod_l+0x88>
 8007c44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 fec6 	bl	80099d8 <_Bfree>
 8007c4c:	9905      	ldr	r1, [sp, #20]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f001 fec2 	bl	80099d8 <_Bfree>
 8007c54:	4631      	mov	r1, r6
 8007c56:	4620      	mov	r0, r4
 8007c58:	f001 febe 	bl	80099d8 <_Bfree>
 8007c5c:	9907      	ldr	r1, [sp, #28]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f001 feba 	bl	80099d8 <_Bfree>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4620      	mov	r0, r4
 8007c68:	f001 feb6 	bl	80099d8 <_Bfree>
 8007c6c:	e5dc      	b.n	8007828 <_strtod_l+0x88>
 8007c6e:	4b36      	ldr	r3, [pc, #216]	; (8007d48 <_strtod_l+0x5a8>)
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	2300      	movs	r3, #0
 8007c74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c78:	4650      	mov	r0, sl
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	4699      	mov	r9, r3
 8007c7e:	f1b8 0f01 	cmp.w	r8, #1
 8007c82:	dc21      	bgt.n	8007cc8 <_strtod_l+0x528>
 8007c84:	b10b      	cbz	r3, 8007c8a <_strtod_l+0x4ea>
 8007c86:	4682      	mov	sl, r0
 8007c88:	468b      	mov	fp, r1
 8007c8a:	4b2f      	ldr	r3, [pc, #188]	; (8007d48 <_strtod_l+0x5a8>)
 8007c8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007c9c:	f7f8 fccc 	bl	8000638 <__aeabi_dmul>
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <_strtod_l+0x5ac>)
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	400b      	ands	r3, r1
 8007ca6:	492a      	ldr	r1, [pc, #168]	; (8007d50 <_strtod_l+0x5b0>)
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	4682      	mov	sl, r0
 8007cac:	d8bc      	bhi.n	8007c28 <_strtod_l+0x488>
 8007cae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007cb2:	428b      	cmp	r3, r1
 8007cb4:	bf86      	itte	hi
 8007cb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007d54 <_strtod_l+0x5b4>
 8007cba:	f04f 3aff 	movhi.w	sl, #4294967295
 8007cbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	e084      	b.n	8007dd2 <_strtod_l+0x632>
 8007cc8:	f018 0f01 	tst.w	r8, #1
 8007ccc:	d005      	beq.n	8007cda <_strtod_l+0x53a>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 fcb0 	bl	8000638 <__aeabi_dmul>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	9a04      	ldr	r2, [sp, #16]
 8007cdc:	3208      	adds	r2, #8
 8007cde:	f109 0901 	add.w	r9, r9, #1
 8007ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ce6:	9204      	str	r2, [sp, #16]
 8007ce8:	e7c9      	b.n	8007c7e <_strtod_l+0x4de>
 8007cea:	d0ea      	beq.n	8007cc2 <_strtod_l+0x522>
 8007cec:	f1c8 0800 	rsb	r8, r8, #0
 8007cf0:	f018 020f 	ands.w	r2, r8, #15
 8007cf4:	d00a      	beq.n	8007d0c <_strtod_l+0x56c>
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <_strtod_l+0x5a4>)
 8007cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	4659      	mov	r1, fp
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fdc2 	bl	800088c <__aeabi_ddiv>
 8007d08:	4682      	mov	sl, r0
 8007d0a:	468b      	mov	fp, r1
 8007d0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007d10:	d0d7      	beq.n	8007cc2 <_strtod_l+0x522>
 8007d12:	f1b8 0f1f 	cmp.w	r8, #31
 8007d16:	dd1f      	ble.n	8007d58 <_strtod_l+0x5b8>
 8007d18:	2500      	movs	r5, #0
 8007d1a:	462e      	mov	r6, r5
 8007d1c:	9507      	str	r5, [sp, #28]
 8007d1e:	9505      	str	r5, [sp, #20]
 8007d20:	2322      	movs	r3, #34	; 0x22
 8007d22:	f04f 0a00 	mov.w	sl, #0
 8007d26:	f04f 0b00 	mov.w	fp, #0
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	e786      	b.n	8007c3c <_strtod_l+0x49c>
 8007d2e:	bf00      	nop
 8007d30:	0800bae1 	.word	0x0800bae1
 8007d34:	0800bb20 	.word	0x0800bb20
 8007d38:	0800bad9 	.word	0x0800bad9
 8007d3c:	0800bc64 	.word	0x0800bc64
 8007d40:	0800bf2b 	.word	0x0800bf2b
 8007d44:	0800bdf0 	.word	0x0800bdf0
 8007d48:	0800bdc8 	.word	0x0800bdc8
 8007d4c:	7ff00000 	.word	0x7ff00000
 8007d50:	7ca00000 	.word	0x7ca00000
 8007d54:	7fefffff 	.word	0x7fefffff
 8007d58:	f018 0310 	ands.w	r3, r8, #16
 8007d5c:	bf18      	it	ne
 8007d5e:	236a      	movne	r3, #106	; 0x6a
 8007d60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008110 <_strtod_l+0x970>
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	4650      	mov	r0, sl
 8007d68:	4659      	mov	r1, fp
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f018 0f01 	tst.w	r8, #1
 8007d70:	d004      	beq.n	8007d7c <_strtod_l+0x5dc>
 8007d72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d76:	f7f8 fc5f 	bl	8000638 <__aeabi_dmul>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007d80:	f109 0908 	add.w	r9, r9, #8
 8007d84:	d1f2      	bne.n	8007d6c <_strtod_l+0x5cc>
 8007d86:	b10b      	cbz	r3, 8007d8c <_strtod_l+0x5ec>
 8007d88:	4682      	mov	sl, r0
 8007d8a:	468b      	mov	fp, r1
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	b1c3      	cbz	r3, 8007dc2 <_strtod_l+0x622>
 8007d90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	dd11      	ble.n	8007dc2 <_strtod_l+0x622>
 8007d9e:	2b1f      	cmp	r3, #31
 8007da0:	f340 8124 	ble.w	8007fec <_strtod_l+0x84c>
 8007da4:	2b34      	cmp	r3, #52	; 0x34
 8007da6:	bfde      	ittt	le
 8007da8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007dac:	f04f 33ff 	movle.w	r3, #4294967295
 8007db0:	fa03 f202 	lslle.w	r2, r3, r2
 8007db4:	f04f 0a00 	mov.w	sl, #0
 8007db8:	bfcc      	ite	gt
 8007dba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007dbe:	ea02 0b01 	andle.w	fp, r2, r1
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4650      	mov	r0, sl
 8007dc8:	4659      	mov	r1, fp
 8007dca:	f7f8 fe9d 	bl	8000b08 <__aeabi_dcmpeq>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d1a2      	bne.n	8007d18 <_strtod_l+0x578>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	9908      	ldr	r1, [sp, #32]
 8007dd8:	462b      	mov	r3, r5
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f001 fe63 	bl	8009aa8 <__s2b>
 8007de2:	9007      	str	r0, [sp, #28]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f af1f 	beq.w	8007c28 <_strtod_l+0x488>
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	1b9e      	subs	r6, r3, r6
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfb4      	ite	lt
 8007df4:	4633      	movlt	r3, r6
 8007df6:	2300      	movge	r3, #0
 8007df8:	930c      	str	r3, [sp, #48]	; 0x30
 8007dfa:	9b06      	ldr	r3, [sp, #24]
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007e02:	9312      	str	r3, [sp, #72]	; 0x48
 8007e04:	462e      	mov	r6, r5
 8007e06:	9b07      	ldr	r3, [sp, #28]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	6859      	ldr	r1, [r3, #4]
 8007e0c:	f001 fda4 	bl	8009958 <_Balloc>
 8007e10:	9005      	str	r0, [sp, #20]
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f43f af0c 	beq.w	8007c30 <_strtod_l+0x490>
 8007e18:	9b07      	ldr	r3, [sp, #28]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	3202      	adds	r2, #2
 8007e1e:	f103 010c 	add.w	r1, r3, #12
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	300c      	adds	r0, #12
 8007e26:	f001 fd89 	bl	800993c <memcpy>
 8007e2a:	ec4b ab10 	vmov	d0, sl, fp
 8007e2e:	aa1a      	add	r2, sp, #104	; 0x68
 8007e30:	a919      	add	r1, sp, #100	; 0x64
 8007e32:	4620      	mov	r0, r4
 8007e34:	f002 f97e 	bl	800a134 <__d2b>
 8007e38:	ec4b ab18 	vmov	d8, sl, fp
 8007e3c:	9018      	str	r0, [sp, #96]	; 0x60
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f aef6 	beq.w	8007c30 <_strtod_l+0x490>
 8007e44:	2101      	movs	r1, #1
 8007e46:	4620      	mov	r0, r4
 8007e48:	f001 fec8 	bl	8009bdc <__i2b>
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f43f aeee 	beq.w	8007c30 <_strtod_l+0x490>
 8007e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e56:	9904      	ldr	r1, [sp, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfab      	itete	ge
 8007e5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007e5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007e60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007e62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007e66:	bfac      	ite	ge
 8007e68:	eb03 0902 	addge.w	r9, r3, r2
 8007e6c:	1ad7      	sublt	r7, r2, r3
 8007e6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e70:	eba3 0801 	sub.w	r8, r3, r1
 8007e74:	4490      	add	r8, r2
 8007e76:	4ba1      	ldr	r3, [pc, #644]	; (80080fc <_strtod_l+0x95c>)
 8007e78:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e7c:	4598      	cmp	r8, r3
 8007e7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e82:	f280 80c7 	bge.w	8008014 <_strtod_l+0x874>
 8007e86:	eba3 0308 	sub.w	r3, r3, r8
 8007e8a:	2b1f      	cmp	r3, #31
 8007e8c:	eba2 0203 	sub.w	r2, r2, r3
 8007e90:	f04f 0101 	mov.w	r1, #1
 8007e94:	f300 80b1 	bgt.w	8007ffa <_strtod_l+0x85a>
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9308      	str	r3, [sp, #32]
 8007ea2:	eb09 0802 	add.w	r8, r9, r2
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	45c1      	cmp	r9, r8
 8007eaa:	4417      	add	r7, r2
 8007eac:	441f      	add	r7, r3
 8007eae:	464b      	mov	r3, r9
 8007eb0:	bfa8      	it	ge
 8007eb2:	4643      	movge	r3, r8
 8007eb4:	42bb      	cmp	r3, r7
 8007eb6:	bfa8      	it	ge
 8007eb8:	463b      	movge	r3, r7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfc2      	ittt	gt
 8007ebe:	eba8 0803 	subgt.w	r8, r8, r3
 8007ec2:	1aff      	subgt	r7, r7, r3
 8007ec4:	eba9 0903 	subgt.w	r9, r9, r3
 8007ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd17      	ble.n	8007efe <_strtod_l+0x75e>
 8007ece:	4631      	mov	r1, r6
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f001 ff42 	bl	8009d5c <__pow5mult>
 8007ed8:	4606      	mov	r6, r0
 8007eda:	2800      	cmp	r0, #0
 8007edc:	f43f aea8 	beq.w	8007c30 <_strtod_l+0x490>
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f001 fe8f 	bl	8009c08 <__multiply>
 8007eea:	900b      	str	r0, [sp, #44]	; 0x2c
 8007eec:	2800      	cmp	r0, #0
 8007eee:	f43f ae9f 	beq.w	8007c30 <_strtod_l+0x490>
 8007ef2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f001 fd6f 	bl	80099d8 <_Bfree>
 8007efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efc:	9318      	str	r3, [sp, #96]	; 0x60
 8007efe:	f1b8 0f00 	cmp.w	r8, #0
 8007f02:	f300 808c 	bgt.w	800801e <_strtod_l+0x87e>
 8007f06:	9b06      	ldr	r3, [sp, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dd08      	ble.n	8007f1e <_strtod_l+0x77e>
 8007f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f0e:	9905      	ldr	r1, [sp, #20]
 8007f10:	4620      	mov	r0, r4
 8007f12:	f001 ff23 	bl	8009d5c <__pow5mult>
 8007f16:	9005      	str	r0, [sp, #20]
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f43f ae89 	beq.w	8007c30 <_strtod_l+0x490>
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	dd08      	ble.n	8007f34 <_strtod_l+0x794>
 8007f22:	9905      	ldr	r1, [sp, #20]
 8007f24:	463a      	mov	r2, r7
 8007f26:	4620      	mov	r0, r4
 8007f28:	f001 ff72 	bl	8009e10 <__lshift>
 8007f2c:	9005      	str	r0, [sp, #20]
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f43f ae7e 	beq.w	8007c30 <_strtod_l+0x490>
 8007f34:	f1b9 0f00 	cmp.w	r9, #0
 8007f38:	dd08      	ble.n	8007f4c <_strtod_l+0x7ac>
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	464a      	mov	r2, r9
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f001 ff66 	bl	8009e10 <__lshift>
 8007f44:	4606      	mov	r6, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f43f ae72 	beq.w	8007c30 <_strtod_l+0x490>
 8007f4c:	9a05      	ldr	r2, [sp, #20]
 8007f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f50:	4620      	mov	r0, r4
 8007f52:	f001 ffe9 	bl	8009f28 <__mdiff>
 8007f56:	4605      	mov	r5, r0
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	f43f ae69 	beq.w	8007c30 <_strtod_l+0x490>
 8007f5e:	68c3      	ldr	r3, [r0, #12]
 8007f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f62:	2300      	movs	r3, #0
 8007f64:	60c3      	str	r3, [r0, #12]
 8007f66:	4631      	mov	r1, r6
 8007f68:	f001 ffc2 	bl	8009ef0 <__mcmp>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	da60      	bge.n	8008032 <_strtod_l+0x892>
 8007f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f72:	ea53 030a 	orrs.w	r3, r3, sl
 8007f76:	f040 8082 	bne.w	800807e <_strtod_l+0x8de>
 8007f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d17d      	bne.n	800807e <_strtod_l+0x8de>
 8007f82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f86:	0d1b      	lsrs	r3, r3, #20
 8007f88:	051b      	lsls	r3, r3, #20
 8007f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f8e:	d976      	bls.n	800807e <_strtod_l+0x8de>
 8007f90:	696b      	ldr	r3, [r5, #20]
 8007f92:	b913      	cbnz	r3, 8007f9a <_strtod_l+0x7fa>
 8007f94:	692b      	ldr	r3, [r5, #16]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	dd71      	ble.n	800807e <_strtod_l+0x8de>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f001 ff36 	bl	8009e10 <__lshift>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	f001 ffa2 	bl	8009ef0 <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dd66      	ble.n	800807e <_strtod_l+0x8de>
 8007fb0:	9904      	ldr	r1, [sp, #16]
 8007fb2:	4a53      	ldr	r2, [pc, #332]	; (8008100 <_strtod_l+0x960>)
 8007fb4:	465b      	mov	r3, fp
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	f000 8081 	beq.w	80080be <_strtod_l+0x91e>
 8007fbc:	ea02 010b 	and.w	r1, r2, fp
 8007fc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007fc4:	dc7b      	bgt.n	80080be <_strtod_l+0x91e>
 8007fc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007fca:	f77f aea9 	ble.w	8007d20 <_strtod_l+0x580>
 8007fce:	4b4d      	ldr	r3, [pc, #308]	; (8008104 <_strtod_l+0x964>)
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f7f8 fb2f 	bl	8000638 <__aeabi_dmul>
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4303      	orrs	r3, r0
 8007fde:	bf08      	it	eq
 8007fe0:	2322      	moveq	r3, #34	; 0x22
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	468b      	mov	fp, r1
 8007fe6:	bf08      	it	eq
 8007fe8:	6023      	streq	r3, [r4, #0]
 8007fea:	e62b      	b.n	8007c44 <_strtod_l+0x4a4>
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff4:	ea03 0a0a 	and.w	sl, r3, sl
 8007ff8:	e6e3      	b.n	8007dc2 <_strtod_l+0x622>
 8007ffa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007ffe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008002:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008006:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800800a:	fa01 f308 	lsl.w	r3, r1, r8
 800800e:	9308      	str	r3, [sp, #32]
 8008010:	910d      	str	r1, [sp, #52]	; 0x34
 8008012:	e746      	b.n	8007ea2 <_strtod_l+0x702>
 8008014:	2300      	movs	r3, #0
 8008016:	9308      	str	r3, [sp, #32]
 8008018:	2301      	movs	r3, #1
 800801a:	930d      	str	r3, [sp, #52]	; 0x34
 800801c:	e741      	b.n	8007ea2 <_strtod_l+0x702>
 800801e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008020:	4642      	mov	r2, r8
 8008022:	4620      	mov	r0, r4
 8008024:	f001 fef4 	bl	8009e10 <__lshift>
 8008028:	9018      	str	r0, [sp, #96]	; 0x60
 800802a:	2800      	cmp	r0, #0
 800802c:	f47f af6b 	bne.w	8007f06 <_strtod_l+0x766>
 8008030:	e5fe      	b.n	8007c30 <_strtod_l+0x490>
 8008032:	465f      	mov	r7, fp
 8008034:	d16e      	bne.n	8008114 <_strtod_l+0x974>
 8008036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803c:	b342      	cbz	r2, 8008090 <_strtod_l+0x8f0>
 800803e:	4a32      	ldr	r2, [pc, #200]	; (8008108 <_strtod_l+0x968>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d128      	bne.n	8008096 <_strtod_l+0x8f6>
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	4651      	mov	r1, sl
 8008048:	b1eb      	cbz	r3, 8008086 <_strtod_l+0x8e6>
 800804a:	4b2d      	ldr	r3, [pc, #180]	; (8008100 <_strtod_l+0x960>)
 800804c:	403b      	ands	r3, r7
 800804e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	d819      	bhi.n	800808c <_strtod_l+0x8ec>
 8008058:	0d1b      	lsrs	r3, r3, #20
 800805a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	4299      	cmp	r1, r3
 8008064:	d117      	bne.n	8008096 <_strtod_l+0x8f6>
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <_strtod_l+0x96c>)
 8008068:	429f      	cmp	r7, r3
 800806a:	d102      	bne.n	8008072 <_strtod_l+0x8d2>
 800806c:	3101      	adds	r1, #1
 800806e:	f43f addf 	beq.w	8007c30 <_strtod_l+0x490>
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <_strtod_l+0x960>)
 8008074:	403b      	ands	r3, r7
 8008076:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800807a:	f04f 0a00 	mov.w	sl, #0
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1a4      	bne.n	8007fce <_strtod_l+0x82e>
 8008084:	e5de      	b.n	8007c44 <_strtod_l+0x4a4>
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	e7ea      	b.n	8008062 <_strtod_l+0x8c2>
 800808c:	4613      	mov	r3, r2
 800808e:	e7e8      	b.n	8008062 <_strtod_l+0x8c2>
 8008090:	ea53 030a 	orrs.w	r3, r3, sl
 8008094:	d08c      	beq.n	8007fb0 <_strtod_l+0x810>
 8008096:	9b08      	ldr	r3, [sp, #32]
 8008098:	b1db      	cbz	r3, 80080d2 <_strtod_l+0x932>
 800809a:	423b      	tst	r3, r7
 800809c:	d0ef      	beq.n	800807e <_strtod_l+0x8de>
 800809e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a0:	9a04      	ldr	r2, [sp, #16]
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	b1c3      	cbz	r3, 80080da <_strtod_l+0x93a>
 80080a8:	f7ff fb5b 	bl	8007762 <sulp>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	ec51 0b18 	vmov	r0, r1, d8
 80080b4:	f7f8 f90a 	bl	80002cc <__adddf3>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	e7df      	b.n	800807e <_strtod_l+0x8de>
 80080be:	4013      	ands	r3, r2
 80080c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080cc:	f04f 3aff 	mov.w	sl, #4294967295
 80080d0:	e7d5      	b.n	800807e <_strtod_l+0x8de>
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	ea13 0f0a 	tst.w	r3, sl
 80080d8:	e7e0      	b.n	800809c <_strtod_l+0x8fc>
 80080da:	f7ff fb42 	bl	8007762 <sulp>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	ec51 0b18 	vmov	r0, r1, d8
 80080e6:	f7f8 f8ef 	bl	80002c8 <__aeabi_dsub>
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	4682      	mov	sl, r0
 80080f0:	468b      	mov	fp, r1
 80080f2:	f7f8 fd09 	bl	8000b08 <__aeabi_dcmpeq>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0c1      	beq.n	800807e <_strtod_l+0x8de>
 80080fa:	e611      	b.n	8007d20 <_strtod_l+0x580>
 80080fc:	fffffc02 	.word	0xfffffc02
 8008100:	7ff00000 	.word	0x7ff00000
 8008104:	39500000 	.word	0x39500000
 8008108:	000fffff 	.word	0x000fffff
 800810c:	7fefffff 	.word	0x7fefffff
 8008110:	0800bb38 	.word	0x0800bb38
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	f002 f868 	bl	800a1ec <__ratio>
 800811c:	ec59 8b10 	vmov	r8, r9, d0
 8008120:	ee10 0a10 	vmov	r0, s0
 8008124:	2200      	movs	r2, #0
 8008126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 fd00 	bl	8000b30 <__aeabi_dcmple>
 8008130:	2800      	cmp	r0, #0
 8008132:	d07a      	beq.n	800822a <_strtod_l+0xa8a>
 8008134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d04a      	beq.n	80081d0 <_strtod_l+0xa30>
 800813a:	4b95      	ldr	r3, [pc, #596]	; (8008390 <_strtod_l+0xbf0>)
 800813c:	2200      	movs	r2, #0
 800813e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008142:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008390 <_strtod_l+0xbf0>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	4b92      	ldr	r3, [pc, #584]	; (8008394 <_strtod_l+0xbf4>)
 800814c:	403b      	ands	r3, r7
 800814e:	930d      	str	r3, [sp, #52]	; 0x34
 8008150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008152:	4b91      	ldr	r3, [pc, #580]	; (8008398 <_strtod_l+0xbf8>)
 8008154:	429a      	cmp	r2, r3
 8008156:	f040 80b0 	bne.w	80082ba <_strtod_l+0xb1a>
 800815a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800815e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008162:	ec4b ab10 	vmov	d0, sl, fp
 8008166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800816a:	f001 ff67 	bl	800a03c <__ulp>
 800816e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008172:	ec53 2b10 	vmov	r2, r3, d0
 8008176:	f7f8 fa5f 	bl	8000638 <__aeabi_dmul>
 800817a:	4652      	mov	r2, sl
 800817c:	465b      	mov	r3, fp
 800817e:	f7f8 f8a5 	bl	80002cc <__adddf3>
 8008182:	460b      	mov	r3, r1
 8008184:	4983      	ldr	r1, [pc, #524]	; (8008394 <_strtod_l+0xbf4>)
 8008186:	4a85      	ldr	r2, [pc, #532]	; (800839c <_strtod_l+0xbfc>)
 8008188:	4019      	ands	r1, r3
 800818a:	4291      	cmp	r1, r2
 800818c:	4682      	mov	sl, r0
 800818e:	d960      	bls.n	8008252 <_strtod_l+0xab2>
 8008190:	ee18 3a90 	vmov	r3, s17
 8008194:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008198:	4293      	cmp	r3, r2
 800819a:	d104      	bne.n	80081a6 <_strtod_l+0xa06>
 800819c:	ee18 3a10 	vmov	r3, s16
 80081a0:	3301      	adds	r3, #1
 80081a2:	f43f ad45 	beq.w	8007c30 <_strtod_l+0x490>
 80081a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80083a8 <_strtod_l+0xc08>
 80081aa:	f04f 3aff 	mov.w	sl, #4294967295
 80081ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081b0:	4620      	mov	r0, r4
 80081b2:	f001 fc11 	bl	80099d8 <_Bfree>
 80081b6:	9905      	ldr	r1, [sp, #20]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 fc0d 	bl	80099d8 <_Bfree>
 80081be:	4631      	mov	r1, r6
 80081c0:	4620      	mov	r0, r4
 80081c2:	f001 fc09 	bl	80099d8 <_Bfree>
 80081c6:	4629      	mov	r1, r5
 80081c8:	4620      	mov	r0, r4
 80081ca:	f001 fc05 	bl	80099d8 <_Bfree>
 80081ce:	e61a      	b.n	8007e06 <_strtod_l+0x666>
 80081d0:	f1ba 0f00 	cmp.w	sl, #0
 80081d4:	d11b      	bne.n	800820e <_strtod_l+0xa6e>
 80081d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081da:	b9f3      	cbnz	r3, 800821a <_strtod_l+0xa7a>
 80081dc:	4b6c      	ldr	r3, [pc, #432]	; (8008390 <_strtod_l+0xbf0>)
 80081de:	2200      	movs	r2, #0
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f8 fc9a 	bl	8000b1c <__aeabi_dcmplt>
 80081e8:	b9d0      	cbnz	r0, 8008220 <_strtod_l+0xa80>
 80081ea:	4640      	mov	r0, r8
 80081ec:	4649      	mov	r1, r9
 80081ee:	4b6c      	ldr	r3, [pc, #432]	; (80083a0 <_strtod_l+0xc00>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	f7f8 fa21 	bl	8000638 <__aeabi_dmul>
 80081f6:	4680      	mov	r8, r0
 80081f8:	4689      	mov	r9, r1
 80081fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008202:	9315      	str	r3, [sp, #84]	; 0x54
 8008204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800820c:	e79d      	b.n	800814a <_strtod_l+0x9aa>
 800820e:	f1ba 0f01 	cmp.w	sl, #1
 8008212:	d102      	bne.n	800821a <_strtod_l+0xa7a>
 8008214:	2f00      	cmp	r7, #0
 8008216:	f43f ad83 	beq.w	8007d20 <_strtod_l+0x580>
 800821a:	4b62      	ldr	r3, [pc, #392]	; (80083a4 <_strtod_l+0xc04>)
 800821c:	2200      	movs	r2, #0
 800821e:	e78e      	b.n	800813e <_strtod_l+0x99e>
 8008220:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80083a0 <_strtod_l+0xc00>
 8008224:	f04f 0800 	mov.w	r8, #0
 8008228:	e7e7      	b.n	80081fa <_strtod_l+0xa5a>
 800822a:	4b5d      	ldr	r3, [pc, #372]	; (80083a0 <_strtod_l+0xc00>)
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	2200      	movs	r2, #0
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008238:	4680      	mov	r8, r0
 800823a:	4689      	mov	r9, r1
 800823c:	b933      	cbnz	r3, 800824c <_strtod_l+0xaac>
 800823e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008242:	900e      	str	r0, [sp, #56]	; 0x38
 8008244:	930f      	str	r3, [sp, #60]	; 0x3c
 8008246:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800824a:	e7dd      	b.n	8008208 <_strtod_l+0xa68>
 800824c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008250:	e7f9      	b.n	8008246 <_strtod_l+0xaa6>
 8008252:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1a8      	bne.n	80081ae <_strtod_l+0xa0e>
 800825c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008262:	0d1b      	lsrs	r3, r3, #20
 8008264:	051b      	lsls	r3, r3, #20
 8008266:	429a      	cmp	r2, r3
 8008268:	d1a1      	bne.n	80081ae <_strtod_l+0xa0e>
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 fd43 	bl	8000cf8 <__aeabi_d2lz>
 8008272:	f7f8 f9b3 	bl	80005dc <__aeabi_l2d>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4640      	mov	r0, r8
 800827c:	4649      	mov	r1, r9
 800827e:	f7f8 f823 	bl	80002c8 <__aeabi_dsub>
 8008282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008288:	ea43 030a 	orr.w	r3, r3, sl
 800828c:	4313      	orrs	r3, r2
 800828e:	4680      	mov	r8, r0
 8008290:	4689      	mov	r9, r1
 8008292:	d055      	beq.n	8008340 <_strtod_l+0xba0>
 8008294:	a336      	add	r3, pc, #216	; (adr r3, 8008370 <_strtod_l+0xbd0>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f47f acd0 	bne.w	8007c44 <_strtod_l+0x4a4>
 80082a4:	a334      	add	r3, pc, #208	; (adr r3, 8008378 <_strtod_l+0xbd8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 fc53 	bl	8000b58 <__aeabi_dcmpgt>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f43f af7b 	beq.w	80081ae <_strtod_l+0xa0e>
 80082b8:	e4c4      	b.n	8007c44 <_strtod_l+0x4a4>
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	b333      	cbz	r3, 800830c <_strtod_l+0xb6c>
 80082be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082c4:	d822      	bhi.n	800830c <_strtod_l+0xb6c>
 80082c6:	a32e      	add	r3, pc, #184	; (adr r3, 8008380 <_strtod_l+0xbe0>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 fc2e 	bl	8000b30 <__aeabi_dcmple>
 80082d4:	b1a0      	cbz	r0, 8008300 <_strtod_l+0xb60>
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	f7f8 fc85 	bl	8000be8 <__aeabi_d2uiz>
 80082de:	2801      	cmp	r0, #1
 80082e0:	bf38      	it	cc
 80082e2:	2001      	movcc	r0, #1
 80082e4:	f7f8 f92e 	bl	8000544 <__aeabi_ui2d>
 80082e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ea:	4680      	mov	r8, r0
 80082ec:	4689      	mov	r9, r1
 80082ee:	bb23      	cbnz	r3, 800833a <_strtod_l+0xb9a>
 80082f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082f4:	9010      	str	r0, [sp, #64]	; 0x40
 80082f6:	9311      	str	r3, [sp, #68]	; 0x44
 80082f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008304:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	9309      	str	r3, [sp, #36]	; 0x24
 800830c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008310:	eeb0 0a48 	vmov.f32	s0, s16
 8008314:	eef0 0a68 	vmov.f32	s1, s17
 8008318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800831c:	f001 fe8e 	bl	800a03c <__ulp>
 8008320:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008324:	ec53 2b10 	vmov	r2, r3, d0
 8008328:	f7f8 f986 	bl	8000638 <__aeabi_dmul>
 800832c:	ec53 2b18 	vmov	r2, r3, d8
 8008330:	f7f7 ffcc 	bl	80002cc <__adddf3>
 8008334:	4682      	mov	sl, r0
 8008336:	468b      	mov	fp, r1
 8008338:	e78d      	b.n	8008256 <_strtod_l+0xab6>
 800833a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800833e:	e7db      	b.n	80082f8 <_strtod_l+0xb58>
 8008340:	a311      	add	r3, pc, #68	; (adr r3, 8008388 <_strtod_l+0xbe8>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f8 fbe9 	bl	8000b1c <__aeabi_dcmplt>
 800834a:	e7b2      	b.n	80082b2 <_strtod_l+0xb12>
 800834c:	2300      	movs	r3, #0
 800834e:	930a      	str	r3, [sp, #40]	; 0x28
 8008350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	f7ff ba6b 	b.w	8007830 <_strtod_l+0x90>
 800835a:	2a65      	cmp	r2, #101	; 0x65
 800835c:	f43f ab5f 	beq.w	8007a1e <_strtod_l+0x27e>
 8008360:	2a45      	cmp	r2, #69	; 0x45
 8008362:	f43f ab5c 	beq.w	8007a1e <_strtod_l+0x27e>
 8008366:	2301      	movs	r3, #1
 8008368:	f7ff bb94 	b.w	8007a94 <_strtod_l+0x2f4>
 800836c:	f3af 8000 	nop.w
 8008370:	94a03595 	.word	0x94a03595
 8008374:	3fdfffff 	.word	0x3fdfffff
 8008378:	35afe535 	.word	0x35afe535
 800837c:	3fe00000 	.word	0x3fe00000
 8008380:	ffc00000 	.word	0xffc00000
 8008384:	41dfffff 	.word	0x41dfffff
 8008388:	94a03595 	.word	0x94a03595
 800838c:	3fcfffff 	.word	0x3fcfffff
 8008390:	3ff00000 	.word	0x3ff00000
 8008394:	7ff00000 	.word	0x7ff00000
 8008398:	7fe00000 	.word	0x7fe00000
 800839c:	7c9fffff 	.word	0x7c9fffff
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	bff00000 	.word	0xbff00000
 80083a8:	7fefffff 	.word	0x7fefffff

080083ac <_strtod_r>:
 80083ac:	4b01      	ldr	r3, [pc, #4]	; (80083b4 <_strtod_r+0x8>)
 80083ae:	f7ff b9f7 	b.w	80077a0 <_strtod_l>
 80083b2:	bf00      	nop
 80083b4:	20000090 	.word	0x20000090

080083b8 <_strtol_l.constprop.0>:
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083be:	d001      	beq.n	80083c4 <_strtol_l.constprop.0+0xc>
 80083c0:	2b24      	cmp	r3, #36	; 0x24
 80083c2:	d906      	bls.n	80083d2 <_strtol_l.constprop.0+0x1a>
 80083c4:	f7fe fa76 	bl	80068b4 <__errno>
 80083c8:	2316      	movs	r3, #22
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084b8 <_strtol_l.constprop.0+0x100>
 80083d6:	460d      	mov	r5, r1
 80083d8:	462e      	mov	r6, r5
 80083da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80083e2:	f017 0708 	ands.w	r7, r7, #8
 80083e6:	d1f7      	bne.n	80083d8 <_strtol_l.constprop.0+0x20>
 80083e8:	2c2d      	cmp	r4, #45	; 0x2d
 80083ea:	d132      	bne.n	8008452 <_strtol_l.constprop.0+0x9a>
 80083ec:	782c      	ldrb	r4, [r5, #0]
 80083ee:	2701      	movs	r7, #1
 80083f0:	1cb5      	adds	r5, r6, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d05b      	beq.n	80084ae <_strtol_l.constprop.0+0xf6>
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d109      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fa:	2c30      	cmp	r4, #48	; 0x30
 80083fc:	d107      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fe:	782c      	ldrb	r4, [r5, #0]
 8008400:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008404:	2c58      	cmp	r4, #88	; 0x58
 8008406:	d14d      	bne.n	80084a4 <_strtol_l.constprop.0+0xec>
 8008408:	786c      	ldrb	r4, [r5, #1]
 800840a:	2310      	movs	r3, #16
 800840c:	3502      	adds	r5, #2
 800840e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008412:	f108 38ff 	add.w	r8, r8, #4294967295
 8008416:	f04f 0c00 	mov.w	ip, #0
 800841a:	fbb8 f9f3 	udiv	r9, r8, r3
 800841e:	4666      	mov	r6, ip
 8008420:	fb03 8a19 	mls	sl, r3, r9, r8
 8008424:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008428:	f1be 0f09 	cmp.w	lr, #9
 800842c:	d816      	bhi.n	800845c <_strtol_l.constprop.0+0xa4>
 800842e:	4674      	mov	r4, lr
 8008430:	42a3      	cmp	r3, r4
 8008432:	dd24      	ble.n	800847e <_strtol_l.constprop.0+0xc6>
 8008434:	f1bc 0f00 	cmp.w	ip, #0
 8008438:	db1e      	blt.n	8008478 <_strtol_l.constprop.0+0xc0>
 800843a:	45b1      	cmp	r9, r6
 800843c:	d31c      	bcc.n	8008478 <_strtol_l.constprop.0+0xc0>
 800843e:	d101      	bne.n	8008444 <_strtol_l.constprop.0+0x8c>
 8008440:	45a2      	cmp	sl, r4
 8008442:	db19      	blt.n	8008478 <_strtol_l.constprop.0+0xc0>
 8008444:	fb06 4603 	mla	r6, r6, r3, r4
 8008448:	f04f 0c01 	mov.w	ip, #1
 800844c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008450:	e7e8      	b.n	8008424 <_strtol_l.constprop.0+0x6c>
 8008452:	2c2b      	cmp	r4, #43	; 0x2b
 8008454:	bf04      	itt	eq
 8008456:	782c      	ldrbeq	r4, [r5, #0]
 8008458:	1cb5      	addeq	r5, r6, #2
 800845a:	e7ca      	b.n	80083f2 <_strtol_l.constprop.0+0x3a>
 800845c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008460:	f1be 0f19 	cmp.w	lr, #25
 8008464:	d801      	bhi.n	800846a <_strtol_l.constprop.0+0xb2>
 8008466:	3c37      	subs	r4, #55	; 0x37
 8008468:	e7e2      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 800846a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800846e:	f1be 0f19 	cmp.w	lr, #25
 8008472:	d804      	bhi.n	800847e <_strtol_l.constprop.0+0xc6>
 8008474:	3c57      	subs	r4, #87	; 0x57
 8008476:	e7db      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 8008478:	f04f 3cff 	mov.w	ip, #4294967295
 800847c:	e7e6      	b.n	800844c <_strtol_l.constprop.0+0x94>
 800847e:	f1bc 0f00 	cmp.w	ip, #0
 8008482:	da05      	bge.n	8008490 <_strtol_l.constprop.0+0xd8>
 8008484:	2322      	movs	r3, #34	; 0x22
 8008486:	6003      	str	r3, [r0, #0]
 8008488:	4646      	mov	r6, r8
 800848a:	b942      	cbnz	r2, 800849e <_strtol_l.constprop.0+0xe6>
 800848c:	4630      	mov	r0, r6
 800848e:	e79e      	b.n	80083ce <_strtol_l.constprop.0+0x16>
 8008490:	b107      	cbz	r7, 8008494 <_strtol_l.constprop.0+0xdc>
 8008492:	4276      	negs	r6, r6
 8008494:	2a00      	cmp	r2, #0
 8008496:	d0f9      	beq.n	800848c <_strtol_l.constprop.0+0xd4>
 8008498:	f1bc 0f00 	cmp.w	ip, #0
 800849c:	d000      	beq.n	80084a0 <_strtol_l.constprop.0+0xe8>
 800849e:	1e69      	subs	r1, r5, #1
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	e7f3      	b.n	800848c <_strtol_l.constprop.0+0xd4>
 80084a4:	2430      	movs	r4, #48	; 0x30
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1b1      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80084aa:	2308      	movs	r3, #8
 80084ac:	e7af      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084ae:	2c30      	cmp	r4, #48	; 0x30
 80084b0:	d0a5      	beq.n	80083fe <_strtol_l.constprop.0+0x46>
 80084b2:	230a      	movs	r3, #10
 80084b4:	e7ab      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084b6:	bf00      	nop
 80084b8:	0800bb61 	.word	0x0800bb61

080084bc <_strtol_r>:
 80084bc:	f7ff bf7c 	b.w	80083b8 <_strtol_l.constprop.0>

080084c0 <_write_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_write_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f9 fa83 	bl	80019da <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_write_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_write_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20000450 	.word	0x20000450

080084e4 <_close_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d06      	ldr	r5, [pc, #24]	; (8008500 <_close_r+0x1c>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	f7f9 fa8f 	bl	8001a12 <_close>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_close_r+0x1a>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_close_r+0x1a>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20000450 	.word	0x20000450

08008504 <quorem>:
 8008504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	6903      	ldr	r3, [r0, #16]
 800850a:	690c      	ldr	r4, [r1, #16]
 800850c:	42a3      	cmp	r3, r4
 800850e:	4607      	mov	r7, r0
 8008510:	f2c0 8081 	blt.w	8008616 <quorem+0x112>
 8008514:	3c01      	subs	r4, #1
 8008516:	f101 0814 	add.w	r8, r1, #20
 800851a:	f100 0514 	add.w	r5, r0, #20
 800851e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800852c:	3301      	adds	r3, #1
 800852e:	429a      	cmp	r2, r3
 8008530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008538:	fbb2 f6f3 	udiv	r6, r2, r3
 800853c:	d331      	bcc.n	80085a2 <quorem+0x9e>
 800853e:	f04f 0e00 	mov.w	lr, #0
 8008542:	4640      	mov	r0, r8
 8008544:	46ac      	mov	ip, r5
 8008546:	46f2      	mov	sl, lr
 8008548:	f850 2b04 	ldr.w	r2, [r0], #4
 800854c:	b293      	uxth	r3, r2
 800854e:	fb06 e303 	mla	r3, r6, r3, lr
 8008552:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008556:	b29b      	uxth	r3, r3
 8008558:	ebaa 0303 	sub.w	r3, sl, r3
 800855c:	f8dc a000 	ldr.w	sl, [ip]
 8008560:	0c12      	lsrs	r2, r2, #16
 8008562:	fa13 f38a 	uxtah	r3, r3, sl
 8008566:	fb06 e202 	mla	r2, r6, r2, lr
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008572:	b292      	uxth	r2, r2
 8008574:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800857c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008580:	4581      	cmp	r9, r0
 8008582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008586:	f84c 3b04 	str.w	r3, [ip], #4
 800858a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800858e:	d2db      	bcs.n	8008548 <quorem+0x44>
 8008590:	f855 300b 	ldr.w	r3, [r5, fp]
 8008594:	b92b      	cbnz	r3, 80085a2 <quorem+0x9e>
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	3b04      	subs	r3, #4
 800859a:	429d      	cmp	r5, r3
 800859c:	461a      	mov	r2, r3
 800859e:	d32e      	bcc.n	80085fe <quorem+0xfa>
 80085a0:	613c      	str	r4, [r7, #16]
 80085a2:	4638      	mov	r0, r7
 80085a4:	f001 fca4 	bl	8009ef0 <__mcmp>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	db24      	blt.n	80085f6 <quorem+0xf2>
 80085ac:	3601      	adds	r6, #1
 80085ae:	4628      	mov	r0, r5
 80085b0:	f04f 0c00 	mov.w	ip, #0
 80085b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80085b8:	f8d0 e000 	ldr.w	lr, [r0]
 80085bc:	b293      	uxth	r3, r2
 80085be:	ebac 0303 	sub.w	r3, ip, r3
 80085c2:	0c12      	lsrs	r2, r2, #16
 80085c4:	fa13 f38e 	uxtah	r3, r3, lr
 80085c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085d6:	45c1      	cmp	r9, r8
 80085d8:	f840 3b04 	str.w	r3, [r0], #4
 80085dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085e0:	d2e8      	bcs.n	80085b4 <quorem+0xb0>
 80085e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ea:	b922      	cbnz	r2, 80085f6 <quorem+0xf2>
 80085ec:	3b04      	subs	r3, #4
 80085ee:	429d      	cmp	r5, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	d30a      	bcc.n	800860a <quorem+0x106>
 80085f4:	613c      	str	r4, [r7, #16]
 80085f6:	4630      	mov	r0, r6
 80085f8:	b003      	add	sp, #12
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	6812      	ldr	r2, [r2, #0]
 8008600:	3b04      	subs	r3, #4
 8008602:	2a00      	cmp	r2, #0
 8008604:	d1cc      	bne.n	80085a0 <quorem+0x9c>
 8008606:	3c01      	subs	r4, #1
 8008608:	e7c7      	b.n	800859a <quorem+0x96>
 800860a:	6812      	ldr	r2, [r2, #0]
 800860c:	3b04      	subs	r3, #4
 800860e:	2a00      	cmp	r2, #0
 8008610:	d1f0      	bne.n	80085f4 <quorem+0xf0>
 8008612:	3c01      	subs	r4, #1
 8008614:	e7eb      	b.n	80085ee <quorem+0xea>
 8008616:	2000      	movs	r0, #0
 8008618:	e7ee      	b.n	80085f8 <quorem+0xf4>
 800861a:	0000      	movs	r0, r0
 800861c:	0000      	movs	r0, r0
	...

08008620 <_dtoa_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	ed2d 8b04 	vpush	{d8-d9}
 8008628:	ec57 6b10 	vmov	r6, r7, d0
 800862c:	b093      	sub	sp, #76	; 0x4c
 800862e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008634:	9106      	str	r1, [sp, #24]
 8008636:	ee10 aa10 	vmov	sl, s0
 800863a:	4604      	mov	r4, r0
 800863c:	9209      	str	r2, [sp, #36]	; 0x24
 800863e:	930c      	str	r3, [sp, #48]	; 0x30
 8008640:	46bb      	mov	fp, r7
 8008642:	b975      	cbnz	r5, 8008662 <_dtoa_r+0x42>
 8008644:	2010      	movs	r0, #16
 8008646:	f001 f95f 	bl	8009908 <malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	6260      	str	r0, [r4, #36]	; 0x24
 800864e:	b920      	cbnz	r0, 800865a <_dtoa_r+0x3a>
 8008650:	4ba7      	ldr	r3, [pc, #668]	; (80088f0 <_dtoa_r+0x2d0>)
 8008652:	21ea      	movs	r1, #234	; 0xea
 8008654:	48a7      	ldr	r0, [pc, #668]	; (80088f4 <_dtoa_r+0x2d4>)
 8008656:	f002 fcd7 	bl	800b008 <__assert_func>
 800865a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800865e:	6005      	str	r5, [r0, #0]
 8008660:	60c5      	str	r5, [r0, #12]
 8008662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	b151      	cbz	r1, 800867e <_dtoa_r+0x5e>
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	604a      	str	r2, [r1, #4]
 800866c:	2301      	movs	r3, #1
 800866e:	4093      	lsls	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
 8008672:	4620      	mov	r0, r4
 8008674:	f001 f9b0 	bl	80099d8 <_Bfree>
 8008678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	1e3b      	subs	r3, r7, #0
 8008680:	bfaa      	itet	ge
 8008682:	2300      	movge	r3, #0
 8008684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008688:	f8c8 3000 	strge.w	r3, [r8]
 800868c:	4b9a      	ldr	r3, [pc, #616]	; (80088f8 <_dtoa_r+0x2d8>)
 800868e:	bfbc      	itt	lt
 8008690:	2201      	movlt	r2, #1
 8008692:	f8c8 2000 	strlt.w	r2, [r8]
 8008696:	ea33 030b 	bics.w	r3, r3, fp
 800869a:	d11b      	bne.n	80086d4 <_dtoa_r+0xb4>
 800869c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800869e:	f242 730f 	movw	r3, #9999	; 0x270f
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086a8:	4333      	orrs	r3, r6
 80086aa:	f000 8592 	beq.w	80091d2 <_dtoa_r+0xbb2>
 80086ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b0:	b963      	cbnz	r3, 80086cc <_dtoa_r+0xac>
 80086b2:	4b92      	ldr	r3, [pc, #584]	; (80088fc <_dtoa_r+0x2dc>)
 80086b4:	e022      	b.n	80086fc <_dtoa_r+0xdc>
 80086b6:	4b92      	ldr	r3, [pc, #584]	; (8008900 <_dtoa_r+0x2e0>)
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	3308      	adds	r3, #8
 80086bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	9801      	ldr	r0, [sp, #4]
 80086c2:	b013      	add	sp, #76	; 0x4c
 80086c4:	ecbd 8b04 	vpop	{d8-d9}
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	4b8b      	ldr	r3, [pc, #556]	; (80088fc <_dtoa_r+0x2dc>)
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	3303      	adds	r3, #3
 80086d2:	e7f3      	b.n	80086bc <_dtoa_r+0x9c>
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4650      	mov	r0, sl
 80086da:	4659      	mov	r1, fp
 80086dc:	f7f8 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 80086e0:	ec4b ab19 	vmov	d9, sl, fp
 80086e4:	4680      	mov	r8, r0
 80086e6:	b158      	cbz	r0, 8008700 <_dtoa_r+0xe0>
 80086e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ea:	2301      	movs	r3, #1
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 856b 	beq.w	80091cc <_dtoa_r+0xbac>
 80086f6:	4883      	ldr	r0, [pc, #524]	; (8008904 <_dtoa_r+0x2e4>)
 80086f8:	6018      	str	r0, [r3, #0]
 80086fa:	1e43      	subs	r3, r0, #1
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	e7df      	b.n	80086c0 <_dtoa_r+0xa0>
 8008700:	ec4b ab10 	vmov	d0, sl, fp
 8008704:	aa10      	add	r2, sp, #64	; 0x40
 8008706:	a911      	add	r1, sp, #68	; 0x44
 8008708:	4620      	mov	r0, r4
 800870a:	f001 fd13 	bl	800a134 <__d2b>
 800870e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008712:	ee08 0a10 	vmov	s16, r0
 8008716:	2d00      	cmp	r5, #0
 8008718:	f000 8084 	beq.w	8008824 <_dtoa_r+0x204>
 800871c:	ee19 3a90 	vmov	r3, s19
 8008720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008728:	4656      	mov	r6, sl
 800872a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800872e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008736:	4b74      	ldr	r3, [pc, #464]	; (8008908 <_dtoa_r+0x2e8>)
 8008738:	2200      	movs	r2, #0
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f7 fdc3 	bl	80002c8 <__aeabi_dsub>
 8008742:	a365      	add	r3, pc, #404	; (adr r3, 80088d8 <_dtoa_r+0x2b8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 ff76 	bl	8000638 <__aeabi_dmul>
 800874c:	a364      	add	r3, pc, #400	; (adr r3, 80088e0 <_dtoa_r+0x2c0>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 fdbb 	bl	80002cc <__adddf3>
 8008756:	4606      	mov	r6, r0
 8008758:	4628      	mov	r0, r5
 800875a:	460f      	mov	r7, r1
 800875c:	f7f7 ff02 	bl	8000564 <__aeabi_i2d>
 8008760:	a361      	add	r3, pc, #388	; (adr r3, 80088e8 <_dtoa_r+0x2c8>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 ff67 	bl	8000638 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f7 fdab 	bl	80002cc <__adddf3>
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	f7f8 fa0d 	bl	8000b98 <__aeabi_d2iz>
 800877e:	2200      	movs	r2, #0
 8008780:	9000      	str	r0, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f8 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800878c:	b150      	cbz	r0, 80087a4 <_dtoa_r+0x184>
 800878e:	9800      	ldr	r0, [sp, #0]
 8008790:	f7f7 fee8 	bl	8000564 <__aeabi_i2d>
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	f7f8 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800879c:	b910      	cbnz	r0, 80087a4 <_dtoa_r+0x184>
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	2b16      	cmp	r3, #22
 80087a8:	d85a      	bhi.n	8008860 <_dtoa_r+0x240>
 80087aa:	9a00      	ldr	r2, [sp, #0]
 80087ac:	4b57      	ldr	r3, [pc, #348]	; (800890c <_dtoa_r+0x2ec>)
 80087ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	ec51 0b19 	vmov	r0, r1, d9
 80087ba:	f7f8 f9af 	bl	8000b1c <__aeabi_dcmplt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d050      	beq.n	8008864 <_dtoa_r+0x244>
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	2300      	movs	r3, #0
 80087ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80087cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ce:	1b5d      	subs	r5, r3, r5
 80087d0:	1e6b      	subs	r3, r5, #1
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	bf45      	ittet	mi
 80087d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80087da:	9304      	strmi	r3, [sp, #16]
 80087dc:	2300      	movpl	r3, #0
 80087de:	2300      	movmi	r3, #0
 80087e0:	bf4c      	ite	mi
 80087e2:	9305      	strmi	r3, [sp, #20]
 80087e4:	9304      	strpl	r3, [sp, #16]
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db3d      	blt.n	8008868 <_dtoa_r+0x248>
 80087ec:	9b05      	ldr	r3, [sp, #20]
 80087ee:	9a00      	ldr	r2, [sp, #0]
 80087f0:	920a      	str	r2, [sp, #40]	; 0x28
 80087f2:	4413      	add	r3, r2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	f200 8089 	bhi.w	8008914 <_dtoa_r+0x2f4>
 8008802:	2b05      	cmp	r3, #5
 8008804:	bfc4      	itt	gt
 8008806:	3b04      	subgt	r3, #4
 8008808:	9306      	strgt	r3, [sp, #24]
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	f1a3 0302 	sub.w	r3, r3, #2
 8008810:	bfcc      	ite	gt
 8008812:	2500      	movgt	r5, #0
 8008814:	2501      	movle	r5, #1
 8008816:	2b03      	cmp	r3, #3
 8008818:	f200 8087 	bhi.w	800892a <_dtoa_r+0x30a>
 800881c:	e8df f003 	tbb	[pc, r3]
 8008820:	59383a2d 	.word	0x59383a2d
 8008824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008828:	441d      	add	r5, r3
 800882a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800882e:	2b20      	cmp	r3, #32
 8008830:	bfc1      	itttt	gt
 8008832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800883a:	fa0b f303 	lslgt.w	r3, fp, r3
 800883e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008842:	bfda      	itte	le
 8008844:	f1c3 0320 	rsble	r3, r3, #32
 8008848:	fa06 f003 	lslle.w	r0, r6, r3
 800884c:	4318      	orrgt	r0, r3
 800884e:	f7f7 fe79 	bl	8000544 <__aeabi_ui2d>
 8008852:	2301      	movs	r3, #1
 8008854:	4606      	mov	r6, r0
 8008856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800885a:	3d01      	subs	r5, #1
 800885c:	930e      	str	r3, [sp, #56]	; 0x38
 800885e:	e76a      	b.n	8008736 <_dtoa_r+0x116>
 8008860:	2301      	movs	r3, #1
 8008862:	e7b2      	b.n	80087ca <_dtoa_r+0x1aa>
 8008864:	900b      	str	r0, [sp, #44]	; 0x2c
 8008866:	e7b1      	b.n	80087cc <_dtoa_r+0x1ac>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	9a00      	ldr	r2, [sp, #0]
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	4253      	negs	r3, r2
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	2300      	movs	r3, #0
 8008876:	930a      	str	r3, [sp, #40]	; 0x28
 8008878:	e7bf      	b.n	80087fa <_dtoa_r+0x1da>
 800887a:	2300      	movs	r3, #0
 800887c:	9308      	str	r3, [sp, #32]
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc55      	bgt.n	8008930 <_dtoa_r+0x310>
 8008884:	2301      	movs	r3, #1
 8008886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800888a:	461a      	mov	r2, r3
 800888c:	9209      	str	r2, [sp, #36]	; 0x24
 800888e:	e00c      	b.n	80088aa <_dtoa_r+0x28a>
 8008890:	2301      	movs	r3, #1
 8008892:	e7f3      	b.n	800887c <_dtoa_r+0x25c>
 8008894:	2300      	movs	r3, #0
 8008896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008898:	9308      	str	r3, [sp, #32]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	4413      	add	r3, r2
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	3301      	adds	r3, #1
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	9303      	str	r3, [sp, #12]
 80088a6:	bfb8      	it	lt
 80088a8:	2301      	movlt	r3, #1
 80088aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088ac:	2200      	movs	r2, #0
 80088ae:	6042      	str	r2, [r0, #4]
 80088b0:	2204      	movs	r2, #4
 80088b2:	f102 0614 	add.w	r6, r2, #20
 80088b6:	429e      	cmp	r6, r3
 80088b8:	6841      	ldr	r1, [r0, #4]
 80088ba:	d93d      	bls.n	8008938 <_dtoa_r+0x318>
 80088bc:	4620      	mov	r0, r4
 80088be:	f001 f84b 	bl	8009958 <_Balloc>
 80088c2:	9001      	str	r0, [sp, #4]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d13b      	bne.n	8008940 <_dtoa_r+0x320>
 80088c8:	4b11      	ldr	r3, [pc, #68]	; (8008910 <_dtoa_r+0x2f0>)
 80088ca:	4602      	mov	r2, r0
 80088cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088d0:	e6c0      	b.n	8008654 <_dtoa_r+0x34>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e7df      	b.n	8008896 <_dtoa_r+0x276>
 80088d6:	bf00      	nop
 80088d8:	636f4361 	.word	0x636f4361
 80088dc:	3fd287a7 	.word	0x3fd287a7
 80088e0:	8b60c8b3 	.word	0x8b60c8b3
 80088e4:	3fc68a28 	.word	0x3fc68a28
 80088e8:	509f79fb 	.word	0x509f79fb
 80088ec:	3fd34413 	.word	0x3fd34413
 80088f0:	0800bc6e 	.word	0x0800bc6e
 80088f4:	0800bc85 	.word	0x0800bc85
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800bc6a 	.word	0x0800bc6a
 8008900:	0800bc61 	.word	0x0800bc61
 8008904:	0800beda 	.word	0x0800beda
 8008908:	3ff80000 	.word	0x3ff80000
 800890c:	0800bdf0 	.word	0x0800bdf0
 8008910:	0800bce0 	.word	0x0800bce0
 8008914:	2501      	movs	r5, #1
 8008916:	2300      	movs	r3, #0
 8008918:	9306      	str	r3, [sp, #24]
 800891a:	9508      	str	r5, [sp, #32]
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	2312      	movs	r3, #18
 8008928:	e7b0      	b.n	800888c <_dtoa_r+0x26c>
 800892a:	2301      	movs	r3, #1
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	e7f5      	b.n	800891c <_dtoa_r+0x2fc>
 8008930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008936:	e7b8      	b.n	80088aa <_dtoa_r+0x28a>
 8008938:	3101      	adds	r1, #1
 800893a:	6041      	str	r1, [r0, #4]
 800893c:	0052      	lsls	r2, r2, #1
 800893e:	e7b8      	b.n	80088b2 <_dtoa_r+0x292>
 8008940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008942:	9a01      	ldr	r2, [sp, #4]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	2b0e      	cmp	r3, #14
 800894a:	f200 809d 	bhi.w	8008a88 <_dtoa_r+0x468>
 800894e:	2d00      	cmp	r5, #0
 8008950:	f000 809a 	beq.w	8008a88 <_dtoa_r+0x468>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	dd32      	ble.n	80089c0 <_dtoa_r+0x3a0>
 800895a:	4ab7      	ldr	r2, [pc, #732]	; (8008c38 <_dtoa_r+0x618>)
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	05d8      	lsls	r0, r3, #23
 800896c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008970:	d516      	bpl.n	80089a0 <_dtoa_r+0x380>
 8008972:	4bb2      	ldr	r3, [pc, #712]	; (8008c3c <_dtoa_r+0x61c>)
 8008974:	ec51 0b19 	vmov	r0, r1, d9
 8008978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800897c:	f7f7 ff86 	bl	800088c <__aeabi_ddiv>
 8008980:	f007 070f 	and.w	r7, r7, #15
 8008984:	4682      	mov	sl, r0
 8008986:	468b      	mov	fp, r1
 8008988:	2503      	movs	r5, #3
 800898a:	4eac      	ldr	r6, [pc, #688]	; (8008c3c <_dtoa_r+0x61c>)
 800898c:	b957      	cbnz	r7, 80089a4 <_dtoa_r+0x384>
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 ff79 	bl	800088c <__aeabi_ddiv>
 800899a:	4682      	mov	sl, r0
 800899c:	468b      	mov	fp, r1
 800899e:	e028      	b.n	80089f2 <_dtoa_r+0x3d2>
 80089a0:	2502      	movs	r5, #2
 80089a2:	e7f2      	b.n	800898a <_dtoa_r+0x36a>
 80089a4:	07f9      	lsls	r1, r7, #31
 80089a6:	d508      	bpl.n	80089ba <_dtoa_r+0x39a>
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089b0:	f7f7 fe42 	bl	8000638 <__aeabi_dmul>
 80089b4:	3501      	adds	r5, #1
 80089b6:	4680      	mov	r8, r0
 80089b8:	4689      	mov	r9, r1
 80089ba:	107f      	asrs	r7, r7, #1
 80089bc:	3608      	adds	r6, #8
 80089be:	e7e5      	b.n	800898c <_dtoa_r+0x36c>
 80089c0:	f000 809b 	beq.w	8008afa <_dtoa_r+0x4da>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	4f9d      	ldr	r7, [pc, #628]	; (8008c3c <_dtoa_r+0x61c>)
 80089c8:	425e      	negs	r6, r3
 80089ca:	4b9b      	ldr	r3, [pc, #620]	; (8008c38 <_dtoa_r+0x618>)
 80089cc:	f006 020f 	and.w	r2, r6, #15
 80089d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	ec51 0b19 	vmov	r0, r1, d9
 80089dc:	f7f7 fe2c 	bl	8000638 <__aeabi_dmul>
 80089e0:	1136      	asrs	r6, r6, #4
 80089e2:	4682      	mov	sl, r0
 80089e4:	468b      	mov	fp, r1
 80089e6:	2300      	movs	r3, #0
 80089e8:	2502      	movs	r5, #2
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	d17a      	bne.n	8008ae4 <_dtoa_r+0x4c4>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1d3      	bne.n	800899a <_dtoa_r+0x37a>
 80089f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8082 	beq.w	8008afe <_dtoa_r+0x4de>
 80089fa:	4b91      	ldr	r3, [pc, #580]	; (8008c40 <_dtoa_r+0x620>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	4650      	mov	r0, sl
 8008a00:	4659      	mov	r1, fp
 8008a02:	f7f8 f88b 	bl	8000b1c <__aeabi_dcmplt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d079      	beq.n	8008afe <_dtoa_r+0x4de>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d076      	beq.n	8008afe <_dtoa_r+0x4de>
 8008a10:	9b02      	ldr	r3, [sp, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	dd36      	ble.n	8008a84 <_dtoa_r+0x464>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	1e5f      	subs	r7, r3, #1
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4b88      	ldr	r3, [pc, #544]	; (8008c44 <_dtoa_r+0x624>)
 8008a22:	f7f7 fe09 	bl	8000638 <__aeabi_dmul>
 8008a26:	9e02      	ldr	r6, [sp, #8]
 8008a28:	4682      	mov	sl, r0
 8008a2a:	468b      	mov	fp, r1
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fd98 	bl	8000564 <__aeabi_i2d>
 8008a34:	4652      	mov	r2, sl
 8008a36:	465b      	mov	r3, fp
 8008a38:	f7f7 fdfe 	bl	8000638 <__aeabi_dmul>
 8008a3c:	4b82      	ldr	r3, [pc, #520]	; (8008c48 <_dtoa_r+0x628>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7f7 fc44 	bl	80002cc <__adddf3>
 8008a44:	46d0      	mov	r8, sl
 8008a46:	46d9      	mov	r9, fp
 8008a48:	4682      	mov	sl, r0
 8008a4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d158      	bne.n	8008b04 <_dtoa_r+0x4e4>
 8008a52:	4b7e      	ldr	r3, [pc, #504]	; (8008c4c <_dtoa_r+0x62c>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	f7f7 fc35 	bl	80002c8 <__aeabi_dsub>
 8008a5e:	4652      	mov	r2, sl
 8008a60:	465b      	mov	r3, fp
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	f7f8 f877 	bl	8000b58 <__aeabi_dcmpgt>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f040 8295 	bne.w	8008f9a <_dtoa_r+0x97a>
 8008a70:	4652      	mov	r2, sl
 8008a72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f8 f84f 	bl	8000b1c <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f040 8289 	bne.w	8008f96 <_dtoa_r+0x976>
 8008a84:	ec5b ab19 	vmov	sl, fp, d9
 8008a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f2c0 8148 	blt.w	8008d20 <_dtoa_r+0x700>
 8008a90:	9a00      	ldr	r2, [sp, #0]
 8008a92:	2a0e      	cmp	r2, #14
 8008a94:	f300 8144 	bgt.w	8008d20 <_dtoa_r+0x700>
 8008a98:	4b67      	ldr	r3, [pc, #412]	; (8008c38 <_dtoa_r+0x618>)
 8008a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f280 80d5 	bge.w	8008c54 <_dtoa_r+0x634>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f300 80d1 	bgt.w	8008c54 <_dtoa_r+0x634>
 8008ab2:	f040 826f 	bne.w	8008f94 <_dtoa_r+0x974>
 8008ab6:	4b65      	ldr	r3, [pc, #404]	; (8008c4c <_dtoa_r+0x62c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f7 fdbb 	bl	8000638 <__aeabi_dmul>
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	f7f8 f83d 	bl	8000b44 <__aeabi_dcmpge>
 8008aca:	9e03      	ldr	r6, [sp, #12]
 8008acc:	4637      	mov	r7, r6
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f040 8245 	bne.w	8008f5e <_dtoa_r+0x93e>
 8008ad4:	9d01      	ldr	r5, [sp, #4]
 8008ad6:	2331      	movs	r3, #49	; 0x31
 8008ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8008adc:	9b00      	ldr	r3, [sp, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	e240      	b.n	8008f66 <_dtoa_r+0x946>
 8008ae4:	07f2      	lsls	r2, r6, #31
 8008ae6:	d505      	bpl.n	8008af4 <_dtoa_r+0x4d4>
 8008ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aec:	f7f7 fda4 	bl	8000638 <__aeabi_dmul>
 8008af0:	3501      	adds	r5, #1
 8008af2:	2301      	movs	r3, #1
 8008af4:	1076      	asrs	r6, r6, #1
 8008af6:	3708      	adds	r7, #8
 8008af8:	e777      	b.n	80089ea <_dtoa_r+0x3ca>
 8008afa:	2502      	movs	r5, #2
 8008afc:	e779      	b.n	80089f2 <_dtoa_r+0x3d2>
 8008afe:	9f00      	ldr	r7, [sp, #0]
 8008b00:	9e03      	ldr	r6, [sp, #12]
 8008b02:	e794      	b.n	8008a2e <_dtoa_r+0x40e>
 8008b04:	9901      	ldr	r1, [sp, #4]
 8008b06:	4b4c      	ldr	r3, [pc, #304]	; (8008c38 <_dtoa_r+0x618>)
 8008b08:	4431      	add	r1, r6
 8008b0a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b0c:	9908      	ldr	r1, [sp, #32]
 8008b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d043      	beq.n	8008ba2 <_dtoa_r+0x582>
 8008b1a:	494d      	ldr	r1, [pc, #308]	; (8008c50 <_dtoa_r+0x630>)
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f7 feb5 	bl	800088c <__aeabi_ddiv>
 8008b22:	4652      	mov	r2, sl
 8008b24:	465b      	mov	r3, fp
 8008b26:	f7f7 fbcf 	bl	80002c8 <__aeabi_dsub>
 8008b2a:	9d01      	ldr	r5, [sp, #4]
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	468b      	mov	fp, r1
 8008b30:	4649      	mov	r1, r9
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7f8 f830 	bl	8000b98 <__aeabi_d2iz>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	f7f7 fd13 	bl	8000564 <__aeabi_i2d>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fbbf 	bl	80002c8 <__aeabi_dsub>
 8008b4a:	3630      	adds	r6, #48	; 0x30
 8008b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	f7f7 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d163      	bne.n	8008c28 <_dtoa_r+0x608>
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	4936      	ldr	r1, [pc, #216]	; (8008c40 <_dtoa_r+0x620>)
 8008b66:	2000      	movs	r0, #0
 8008b68:	f7f7 fbae 	bl	80002c8 <__aeabi_dsub>
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	465b      	mov	r3, fp
 8008b70:	f7f7 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f040 80b5 	bne.w	8008ce4 <_dtoa_r+0x6c4>
 8008b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	d081      	beq.n	8008a84 <_dtoa_r+0x464>
 8008b80:	4b30      	ldr	r3, [pc, #192]	; (8008c44 <_dtoa_r+0x624>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	4650      	mov	r0, sl
 8008b86:	4659      	mov	r1, fp
 8008b88:	f7f7 fd56 	bl	8000638 <__aeabi_dmul>
 8008b8c:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <_dtoa_r+0x624>)
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	2200      	movs	r2, #0
 8008b98:	f7f7 fd4e 	bl	8000638 <__aeabi_dmul>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	e7c6      	b.n	8008b30 <_dtoa_r+0x510>
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	4659      	mov	r1, fp
 8008ba6:	f7f7 fd47 	bl	8000638 <__aeabi_dmul>
 8008baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bac:	9d01      	ldr	r5, [sp, #4]
 8008bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	468b      	mov	fp, r1
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	f7f7 ffee 	bl	8000b98 <__aeabi_d2iz>
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	f7f7 fcd1 	bl	8000564 <__aeabi_i2d>
 8008bc2:	3630      	adds	r6, #48	; 0x30
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	f7f7 fb7c 	bl	80002c8 <__aeabi_dsub>
 8008bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	4680      	mov	r8, r0
 8008bda:	4689      	mov	r9, r1
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	d124      	bne.n	8008c2c <_dtoa_r+0x60c>
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <_dtoa_r+0x630>)
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb70 	bl	80002cc <__adddf3>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 ffb0 	bl	8000b58 <__aeabi_dcmpgt>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d173      	bne.n	8008ce4 <_dtoa_r+0x6c4>
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4913      	ldr	r1, [pc, #76]	; (8008c50 <_dtoa_r+0x630>)
 8008c02:	2000      	movs	r0, #0
 8008c04:	f7f7 fb60 	bl	80002c8 <__aeabi_dsub>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4649      	mov	r1, r9
 8008c10:	f7f7 ff84 	bl	8000b1c <__aeabi_dcmplt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f43f af35 	beq.w	8008a84 <_dtoa_r+0x464>
 8008c1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c1c:	1e6b      	subs	r3, r5, #1
 8008c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c24:	2b30      	cmp	r3, #48	; 0x30
 8008c26:	d0f8      	beq.n	8008c1a <_dtoa_r+0x5fa>
 8008c28:	9700      	str	r7, [sp, #0]
 8008c2a:	e049      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <_dtoa_r+0x624>)
 8008c2e:	f7f7 fd03 	bl	8000638 <__aeabi_dmul>
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	e7bd      	b.n	8008bb4 <_dtoa_r+0x594>
 8008c38:	0800bdf0 	.word	0x0800bdf0
 8008c3c:	0800bdc8 	.word	0x0800bdc8
 8008c40:	3ff00000 	.word	0x3ff00000
 8008c44:	40240000 	.word	0x40240000
 8008c48:	401c0000 	.word	0x401c0000
 8008c4c:	40140000 	.word	0x40140000
 8008c50:	3fe00000 	.word	0x3fe00000
 8008c54:	9d01      	ldr	r5, [sp, #4]
 8008c56:	4656      	mov	r6, sl
 8008c58:	465f      	mov	r7, fp
 8008c5a:	4642      	mov	r2, r8
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 fe13 	bl	800088c <__aeabi_ddiv>
 8008c66:	f7f7 ff97 	bl	8000b98 <__aeabi_d2iz>
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	f7f7 fc7a 	bl	8000564 <__aeabi_i2d>
 8008c70:	4642      	mov	r2, r8
 8008c72:	464b      	mov	r3, r9
 8008c74:	f7f7 fce0 	bl	8000638 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c84:	f7f7 fb20 	bl	80002c8 <__aeabi_dsub>
 8008c88:	f805 6b01 	strb.w	r6, [r5], #1
 8008c8c:	9e01      	ldr	r6, [sp, #4]
 8008c8e:	9f03      	ldr	r7, [sp, #12]
 8008c90:	1bae      	subs	r6, r5, r6
 8008c92:	42b7      	cmp	r7, r6
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	d135      	bne.n	8008d06 <_dtoa_r+0x6e6>
 8008c9a:	f7f7 fb17 	bl	80002cc <__adddf3>
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	f7f7 ff57 	bl	8000b58 <__aeabi_dcmpgt>
 8008caa:	b9d0      	cbnz	r0, 8008ce2 <_dtoa_r+0x6c2>
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 ff28 	bl	8000b08 <__aeabi_dcmpeq>
 8008cb8:	b110      	cbz	r0, 8008cc0 <_dtoa_r+0x6a0>
 8008cba:	f01a 0f01 	tst.w	sl, #1
 8008cbe:	d110      	bne.n	8008ce2 <_dtoa_r+0x6c2>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	ee18 1a10 	vmov	r1, s16
 8008cc6:	f000 fe87 	bl	80099d8 <_Bfree>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9800      	ldr	r0, [sp, #0]
 8008cce:	702b      	strb	r3, [r5, #0]
 8008cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	6018      	str	r0, [r3, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f43f acf1 	beq.w	80086c0 <_dtoa_r+0xa0>
 8008cde:	601d      	str	r5, [r3, #0]
 8008ce0:	e4ee      	b.n	80086c0 <_dtoa_r+0xa0>
 8008ce2:	9f00      	ldr	r7, [sp, #0]
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cec:	2a39      	cmp	r2, #57	; 0x39
 8008cee:	d106      	bne.n	8008cfe <_dtoa_r+0x6de>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d1f7      	bne.n	8008ce6 <_dtoa_r+0x6c6>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	2230      	movs	r2, #48	; 0x30
 8008cfa:	3701      	adds	r7, #1
 8008cfc:	700a      	strb	r2, [r1, #0]
 8008cfe:	781a      	ldrb	r2, [r3, #0]
 8008d00:	3201      	adds	r2, #1
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e790      	b.n	8008c28 <_dtoa_r+0x608>
 8008d06:	4ba6      	ldr	r3, [pc, #664]	; (8008fa0 <_dtoa_r+0x980>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f7f7 fc95 	bl	8000638 <__aeabi_dmul>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2300      	movs	r3, #0
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 fef7 	bl	8000b08 <__aeabi_dcmpeq>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d09d      	beq.n	8008c5a <_dtoa_r+0x63a>
 8008d1e:	e7cf      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	f000 80d7 	beq.w	8008ed6 <_dtoa_r+0x8b6>
 8008d28:	9a06      	ldr	r2, [sp, #24]
 8008d2a:	2a01      	cmp	r2, #1
 8008d2c:	f300 80ba 	bgt.w	8008ea4 <_dtoa_r+0x884>
 8008d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	f000 80b2 	beq.w	8008e9c <_dtoa_r+0x87c>
 8008d38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d3c:	9e07      	ldr	r6, [sp, #28]
 8008d3e:	9d04      	ldr	r5, [sp, #16]
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	441a      	add	r2, r3
 8008d44:	9204      	str	r2, [sp, #16]
 8008d46:	9a05      	ldr	r2, [sp, #20]
 8008d48:	2101      	movs	r1, #1
 8008d4a:	441a      	add	r2, r3
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	9205      	str	r2, [sp, #20]
 8008d50:	f000 ff44 	bl	8009bdc <__i2b>
 8008d54:	4607      	mov	r7, r0
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	dd0c      	ble.n	8008d74 <_dtoa_r+0x754>
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd09      	ble.n	8008d74 <_dtoa_r+0x754>
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	bfa8      	it	ge
 8008d66:	462b      	movge	r3, r5
 8008d68:	1ad2      	subs	r2, r2, r3
 8008d6a:	9204      	str	r2, [sp, #16]
 8008d6c:	9a05      	ldr	r2, [sp, #20]
 8008d6e:	1aed      	subs	r5, r5, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	b31b      	cbz	r3, 8008dc0 <_dtoa_r+0x7a0>
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80af 	beq.w	8008ede <_dtoa_r+0x8be>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	dd13      	ble.n	8008dac <_dtoa_r+0x78c>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4632      	mov	r2, r6
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 ffe7 	bl	8009d5c <__pow5mult>
 8008d8e:	ee18 2a10 	vmov	r2, s16
 8008d92:	4601      	mov	r1, r0
 8008d94:	4607      	mov	r7, r0
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 ff36 	bl	8009c08 <__multiply>
 8008d9c:	ee18 1a10 	vmov	r1, s16
 8008da0:	4680      	mov	r8, r0
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 fe18 	bl	80099d8 <_Bfree>
 8008da8:	ee08 8a10 	vmov	s16, r8
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	1b9a      	subs	r2, r3, r6
 8008db0:	d006      	beq.n	8008dc0 <_dtoa_r+0x7a0>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 ffd0 	bl	8009d5c <__pow5mult>
 8008dbc:	ee08 0a10 	vmov	s16, r0
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 ff0a 	bl	8009bdc <__i2b>
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	f340 8088 	ble.w	8008ee2 <_dtoa_r+0x8c2>
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 ffc0 	bl	8009d5c <__pow5mult>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	4606      	mov	r6, r0
 8008de2:	f340 8081 	ble.w	8008ee8 <_dtoa_r+0x8c8>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	6933      	ldr	r3, [r6, #16]
 8008dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008df0:	6918      	ldr	r0, [r3, #16]
 8008df2:	f000 fea3 	bl	8009b3c <__hi0bits>
 8008df6:	f1c0 0020 	rsb	r0, r0, #32
 8008dfa:	9b05      	ldr	r3, [sp, #20]
 8008dfc:	4418      	add	r0, r3
 8008dfe:	f010 001f 	ands.w	r0, r0, #31
 8008e02:	f000 8092 	beq.w	8008f2a <_dtoa_r+0x90a>
 8008e06:	f1c0 0320 	rsb	r3, r0, #32
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	f340 808a 	ble.w	8008f24 <_dtoa_r+0x904>
 8008e10:	f1c0 001c 	rsb	r0, r0, #28
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	4403      	add	r3, r0
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	9b05      	ldr	r3, [sp, #20]
 8008e1c:	4403      	add	r3, r0
 8008e1e:	4405      	add	r5, r0
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd07      	ble.n	8008e38 <_dtoa_r+0x818>
 8008e28:	ee18 1a10 	vmov	r1, s16
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 ffee 	bl	8009e10 <__lshift>
 8008e34:	ee08 0a10 	vmov	s16, r0
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd05      	ble.n	8008e4a <_dtoa_r+0x82a>
 8008e3e:	4631      	mov	r1, r6
 8008e40:	461a      	mov	r2, r3
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 ffe4 	bl	8009e10 <__lshift>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d06e      	beq.n	8008f2e <_dtoa_r+0x90e>
 8008e50:	ee18 0a10 	vmov	r0, s16
 8008e54:	4631      	mov	r1, r6
 8008e56:	f001 f84b 	bl	8009ef0 <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	da67      	bge.n	8008f2e <_dtoa_r+0x90e>
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	ee18 1a10 	vmov	r1, s16
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	220a      	movs	r2, #10
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fdd5 	bl	8009a1c <__multadd>
 8008e72:	9b08      	ldr	r3, [sp, #32]
 8008e74:	ee08 0a10 	vmov	s16, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 81b1 	beq.w	80091e0 <_dtoa_r+0xbc0>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4639      	mov	r1, r7
 8008e82:	220a      	movs	r2, #10
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 fdc9 	bl	8009a1c <__multadd>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	f300 808e 	bgt.w	8008fb0 <_dtoa_r+0x990>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	dc51      	bgt.n	8008f3e <_dtoa_r+0x91e>
 8008e9a:	e089      	b.n	8008fb0 <_dtoa_r+0x990>
 8008e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ea2:	e74b      	b.n	8008d3c <_dtoa_r+0x71c>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	1e5e      	subs	r6, r3, #1
 8008ea8:	9b07      	ldr	r3, [sp, #28]
 8008eaa:	42b3      	cmp	r3, r6
 8008eac:	bfbf      	itttt	lt
 8008eae:	9b07      	ldrlt	r3, [sp, #28]
 8008eb0:	9607      	strlt	r6, [sp, #28]
 8008eb2:	1af2      	sublt	r2, r6, r3
 8008eb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008eb6:	bfb6      	itet	lt
 8008eb8:	189b      	addlt	r3, r3, r2
 8008eba:	1b9e      	subge	r6, r3, r6
 8008ebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	bfb8      	it	lt
 8008ec2:	2600      	movlt	r6, #0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfb7      	itett	lt
 8008ec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ed0:	1a9d      	sublt	r5, r3, r2
 8008ed2:	2300      	movlt	r3, #0
 8008ed4:	e734      	b.n	8008d40 <_dtoa_r+0x720>
 8008ed6:	9e07      	ldr	r6, [sp, #28]
 8008ed8:	9d04      	ldr	r5, [sp, #16]
 8008eda:	9f08      	ldr	r7, [sp, #32]
 8008edc:	e73b      	b.n	8008d56 <_dtoa_r+0x736>
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	e767      	b.n	8008db2 <_dtoa_r+0x792>
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	dc18      	bgt.n	8008f1a <_dtoa_r+0x8fa>
 8008ee8:	f1ba 0f00 	cmp.w	sl, #0
 8008eec:	d115      	bne.n	8008f1a <_dtoa_r+0x8fa>
 8008eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ef2:	b993      	cbnz	r3, 8008f1a <_dtoa_r+0x8fa>
 8008ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ef8:	0d1b      	lsrs	r3, r3, #20
 8008efa:	051b      	lsls	r3, r3, #20
 8008efc:	b183      	cbz	r3, 8008f20 <_dtoa_r+0x900>
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	3301      	adds	r3, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9b05      	ldr	r3, [sp, #20]
 8008f06:	3301      	adds	r3, #1
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	f04f 0801 	mov.w	r8, #1
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f af6a 	bne.w	8008dea <_dtoa_r+0x7ca>
 8008f16:	2001      	movs	r0, #1
 8008f18:	e76f      	b.n	8008dfa <_dtoa_r+0x7da>
 8008f1a:	f04f 0800 	mov.w	r8, #0
 8008f1e:	e7f6      	b.n	8008f0e <_dtoa_r+0x8ee>
 8008f20:	4698      	mov	r8, r3
 8008f22:	e7f4      	b.n	8008f0e <_dtoa_r+0x8ee>
 8008f24:	f43f af7d 	beq.w	8008e22 <_dtoa_r+0x802>
 8008f28:	4618      	mov	r0, r3
 8008f2a:	301c      	adds	r0, #28
 8008f2c:	e772      	b.n	8008e14 <_dtoa_r+0x7f4>
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc37      	bgt.n	8008fa4 <_dtoa_r+0x984>
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	dd34      	ble.n	8008fa4 <_dtoa_r+0x984>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	9302      	str	r3, [sp, #8]
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	b96b      	cbnz	r3, 8008f5e <_dtoa_r+0x93e>
 8008f42:	4631      	mov	r1, r6
 8008f44:	2205      	movs	r2, #5
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fd68 	bl	8009a1c <__multadd>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4606      	mov	r6, r0
 8008f50:	ee18 0a10 	vmov	r0, s16
 8008f54:	f000 ffcc 	bl	8009ef0 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f73f adbb 	bgt.w	8008ad4 <_dtoa_r+0x4b4>
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	9d01      	ldr	r5, [sp, #4]
 8008f62:	43db      	mvns	r3, r3
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fd33 	bl	80099d8 <_Bfree>
 8008f72:	2f00      	cmp	r7, #0
 8008f74:	f43f aea4 	beq.w	8008cc0 <_dtoa_r+0x6a0>
 8008f78:	f1b8 0f00 	cmp.w	r8, #0
 8008f7c:	d005      	beq.n	8008f8a <_dtoa_r+0x96a>
 8008f7e:	45b8      	cmp	r8, r7
 8008f80:	d003      	beq.n	8008f8a <_dtoa_r+0x96a>
 8008f82:	4641      	mov	r1, r8
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 fd27 	bl	80099d8 <_Bfree>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fd23 	bl	80099d8 <_Bfree>
 8008f92:	e695      	b.n	8008cc0 <_dtoa_r+0x6a0>
 8008f94:	2600      	movs	r6, #0
 8008f96:	4637      	mov	r7, r6
 8008f98:	e7e1      	b.n	8008f5e <_dtoa_r+0x93e>
 8008f9a:	9700      	str	r7, [sp, #0]
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	e599      	b.n	8008ad4 <_dtoa_r+0x4b4>
 8008fa0:	40240000 	.word	0x40240000
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80ca 	beq.w	8009140 <_dtoa_r+0xb20>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	dd05      	ble.n	8008fc0 <_dtoa_r+0x9a0>
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 ff29 	bl	8009e10 <__lshift>
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	f1b8 0f00 	cmp.w	r8, #0
 8008fc4:	d05b      	beq.n	800907e <_dtoa_r+0xa5e>
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fcc5 	bl	8009958 <_Balloc>
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b928      	cbnz	r0, 8008fde <_dtoa_r+0x9be>
 8008fd2:	4b87      	ldr	r3, [pc, #540]	; (80091f0 <_dtoa_r+0xbd0>)
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008fda:	f7ff bb3b 	b.w	8008654 <_dtoa_r+0x34>
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	3202      	adds	r2, #2
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	f107 010c 	add.w	r1, r7, #12
 8008fe8:	300c      	adds	r0, #12
 8008fea:	f000 fca7 	bl	800993c <memcpy>
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 ff0c 	bl	8009e10 <__lshift>
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	f103 0901 	add.w	r9, r3, #1
 8008ffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009002:	4413      	add	r3, r2
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	f00a 0301 	and.w	r3, sl, #1
 800900a:	46b8      	mov	r8, r7
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	4607      	mov	r7, r0
 8009010:	4631      	mov	r1, r6
 8009012:	ee18 0a10 	vmov	r0, s16
 8009016:	f7ff fa75 	bl	8008504 <quorem>
 800901a:	4641      	mov	r1, r8
 800901c:	9002      	str	r0, [sp, #8]
 800901e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009022:	ee18 0a10 	vmov	r0, s16
 8009026:	f000 ff63 	bl	8009ef0 <__mcmp>
 800902a:	463a      	mov	r2, r7
 800902c:	9003      	str	r0, [sp, #12]
 800902e:	4631      	mov	r1, r6
 8009030:	4620      	mov	r0, r4
 8009032:	f000 ff79 	bl	8009f28 <__mdiff>
 8009036:	68c2      	ldr	r2, [r0, #12]
 8009038:	f109 3bff 	add.w	fp, r9, #4294967295
 800903c:	4605      	mov	r5, r0
 800903e:	bb02      	cbnz	r2, 8009082 <_dtoa_r+0xa62>
 8009040:	4601      	mov	r1, r0
 8009042:	ee18 0a10 	vmov	r0, s16
 8009046:	f000 ff53 	bl	8009ef0 <__mcmp>
 800904a:	4602      	mov	r2, r0
 800904c:	4629      	mov	r1, r5
 800904e:	4620      	mov	r0, r4
 8009050:	9207      	str	r2, [sp, #28]
 8009052:	f000 fcc1 	bl	80099d8 <_Bfree>
 8009056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800905a:	ea43 0102 	orr.w	r1, r3, r2
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	430b      	orrs	r3, r1
 8009062:	464d      	mov	r5, r9
 8009064:	d10f      	bne.n	8009086 <_dtoa_r+0xa66>
 8009066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800906a:	d02a      	beq.n	80090c2 <_dtoa_r+0xaa2>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd02      	ble.n	8009078 <_dtoa_r+0xa58>
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009078:	f88b a000 	strb.w	sl, [fp]
 800907c:	e775      	b.n	8008f6a <_dtoa_r+0x94a>
 800907e:	4638      	mov	r0, r7
 8009080:	e7ba      	b.n	8008ff8 <_dtoa_r+0x9d8>
 8009082:	2201      	movs	r2, #1
 8009084:	e7e2      	b.n	800904c <_dtoa_r+0xa2c>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	db04      	blt.n	8009096 <_dtoa_r+0xa76>
 800908c:	9906      	ldr	r1, [sp, #24]
 800908e:	430b      	orrs	r3, r1
 8009090:	9904      	ldr	r1, [sp, #16]
 8009092:	430b      	orrs	r3, r1
 8009094:	d122      	bne.n	80090dc <_dtoa_r+0xabc>
 8009096:	2a00      	cmp	r2, #0
 8009098:	ddee      	ble.n	8009078 <_dtoa_r+0xa58>
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	2201      	movs	r2, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 feb5 	bl	8009e10 <__lshift>
 80090a6:	4631      	mov	r1, r6
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	f000 ff20 	bl	8009ef0 <__mcmp>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	dc03      	bgt.n	80090bc <_dtoa_r+0xa9c>
 80090b4:	d1e0      	bne.n	8009078 <_dtoa_r+0xa58>
 80090b6:	f01a 0f01 	tst.w	sl, #1
 80090ba:	d0dd      	beq.n	8009078 <_dtoa_r+0xa58>
 80090bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090c0:	d1d7      	bne.n	8009072 <_dtoa_r+0xa52>
 80090c2:	2339      	movs	r3, #57	; 0x39
 80090c4:	f88b 3000 	strb.w	r3, [fp]
 80090c8:	462b      	mov	r3, r5
 80090ca:	461d      	mov	r5, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090d2:	2a39      	cmp	r2, #57	; 0x39
 80090d4:	d071      	beq.n	80091ba <_dtoa_r+0xb9a>
 80090d6:	3201      	adds	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e746      	b.n	8008f6a <_dtoa_r+0x94a>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	dd07      	ble.n	80090f0 <_dtoa_r+0xad0>
 80090e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090e4:	d0ed      	beq.n	80090c2 <_dtoa_r+0xaa2>
 80090e6:	f10a 0301 	add.w	r3, sl, #1
 80090ea:	f88b 3000 	strb.w	r3, [fp]
 80090ee:	e73c      	b.n	8008f6a <_dtoa_r+0x94a>
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80090f6:	4599      	cmp	r9, r3
 80090f8:	d047      	beq.n	800918a <_dtoa_r+0xb6a>
 80090fa:	ee18 1a10 	vmov	r1, s16
 80090fe:	2300      	movs	r3, #0
 8009100:	220a      	movs	r2, #10
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fc8a 	bl	8009a1c <__multadd>
 8009108:	45b8      	cmp	r8, r7
 800910a:	ee08 0a10 	vmov	s16, r0
 800910e:	f04f 0300 	mov.w	r3, #0
 8009112:	f04f 020a 	mov.w	r2, #10
 8009116:	4641      	mov	r1, r8
 8009118:	4620      	mov	r0, r4
 800911a:	d106      	bne.n	800912a <_dtoa_r+0xb0a>
 800911c:	f000 fc7e 	bl	8009a1c <__multadd>
 8009120:	4680      	mov	r8, r0
 8009122:	4607      	mov	r7, r0
 8009124:	f109 0901 	add.w	r9, r9, #1
 8009128:	e772      	b.n	8009010 <_dtoa_r+0x9f0>
 800912a:	f000 fc77 	bl	8009a1c <__multadd>
 800912e:	4639      	mov	r1, r7
 8009130:	4680      	mov	r8, r0
 8009132:	2300      	movs	r3, #0
 8009134:	220a      	movs	r2, #10
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fc70 	bl	8009a1c <__multadd>
 800913c:	4607      	mov	r7, r0
 800913e:	e7f1      	b.n	8009124 <_dtoa_r+0xb04>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	9d01      	ldr	r5, [sp, #4]
 8009146:	ee18 0a10 	vmov	r0, s16
 800914a:	4631      	mov	r1, r6
 800914c:	f7ff f9da 	bl	8008504 <quorem>
 8009150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	f805 ab01 	strb.w	sl, [r5], #1
 800915a:	1aea      	subs	r2, r5, r3
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	4293      	cmp	r3, r2
 8009160:	dd09      	ble.n	8009176 <_dtoa_r+0xb56>
 8009162:	ee18 1a10 	vmov	r1, s16
 8009166:	2300      	movs	r3, #0
 8009168:	220a      	movs	r2, #10
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fc56 	bl	8009a1c <__multadd>
 8009170:	ee08 0a10 	vmov	s16, r0
 8009174:	e7e7      	b.n	8009146 <_dtoa_r+0xb26>
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfc8      	it	gt
 800917c:	461d      	movgt	r5, r3
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	bfd8      	it	le
 8009182:	2501      	movle	r5, #1
 8009184:	441d      	add	r5, r3
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	2201      	movs	r2, #1
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fe3d 	bl	8009e10 <__lshift>
 8009196:	4631      	mov	r1, r6
 8009198:	ee08 0a10 	vmov	s16, r0
 800919c:	f000 fea8 	bl	8009ef0 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc91      	bgt.n	80090c8 <_dtoa_r+0xaa8>
 80091a4:	d102      	bne.n	80091ac <_dtoa_r+0xb8c>
 80091a6:	f01a 0f01 	tst.w	sl, #1
 80091aa:	d18d      	bne.n	80090c8 <_dtoa_r+0xaa8>
 80091ac:	462b      	mov	r3, r5
 80091ae:	461d      	mov	r5, r3
 80091b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091b4:	2a30      	cmp	r2, #48	; 0x30
 80091b6:	d0fa      	beq.n	80091ae <_dtoa_r+0xb8e>
 80091b8:	e6d7      	b.n	8008f6a <_dtoa_r+0x94a>
 80091ba:	9a01      	ldr	r2, [sp, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d184      	bne.n	80090ca <_dtoa_r+0xaaa>
 80091c0:	9b00      	ldr	r3, [sp, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2331      	movs	r3, #49	; 0x31
 80091c8:	7013      	strb	r3, [r2, #0]
 80091ca:	e6ce      	b.n	8008f6a <_dtoa_r+0x94a>
 80091cc:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <_dtoa_r+0xbd4>)
 80091ce:	f7ff ba95 	b.w	80086fc <_dtoa_r+0xdc>
 80091d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f47f aa6e 	bne.w	80086b6 <_dtoa_r+0x96>
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <_dtoa_r+0xbd8>)
 80091dc:	f7ff ba8e 	b.w	80086fc <_dtoa_r+0xdc>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dcae      	bgt.n	8009144 <_dtoa_r+0xb24>
 80091e6:	9b06      	ldr	r3, [sp, #24]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	f73f aea8 	bgt.w	8008f3e <_dtoa_r+0x91e>
 80091ee:	e7a9      	b.n	8009144 <_dtoa_r+0xb24>
 80091f0:	0800bce0 	.word	0x0800bce0
 80091f4:	0800bed9 	.word	0x0800bed9
 80091f8:	0800bc61 	.word	0x0800bc61

080091fc <rshift>:
 80091fc:	6903      	ldr	r3, [r0, #16]
 80091fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009206:	ea4f 1261 	mov.w	r2, r1, asr #5
 800920a:	f100 0414 	add.w	r4, r0, #20
 800920e:	dd45      	ble.n	800929c <rshift+0xa0>
 8009210:	f011 011f 	ands.w	r1, r1, #31
 8009214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800921c:	d10c      	bne.n	8009238 <rshift+0x3c>
 800921e:	f100 0710 	add.w	r7, r0, #16
 8009222:	4629      	mov	r1, r5
 8009224:	42b1      	cmp	r1, r6
 8009226:	d334      	bcc.n	8009292 <rshift+0x96>
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	1eea      	subs	r2, r5, #3
 800922e:	4296      	cmp	r6, r2
 8009230:	bf38      	it	cc
 8009232:	2300      	movcc	r3, #0
 8009234:	4423      	add	r3, r4
 8009236:	e015      	b.n	8009264 <rshift+0x68>
 8009238:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800923c:	f1c1 0820 	rsb	r8, r1, #32
 8009240:	40cf      	lsrs	r7, r1
 8009242:	f105 0e04 	add.w	lr, r5, #4
 8009246:	46a1      	mov	r9, r4
 8009248:	4576      	cmp	r6, lr
 800924a:	46f4      	mov	ip, lr
 800924c:	d815      	bhi.n	800927a <rshift+0x7e>
 800924e:	1a9a      	subs	r2, r3, r2
 8009250:	0092      	lsls	r2, r2, #2
 8009252:	3a04      	subs	r2, #4
 8009254:	3501      	adds	r5, #1
 8009256:	42ae      	cmp	r6, r5
 8009258:	bf38      	it	cc
 800925a:	2200      	movcc	r2, #0
 800925c:	18a3      	adds	r3, r4, r2
 800925e:	50a7      	str	r7, [r4, r2]
 8009260:	b107      	cbz	r7, 8009264 <rshift+0x68>
 8009262:	3304      	adds	r3, #4
 8009264:	1b1a      	subs	r2, r3, r4
 8009266:	42a3      	cmp	r3, r4
 8009268:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800926c:	bf08      	it	eq
 800926e:	2300      	moveq	r3, #0
 8009270:	6102      	str	r2, [r0, #16]
 8009272:	bf08      	it	eq
 8009274:	6143      	streq	r3, [r0, #20]
 8009276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927a:	f8dc c000 	ldr.w	ip, [ip]
 800927e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009282:	ea4c 0707 	orr.w	r7, ip, r7
 8009286:	f849 7b04 	str.w	r7, [r9], #4
 800928a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800928e:	40cf      	lsrs	r7, r1
 8009290:	e7da      	b.n	8009248 <rshift+0x4c>
 8009292:	f851 cb04 	ldr.w	ip, [r1], #4
 8009296:	f847 cf04 	str.w	ip, [r7, #4]!
 800929a:	e7c3      	b.n	8009224 <rshift+0x28>
 800929c:	4623      	mov	r3, r4
 800929e:	e7e1      	b.n	8009264 <rshift+0x68>

080092a0 <__hexdig_fun>:
 80092a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092a4:	2b09      	cmp	r3, #9
 80092a6:	d802      	bhi.n	80092ae <__hexdig_fun+0xe>
 80092a8:	3820      	subs	r0, #32
 80092aa:	b2c0      	uxtb	r0, r0
 80092ac:	4770      	bx	lr
 80092ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d801      	bhi.n	80092ba <__hexdig_fun+0x1a>
 80092b6:	3847      	subs	r0, #71	; 0x47
 80092b8:	e7f7      	b.n	80092aa <__hexdig_fun+0xa>
 80092ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d801      	bhi.n	80092c6 <__hexdig_fun+0x26>
 80092c2:	3827      	subs	r0, #39	; 0x27
 80092c4:	e7f1      	b.n	80092aa <__hexdig_fun+0xa>
 80092c6:	2000      	movs	r0, #0
 80092c8:	4770      	bx	lr
	...

080092cc <__gethex>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	ed2d 8b02 	vpush	{d8}
 80092d4:	b089      	sub	sp, #36	; 0x24
 80092d6:	ee08 0a10 	vmov	s16, r0
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	4bb4      	ldr	r3, [pc, #720]	; (80095b0 <__gethex+0x2e4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	4618      	mov	r0, r3
 80092e4:	468b      	mov	fp, r1
 80092e6:	4690      	mov	r8, r2
 80092e8:	f7f6 ff92 	bl	8000210 <strlen>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	f8db 2000 	ldr.w	r2, [fp]
 80092f2:	4403      	add	r3, r0
 80092f4:	4682      	mov	sl, r0
 80092f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	1c93      	adds	r3, r2, #2
 80092fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009302:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009306:	32fe      	adds	r2, #254	; 0xfe
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	461f      	mov	r7, r3
 800930c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	2830      	cmp	r0, #48	; 0x30
 8009314:	d0f8      	beq.n	8009308 <__gethex+0x3c>
 8009316:	f7ff ffc3 	bl	80092a0 <__hexdig_fun>
 800931a:	4604      	mov	r4, r0
 800931c:	2800      	cmp	r0, #0
 800931e:	d13a      	bne.n	8009396 <__gethex+0xca>
 8009320:	9901      	ldr	r1, [sp, #4]
 8009322:	4652      	mov	r2, sl
 8009324:	4638      	mov	r0, r7
 8009326:	f7fe fa08 	bl	800773a <strncmp>
 800932a:	4605      	mov	r5, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d168      	bne.n	8009402 <__gethex+0x136>
 8009330:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009334:	eb07 060a 	add.w	r6, r7, sl
 8009338:	f7ff ffb2 	bl	80092a0 <__hexdig_fun>
 800933c:	2800      	cmp	r0, #0
 800933e:	d062      	beq.n	8009406 <__gethex+0x13a>
 8009340:	4633      	mov	r3, r6
 8009342:	7818      	ldrb	r0, [r3, #0]
 8009344:	2830      	cmp	r0, #48	; 0x30
 8009346:	461f      	mov	r7, r3
 8009348:	f103 0301 	add.w	r3, r3, #1
 800934c:	d0f9      	beq.n	8009342 <__gethex+0x76>
 800934e:	f7ff ffa7 	bl	80092a0 <__hexdig_fun>
 8009352:	2301      	movs	r3, #1
 8009354:	fab0 f480 	clz	r4, r0
 8009358:	0964      	lsrs	r4, r4, #5
 800935a:	4635      	mov	r5, r6
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	463a      	mov	r2, r7
 8009360:	4616      	mov	r6, r2
 8009362:	3201      	adds	r2, #1
 8009364:	7830      	ldrb	r0, [r6, #0]
 8009366:	f7ff ff9b 	bl	80092a0 <__hexdig_fun>
 800936a:	2800      	cmp	r0, #0
 800936c:	d1f8      	bne.n	8009360 <__gethex+0x94>
 800936e:	9901      	ldr	r1, [sp, #4]
 8009370:	4652      	mov	r2, sl
 8009372:	4630      	mov	r0, r6
 8009374:	f7fe f9e1 	bl	800773a <strncmp>
 8009378:	b980      	cbnz	r0, 800939c <__gethex+0xd0>
 800937a:	b94d      	cbnz	r5, 8009390 <__gethex+0xc4>
 800937c:	eb06 050a 	add.w	r5, r6, sl
 8009380:	462a      	mov	r2, r5
 8009382:	4616      	mov	r6, r2
 8009384:	3201      	adds	r2, #1
 8009386:	7830      	ldrb	r0, [r6, #0]
 8009388:	f7ff ff8a 	bl	80092a0 <__hexdig_fun>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1f8      	bne.n	8009382 <__gethex+0xb6>
 8009390:	1bad      	subs	r5, r5, r6
 8009392:	00ad      	lsls	r5, r5, #2
 8009394:	e004      	b.n	80093a0 <__gethex+0xd4>
 8009396:	2400      	movs	r4, #0
 8009398:	4625      	mov	r5, r4
 800939a:	e7e0      	b.n	800935e <__gethex+0x92>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d1f7      	bne.n	8009390 <__gethex+0xc4>
 80093a0:	7833      	ldrb	r3, [r6, #0]
 80093a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093a6:	2b50      	cmp	r3, #80	; 0x50
 80093a8:	d13b      	bne.n	8009422 <__gethex+0x156>
 80093aa:	7873      	ldrb	r3, [r6, #1]
 80093ac:	2b2b      	cmp	r3, #43	; 0x2b
 80093ae:	d02c      	beq.n	800940a <__gethex+0x13e>
 80093b0:	2b2d      	cmp	r3, #45	; 0x2d
 80093b2:	d02e      	beq.n	8009412 <__gethex+0x146>
 80093b4:	1c71      	adds	r1, r6, #1
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	7808      	ldrb	r0, [r1, #0]
 80093bc:	f7ff ff70 	bl	80092a0 <__hexdig_fun>
 80093c0:	1e43      	subs	r3, r0, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b18      	cmp	r3, #24
 80093c6:	d82c      	bhi.n	8009422 <__gethex+0x156>
 80093c8:	f1a0 0210 	sub.w	r2, r0, #16
 80093cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093d0:	f7ff ff66 	bl	80092a0 <__hexdig_fun>
 80093d4:	1e43      	subs	r3, r0, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b18      	cmp	r3, #24
 80093da:	d91d      	bls.n	8009418 <__gethex+0x14c>
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	d000      	beq.n	80093e4 <__gethex+0x118>
 80093e2:	4252      	negs	r2, r2
 80093e4:	4415      	add	r5, r2
 80093e6:	f8cb 1000 	str.w	r1, [fp]
 80093ea:	b1e4      	cbz	r4, 8009426 <__gethex+0x15a>
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2700      	movne	r7, #0
 80093f4:	2706      	moveq	r7, #6
 80093f6:	4638      	mov	r0, r7
 80093f8:	b009      	add	sp, #36	; 0x24
 80093fa:	ecbd 8b02 	vpop	{d8}
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	463e      	mov	r6, r7
 8009404:	4625      	mov	r5, r4
 8009406:	2401      	movs	r4, #1
 8009408:	e7ca      	b.n	80093a0 <__gethex+0xd4>
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	1cb1      	adds	r1, r6, #2
 8009410:	e7d3      	b.n	80093ba <__gethex+0xee>
 8009412:	f04f 0901 	mov.w	r9, #1
 8009416:	e7fa      	b.n	800940e <__gethex+0x142>
 8009418:	230a      	movs	r3, #10
 800941a:	fb03 0202 	mla	r2, r3, r2, r0
 800941e:	3a10      	subs	r2, #16
 8009420:	e7d4      	b.n	80093cc <__gethex+0x100>
 8009422:	4631      	mov	r1, r6
 8009424:	e7df      	b.n	80093e6 <__gethex+0x11a>
 8009426:	1bf3      	subs	r3, r6, r7
 8009428:	3b01      	subs	r3, #1
 800942a:	4621      	mov	r1, r4
 800942c:	2b07      	cmp	r3, #7
 800942e:	dc0b      	bgt.n	8009448 <__gethex+0x17c>
 8009430:	ee18 0a10 	vmov	r0, s16
 8009434:	f000 fa90 	bl	8009958 <_Balloc>
 8009438:	4604      	mov	r4, r0
 800943a:	b940      	cbnz	r0, 800944e <__gethex+0x182>
 800943c:	4b5d      	ldr	r3, [pc, #372]	; (80095b4 <__gethex+0x2e8>)
 800943e:	4602      	mov	r2, r0
 8009440:	21de      	movs	r1, #222	; 0xde
 8009442:	485d      	ldr	r0, [pc, #372]	; (80095b8 <__gethex+0x2ec>)
 8009444:	f001 fde0 	bl	800b008 <__assert_func>
 8009448:	3101      	adds	r1, #1
 800944a:	105b      	asrs	r3, r3, #1
 800944c:	e7ee      	b.n	800942c <__gethex+0x160>
 800944e:	f100 0914 	add.w	r9, r0, #20
 8009452:	f04f 0b00 	mov.w	fp, #0
 8009456:	f1ca 0301 	rsb	r3, sl, #1
 800945a:	f8cd 9008 	str.w	r9, [sp, #8]
 800945e:	f8cd b000 	str.w	fp, [sp]
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	42b7      	cmp	r7, r6
 8009466:	d340      	bcc.n	80094ea <__gethex+0x21e>
 8009468:	9802      	ldr	r0, [sp, #8]
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	f840 3b04 	str.w	r3, [r0], #4
 8009470:	eba0 0009 	sub.w	r0, r0, r9
 8009474:	1080      	asrs	r0, r0, #2
 8009476:	0146      	lsls	r6, r0, #5
 8009478:	6120      	str	r0, [r4, #16]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fb5e 	bl	8009b3c <__hi0bits>
 8009480:	1a30      	subs	r0, r6, r0
 8009482:	f8d8 6000 	ldr.w	r6, [r8]
 8009486:	42b0      	cmp	r0, r6
 8009488:	dd63      	ble.n	8009552 <__gethex+0x286>
 800948a:	1b87      	subs	r7, r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	4620      	mov	r0, r4
 8009490:	f000 ff02 	bl	800a298 <__any_on>
 8009494:	4682      	mov	sl, r0
 8009496:	b1a8      	cbz	r0, 80094c4 <__gethex+0x1f8>
 8009498:	1e7b      	subs	r3, r7, #1
 800949a:	1159      	asrs	r1, r3, #5
 800949c:	f003 021f 	and.w	r2, r3, #31
 80094a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094a4:	f04f 0a01 	mov.w	sl, #1
 80094a8:	fa0a f202 	lsl.w	r2, sl, r2
 80094ac:	420a      	tst	r2, r1
 80094ae:	d009      	beq.n	80094c4 <__gethex+0x1f8>
 80094b0:	4553      	cmp	r3, sl
 80094b2:	dd05      	ble.n	80094c0 <__gethex+0x1f4>
 80094b4:	1eb9      	subs	r1, r7, #2
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 feee 	bl	800a298 <__any_on>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d145      	bne.n	800954c <__gethex+0x280>
 80094c0:	f04f 0a02 	mov.w	sl, #2
 80094c4:	4639      	mov	r1, r7
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fe98 	bl	80091fc <rshift>
 80094cc:	443d      	add	r5, r7
 80094ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094d2:	42ab      	cmp	r3, r5
 80094d4:	da4c      	bge.n	8009570 <__gethex+0x2a4>
 80094d6:	ee18 0a10 	vmov	r0, s16
 80094da:	4621      	mov	r1, r4
 80094dc:	f000 fa7c 	bl	80099d8 <_Bfree>
 80094e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094e2:	2300      	movs	r3, #0
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	27a3      	movs	r7, #163	; 0xa3
 80094e8:	e785      	b.n	80093f6 <__gethex+0x12a>
 80094ea:	1e73      	subs	r3, r6, #1
 80094ec:	9a05      	ldr	r2, [sp, #20]
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d019      	beq.n	800952c <__gethex+0x260>
 80094f8:	f1bb 0f20 	cmp.w	fp, #32
 80094fc:	d107      	bne.n	800950e <__gethex+0x242>
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	f843 2b04 	str.w	r2, [r3], #4
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	469b      	mov	fp, r3
 800950e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009512:	f7ff fec5 	bl	80092a0 <__hexdig_fun>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	f000 000f 	and.w	r0, r0, #15
 800951c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009520:	4303      	orrs	r3, r0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	f10b 0b04 	add.w	fp, fp, #4
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	e00d      	b.n	8009548 <__gethex+0x27c>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	9a06      	ldr	r2, [sp, #24]
 8009530:	4413      	add	r3, r2
 8009532:	42bb      	cmp	r3, r7
 8009534:	d3e0      	bcc.n	80094f8 <__gethex+0x22c>
 8009536:	4618      	mov	r0, r3
 8009538:	9901      	ldr	r1, [sp, #4]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	4652      	mov	r2, sl
 800953e:	f7fe f8fc 	bl	800773a <strncmp>
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2800      	cmp	r0, #0
 8009546:	d1d7      	bne.n	80094f8 <__gethex+0x22c>
 8009548:	461e      	mov	r6, r3
 800954a:	e78b      	b.n	8009464 <__gethex+0x198>
 800954c:	f04f 0a03 	mov.w	sl, #3
 8009550:	e7b8      	b.n	80094c4 <__gethex+0x1f8>
 8009552:	da0a      	bge.n	800956a <__gethex+0x29e>
 8009554:	1a37      	subs	r7, r6, r0
 8009556:	4621      	mov	r1, r4
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	463a      	mov	r2, r7
 800955e:	f000 fc57 	bl	8009e10 <__lshift>
 8009562:	1bed      	subs	r5, r5, r7
 8009564:	4604      	mov	r4, r0
 8009566:	f100 0914 	add.w	r9, r0, #20
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	e7ae      	b.n	80094ce <__gethex+0x202>
 8009570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009574:	42a8      	cmp	r0, r5
 8009576:	dd72      	ble.n	800965e <__gethex+0x392>
 8009578:	1b45      	subs	r5, r0, r5
 800957a:	42ae      	cmp	r6, r5
 800957c:	dc36      	bgt.n	80095ec <__gethex+0x320>
 800957e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d02a      	beq.n	80095dc <__gethex+0x310>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d02c      	beq.n	80095e4 <__gethex+0x318>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d11c      	bne.n	80095c8 <__gethex+0x2fc>
 800958e:	42ae      	cmp	r6, r5
 8009590:	d11a      	bne.n	80095c8 <__gethex+0x2fc>
 8009592:	2e01      	cmp	r6, #1
 8009594:	d112      	bne.n	80095bc <__gethex+0x2f0>
 8009596:	9a04      	ldr	r2, [sp, #16]
 8009598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	2301      	movs	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	f8c9 3000 	str.w	r3, [r9]
 80095a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095a8:	2762      	movs	r7, #98	; 0x62
 80095aa:	601c      	str	r4, [r3, #0]
 80095ac:	e723      	b.n	80093f6 <__gethex+0x12a>
 80095ae:	bf00      	nop
 80095b0:	0800bd58 	.word	0x0800bd58
 80095b4:	0800bce0 	.word	0x0800bce0
 80095b8:	0800bcf1 	.word	0x0800bcf1
 80095bc:	1e71      	subs	r1, r6, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fe6a 	bl	800a298 <__any_on>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1e6      	bne.n	8009596 <__gethex+0x2ca>
 80095c8:	ee18 0a10 	vmov	r0, s16
 80095cc:	4621      	mov	r1, r4
 80095ce:	f000 fa03 	bl	80099d8 <_Bfree>
 80095d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095d4:	2300      	movs	r3, #0
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	2750      	movs	r7, #80	; 0x50
 80095da:	e70c      	b.n	80093f6 <__gethex+0x12a>
 80095dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f2      	bne.n	80095c8 <__gethex+0x2fc>
 80095e2:	e7d8      	b.n	8009596 <__gethex+0x2ca>
 80095e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d5      	bne.n	8009596 <__gethex+0x2ca>
 80095ea:	e7ed      	b.n	80095c8 <__gethex+0x2fc>
 80095ec:	1e6f      	subs	r7, r5, #1
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d131      	bne.n	8009658 <__gethex+0x38c>
 80095f4:	b127      	cbz	r7, 8009600 <__gethex+0x334>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fe4d 	bl	800a298 <__any_on>
 80095fe:	4682      	mov	sl, r0
 8009600:	117b      	asrs	r3, r7, #5
 8009602:	2101      	movs	r1, #1
 8009604:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009608:	f007 071f 	and.w	r7, r7, #31
 800960c:	fa01 f707 	lsl.w	r7, r1, r7
 8009610:	421f      	tst	r7, r3
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	bf18      	it	ne
 8009618:	f04a 0a02 	orrne.w	sl, sl, #2
 800961c:	1b76      	subs	r6, r6, r5
 800961e:	f7ff fded 	bl	80091fc <rshift>
 8009622:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009626:	2702      	movs	r7, #2
 8009628:	f1ba 0f00 	cmp.w	sl, #0
 800962c:	d048      	beq.n	80096c0 <__gethex+0x3f4>
 800962e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d015      	beq.n	8009662 <__gethex+0x396>
 8009636:	2b03      	cmp	r3, #3
 8009638:	d017      	beq.n	800966a <__gethex+0x39e>
 800963a:	2b01      	cmp	r3, #1
 800963c:	d109      	bne.n	8009652 <__gethex+0x386>
 800963e:	f01a 0f02 	tst.w	sl, #2
 8009642:	d006      	beq.n	8009652 <__gethex+0x386>
 8009644:	f8d9 0000 	ldr.w	r0, [r9]
 8009648:	ea4a 0a00 	orr.w	sl, sl, r0
 800964c:	f01a 0f01 	tst.w	sl, #1
 8009650:	d10e      	bne.n	8009670 <__gethex+0x3a4>
 8009652:	f047 0710 	orr.w	r7, r7, #16
 8009656:	e033      	b.n	80096c0 <__gethex+0x3f4>
 8009658:	f04f 0a01 	mov.w	sl, #1
 800965c:	e7d0      	b.n	8009600 <__gethex+0x334>
 800965e:	2701      	movs	r7, #1
 8009660:	e7e2      	b.n	8009628 <__gethex+0x35c>
 8009662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009664:	f1c3 0301 	rsb	r3, r3, #1
 8009668:	9315      	str	r3, [sp, #84]	; 0x54
 800966a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <__gethex+0x386>
 8009670:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009674:	f104 0314 	add.w	r3, r4, #20
 8009678:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800967c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009680:	f04f 0c00 	mov.w	ip, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f853 2b04 	ldr.w	r2, [r3], #4
 800968a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800968e:	d01c      	beq.n	80096ca <__gethex+0x3fe>
 8009690:	3201      	adds	r2, #1
 8009692:	6002      	str	r2, [r0, #0]
 8009694:	2f02      	cmp	r7, #2
 8009696:	f104 0314 	add.w	r3, r4, #20
 800969a:	d13f      	bne.n	800971c <__gethex+0x450>
 800969c:	f8d8 2000 	ldr.w	r2, [r8]
 80096a0:	3a01      	subs	r2, #1
 80096a2:	42b2      	cmp	r2, r6
 80096a4:	d10a      	bne.n	80096bc <__gethex+0x3f0>
 80096a6:	1171      	asrs	r1, r6, #5
 80096a8:	2201      	movs	r2, #1
 80096aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ae:	f006 061f 	and.w	r6, r6, #31
 80096b2:	fa02 f606 	lsl.w	r6, r2, r6
 80096b6:	421e      	tst	r6, r3
 80096b8:	bf18      	it	ne
 80096ba:	4617      	movne	r7, r2
 80096bc:	f047 0720 	orr.w	r7, r7, #32
 80096c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c2:	601c      	str	r4, [r3, #0]
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	601d      	str	r5, [r3, #0]
 80096c8:	e695      	b.n	80093f6 <__gethex+0x12a>
 80096ca:	4299      	cmp	r1, r3
 80096cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80096d0:	d8d8      	bhi.n	8009684 <__gethex+0x3b8>
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	459b      	cmp	fp, r3
 80096d6:	db19      	blt.n	800970c <__gethex+0x440>
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	3101      	adds	r1, #1
 80096e0:	f000 f93a 	bl	8009958 <_Balloc>
 80096e4:	4681      	mov	r9, r0
 80096e6:	b918      	cbnz	r0, 80096f0 <__gethex+0x424>
 80096e8:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <__gethex+0x488>)
 80096ea:	4602      	mov	r2, r0
 80096ec:	2184      	movs	r1, #132	; 0x84
 80096ee:	e6a8      	b.n	8009442 <__gethex+0x176>
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	3202      	adds	r2, #2
 80096f4:	f104 010c 	add.w	r1, r4, #12
 80096f8:	0092      	lsls	r2, r2, #2
 80096fa:	300c      	adds	r0, #12
 80096fc:	f000 f91e 	bl	800993c <memcpy>
 8009700:	4621      	mov	r1, r4
 8009702:	ee18 0a10 	vmov	r0, s16
 8009706:	f000 f967 	bl	80099d8 <_Bfree>
 800970a:	464c      	mov	r4, r9
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009714:	6122      	str	r2, [r4, #16]
 8009716:	2201      	movs	r2, #1
 8009718:	615a      	str	r2, [r3, #20]
 800971a:	e7bb      	b.n	8009694 <__gethex+0x3c8>
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	455a      	cmp	r2, fp
 8009720:	dd0b      	ble.n	800973a <__gethex+0x46e>
 8009722:	2101      	movs	r1, #1
 8009724:	4620      	mov	r0, r4
 8009726:	f7ff fd69 	bl	80091fc <rshift>
 800972a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800972e:	3501      	adds	r5, #1
 8009730:	42ab      	cmp	r3, r5
 8009732:	f6ff aed0 	blt.w	80094d6 <__gethex+0x20a>
 8009736:	2701      	movs	r7, #1
 8009738:	e7c0      	b.n	80096bc <__gethex+0x3f0>
 800973a:	f016 061f 	ands.w	r6, r6, #31
 800973e:	d0fa      	beq.n	8009736 <__gethex+0x46a>
 8009740:	4453      	add	r3, sl
 8009742:	f1c6 0620 	rsb	r6, r6, #32
 8009746:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800974a:	f000 f9f7 	bl	8009b3c <__hi0bits>
 800974e:	42b0      	cmp	r0, r6
 8009750:	dbe7      	blt.n	8009722 <__gethex+0x456>
 8009752:	e7f0      	b.n	8009736 <__gethex+0x46a>
 8009754:	0800bce0 	.word	0x0800bce0

08009758 <L_shift>:
 8009758:	f1c2 0208 	rsb	r2, r2, #8
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	b570      	push	{r4, r5, r6, lr}
 8009760:	f1c2 0620 	rsb	r6, r2, #32
 8009764:	6843      	ldr	r3, [r0, #4]
 8009766:	6804      	ldr	r4, [r0, #0]
 8009768:	fa03 f506 	lsl.w	r5, r3, r6
 800976c:	432c      	orrs	r4, r5
 800976e:	40d3      	lsrs	r3, r2
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	f840 3f04 	str.w	r3, [r0, #4]!
 8009776:	4288      	cmp	r0, r1
 8009778:	d3f4      	bcc.n	8009764 <L_shift+0xc>
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__match>:
 800977c:	b530      	push	{r4, r5, lr}
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	b914      	cbnz	r4, 800978e <__match+0x12>
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	2001      	movs	r0, #1
 800978c:	bd30      	pop	{r4, r5, pc}
 800978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009796:	2d19      	cmp	r5, #25
 8009798:	bf98      	it	ls
 800979a:	3220      	addls	r2, #32
 800979c:	42a2      	cmp	r2, r4
 800979e:	d0f0      	beq.n	8009782 <__match+0x6>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f3      	b.n	800978c <__match+0x10>

080097a4 <__hexnan>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	680b      	ldr	r3, [r1, #0]
 80097aa:	115e      	asrs	r6, r3, #5
 80097ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097b0:	f013 031f 	ands.w	r3, r3, #31
 80097b4:	b087      	sub	sp, #28
 80097b6:	bf18      	it	ne
 80097b8:	3604      	addne	r6, #4
 80097ba:	2500      	movs	r5, #0
 80097bc:	1f37      	subs	r7, r6, #4
 80097be:	4690      	mov	r8, r2
 80097c0:	6802      	ldr	r2, [r0, #0]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	4682      	mov	sl, r0
 80097c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ca:	46b9      	mov	r9, r7
 80097cc:	463c      	mov	r4, r7
 80097ce:	9502      	str	r5, [sp, #8]
 80097d0:	46ab      	mov	fp, r5
 80097d2:	7851      	ldrb	r1, [r2, #1]
 80097d4:	1c53      	adds	r3, r2, #1
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	b341      	cbz	r1, 800982c <__hexnan+0x88>
 80097da:	4608      	mov	r0, r1
 80097dc:	9205      	str	r2, [sp, #20]
 80097de:	9104      	str	r1, [sp, #16]
 80097e0:	f7ff fd5e 	bl	80092a0 <__hexdig_fun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d14f      	bne.n	8009888 <__hexnan+0xe4>
 80097e8:	9904      	ldr	r1, [sp, #16]
 80097ea:	9a05      	ldr	r2, [sp, #20]
 80097ec:	2920      	cmp	r1, #32
 80097ee:	d818      	bhi.n	8009822 <__hexnan+0x7e>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	459b      	cmp	fp, r3
 80097f4:	dd13      	ble.n	800981e <__hexnan+0x7a>
 80097f6:	454c      	cmp	r4, r9
 80097f8:	d206      	bcs.n	8009808 <__hexnan+0x64>
 80097fa:	2d07      	cmp	r5, #7
 80097fc:	dc04      	bgt.n	8009808 <__hexnan+0x64>
 80097fe:	462a      	mov	r2, r5
 8009800:	4649      	mov	r1, r9
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ffa8 	bl	8009758 <L_shift>
 8009808:	4544      	cmp	r4, r8
 800980a:	d950      	bls.n	80098ae <__hexnan+0x10a>
 800980c:	2300      	movs	r3, #0
 800980e:	f1a4 0904 	sub.w	r9, r4, #4
 8009812:	f844 3c04 	str.w	r3, [r4, #-4]
 8009816:	f8cd b008 	str.w	fp, [sp, #8]
 800981a:	464c      	mov	r4, r9
 800981c:	461d      	mov	r5, r3
 800981e:	9a03      	ldr	r2, [sp, #12]
 8009820:	e7d7      	b.n	80097d2 <__hexnan+0x2e>
 8009822:	2929      	cmp	r1, #41	; 0x29
 8009824:	d156      	bne.n	80098d4 <__hexnan+0x130>
 8009826:	3202      	adds	r2, #2
 8009828:	f8ca 2000 	str.w	r2, [sl]
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	d050      	beq.n	80098d4 <__hexnan+0x130>
 8009832:	454c      	cmp	r4, r9
 8009834:	d206      	bcs.n	8009844 <__hexnan+0xa0>
 8009836:	2d07      	cmp	r5, #7
 8009838:	dc04      	bgt.n	8009844 <__hexnan+0xa0>
 800983a:	462a      	mov	r2, r5
 800983c:	4649      	mov	r1, r9
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff ff8a 	bl	8009758 <L_shift>
 8009844:	4544      	cmp	r4, r8
 8009846:	d934      	bls.n	80098b2 <__hexnan+0x10e>
 8009848:	f1a8 0204 	sub.w	r2, r8, #4
 800984c:	4623      	mov	r3, r4
 800984e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009852:	f842 1f04 	str.w	r1, [r2, #4]!
 8009856:	429f      	cmp	r7, r3
 8009858:	d2f9      	bcs.n	800984e <__hexnan+0xaa>
 800985a:	1b3b      	subs	r3, r7, r4
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	3304      	adds	r3, #4
 8009862:	3401      	adds	r4, #1
 8009864:	3e03      	subs	r6, #3
 8009866:	42b4      	cmp	r4, r6
 8009868:	bf88      	it	hi
 800986a:	2304      	movhi	r3, #4
 800986c:	4443      	add	r3, r8
 800986e:	2200      	movs	r2, #0
 8009870:	f843 2b04 	str.w	r2, [r3], #4
 8009874:	429f      	cmp	r7, r3
 8009876:	d2fb      	bcs.n	8009870 <__hexnan+0xcc>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b91b      	cbnz	r3, 8009884 <__hexnan+0xe0>
 800987c:	4547      	cmp	r7, r8
 800987e:	d127      	bne.n	80098d0 <__hexnan+0x12c>
 8009880:	2301      	movs	r3, #1
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	2005      	movs	r0, #5
 8009886:	e026      	b.n	80098d6 <__hexnan+0x132>
 8009888:	3501      	adds	r5, #1
 800988a:	2d08      	cmp	r5, #8
 800988c:	f10b 0b01 	add.w	fp, fp, #1
 8009890:	dd06      	ble.n	80098a0 <__hexnan+0xfc>
 8009892:	4544      	cmp	r4, r8
 8009894:	d9c3      	bls.n	800981e <__hexnan+0x7a>
 8009896:	2300      	movs	r3, #0
 8009898:	f844 3c04 	str.w	r3, [r4, #-4]
 800989c:	2501      	movs	r5, #1
 800989e:	3c04      	subs	r4, #4
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	f000 000f 	and.w	r0, r0, #15
 80098a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	e7b7      	b.n	800981e <__hexnan+0x7a>
 80098ae:	2508      	movs	r5, #8
 80098b0:	e7b5      	b.n	800981e <__hexnan+0x7a>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0df      	beq.n	8009878 <__hexnan+0xd4>
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	f1c3 0320 	rsb	r3, r3, #32
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
 80098c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098c8:	401a      	ands	r2, r3
 80098ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80098ce:	e7d3      	b.n	8009878 <__hexnan+0xd4>
 80098d0:	3f04      	subs	r7, #4
 80098d2:	e7d1      	b.n	8009878 <__hexnan+0xd4>
 80098d4:	2004      	movs	r0, #4
 80098d6:	b007      	add	sp, #28
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098dc <_localeconv_r>:
 80098dc:	4800      	ldr	r0, [pc, #0]	; (80098e0 <_localeconv_r+0x4>)
 80098de:	4770      	bx	lr
 80098e0:	20000180 	.word	0x20000180

080098e4 <_lseek_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d07      	ldr	r5, [pc, #28]	; (8009904 <_lseek_r+0x20>)
 80098e8:	4604      	mov	r4, r0
 80098ea:	4608      	mov	r0, r1
 80098ec:	4611      	mov	r1, r2
 80098ee:	2200      	movs	r2, #0
 80098f0:	602a      	str	r2, [r5, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	f7f8 f8b4 	bl	8001a60 <_lseek>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_lseek_r+0x1e>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_lseek_r+0x1e>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	20000450 	.word	0x20000450

08009908 <malloc>:
 8009908:	4b02      	ldr	r3, [pc, #8]	; (8009914 <malloc+0xc>)
 800990a:	4601      	mov	r1, r0
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	f000 bd67 	b.w	800a3e0 <_malloc_r>
 8009912:	bf00      	nop
 8009914:	20000028 	.word	0x20000028

08009918 <__ascii_mbtowc>:
 8009918:	b082      	sub	sp, #8
 800991a:	b901      	cbnz	r1, 800991e <__ascii_mbtowc+0x6>
 800991c:	a901      	add	r1, sp, #4
 800991e:	b142      	cbz	r2, 8009932 <__ascii_mbtowc+0x1a>
 8009920:	b14b      	cbz	r3, 8009936 <__ascii_mbtowc+0x1e>
 8009922:	7813      	ldrb	r3, [r2, #0]
 8009924:	600b      	str	r3, [r1, #0]
 8009926:	7812      	ldrb	r2, [r2, #0]
 8009928:	1e10      	subs	r0, r2, #0
 800992a:	bf18      	it	ne
 800992c:	2001      	movne	r0, #1
 800992e:	b002      	add	sp, #8
 8009930:	4770      	bx	lr
 8009932:	4610      	mov	r0, r2
 8009934:	e7fb      	b.n	800992e <__ascii_mbtowc+0x16>
 8009936:	f06f 0001 	mvn.w	r0, #1
 800993a:	e7f8      	b.n	800992e <__ascii_mbtowc+0x16>

0800993c <memcpy>:
 800993c:	440a      	add	r2, r1
 800993e:	4291      	cmp	r1, r2
 8009940:	f100 33ff 	add.w	r3, r0, #4294967295
 8009944:	d100      	bne.n	8009948 <memcpy+0xc>
 8009946:	4770      	bx	lr
 8009948:	b510      	push	{r4, lr}
 800994a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009952:	4291      	cmp	r1, r2
 8009954:	d1f9      	bne.n	800994a <memcpy+0xe>
 8009956:	bd10      	pop	{r4, pc}

08009958 <_Balloc>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800995c:	4604      	mov	r4, r0
 800995e:	460d      	mov	r5, r1
 8009960:	b976      	cbnz	r6, 8009980 <_Balloc+0x28>
 8009962:	2010      	movs	r0, #16
 8009964:	f7ff ffd0 	bl	8009908 <malloc>
 8009968:	4602      	mov	r2, r0
 800996a:	6260      	str	r0, [r4, #36]	; 0x24
 800996c:	b920      	cbnz	r0, 8009978 <_Balloc+0x20>
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <_Balloc+0x78>)
 8009970:	4818      	ldr	r0, [pc, #96]	; (80099d4 <_Balloc+0x7c>)
 8009972:	2166      	movs	r1, #102	; 0x66
 8009974:	f001 fb48 	bl	800b008 <__assert_func>
 8009978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800997c:	6006      	str	r6, [r0, #0]
 800997e:	60c6      	str	r6, [r0, #12]
 8009980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009982:	68f3      	ldr	r3, [r6, #12]
 8009984:	b183      	cbz	r3, 80099a8 <_Balloc+0x50>
 8009986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800998e:	b9b8      	cbnz	r0, 80099c0 <_Balloc+0x68>
 8009990:	2101      	movs	r1, #1
 8009992:	fa01 f605 	lsl.w	r6, r1, r5
 8009996:	1d72      	adds	r2, r6, #5
 8009998:	0092      	lsls	r2, r2, #2
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fc9d 	bl	800a2da <_calloc_r>
 80099a0:	b160      	cbz	r0, 80099bc <_Balloc+0x64>
 80099a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099a6:	e00e      	b.n	80099c6 <_Balloc+0x6e>
 80099a8:	2221      	movs	r2, #33	; 0x21
 80099aa:	2104      	movs	r1, #4
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fc94 	bl	800a2da <_calloc_r>
 80099b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b4:	60f0      	str	r0, [r6, #12]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e4      	bne.n	8009986 <_Balloc+0x2e>
 80099bc:	2000      	movs	r0, #0
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	6802      	ldr	r2, [r0, #0]
 80099c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099c6:	2300      	movs	r3, #0
 80099c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099cc:	e7f7      	b.n	80099be <_Balloc+0x66>
 80099ce:	bf00      	nop
 80099d0:	0800bc6e 	.word	0x0800bc6e
 80099d4:	0800bd6c 	.word	0x0800bd6c

080099d8 <_Bfree>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b976      	cbnz	r6, 8009a00 <_Bfree+0x28>
 80099e2:	2010      	movs	r0, #16
 80099e4:	f7ff ff90 	bl	8009908 <malloc>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6268      	str	r0, [r5, #36]	; 0x24
 80099ec:	b920      	cbnz	r0, 80099f8 <_Bfree+0x20>
 80099ee:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <_Bfree+0x3c>)
 80099f0:	4809      	ldr	r0, [pc, #36]	; (8009a18 <_Bfree+0x40>)
 80099f2:	218a      	movs	r1, #138	; 0x8a
 80099f4:	f001 fb08 	bl	800b008 <__assert_func>
 80099f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099fc:	6006      	str	r6, [r0, #0]
 80099fe:	60c6      	str	r6, [r0, #12]
 8009a00:	b13c      	cbz	r4, 8009a12 <_Bfree+0x3a>
 8009a02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a04:	6862      	ldr	r2, [r4, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a0c:	6021      	str	r1, [r4, #0]
 8009a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	0800bc6e 	.word	0x0800bc6e
 8009a18:	0800bd6c 	.word	0x0800bd6c

08009a1c <__multadd>:
 8009a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a20:	690d      	ldr	r5, [r1, #16]
 8009a22:	4607      	mov	r7, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	461e      	mov	r6, r3
 8009a28:	f101 0c14 	add.w	ip, r1, #20
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a32:	b299      	uxth	r1, r3
 8009a34:	fb02 6101 	mla	r1, r2, r1, r6
 8009a38:	0c1e      	lsrs	r6, r3, #16
 8009a3a:	0c0b      	lsrs	r3, r1, #16
 8009a3c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a40:	b289      	uxth	r1, r1
 8009a42:	3001      	adds	r0, #1
 8009a44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a48:	4285      	cmp	r5, r0
 8009a4a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a52:	dcec      	bgt.n	8009a2e <__multadd+0x12>
 8009a54:	b30e      	cbz	r6, 8009a9a <__multadd+0x7e>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	dc19      	bgt.n	8009a90 <__multadd+0x74>
 8009a5c:	6861      	ldr	r1, [r4, #4]
 8009a5e:	4638      	mov	r0, r7
 8009a60:	3101      	adds	r1, #1
 8009a62:	f7ff ff79 	bl	8009958 <_Balloc>
 8009a66:	4680      	mov	r8, r0
 8009a68:	b928      	cbnz	r0, 8009a76 <__multadd+0x5a>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <__multadd+0x84>)
 8009a6e:	480d      	ldr	r0, [pc, #52]	; (8009aa4 <__multadd+0x88>)
 8009a70:	21b5      	movs	r1, #181	; 0xb5
 8009a72:	f001 fac9 	bl	800b008 <__assert_func>
 8009a76:	6922      	ldr	r2, [r4, #16]
 8009a78:	3202      	adds	r2, #2
 8009a7a:	f104 010c 	add.w	r1, r4, #12
 8009a7e:	0092      	lsls	r2, r2, #2
 8009a80:	300c      	adds	r0, #12
 8009a82:	f7ff ff5b 	bl	800993c <memcpy>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ffa5 	bl	80099d8 <_Bfree>
 8009a8e:	4644      	mov	r4, r8
 8009a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a94:	3501      	adds	r5, #1
 8009a96:	615e      	str	r6, [r3, #20]
 8009a98:	6125      	str	r5, [r4, #16]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	0800bce0 	.word	0x0800bce0
 8009aa4:	0800bd6c 	.word	0x0800bd6c

08009aa8 <__s2b>:
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	460c      	mov	r4, r1
 8009aae:	4615      	mov	r5, r2
 8009ab0:	461f      	mov	r7, r3
 8009ab2:	2209      	movs	r2, #9
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009abc:	2100      	movs	r1, #0
 8009abe:	2201      	movs	r2, #1
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	db09      	blt.n	8009ad8 <__s2b+0x30>
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f7ff ff47 	bl	8009958 <_Balloc>
 8009aca:	b940      	cbnz	r0, 8009ade <__s2b+0x36>
 8009acc:	4602      	mov	r2, r0
 8009ace:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <__s2b+0x8c>)
 8009ad0:	4819      	ldr	r0, [pc, #100]	; (8009b38 <__s2b+0x90>)
 8009ad2:	21ce      	movs	r1, #206	; 0xce
 8009ad4:	f001 fa98 	bl	800b008 <__assert_func>
 8009ad8:	0052      	lsls	r2, r2, #1
 8009ada:	3101      	adds	r1, #1
 8009adc:	e7f0      	b.n	8009ac0 <__s2b+0x18>
 8009ade:	9b08      	ldr	r3, [sp, #32]
 8009ae0:	6143      	str	r3, [r0, #20]
 8009ae2:	2d09      	cmp	r5, #9
 8009ae4:	f04f 0301 	mov.w	r3, #1
 8009ae8:	6103      	str	r3, [r0, #16]
 8009aea:	dd16      	ble.n	8009b1a <__s2b+0x72>
 8009aec:	f104 0909 	add.w	r9, r4, #9
 8009af0:	46c8      	mov	r8, r9
 8009af2:	442c      	add	r4, r5
 8009af4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009af8:	4601      	mov	r1, r0
 8009afa:	3b30      	subs	r3, #48	; 0x30
 8009afc:	220a      	movs	r2, #10
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ff8c 	bl	8009a1c <__multadd>
 8009b04:	45a0      	cmp	r8, r4
 8009b06:	d1f5      	bne.n	8009af4 <__s2b+0x4c>
 8009b08:	f1a5 0408 	sub.w	r4, r5, #8
 8009b0c:	444c      	add	r4, r9
 8009b0e:	1b2d      	subs	r5, r5, r4
 8009b10:	1963      	adds	r3, r4, r5
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	db04      	blt.n	8009b20 <__s2b+0x78>
 8009b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1a:	340a      	adds	r4, #10
 8009b1c:	2509      	movs	r5, #9
 8009b1e:	e7f6      	b.n	8009b0e <__s2b+0x66>
 8009b20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b24:	4601      	mov	r1, r0
 8009b26:	3b30      	subs	r3, #48	; 0x30
 8009b28:	220a      	movs	r2, #10
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff ff76 	bl	8009a1c <__multadd>
 8009b30:	e7ee      	b.n	8009b10 <__s2b+0x68>
 8009b32:	bf00      	nop
 8009b34:	0800bce0 	.word	0x0800bce0
 8009b38:	0800bd6c 	.word	0x0800bd6c

08009b3c <__hi0bits>:
 8009b3c:	0c03      	lsrs	r3, r0, #16
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	b9d3      	cbnz	r3, 8009b78 <__hi0bits+0x3c>
 8009b42:	0400      	lsls	r0, r0, #16
 8009b44:	2310      	movs	r3, #16
 8009b46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b4a:	bf04      	itt	eq
 8009b4c:	0200      	lsleq	r0, r0, #8
 8009b4e:	3308      	addeq	r3, #8
 8009b50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b54:	bf04      	itt	eq
 8009b56:	0100      	lsleq	r0, r0, #4
 8009b58:	3304      	addeq	r3, #4
 8009b5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b5e:	bf04      	itt	eq
 8009b60:	0080      	lsleq	r0, r0, #2
 8009b62:	3302      	addeq	r3, #2
 8009b64:	2800      	cmp	r0, #0
 8009b66:	db05      	blt.n	8009b74 <__hi0bits+0x38>
 8009b68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b6c:	f103 0301 	add.w	r3, r3, #1
 8009b70:	bf08      	it	eq
 8009b72:	2320      	moveq	r3, #32
 8009b74:	4618      	mov	r0, r3
 8009b76:	4770      	bx	lr
 8009b78:	2300      	movs	r3, #0
 8009b7a:	e7e4      	b.n	8009b46 <__hi0bits+0xa>

08009b7c <__lo0bits>:
 8009b7c:	6803      	ldr	r3, [r0, #0]
 8009b7e:	f013 0207 	ands.w	r2, r3, #7
 8009b82:	4601      	mov	r1, r0
 8009b84:	d00b      	beq.n	8009b9e <__lo0bits+0x22>
 8009b86:	07da      	lsls	r2, r3, #31
 8009b88:	d423      	bmi.n	8009bd2 <__lo0bits+0x56>
 8009b8a:	0798      	lsls	r0, r3, #30
 8009b8c:	bf49      	itett	mi
 8009b8e:	085b      	lsrmi	r3, r3, #1
 8009b90:	089b      	lsrpl	r3, r3, #2
 8009b92:	2001      	movmi	r0, #1
 8009b94:	600b      	strmi	r3, [r1, #0]
 8009b96:	bf5c      	itt	pl
 8009b98:	600b      	strpl	r3, [r1, #0]
 8009b9a:	2002      	movpl	r0, #2
 8009b9c:	4770      	bx	lr
 8009b9e:	b298      	uxth	r0, r3
 8009ba0:	b9a8      	cbnz	r0, 8009bce <__lo0bits+0x52>
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	2010      	movs	r0, #16
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	b90a      	cbnz	r2, 8009bae <__lo0bits+0x32>
 8009baa:	3008      	adds	r0, #8
 8009bac:	0a1b      	lsrs	r3, r3, #8
 8009bae:	071a      	lsls	r2, r3, #28
 8009bb0:	bf04      	itt	eq
 8009bb2:	091b      	lsreq	r3, r3, #4
 8009bb4:	3004      	addeq	r0, #4
 8009bb6:	079a      	lsls	r2, r3, #30
 8009bb8:	bf04      	itt	eq
 8009bba:	089b      	lsreq	r3, r3, #2
 8009bbc:	3002      	addeq	r0, #2
 8009bbe:	07da      	lsls	r2, r3, #31
 8009bc0:	d403      	bmi.n	8009bca <__lo0bits+0x4e>
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	f100 0001 	add.w	r0, r0, #1
 8009bc8:	d005      	beq.n	8009bd6 <__lo0bits+0x5a>
 8009bca:	600b      	str	r3, [r1, #0]
 8009bcc:	4770      	bx	lr
 8009bce:	4610      	mov	r0, r2
 8009bd0:	e7e9      	b.n	8009ba6 <__lo0bits+0x2a>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	4770      	bx	lr
 8009bd6:	2020      	movs	r0, #32
 8009bd8:	4770      	bx	lr
	...

08009bdc <__i2b>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	460c      	mov	r4, r1
 8009be0:	2101      	movs	r1, #1
 8009be2:	f7ff feb9 	bl	8009958 <_Balloc>
 8009be6:	4602      	mov	r2, r0
 8009be8:	b928      	cbnz	r0, 8009bf6 <__i2b+0x1a>
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <__i2b+0x24>)
 8009bec:	4805      	ldr	r0, [pc, #20]	; (8009c04 <__i2b+0x28>)
 8009bee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bf2:	f001 fa09 	bl	800b008 <__assert_func>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	6144      	str	r4, [r0, #20]
 8009bfa:	6103      	str	r3, [r0, #16]
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	bf00      	nop
 8009c00:	0800bce0 	.word	0x0800bce0
 8009c04:	0800bd6c 	.word	0x0800bd6c

08009c08 <__multiply>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	4691      	mov	r9, r2
 8009c0e:	690a      	ldr	r2, [r1, #16]
 8009c10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	bfb8      	it	lt
 8009c18:	460b      	movlt	r3, r1
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	bfbc      	itt	lt
 8009c1e:	464c      	movlt	r4, r9
 8009c20:	4699      	movlt	r9, r3
 8009c22:	6927      	ldr	r7, [r4, #16]
 8009c24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	6861      	ldr	r1, [r4, #4]
 8009c2c:	eb07 060a 	add.w	r6, r7, sl
 8009c30:	42b3      	cmp	r3, r6
 8009c32:	b085      	sub	sp, #20
 8009c34:	bfb8      	it	lt
 8009c36:	3101      	addlt	r1, #1
 8009c38:	f7ff fe8e 	bl	8009958 <_Balloc>
 8009c3c:	b930      	cbnz	r0, 8009c4c <__multiply+0x44>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b44      	ldr	r3, [pc, #272]	; (8009d54 <__multiply+0x14c>)
 8009c42:	4845      	ldr	r0, [pc, #276]	; (8009d58 <__multiply+0x150>)
 8009c44:	f240 115d 	movw	r1, #349	; 0x15d
 8009c48:	f001 f9de 	bl	800b008 <__assert_func>
 8009c4c:	f100 0514 	add.w	r5, r0, #20
 8009c50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c54:	462b      	mov	r3, r5
 8009c56:	2200      	movs	r2, #0
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	d321      	bcc.n	8009ca0 <__multiply+0x98>
 8009c5c:	f104 0314 	add.w	r3, r4, #20
 8009c60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c64:	f109 0314 	add.w	r3, r9, #20
 8009c68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c6c:	9202      	str	r2, [sp, #8]
 8009c6e:	1b3a      	subs	r2, r7, r4
 8009c70:	3a15      	subs	r2, #21
 8009c72:	f022 0203 	bic.w	r2, r2, #3
 8009c76:	3204      	adds	r2, #4
 8009c78:	f104 0115 	add.w	r1, r4, #21
 8009c7c:	428f      	cmp	r7, r1
 8009c7e:	bf38      	it	cc
 8009c80:	2204      	movcc	r2, #4
 8009c82:	9201      	str	r2, [sp, #4]
 8009c84:	9a02      	ldr	r2, [sp, #8]
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d80c      	bhi.n	8009ca6 <__multiply+0x9e>
 8009c8c:	2e00      	cmp	r6, #0
 8009c8e:	dd03      	ble.n	8009c98 <__multiply+0x90>
 8009c90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d05a      	beq.n	8009d4e <__multiply+0x146>
 8009c98:	6106      	str	r6, [r0, #16]
 8009c9a:	b005      	add	sp, #20
 8009c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca0:	f843 2b04 	str.w	r2, [r3], #4
 8009ca4:	e7d8      	b.n	8009c58 <__multiply+0x50>
 8009ca6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009caa:	f1ba 0f00 	cmp.w	sl, #0
 8009cae:	d024      	beq.n	8009cfa <__multiply+0xf2>
 8009cb0:	f104 0e14 	add.w	lr, r4, #20
 8009cb4:	46a9      	mov	r9, r5
 8009cb6:	f04f 0c00 	mov.w	ip, #0
 8009cba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cbe:	f8d9 1000 	ldr.w	r1, [r9]
 8009cc2:	fa1f fb82 	uxth.w	fp, r2
 8009cc6:	b289      	uxth	r1, r1
 8009cc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ccc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd4:	4461      	add	r1, ip
 8009cd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cda:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ce2:	b289      	uxth	r1, r1
 8009ce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ce8:	4577      	cmp	r7, lr
 8009cea:	f849 1b04 	str.w	r1, [r9], #4
 8009cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cf2:	d8e2      	bhi.n	8009cba <__multiply+0xb2>
 8009cf4:	9a01      	ldr	r2, [sp, #4]
 8009cf6:	f845 c002 	str.w	ip, [r5, r2]
 8009cfa:	9a03      	ldr	r2, [sp, #12]
 8009cfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d00:	3304      	adds	r3, #4
 8009d02:	f1b9 0f00 	cmp.w	r9, #0
 8009d06:	d020      	beq.n	8009d4a <__multiply+0x142>
 8009d08:	6829      	ldr	r1, [r5, #0]
 8009d0a:	f104 0c14 	add.w	ip, r4, #20
 8009d0e:	46ae      	mov	lr, r5
 8009d10:	f04f 0a00 	mov.w	sl, #0
 8009d14:	f8bc b000 	ldrh.w	fp, [ip]
 8009d18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d1c:	fb09 220b 	mla	r2, r9, fp, r2
 8009d20:	4492      	add	sl, r2
 8009d22:	b289      	uxth	r1, r1
 8009d24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d28:	f84e 1b04 	str.w	r1, [lr], #4
 8009d2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d30:	f8be 1000 	ldrh.w	r1, [lr]
 8009d34:	0c12      	lsrs	r2, r2, #16
 8009d36:	fb09 1102 	mla	r1, r9, r2, r1
 8009d3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d3e:	4567      	cmp	r7, ip
 8009d40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d44:	d8e6      	bhi.n	8009d14 <__multiply+0x10c>
 8009d46:	9a01      	ldr	r2, [sp, #4]
 8009d48:	50a9      	str	r1, [r5, r2]
 8009d4a:	3504      	adds	r5, #4
 8009d4c:	e79a      	b.n	8009c84 <__multiply+0x7c>
 8009d4e:	3e01      	subs	r6, #1
 8009d50:	e79c      	b.n	8009c8c <__multiply+0x84>
 8009d52:	bf00      	nop
 8009d54:	0800bce0 	.word	0x0800bce0
 8009d58:	0800bd6c 	.word	0x0800bd6c

08009d5c <__pow5mult>:
 8009d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d60:	4615      	mov	r5, r2
 8009d62:	f012 0203 	ands.w	r2, r2, #3
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	d007      	beq.n	8009d7c <__pow5mult+0x20>
 8009d6c:	4c25      	ldr	r4, [pc, #148]	; (8009e04 <__pow5mult+0xa8>)
 8009d6e:	3a01      	subs	r2, #1
 8009d70:	2300      	movs	r3, #0
 8009d72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d76:	f7ff fe51 	bl	8009a1c <__multadd>
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	10ad      	asrs	r5, r5, #2
 8009d7e:	d03d      	beq.n	8009dfc <__pow5mult+0xa0>
 8009d80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d82:	b97c      	cbnz	r4, 8009da4 <__pow5mult+0x48>
 8009d84:	2010      	movs	r0, #16
 8009d86:	f7ff fdbf 	bl	8009908 <malloc>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d8e:	b928      	cbnz	r0, 8009d9c <__pow5mult+0x40>
 8009d90:	4b1d      	ldr	r3, [pc, #116]	; (8009e08 <__pow5mult+0xac>)
 8009d92:	481e      	ldr	r0, [pc, #120]	; (8009e0c <__pow5mult+0xb0>)
 8009d94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d98:	f001 f936 	bl	800b008 <__assert_func>
 8009d9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009da0:	6004      	str	r4, [r0, #0]
 8009da2:	60c4      	str	r4, [r0, #12]
 8009da4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009da8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dac:	b94c      	cbnz	r4, 8009dc2 <__pow5mult+0x66>
 8009dae:	f240 2171 	movw	r1, #625	; 0x271
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ff12 	bl	8009bdc <__i2b>
 8009db8:	2300      	movs	r3, #0
 8009dba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	f04f 0900 	mov.w	r9, #0
 8009dc6:	07eb      	lsls	r3, r5, #31
 8009dc8:	d50a      	bpl.n	8009de0 <__pow5mult+0x84>
 8009dca:	4639      	mov	r1, r7
 8009dcc:	4622      	mov	r2, r4
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f7ff ff1a 	bl	8009c08 <__multiply>
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff fdfd 	bl	80099d8 <_Bfree>
 8009dde:	4647      	mov	r7, r8
 8009de0:	106d      	asrs	r5, r5, #1
 8009de2:	d00b      	beq.n	8009dfc <__pow5mult+0xa0>
 8009de4:	6820      	ldr	r0, [r4, #0]
 8009de6:	b938      	cbnz	r0, 8009df8 <__pow5mult+0x9c>
 8009de8:	4622      	mov	r2, r4
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7ff ff0b 	bl	8009c08 <__multiply>
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	f8c0 9000 	str.w	r9, [r0]
 8009df8:	4604      	mov	r4, r0
 8009dfa:	e7e4      	b.n	8009dc6 <__pow5mult+0x6a>
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e02:	bf00      	nop
 8009e04:	0800beb8 	.word	0x0800beb8
 8009e08:	0800bc6e 	.word	0x0800bc6e
 8009e0c:	0800bd6c 	.word	0x0800bd6c

08009e10 <__lshift>:
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	460c      	mov	r4, r1
 8009e16:	6849      	ldr	r1, [r1, #4]
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	4607      	mov	r7, r0
 8009e22:	4691      	mov	r9, r2
 8009e24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e28:	f108 0601 	add.w	r6, r8, #1
 8009e2c:	42b3      	cmp	r3, r6
 8009e2e:	db0b      	blt.n	8009e48 <__lshift+0x38>
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff fd91 	bl	8009958 <_Balloc>
 8009e36:	4605      	mov	r5, r0
 8009e38:	b948      	cbnz	r0, 8009e4e <__lshift+0x3e>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <__lshift+0xd8>)
 8009e3e:	482b      	ldr	r0, [pc, #172]	; (8009eec <__lshift+0xdc>)
 8009e40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e44:	f001 f8e0 	bl	800b008 <__assert_func>
 8009e48:	3101      	adds	r1, #1
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	e7ee      	b.n	8009e2c <__lshift+0x1c>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f100 0114 	add.w	r1, r0, #20
 8009e54:	f100 0210 	add.w	r2, r0, #16
 8009e58:	4618      	mov	r0, r3
 8009e5a:	4553      	cmp	r3, sl
 8009e5c:	db37      	blt.n	8009ece <__lshift+0xbe>
 8009e5e:	6920      	ldr	r0, [r4, #16]
 8009e60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e64:	f104 0314 	add.w	r3, r4, #20
 8009e68:	f019 091f 	ands.w	r9, r9, #31
 8009e6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e74:	d02f      	beq.n	8009ed6 <__lshift+0xc6>
 8009e76:	f1c9 0e20 	rsb	lr, r9, #32
 8009e7a:	468a      	mov	sl, r1
 8009e7c:	f04f 0c00 	mov.w	ip, #0
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	fa02 f209 	lsl.w	r2, r2, r9
 8009e86:	ea42 020c 	orr.w	r2, r2, ip
 8009e8a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e92:	4298      	cmp	r0, r3
 8009e94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e98:	d8f2      	bhi.n	8009e80 <__lshift+0x70>
 8009e9a:	1b03      	subs	r3, r0, r4
 8009e9c:	3b15      	subs	r3, #21
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	f104 0215 	add.w	r2, r4, #21
 8009ea8:	4290      	cmp	r0, r2
 8009eaa:	bf38      	it	cc
 8009eac:	2304      	movcc	r3, #4
 8009eae:	f841 c003 	str.w	ip, [r1, r3]
 8009eb2:	f1bc 0f00 	cmp.w	ip, #0
 8009eb6:	d001      	beq.n	8009ebc <__lshift+0xac>
 8009eb8:	f108 0602 	add.w	r6, r8, #2
 8009ebc:	3e01      	subs	r6, #1
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	612e      	str	r6, [r5, #16]
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	f7ff fd88 	bl	80099d8 <_Bfree>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ece:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	e7c1      	b.n	8009e5a <__lshift+0x4a>
 8009ed6:	3904      	subs	r1, #4
 8009ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009edc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ee0:	4298      	cmp	r0, r3
 8009ee2:	d8f9      	bhi.n	8009ed8 <__lshift+0xc8>
 8009ee4:	e7ea      	b.n	8009ebc <__lshift+0xac>
 8009ee6:	bf00      	nop
 8009ee8:	0800bce0 	.word	0x0800bce0
 8009eec:	0800bd6c 	.word	0x0800bd6c

08009ef0 <__mcmp>:
 8009ef0:	b530      	push	{r4, r5, lr}
 8009ef2:	6902      	ldr	r2, [r0, #16]
 8009ef4:	690c      	ldr	r4, [r1, #16]
 8009ef6:	1b12      	subs	r2, r2, r4
 8009ef8:	d10e      	bne.n	8009f18 <__mcmp+0x28>
 8009efa:	f100 0314 	add.w	r3, r0, #20
 8009efe:	3114      	adds	r1, #20
 8009f00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f10:	42a5      	cmp	r5, r4
 8009f12:	d003      	beq.n	8009f1c <__mcmp+0x2c>
 8009f14:	d305      	bcc.n	8009f22 <__mcmp+0x32>
 8009f16:	2201      	movs	r2, #1
 8009f18:	4610      	mov	r0, r2
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	4283      	cmp	r3, r0
 8009f1e:	d3f3      	bcc.n	8009f08 <__mcmp+0x18>
 8009f20:	e7fa      	b.n	8009f18 <__mcmp+0x28>
 8009f22:	f04f 32ff 	mov.w	r2, #4294967295
 8009f26:	e7f7      	b.n	8009f18 <__mcmp+0x28>

08009f28 <__mdiff>:
 8009f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4606      	mov	r6, r0
 8009f30:	4611      	mov	r1, r2
 8009f32:	4620      	mov	r0, r4
 8009f34:	4690      	mov	r8, r2
 8009f36:	f7ff ffdb 	bl	8009ef0 <__mcmp>
 8009f3a:	1e05      	subs	r5, r0, #0
 8009f3c:	d110      	bne.n	8009f60 <__mdiff+0x38>
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff fd09 	bl	8009958 <_Balloc>
 8009f46:	b930      	cbnz	r0, 8009f56 <__mdiff+0x2e>
 8009f48:	4b3a      	ldr	r3, [pc, #232]	; (800a034 <__mdiff+0x10c>)
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f240 2132 	movw	r1, #562	; 0x232
 8009f50:	4839      	ldr	r0, [pc, #228]	; (800a038 <__mdiff+0x110>)
 8009f52:	f001 f859 	bl	800b008 <__assert_func>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	bfa4      	itt	ge
 8009f62:	4643      	movge	r3, r8
 8009f64:	46a0      	movge	r8, r4
 8009f66:	4630      	mov	r0, r6
 8009f68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f6c:	bfa6      	itte	ge
 8009f6e:	461c      	movge	r4, r3
 8009f70:	2500      	movge	r5, #0
 8009f72:	2501      	movlt	r5, #1
 8009f74:	f7ff fcf0 	bl	8009958 <_Balloc>
 8009f78:	b920      	cbnz	r0, 8009f84 <__mdiff+0x5c>
 8009f7a:	4b2e      	ldr	r3, [pc, #184]	; (800a034 <__mdiff+0x10c>)
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f82:	e7e5      	b.n	8009f50 <__mdiff+0x28>
 8009f84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f88:	6926      	ldr	r6, [r4, #16]
 8009f8a:	60c5      	str	r5, [r0, #12]
 8009f8c:	f104 0914 	add.w	r9, r4, #20
 8009f90:	f108 0514 	add.w	r5, r8, #20
 8009f94:	f100 0e14 	add.w	lr, r0, #20
 8009f98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fa0:	f108 0210 	add.w	r2, r8, #16
 8009fa4:	46f2      	mov	sl, lr
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fb0:	fa1f f883 	uxth.w	r8, r3
 8009fb4:	fa11 f18b 	uxtah	r1, r1, fp
 8009fb8:	0c1b      	lsrs	r3, r3, #16
 8009fba:	eba1 0808 	sub.w	r8, r1, r8
 8009fbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fc6:	fa1f f888 	uxth.w	r8, r8
 8009fca:	1419      	asrs	r1, r3, #16
 8009fcc:	454e      	cmp	r6, r9
 8009fce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fd2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fd6:	d8e7      	bhi.n	8009fa8 <__mdiff+0x80>
 8009fd8:	1b33      	subs	r3, r6, r4
 8009fda:	3b15      	subs	r3, #21
 8009fdc:	f023 0303 	bic.w	r3, r3, #3
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	3415      	adds	r4, #21
 8009fe4:	42a6      	cmp	r6, r4
 8009fe6:	bf38      	it	cc
 8009fe8:	2304      	movcc	r3, #4
 8009fea:	441d      	add	r5, r3
 8009fec:	4473      	add	r3, lr
 8009fee:	469e      	mov	lr, r3
 8009ff0:	462e      	mov	r6, r5
 8009ff2:	4566      	cmp	r6, ip
 8009ff4:	d30e      	bcc.n	800a014 <__mdiff+0xec>
 8009ff6:	f10c 0203 	add.w	r2, ip, #3
 8009ffa:	1b52      	subs	r2, r2, r5
 8009ffc:	f022 0203 	bic.w	r2, r2, #3
 800a000:	3d03      	subs	r5, #3
 800a002:	45ac      	cmp	ip, r5
 800a004:	bf38      	it	cc
 800a006:	2200      	movcc	r2, #0
 800a008:	441a      	add	r2, r3
 800a00a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a00e:	b17b      	cbz	r3, 800a030 <__mdiff+0x108>
 800a010:	6107      	str	r7, [r0, #16]
 800a012:	e7a3      	b.n	8009f5c <__mdiff+0x34>
 800a014:	f856 8b04 	ldr.w	r8, [r6], #4
 800a018:	fa11 f288 	uxtah	r2, r1, r8
 800a01c:	1414      	asrs	r4, r2, #16
 800a01e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a022:	b292      	uxth	r2, r2
 800a024:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a028:	f84e 2b04 	str.w	r2, [lr], #4
 800a02c:	1421      	asrs	r1, r4, #16
 800a02e:	e7e0      	b.n	8009ff2 <__mdiff+0xca>
 800a030:	3f01      	subs	r7, #1
 800a032:	e7ea      	b.n	800a00a <__mdiff+0xe2>
 800a034:	0800bce0 	.word	0x0800bce0
 800a038:	0800bd6c 	.word	0x0800bd6c

0800a03c <__ulp>:
 800a03c:	b082      	sub	sp, #8
 800a03e:	ed8d 0b00 	vstr	d0, [sp]
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	4912      	ldr	r1, [pc, #72]	; (800a090 <__ulp+0x54>)
 800a046:	4019      	ands	r1, r3
 800a048:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a04c:	2900      	cmp	r1, #0
 800a04e:	dd05      	ble.n	800a05c <__ulp+0x20>
 800a050:	2200      	movs	r2, #0
 800a052:	460b      	mov	r3, r1
 800a054:	ec43 2b10 	vmov	d0, r2, r3
 800a058:	b002      	add	sp, #8
 800a05a:	4770      	bx	lr
 800a05c:	4249      	negs	r1, r1
 800a05e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a062:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	da04      	bge.n	800a07a <__ulp+0x3e>
 800a070:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a074:	fa41 f300 	asr.w	r3, r1, r0
 800a078:	e7ec      	b.n	800a054 <__ulp+0x18>
 800a07a:	f1a0 0114 	sub.w	r1, r0, #20
 800a07e:	291e      	cmp	r1, #30
 800a080:	bfda      	itte	le
 800a082:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a086:	fa20 f101 	lsrle.w	r1, r0, r1
 800a08a:	2101      	movgt	r1, #1
 800a08c:	460a      	mov	r2, r1
 800a08e:	e7e1      	b.n	800a054 <__ulp+0x18>
 800a090:	7ff00000 	.word	0x7ff00000

0800a094 <__b2d>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	6905      	ldr	r5, [r0, #16]
 800a098:	f100 0714 	add.w	r7, r0, #20
 800a09c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0a0:	1f2e      	subs	r6, r5, #4
 800a0a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fd48 	bl	8009b3c <__hi0bits>
 800a0ac:	f1c0 0320 	rsb	r3, r0, #32
 800a0b0:	280a      	cmp	r0, #10
 800a0b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a130 <__b2d+0x9c>
 800a0b6:	600b      	str	r3, [r1, #0]
 800a0b8:	dc14      	bgt.n	800a0e4 <__b2d+0x50>
 800a0ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800a0be:	fa24 f10e 	lsr.w	r1, r4, lr
 800a0c2:	42b7      	cmp	r7, r6
 800a0c4:	ea41 030c 	orr.w	r3, r1, ip
 800a0c8:	bf34      	ite	cc
 800a0ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0ce:	2100      	movcs	r1, #0
 800a0d0:	3015      	adds	r0, #21
 800a0d2:	fa04 f000 	lsl.w	r0, r4, r0
 800a0d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a0da:	ea40 0201 	orr.w	r2, r0, r1
 800a0de:	ec43 2b10 	vmov	d0, r2, r3
 800a0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e4:	42b7      	cmp	r7, r6
 800a0e6:	bf3a      	itte	cc
 800a0e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0f0:	2100      	movcs	r1, #0
 800a0f2:	380b      	subs	r0, #11
 800a0f4:	d017      	beq.n	800a126 <__b2d+0x92>
 800a0f6:	f1c0 0c20 	rsb	ip, r0, #32
 800a0fa:	fa04 f500 	lsl.w	r5, r4, r0
 800a0fe:	42be      	cmp	r6, r7
 800a100:	fa21 f40c 	lsr.w	r4, r1, ip
 800a104:	ea45 0504 	orr.w	r5, r5, r4
 800a108:	bf8c      	ite	hi
 800a10a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a10e:	2400      	movls	r4, #0
 800a110:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a114:	fa01 f000 	lsl.w	r0, r1, r0
 800a118:	fa24 f40c 	lsr.w	r4, r4, ip
 800a11c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a120:	ea40 0204 	orr.w	r2, r0, r4
 800a124:	e7db      	b.n	800a0de <__b2d+0x4a>
 800a126:	ea44 030c 	orr.w	r3, r4, ip
 800a12a:	460a      	mov	r2, r1
 800a12c:	e7d7      	b.n	800a0de <__b2d+0x4a>
 800a12e:	bf00      	nop
 800a130:	3ff00000 	.word	0x3ff00000

0800a134 <__d2b>:
 800a134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a138:	4689      	mov	r9, r1
 800a13a:	2101      	movs	r1, #1
 800a13c:	ec57 6b10 	vmov	r6, r7, d0
 800a140:	4690      	mov	r8, r2
 800a142:	f7ff fc09 	bl	8009958 <_Balloc>
 800a146:	4604      	mov	r4, r0
 800a148:	b930      	cbnz	r0, 800a158 <__d2b+0x24>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <__d2b+0xb0>)
 800a14e:	4826      	ldr	r0, [pc, #152]	; (800a1e8 <__d2b+0xb4>)
 800a150:	f240 310a 	movw	r1, #778	; 0x30a
 800a154:	f000 ff58 	bl	800b008 <__assert_func>
 800a158:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a15c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a160:	bb35      	cbnz	r5, 800a1b0 <__d2b+0x7c>
 800a162:	2e00      	cmp	r6, #0
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	d028      	beq.n	800a1ba <__d2b+0x86>
 800a168:	4668      	mov	r0, sp
 800a16a:	9600      	str	r6, [sp, #0]
 800a16c:	f7ff fd06 	bl	8009b7c <__lo0bits>
 800a170:	9900      	ldr	r1, [sp, #0]
 800a172:	b300      	cbz	r0, 800a1b6 <__d2b+0x82>
 800a174:	9a01      	ldr	r2, [sp, #4]
 800a176:	f1c0 0320 	rsb	r3, r0, #32
 800a17a:	fa02 f303 	lsl.w	r3, r2, r3
 800a17e:	430b      	orrs	r3, r1
 800a180:	40c2      	lsrs	r2, r0
 800a182:	6163      	str	r3, [r4, #20]
 800a184:	9201      	str	r2, [sp, #4]
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	61a3      	str	r3, [r4, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bf14      	ite	ne
 800a18e:	2202      	movne	r2, #2
 800a190:	2201      	moveq	r2, #1
 800a192:	6122      	str	r2, [r4, #16]
 800a194:	b1d5      	cbz	r5, 800a1cc <__d2b+0x98>
 800a196:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a19a:	4405      	add	r5, r0
 800a19c:	f8c9 5000 	str.w	r5, [r9]
 800a1a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1a4:	f8c8 0000 	str.w	r0, [r8]
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	b003      	add	sp, #12
 800a1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b4:	e7d5      	b.n	800a162 <__d2b+0x2e>
 800a1b6:	6161      	str	r1, [r4, #20]
 800a1b8:	e7e5      	b.n	800a186 <__d2b+0x52>
 800a1ba:	a801      	add	r0, sp, #4
 800a1bc:	f7ff fcde 	bl	8009b7c <__lo0bits>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	6163      	str	r3, [r4, #20]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	6122      	str	r2, [r4, #16]
 800a1c8:	3020      	adds	r0, #32
 800a1ca:	e7e3      	b.n	800a194 <__d2b+0x60>
 800a1cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1d4:	f8c9 0000 	str.w	r0, [r9]
 800a1d8:	6918      	ldr	r0, [r3, #16]
 800a1da:	f7ff fcaf 	bl	8009b3c <__hi0bits>
 800a1de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1e2:	e7df      	b.n	800a1a4 <__d2b+0x70>
 800a1e4:	0800bce0 	.word	0x0800bce0
 800a1e8:	0800bd6c 	.word	0x0800bd6c

0800a1ec <__ratio>:
 800a1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	4688      	mov	r8, r1
 800a1f2:	4669      	mov	r1, sp
 800a1f4:	4681      	mov	r9, r0
 800a1f6:	f7ff ff4d 	bl	800a094 <__b2d>
 800a1fa:	a901      	add	r1, sp, #4
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	ec55 4b10 	vmov	r4, r5, d0
 800a202:	f7ff ff47 	bl	800a094 <__b2d>
 800a206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a20a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a20e:	eba3 0c02 	sub.w	ip, r3, r2
 800a212:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a21c:	ec51 0b10 	vmov	r0, r1, d0
 800a220:	2b00      	cmp	r3, #0
 800a222:	bfd6      	itet	le
 800a224:	460a      	movle	r2, r1
 800a226:	462a      	movgt	r2, r5
 800a228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a22c:	468b      	mov	fp, r1
 800a22e:	462f      	mov	r7, r5
 800a230:	bfd4      	ite	le
 800a232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a236:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a23a:	4620      	mov	r0, r4
 800a23c:	ee10 2a10 	vmov	r2, s0
 800a240:	465b      	mov	r3, fp
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fb22 	bl	800088c <__aeabi_ddiv>
 800a248:	ec41 0b10 	vmov	d0, r0, r1
 800a24c:	b003      	add	sp, #12
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a252 <__copybits>:
 800a252:	3901      	subs	r1, #1
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	1149      	asrs	r1, r1, #5
 800a258:	6914      	ldr	r4, [r2, #16]
 800a25a:	3101      	adds	r1, #1
 800a25c:	f102 0314 	add.w	r3, r2, #20
 800a260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a268:	1f05      	subs	r5, r0, #4
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	d30c      	bcc.n	800a288 <__copybits+0x36>
 800a26e:	1aa3      	subs	r3, r4, r2
 800a270:	3b11      	subs	r3, #17
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	3211      	adds	r2, #17
 800a278:	42a2      	cmp	r2, r4
 800a27a:	bf88      	it	hi
 800a27c:	2300      	movhi	r3, #0
 800a27e:	4418      	add	r0, r3
 800a280:	2300      	movs	r3, #0
 800a282:	4288      	cmp	r0, r1
 800a284:	d305      	bcc.n	800a292 <__copybits+0x40>
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	f853 6b04 	ldr.w	r6, [r3], #4
 800a28c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a290:	e7eb      	b.n	800a26a <__copybits+0x18>
 800a292:	f840 3b04 	str.w	r3, [r0], #4
 800a296:	e7f4      	b.n	800a282 <__copybits+0x30>

0800a298 <__any_on>:
 800a298:	f100 0214 	add.w	r2, r0, #20
 800a29c:	6900      	ldr	r0, [r0, #16]
 800a29e:	114b      	asrs	r3, r1, #5
 800a2a0:	4298      	cmp	r0, r3
 800a2a2:	b510      	push	{r4, lr}
 800a2a4:	db11      	blt.n	800a2ca <__any_on+0x32>
 800a2a6:	dd0a      	ble.n	800a2be <__any_on+0x26>
 800a2a8:	f011 011f 	ands.w	r1, r1, #31
 800a2ac:	d007      	beq.n	800a2be <__any_on+0x26>
 800a2ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2b2:	fa24 f001 	lsr.w	r0, r4, r1
 800a2b6:	fa00 f101 	lsl.w	r1, r0, r1
 800a2ba:	428c      	cmp	r4, r1
 800a2bc:	d10b      	bne.n	800a2d6 <__any_on+0x3e>
 800a2be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d803      	bhi.n	800a2ce <__any_on+0x36>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	e7f7      	b.n	800a2be <__any_on+0x26>
 800a2ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2d2:	2900      	cmp	r1, #0
 800a2d4:	d0f5      	beq.n	800a2c2 <__any_on+0x2a>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e7f6      	b.n	800a2c8 <__any_on+0x30>

0800a2da <_calloc_r>:
 800a2da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2dc:	fba1 2402 	umull	r2, r4, r1, r2
 800a2e0:	b94c      	cbnz	r4, 800a2f6 <_calloc_r+0x1c>
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	9201      	str	r2, [sp, #4]
 800a2e6:	f000 f87b 	bl	800a3e0 <_malloc_r>
 800a2ea:	9a01      	ldr	r2, [sp, #4]
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	b930      	cbnz	r0, 800a2fe <_calloc_r+0x24>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	b003      	add	sp, #12
 800a2f4:	bd30      	pop	{r4, r5, pc}
 800a2f6:	220c      	movs	r2, #12
 800a2f8:	6002      	str	r2, [r0, #0]
 800a2fa:	2500      	movs	r5, #0
 800a2fc:	e7f8      	b.n	800a2f0 <_calloc_r+0x16>
 800a2fe:	4621      	mov	r1, r4
 800a300:	f7fc fb02 	bl	8006908 <memset>
 800a304:	e7f4      	b.n	800a2f0 <_calloc_r+0x16>
	...

0800a308 <_free_r>:
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30a:	2900      	cmp	r1, #0
 800a30c:	d044      	beq.n	800a398 <_free_r+0x90>
 800a30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f1a1 0404 	sub.w	r4, r1, #4
 800a31a:	bfb8      	it	lt
 800a31c:	18e4      	addlt	r4, r4, r3
 800a31e:	f001 f877 	bl	800b410 <__malloc_lock>
 800a322:	4a1e      	ldr	r2, [pc, #120]	; (800a39c <_free_r+0x94>)
 800a324:	9801      	ldr	r0, [sp, #4]
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	b933      	cbnz	r3, 800a338 <_free_r+0x30>
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	6014      	str	r4, [r2, #0]
 800a32e:	b003      	add	sp, #12
 800a330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a334:	f001 b872 	b.w	800b41c <__malloc_unlock>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d908      	bls.n	800a34e <_free_r+0x46>
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	428b      	cmp	r3, r1
 800a342:	bf01      	itttt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	1949      	addeq	r1, r1, r5
 800a34a:	6021      	streq	r1, [r4, #0]
 800a34c:	e7ed      	b.n	800a32a <_free_r+0x22>
 800a34e:	461a      	mov	r2, r3
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b10b      	cbz	r3, 800a358 <_free_r+0x50>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d9fa      	bls.n	800a34e <_free_r+0x46>
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	1855      	adds	r5, r2, r1
 800a35c:	42a5      	cmp	r5, r4
 800a35e:	d10b      	bne.n	800a378 <_free_r+0x70>
 800a360:	6824      	ldr	r4, [r4, #0]
 800a362:	4421      	add	r1, r4
 800a364:	1854      	adds	r4, r2, r1
 800a366:	42a3      	cmp	r3, r4
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	d1e0      	bne.n	800a32e <_free_r+0x26>
 800a36c:	681c      	ldr	r4, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	4421      	add	r1, r4
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	e7da      	b.n	800a32e <_free_r+0x26>
 800a378:	d902      	bls.n	800a380 <_free_r+0x78>
 800a37a:	230c      	movs	r3, #12
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	e7d6      	b.n	800a32e <_free_r+0x26>
 800a380:	6825      	ldr	r5, [r4, #0]
 800a382:	1961      	adds	r1, r4, r5
 800a384:	428b      	cmp	r3, r1
 800a386:	bf04      	itt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	bf04      	itt	eq
 800a390:	1949      	addeq	r1, r1, r5
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	6054      	str	r4, [r2, #4]
 800a396:	e7ca      	b.n	800a32e <_free_r+0x26>
 800a398:	b003      	add	sp, #12
 800a39a:	bd30      	pop	{r4, r5, pc}
 800a39c:	20000448 	.word	0x20000448

0800a3a0 <sbrk_aligned>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	4e0e      	ldr	r6, [pc, #56]	; (800a3dc <sbrk_aligned+0x3c>)
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6831      	ldr	r1, [r6, #0]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	b911      	cbnz	r1, 800a3b2 <sbrk_aligned+0x12>
 800a3ac:	f000 fd28 	bl	800ae00 <_sbrk_r>
 800a3b0:	6030      	str	r0, [r6, #0]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 fd23 	bl	800ae00 <_sbrk_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d00a      	beq.n	800a3d4 <sbrk_aligned+0x34>
 800a3be:	1cc4      	adds	r4, r0, #3
 800a3c0:	f024 0403 	bic.w	r4, r4, #3
 800a3c4:	42a0      	cmp	r0, r4
 800a3c6:	d007      	beq.n	800a3d8 <sbrk_aligned+0x38>
 800a3c8:	1a21      	subs	r1, r4, r0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fd18 	bl	800ae00 <_sbrk_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d101      	bne.n	800a3d8 <sbrk_aligned+0x38>
 800a3d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d8:	4620      	mov	r0, r4
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	2000044c 	.word	0x2000044c

0800a3e0 <_malloc_r>:
 800a3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e4:	1ccd      	adds	r5, r1, #3
 800a3e6:	f025 0503 	bic.w	r5, r5, #3
 800a3ea:	3508      	adds	r5, #8
 800a3ec:	2d0c      	cmp	r5, #12
 800a3ee:	bf38      	it	cc
 800a3f0:	250c      	movcc	r5, #12
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	db01      	blt.n	800a3fc <_malloc_r+0x1c>
 800a3f8:	42a9      	cmp	r1, r5
 800a3fa:	d905      	bls.n	800a408 <_malloc_r+0x28>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	2600      	movs	r6, #0
 800a402:	4630      	mov	r0, r6
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a408:	4e2e      	ldr	r6, [pc, #184]	; (800a4c4 <_malloc_r+0xe4>)
 800a40a:	f001 f801 	bl	800b410 <__malloc_lock>
 800a40e:	6833      	ldr	r3, [r6, #0]
 800a410:	461c      	mov	r4, r3
 800a412:	bb34      	cbnz	r4, 800a462 <_malloc_r+0x82>
 800a414:	4629      	mov	r1, r5
 800a416:	4638      	mov	r0, r7
 800a418:	f7ff ffc2 	bl	800a3a0 <sbrk_aligned>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	4604      	mov	r4, r0
 800a420:	d14d      	bne.n	800a4be <_malloc_r+0xde>
 800a422:	6834      	ldr	r4, [r6, #0]
 800a424:	4626      	mov	r6, r4
 800a426:	2e00      	cmp	r6, #0
 800a428:	d140      	bne.n	800a4ac <_malloc_r+0xcc>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	4631      	mov	r1, r6
 800a42e:	4638      	mov	r0, r7
 800a430:	eb04 0803 	add.w	r8, r4, r3
 800a434:	f000 fce4 	bl	800ae00 <_sbrk_r>
 800a438:	4580      	cmp	r8, r0
 800a43a:	d13a      	bne.n	800a4b2 <_malloc_r+0xd2>
 800a43c:	6821      	ldr	r1, [r4, #0]
 800a43e:	3503      	adds	r5, #3
 800a440:	1a6d      	subs	r5, r5, r1
 800a442:	f025 0503 	bic.w	r5, r5, #3
 800a446:	3508      	adds	r5, #8
 800a448:	2d0c      	cmp	r5, #12
 800a44a:	bf38      	it	cc
 800a44c:	250c      	movcc	r5, #12
 800a44e:	4629      	mov	r1, r5
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff ffa5 	bl	800a3a0 <sbrk_aligned>
 800a456:	3001      	adds	r0, #1
 800a458:	d02b      	beq.n	800a4b2 <_malloc_r+0xd2>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	442b      	add	r3, r5
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	e00e      	b.n	800a480 <_malloc_r+0xa0>
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	1b52      	subs	r2, r2, r5
 800a466:	d41e      	bmi.n	800a4a6 <_malloc_r+0xc6>
 800a468:	2a0b      	cmp	r2, #11
 800a46a:	d916      	bls.n	800a49a <_malloc_r+0xba>
 800a46c:	1961      	adds	r1, r4, r5
 800a46e:	42a3      	cmp	r3, r4
 800a470:	6025      	str	r5, [r4, #0]
 800a472:	bf18      	it	ne
 800a474:	6059      	strne	r1, [r3, #4]
 800a476:	6863      	ldr	r3, [r4, #4]
 800a478:	bf08      	it	eq
 800a47a:	6031      	streq	r1, [r6, #0]
 800a47c:	5162      	str	r2, [r4, r5]
 800a47e:	604b      	str	r3, [r1, #4]
 800a480:	4638      	mov	r0, r7
 800a482:	f104 060b 	add.w	r6, r4, #11
 800a486:	f000 ffc9 	bl	800b41c <__malloc_unlock>
 800a48a:	f026 0607 	bic.w	r6, r6, #7
 800a48e:	1d23      	adds	r3, r4, #4
 800a490:	1af2      	subs	r2, r6, r3
 800a492:	d0b6      	beq.n	800a402 <_malloc_r+0x22>
 800a494:	1b9b      	subs	r3, r3, r6
 800a496:	50a3      	str	r3, [r4, r2]
 800a498:	e7b3      	b.n	800a402 <_malloc_r+0x22>
 800a49a:	6862      	ldr	r2, [r4, #4]
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	bf0c      	ite	eq
 800a4a0:	6032      	streq	r2, [r6, #0]
 800a4a2:	605a      	strne	r2, [r3, #4]
 800a4a4:	e7ec      	b.n	800a480 <_malloc_r+0xa0>
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	6864      	ldr	r4, [r4, #4]
 800a4aa:	e7b2      	b.n	800a412 <_malloc_r+0x32>
 800a4ac:	4634      	mov	r4, r6
 800a4ae:	6876      	ldr	r6, [r6, #4]
 800a4b0:	e7b9      	b.n	800a426 <_malloc_r+0x46>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	603b      	str	r3, [r7, #0]
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f000 ffb0 	bl	800b41c <__malloc_unlock>
 800a4bc:	e7a1      	b.n	800a402 <_malloc_r+0x22>
 800a4be:	6025      	str	r5, [r4, #0]
 800a4c0:	e7de      	b.n	800a480 <_malloc_r+0xa0>
 800a4c2:	bf00      	nop
 800a4c4:	20000448 	.word	0x20000448

0800a4c8 <__ssputs_r>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	688e      	ldr	r6, [r1, #8]
 800a4ce:	429e      	cmp	r6, r3
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	d838      	bhi.n	800a54c <__ssputs_r+0x84>
 800a4da:	898a      	ldrh	r2, [r1, #12]
 800a4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4e0:	d032      	beq.n	800a548 <__ssputs_r+0x80>
 800a4e2:	6825      	ldr	r5, [r4, #0]
 800a4e4:	6909      	ldr	r1, [r1, #16]
 800a4e6:	eba5 0901 	sub.w	r9, r5, r1
 800a4ea:	6965      	ldr	r5, [r4, #20]
 800a4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	444b      	add	r3, r9
 800a4f8:	106d      	asrs	r5, r5, #1
 800a4fa:	429d      	cmp	r5, r3
 800a4fc:	bf38      	it	cc
 800a4fe:	461d      	movcc	r5, r3
 800a500:	0553      	lsls	r3, r2, #21
 800a502:	d531      	bpl.n	800a568 <__ssputs_r+0xa0>
 800a504:	4629      	mov	r1, r5
 800a506:	f7ff ff6b 	bl	800a3e0 <_malloc_r>
 800a50a:	4606      	mov	r6, r0
 800a50c:	b950      	cbnz	r0, 800a524 <__ssputs_r+0x5c>
 800a50e:	230c      	movs	r3, #12
 800a510:	f8ca 3000 	str.w	r3, [sl]
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a524:	6921      	ldr	r1, [r4, #16]
 800a526:	464a      	mov	r2, r9
 800a528:	f7ff fa08 	bl	800993c <memcpy>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	6126      	str	r6, [r4, #16]
 800a53a:	6165      	str	r5, [r4, #20]
 800a53c:	444e      	add	r6, r9
 800a53e:	eba5 0509 	sub.w	r5, r5, r9
 800a542:	6026      	str	r6, [r4, #0]
 800a544:	60a5      	str	r5, [r4, #8]
 800a546:	463e      	mov	r6, r7
 800a548:	42be      	cmp	r6, r7
 800a54a:	d900      	bls.n	800a54e <__ssputs_r+0x86>
 800a54c:	463e      	mov	r6, r7
 800a54e:	6820      	ldr	r0, [r4, #0]
 800a550:	4632      	mov	r2, r6
 800a552:	4641      	mov	r1, r8
 800a554:	f000 ff42 	bl	800b3dc <memmove>
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	1b9b      	subs	r3, r3, r6
 800a55c:	60a3      	str	r3, [r4, #8]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	4433      	add	r3, r6
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e7db      	b.n	800a520 <__ssputs_r+0x58>
 800a568:	462a      	mov	r2, r5
 800a56a:	f000 ff5d 	bl	800b428 <_realloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	2800      	cmp	r0, #0
 800a572:	d1e1      	bne.n	800a538 <__ssputs_r+0x70>
 800a574:	6921      	ldr	r1, [r4, #16]
 800a576:	4650      	mov	r0, sl
 800a578:	f7ff fec6 	bl	800a308 <_free_r>
 800a57c:	e7c7      	b.n	800a50e <__ssputs_r+0x46>
	...

0800a580 <_svfiprintf_r>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4698      	mov	r8, r3
 800a586:	898b      	ldrh	r3, [r1, #12]
 800a588:	061b      	lsls	r3, r3, #24
 800a58a:	b09d      	sub	sp, #116	; 0x74
 800a58c:	4607      	mov	r7, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	4614      	mov	r4, r2
 800a592:	d50e      	bpl.n	800a5b2 <_svfiprintf_r+0x32>
 800a594:	690b      	ldr	r3, [r1, #16]
 800a596:	b963      	cbnz	r3, 800a5b2 <_svfiprintf_r+0x32>
 800a598:	2140      	movs	r1, #64	; 0x40
 800a59a:	f7ff ff21 	bl	800a3e0 <_malloc_r>
 800a59e:	6028      	str	r0, [r5, #0]
 800a5a0:	6128      	str	r0, [r5, #16]
 800a5a2:	b920      	cbnz	r0, 800a5ae <_svfiprintf_r+0x2e>
 800a5a4:	230c      	movs	r3, #12
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	e0d1      	b.n	800a752 <_svfiprintf_r+0x1d2>
 800a5ae:	2340      	movs	r3, #64	; 0x40
 800a5b0:	616b      	str	r3, [r5, #20]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b6:	2320      	movs	r3, #32
 800a5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c0:	2330      	movs	r3, #48	; 0x30
 800a5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a76c <_svfiprintf_r+0x1ec>
 800a5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	469a      	mov	sl, r3
 800a5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d6:	b10a      	cbz	r2, 800a5dc <_svfiprintf_r+0x5c>
 800a5d8:	2a25      	cmp	r2, #37	; 0x25
 800a5da:	d1f9      	bne.n	800a5d0 <_svfiprintf_r+0x50>
 800a5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e0:	d00b      	beq.n	800a5fa <_svfiprintf_r+0x7a>
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ff6d 	bl	800a4c8 <__ssputs_r>
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	f000 80aa 	beq.w	800a748 <_svfiprintf_r+0x1c8>
 800a5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f6:	445a      	add	r2, fp
 800a5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80a2 	beq.w	800a748 <_svfiprintf_r+0x1c8>
 800a604:	2300      	movs	r3, #0
 800a606:	f04f 32ff 	mov.w	r2, #4294967295
 800a60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a60e:	f10a 0a01 	add.w	sl, sl, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	9307      	str	r3, [sp, #28]
 800a616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a61a:	931a      	str	r3, [sp, #104]	; 0x68
 800a61c:	4654      	mov	r4, sl
 800a61e:	2205      	movs	r2, #5
 800a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a624:	4851      	ldr	r0, [pc, #324]	; (800a76c <_svfiprintf_r+0x1ec>)
 800a626:	f7f5 fdfb 	bl	8000220 <memchr>
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	b9d8      	cbnz	r0, 800a666 <_svfiprintf_r+0xe6>
 800a62e:	06d0      	lsls	r0, r2, #27
 800a630:	bf44      	itt	mi
 800a632:	2320      	movmi	r3, #32
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a638:	0711      	lsls	r1, r2, #28
 800a63a:	bf44      	itt	mi
 800a63c:	232b      	movmi	r3, #43	; 0x2b
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b2a      	cmp	r3, #42	; 0x2a
 800a648:	d015      	beq.n	800a676 <_svfiprintf_r+0xf6>
 800a64a:	9a07      	ldr	r2, [sp, #28]
 800a64c:	4654      	mov	r4, sl
 800a64e:	2000      	movs	r0, #0
 800a650:	f04f 0c0a 	mov.w	ip, #10
 800a654:	4621      	mov	r1, r4
 800a656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65a:	3b30      	subs	r3, #48	; 0x30
 800a65c:	2b09      	cmp	r3, #9
 800a65e:	d94e      	bls.n	800a6fe <_svfiprintf_r+0x17e>
 800a660:	b1b0      	cbz	r0, 800a690 <_svfiprintf_r+0x110>
 800a662:	9207      	str	r2, [sp, #28]
 800a664:	e014      	b.n	800a690 <_svfiprintf_r+0x110>
 800a666:	eba0 0308 	sub.w	r3, r0, r8
 800a66a:	fa09 f303 	lsl.w	r3, r9, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	46a2      	mov	sl, r4
 800a674:	e7d2      	b.n	800a61c <_svfiprintf_r+0x9c>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9103      	str	r1, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbb      	ittet	lt
 800a682:	425b      	neglt	r3, r3
 800a684:	f042 0202 	orrlt.w	r2, r2, #2
 800a688:	9307      	strge	r3, [sp, #28]
 800a68a:	9307      	strlt	r3, [sp, #28]
 800a68c:	bfb8      	it	lt
 800a68e:	9204      	strlt	r2, [sp, #16]
 800a690:	7823      	ldrb	r3, [r4, #0]
 800a692:	2b2e      	cmp	r3, #46	; 0x2e
 800a694:	d10c      	bne.n	800a6b0 <_svfiprintf_r+0x130>
 800a696:	7863      	ldrb	r3, [r4, #1]
 800a698:	2b2a      	cmp	r3, #42	; 0x2a
 800a69a:	d135      	bne.n	800a708 <_svfiprintf_r+0x188>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	1d1a      	adds	r2, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bfb8      	it	lt
 800a6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ac:	3402      	adds	r4, #2
 800a6ae:	9305      	str	r3, [sp, #20]
 800a6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a77c <_svfiprintf_r+0x1fc>
 800a6b4:	7821      	ldrb	r1, [r4, #0]
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	f7f5 fdb1 	bl	8000220 <memchr>
 800a6be:	b140      	cbz	r0, 800a6d2 <_svfiprintf_r+0x152>
 800a6c0:	2340      	movs	r3, #64	; 0x40
 800a6c2:	eba0 000a 	sub.w	r0, r0, sl
 800a6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	4303      	orrs	r3, r0
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d6:	4826      	ldr	r0, [pc, #152]	; (800a770 <_svfiprintf_r+0x1f0>)
 800a6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6dc:	2206      	movs	r2, #6
 800a6de:	f7f5 fd9f 	bl	8000220 <memchr>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d038      	beq.n	800a758 <_svfiprintf_r+0x1d8>
 800a6e6:	4b23      	ldr	r3, [pc, #140]	; (800a774 <_svfiprintf_r+0x1f4>)
 800a6e8:	bb1b      	cbnz	r3, 800a732 <_svfiprintf_r+0x1b2>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	3307      	adds	r3, #7
 800a6ee:	f023 0307 	bic.w	r3, r3, #7
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	9303      	str	r3, [sp, #12]
 800a6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f8:	4433      	add	r3, r6
 800a6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fc:	e767      	b.n	800a5ce <_svfiprintf_r+0x4e>
 800a6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a702:	460c      	mov	r4, r1
 800a704:	2001      	movs	r0, #1
 800a706:	e7a5      	b.n	800a654 <_svfiprintf_r+0xd4>
 800a708:	2300      	movs	r3, #0
 800a70a:	3401      	adds	r4, #1
 800a70c:	9305      	str	r3, [sp, #20]
 800a70e:	4619      	mov	r1, r3
 800a710:	f04f 0c0a 	mov.w	ip, #10
 800a714:	4620      	mov	r0, r4
 800a716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a71a:	3a30      	subs	r2, #48	; 0x30
 800a71c:	2a09      	cmp	r2, #9
 800a71e:	d903      	bls.n	800a728 <_svfiprintf_r+0x1a8>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0c5      	beq.n	800a6b0 <_svfiprintf_r+0x130>
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	e7c3      	b.n	800a6b0 <_svfiprintf_r+0x130>
 800a728:	fb0c 2101 	mla	r1, ip, r1, r2
 800a72c:	4604      	mov	r4, r0
 800a72e:	2301      	movs	r3, #1
 800a730:	e7f0      	b.n	800a714 <_svfiprintf_r+0x194>
 800a732:	ab03      	add	r3, sp, #12
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	462a      	mov	r2, r5
 800a738:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <_svfiprintf_r+0x1f8>)
 800a73a:	a904      	add	r1, sp, #16
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7fc f98b 	bl	8006a58 <_printf_float>
 800a742:	1c42      	adds	r2, r0, #1
 800a744:	4606      	mov	r6, r0
 800a746:	d1d6      	bne.n	800a6f6 <_svfiprintf_r+0x176>
 800a748:	89ab      	ldrh	r3, [r5, #12]
 800a74a:	065b      	lsls	r3, r3, #25
 800a74c:	f53f af2c 	bmi.w	800a5a8 <_svfiprintf_r+0x28>
 800a750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a752:	b01d      	add	sp, #116	; 0x74
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	ab03      	add	r3, sp, #12
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	462a      	mov	r2, r5
 800a75e:	4b06      	ldr	r3, [pc, #24]	; (800a778 <_svfiprintf_r+0x1f8>)
 800a760:	a904      	add	r1, sp, #16
 800a762:	4638      	mov	r0, r7
 800a764:	f7fc fc1c 	bl	8006fa0 <_printf_i>
 800a768:	e7eb      	b.n	800a742 <_svfiprintf_r+0x1c2>
 800a76a:	bf00      	nop
 800a76c:	0800bec4 	.word	0x0800bec4
 800a770:	0800bece 	.word	0x0800bece
 800a774:	08006a59 	.word	0x08006a59
 800a778:	0800a4c9 	.word	0x0800a4c9
 800a77c:	0800beca 	.word	0x0800beca

0800a780 <_sungetc_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	1c4b      	adds	r3, r1, #1
 800a784:	4614      	mov	r4, r2
 800a786:	d103      	bne.n	800a790 <_sungetc_r+0x10>
 800a788:	f04f 35ff 	mov.w	r5, #4294967295
 800a78c:	4628      	mov	r0, r5
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	8993      	ldrh	r3, [r2, #12]
 800a792:	f023 0320 	bic.w	r3, r3, #32
 800a796:	8193      	strh	r3, [r2, #12]
 800a798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a79a:	6852      	ldr	r2, [r2, #4]
 800a79c:	b2cd      	uxtb	r5, r1
 800a79e:	b18b      	cbz	r3, 800a7c4 <_sungetc_r+0x44>
 800a7a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	dd08      	ble.n	800a7b8 <_sungetc_r+0x38>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	6022      	str	r2, [r4, #0]
 800a7ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a7b0:	6863      	ldr	r3, [r4, #4]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	6063      	str	r3, [r4, #4]
 800a7b6:	e7e9      	b.n	800a78c <_sungetc_r+0xc>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	f000 fbdd 	bl	800af78 <__submore>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0f1      	beq.n	800a7a6 <_sungetc_r+0x26>
 800a7c2:	e7e1      	b.n	800a788 <_sungetc_r+0x8>
 800a7c4:	6921      	ldr	r1, [r4, #16]
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	b151      	cbz	r1, 800a7e0 <_sungetc_r+0x60>
 800a7ca:	4299      	cmp	r1, r3
 800a7cc:	d208      	bcs.n	800a7e0 <_sungetc_r+0x60>
 800a7ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a7d2:	42a9      	cmp	r1, r5
 800a7d4:	d104      	bne.n	800a7e0 <_sungetc_r+0x60>
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	3201      	adds	r2, #1
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	6062      	str	r2, [r4, #4]
 800a7de:	e7d5      	b.n	800a78c <_sungetc_r+0xc>
 800a7e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e7dc      	b.n	800a7b4 <_sungetc_r+0x34>

0800a7fa <__ssrefill_r>:
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a800:	b169      	cbz	r1, 800a81e <__ssrefill_r+0x24>
 800a802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a806:	4299      	cmp	r1, r3
 800a808:	d001      	beq.n	800a80e <__ssrefill_r+0x14>
 800a80a:	f7ff fd7d 	bl	800a308 <_free_r>
 800a80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	2000      	movs	r0, #0
 800a814:	6360      	str	r0, [r4, #52]	; 0x34
 800a816:	b113      	cbz	r3, 800a81e <__ssrefill_r+0x24>
 800a818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	2300      	movs	r3, #0
 800a824:	6063      	str	r3, [r4, #4]
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f043 0320 	orr.w	r3, r3, #32
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	f04f 30ff 	mov.w	r0, #4294967295
 800a832:	e7f3      	b.n	800a81c <__ssrefill_r+0x22>

0800a834 <__ssvfiscanf_r>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	460c      	mov	r4, r1
 800a83a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a83e:	2100      	movs	r1, #0
 800a840:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a844:	49a6      	ldr	r1, [pc, #664]	; (800aae0 <__ssvfiscanf_r+0x2ac>)
 800a846:	91a0      	str	r1, [sp, #640]	; 0x280
 800a848:	f10d 0804 	add.w	r8, sp, #4
 800a84c:	49a5      	ldr	r1, [pc, #660]	; (800aae4 <__ssvfiscanf_r+0x2b0>)
 800a84e:	4fa6      	ldr	r7, [pc, #664]	; (800aae8 <__ssvfiscanf_r+0x2b4>)
 800a850:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800aaec <__ssvfiscanf_r+0x2b8>
 800a854:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a858:	4606      	mov	r6, r0
 800a85a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	7813      	ldrb	r3, [r2, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 815a 	beq.w	800ab1a <__ssvfiscanf_r+0x2e6>
 800a866:	5dd9      	ldrb	r1, [r3, r7]
 800a868:	f011 0108 	ands.w	r1, r1, #8
 800a86c:	f102 0501 	add.w	r5, r2, #1
 800a870:	d019      	beq.n	800a8a6 <__ssvfiscanf_r+0x72>
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd0f      	ble.n	800a898 <__ssvfiscanf_r+0x64>
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	5cba      	ldrb	r2, [r7, r2]
 800a87e:	0712      	lsls	r2, r2, #28
 800a880:	d401      	bmi.n	800a886 <__ssvfiscanf_r+0x52>
 800a882:	462a      	mov	r2, r5
 800a884:	e7eb      	b.n	800a85e <__ssvfiscanf_r+0x2a>
 800a886:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a888:	3201      	adds	r2, #1
 800a88a:	9245      	str	r2, [sp, #276]	; 0x114
 800a88c:	6862      	ldr	r2, [r4, #4]
 800a88e:	3301      	adds	r3, #1
 800a890:	3a01      	subs	r2, #1
 800a892:	6062      	str	r2, [r4, #4]
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	e7ec      	b.n	800a872 <__ssvfiscanf_r+0x3e>
 800a898:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a89a:	4621      	mov	r1, r4
 800a89c:	4630      	mov	r0, r6
 800a89e:	4798      	blx	r3
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d0e9      	beq.n	800a878 <__ssvfiscanf_r+0x44>
 800a8a4:	e7ed      	b.n	800a882 <__ssvfiscanf_r+0x4e>
 800a8a6:	2b25      	cmp	r3, #37	; 0x25
 800a8a8:	d012      	beq.n	800a8d0 <__ssvfiscanf_r+0x9c>
 800a8aa:	469a      	mov	sl, r3
 800a8ac:	6863      	ldr	r3, [r4, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f340 8091 	ble.w	800a9d6 <__ssvfiscanf_r+0x1a2>
 800a8b4:	6822      	ldr	r2, [r4, #0]
 800a8b6:	7813      	ldrb	r3, [r2, #0]
 800a8b8:	4553      	cmp	r3, sl
 800a8ba:	f040 812e 	bne.w	800ab1a <__ssvfiscanf_r+0x2e6>
 800a8be:	6863      	ldr	r3, [r4, #4]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	6063      	str	r3, [r4, #4]
 800a8c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a8c6:	3201      	adds	r2, #1
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	6022      	str	r2, [r4, #0]
 800a8cc:	9345      	str	r3, [sp, #276]	; 0x114
 800a8ce:	e7d8      	b.n	800a882 <__ssvfiscanf_r+0x4e>
 800a8d0:	9141      	str	r1, [sp, #260]	; 0x104
 800a8d2:	9143      	str	r1, [sp, #268]	; 0x10c
 800a8d4:	7853      	ldrb	r3, [r2, #1]
 800a8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d8:	bf02      	ittt	eq
 800a8da:	2310      	moveq	r3, #16
 800a8dc:	1c95      	addeq	r5, r2, #2
 800a8de:	9341      	streq	r3, [sp, #260]	; 0x104
 800a8e0:	220a      	movs	r2, #10
 800a8e2:	46aa      	mov	sl, r5
 800a8e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a8e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	d91d      	bls.n	800a92c <__ssvfiscanf_r+0xf8>
 800a8f0:	487e      	ldr	r0, [pc, #504]	; (800aaec <__ssvfiscanf_r+0x2b8>)
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	f7f5 fc94 	bl	8000220 <memchr>
 800a8f8:	b140      	cbz	r0, 800a90c <__ssvfiscanf_r+0xd8>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	eba0 0009 	sub.w	r0, r0, r9
 800a900:	fa03 f000 	lsl.w	r0, r3, r0
 800a904:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a906:	4318      	orrs	r0, r3
 800a908:	9041      	str	r0, [sp, #260]	; 0x104
 800a90a:	4655      	mov	r5, sl
 800a90c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a910:	2b78      	cmp	r3, #120	; 0x78
 800a912:	d806      	bhi.n	800a922 <__ssvfiscanf_r+0xee>
 800a914:	2b57      	cmp	r3, #87	; 0x57
 800a916:	d810      	bhi.n	800a93a <__ssvfiscanf_r+0x106>
 800a918:	2b25      	cmp	r3, #37	; 0x25
 800a91a:	d0c6      	beq.n	800a8aa <__ssvfiscanf_r+0x76>
 800a91c:	d856      	bhi.n	800a9cc <__ssvfiscanf_r+0x198>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d064      	beq.n	800a9ec <__ssvfiscanf_r+0x1b8>
 800a922:	2303      	movs	r3, #3
 800a924:	9347      	str	r3, [sp, #284]	; 0x11c
 800a926:	230a      	movs	r3, #10
 800a928:	9342      	str	r3, [sp, #264]	; 0x108
 800a92a:	e071      	b.n	800aa10 <__ssvfiscanf_r+0x1dc>
 800a92c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a92e:	fb02 1103 	mla	r1, r2, r3, r1
 800a932:	3930      	subs	r1, #48	; 0x30
 800a934:	9143      	str	r1, [sp, #268]	; 0x10c
 800a936:	4655      	mov	r5, sl
 800a938:	e7d3      	b.n	800a8e2 <__ssvfiscanf_r+0xae>
 800a93a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a93e:	2a20      	cmp	r2, #32
 800a940:	d8ef      	bhi.n	800a922 <__ssvfiscanf_r+0xee>
 800a942:	a101      	add	r1, pc, #4	; (adr r1, 800a948 <__ssvfiscanf_r+0x114>)
 800a944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a948:	0800a9fb 	.word	0x0800a9fb
 800a94c:	0800a923 	.word	0x0800a923
 800a950:	0800a923 	.word	0x0800a923
 800a954:	0800aa59 	.word	0x0800aa59
 800a958:	0800a923 	.word	0x0800a923
 800a95c:	0800a923 	.word	0x0800a923
 800a960:	0800a923 	.word	0x0800a923
 800a964:	0800a923 	.word	0x0800a923
 800a968:	0800a923 	.word	0x0800a923
 800a96c:	0800a923 	.word	0x0800a923
 800a970:	0800a923 	.word	0x0800a923
 800a974:	0800aa6f 	.word	0x0800aa6f
 800a978:	0800aa45 	.word	0x0800aa45
 800a97c:	0800a9d3 	.word	0x0800a9d3
 800a980:	0800a9d3 	.word	0x0800a9d3
 800a984:	0800a9d3 	.word	0x0800a9d3
 800a988:	0800a923 	.word	0x0800a923
 800a98c:	0800aa49 	.word	0x0800aa49
 800a990:	0800a923 	.word	0x0800a923
 800a994:	0800a923 	.word	0x0800a923
 800a998:	0800a923 	.word	0x0800a923
 800a99c:	0800a923 	.word	0x0800a923
 800a9a0:	0800aa7f 	.word	0x0800aa7f
 800a9a4:	0800aa51 	.word	0x0800aa51
 800a9a8:	0800a9f3 	.word	0x0800a9f3
 800a9ac:	0800a923 	.word	0x0800a923
 800a9b0:	0800a923 	.word	0x0800a923
 800a9b4:	0800aa7b 	.word	0x0800aa7b
 800a9b8:	0800a923 	.word	0x0800a923
 800a9bc:	0800aa45 	.word	0x0800aa45
 800a9c0:	0800a923 	.word	0x0800a923
 800a9c4:	0800a923 	.word	0x0800a923
 800a9c8:	0800a9fb 	.word	0x0800a9fb
 800a9cc:	3b45      	subs	r3, #69	; 0x45
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d8a7      	bhi.n	800a922 <__ssvfiscanf_r+0xee>
 800a9d2:	2305      	movs	r3, #5
 800a9d4:	e01b      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800a9d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4798      	blx	r3
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f43f af68 	beq.w	800a8b4 <__ssvfiscanf_r+0x80>
 800a9e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f040 808d 	bne.w	800ab06 <__ssvfiscanf_r+0x2d2>
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	e08f      	b.n	800ab12 <__ssvfiscanf_r+0x2de>
 800a9f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a9f4:	f042 0220 	orr.w	r2, r2, #32
 800a9f8:	9241      	str	r2, [sp, #260]	; 0x104
 800a9fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a9fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa00:	9241      	str	r2, [sp, #260]	; 0x104
 800aa02:	2210      	movs	r2, #16
 800aa04:	2b6f      	cmp	r3, #111	; 0x6f
 800aa06:	9242      	str	r2, [sp, #264]	; 0x108
 800aa08:	bf34      	ite	cc
 800aa0a:	2303      	movcc	r3, #3
 800aa0c:	2304      	movcs	r3, #4
 800aa0e:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd42      	ble.n	800aa9c <__ssvfiscanf_r+0x268>
 800aa16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa18:	0659      	lsls	r1, r3, #25
 800aa1a:	d404      	bmi.n	800aa26 <__ssvfiscanf_r+0x1f2>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	5cba      	ldrb	r2, [r7, r2]
 800aa22:	0712      	lsls	r2, r2, #28
 800aa24:	d441      	bmi.n	800aaaa <__ssvfiscanf_r+0x276>
 800aa26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	dc50      	bgt.n	800aace <__ssvfiscanf_r+0x29a>
 800aa2c:	466b      	mov	r3, sp
 800aa2e:	4622      	mov	r2, r4
 800aa30:	a941      	add	r1, sp, #260	; 0x104
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 f876 	bl	800ab24 <_scanf_chars>
 800aa38:	2801      	cmp	r0, #1
 800aa3a:	d06e      	beq.n	800ab1a <__ssvfiscanf_r+0x2e6>
 800aa3c:	2802      	cmp	r0, #2
 800aa3e:	f47f af20 	bne.w	800a882 <__ssvfiscanf_r+0x4e>
 800aa42:	e7cf      	b.n	800a9e4 <__ssvfiscanf_r+0x1b0>
 800aa44:	220a      	movs	r2, #10
 800aa46:	e7dd      	b.n	800aa04 <__ssvfiscanf_r+0x1d0>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9342      	str	r3, [sp, #264]	; 0x108
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e7de      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800aa50:	2308      	movs	r3, #8
 800aa52:	9342      	str	r3, [sp, #264]	; 0x108
 800aa54:	2304      	movs	r3, #4
 800aa56:	e7da      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f000 f9e0 	bl	800ae20 <__sccl>
 800aa60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa66:	9341      	str	r3, [sp, #260]	; 0x104
 800aa68:	4605      	mov	r5, r0
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e7cf      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800aa6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa74:	9341      	str	r3, [sp, #260]	; 0x104
 800aa76:	2300      	movs	r3, #0
 800aa78:	e7c9      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	e7c7      	b.n	800aa0e <__ssvfiscanf_r+0x1da>
 800aa7e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800aa80:	06c3      	lsls	r3, r0, #27
 800aa82:	f53f aefe 	bmi.w	800a882 <__ssvfiscanf_r+0x4e>
 800aa86:	9b00      	ldr	r3, [sp, #0]
 800aa88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aa8a:	1d19      	adds	r1, r3, #4
 800aa8c:	9100      	str	r1, [sp, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f010 0f01 	tst.w	r0, #1
 800aa94:	bf14      	ite	ne
 800aa96:	801a      	strhne	r2, [r3, #0]
 800aa98:	601a      	streq	r2, [r3, #0]
 800aa9a:	e6f2      	b.n	800a882 <__ssvfiscanf_r+0x4e>
 800aa9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4798      	blx	r3
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d0b6      	beq.n	800aa16 <__ssvfiscanf_r+0x1e2>
 800aaa8:	e79c      	b.n	800a9e4 <__ssvfiscanf_r+0x1b0>
 800aaaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aaac:	3201      	adds	r2, #1
 800aaae:	9245      	str	r2, [sp, #276]	; 0x114
 800aab0:	6862      	ldr	r2, [r4, #4]
 800aab2:	3a01      	subs	r2, #1
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	6062      	str	r2, [r4, #4]
 800aab8:	dd02      	ble.n	800aac0 <__ssvfiscanf_r+0x28c>
 800aaba:	3301      	adds	r3, #1
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	e7ad      	b.n	800aa1c <__ssvfiscanf_r+0x1e8>
 800aac0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aac2:	4621      	mov	r1, r4
 800aac4:	4630      	mov	r0, r6
 800aac6:	4798      	blx	r3
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0a7      	beq.n	800aa1c <__ssvfiscanf_r+0x1e8>
 800aacc:	e78a      	b.n	800a9e4 <__ssvfiscanf_r+0x1b0>
 800aace:	2b04      	cmp	r3, #4
 800aad0:	dc0e      	bgt.n	800aaf0 <__ssvfiscanf_r+0x2bc>
 800aad2:	466b      	mov	r3, sp
 800aad4:	4622      	mov	r2, r4
 800aad6:	a941      	add	r1, sp, #260	; 0x104
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f87d 	bl	800abd8 <_scanf_i>
 800aade:	e7ab      	b.n	800aa38 <__ssvfiscanf_r+0x204>
 800aae0:	0800a781 	.word	0x0800a781
 800aae4:	0800a7fb 	.word	0x0800a7fb
 800aae8:	0800bb61 	.word	0x0800bb61
 800aaec:	0800beca 	.word	0x0800beca
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <__ssvfiscanf_r+0x2ec>)
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f43f aec5 	beq.w	800a882 <__ssvfiscanf_r+0x4e>
 800aaf8:	466b      	mov	r3, sp
 800aafa:	4622      	mov	r2, r4
 800aafc:	a941      	add	r1, sp, #260	; 0x104
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7fc fb74 	bl	80071ec <_scanf_float>
 800ab04:	e798      	b.n	800aa38 <__ssvfiscanf_r+0x204>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab0c:	bf18      	it	ne
 800ab0e:	f04f 30ff 	movne.w	r0, #4294967295
 800ab12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab1c:	e7f9      	b.n	800ab12 <__ssvfiscanf_r+0x2de>
 800ab1e:	bf00      	nop
 800ab20:	080071ed 	.word	0x080071ed

0800ab24 <_scanf_chars>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4615      	mov	r5, r2
 800ab2a:	688a      	ldr	r2, [r1, #8]
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	b932      	cbnz	r2, 800ab40 <_scanf_chars+0x1c>
 800ab32:	698a      	ldr	r2, [r1, #24]
 800ab34:	2a00      	cmp	r2, #0
 800ab36:	bf0c      	ite	eq
 800ab38:	2201      	moveq	r2, #1
 800ab3a:	f04f 32ff 	movne.w	r2, #4294967295
 800ab3e:	608a      	str	r2, [r1, #8]
 800ab40:	6822      	ldr	r2, [r4, #0]
 800ab42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800abd4 <_scanf_chars+0xb0>
 800ab46:	06d1      	lsls	r1, r2, #27
 800ab48:	bf5f      	itttt	pl
 800ab4a:	681a      	ldrpl	r2, [r3, #0]
 800ab4c:	1d11      	addpl	r1, r2, #4
 800ab4e:	6019      	strpl	r1, [r3, #0]
 800ab50:	6816      	ldrpl	r6, [r2, #0]
 800ab52:	2700      	movs	r7, #0
 800ab54:	69a0      	ldr	r0, [r4, #24]
 800ab56:	b188      	cbz	r0, 800ab7c <_scanf_chars+0x58>
 800ab58:	2801      	cmp	r0, #1
 800ab5a:	d107      	bne.n	800ab6c <_scanf_chars+0x48>
 800ab5c:	682a      	ldr	r2, [r5, #0]
 800ab5e:	7811      	ldrb	r1, [r2, #0]
 800ab60:	6962      	ldr	r2, [r4, #20]
 800ab62:	5c52      	ldrb	r2, [r2, r1]
 800ab64:	b952      	cbnz	r2, 800ab7c <_scanf_chars+0x58>
 800ab66:	2f00      	cmp	r7, #0
 800ab68:	d031      	beq.n	800abce <_scanf_chars+0xaa>
 800ab6a:	e022      	b.n	800abb2 <_scanf_chars+0x8e>
 800ab6c:	2802      	cmp	r0, #2
 800ab6e:	d120      	bne.n	800abb2 <_scanf_chars+0x8e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ab78:	071b      	lsls	r3, r3, #28
 800ab7a:	d41a      	bmi.n	800abb2 <_scanf_chars+0x8e>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	06da      	lsls	r2, r3, #27
 800ab80:	bf5e      	ittt	pl
 800ab82:	682b      	ldrpl	r3, [r5, #0]
 800ab84:	781b      	ldrbpl	r3, [r3, #0]
 800ab86:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ab8a:	682a      	ldr	r2, [r5, #0]
 800ab8c:	686b      	ldr	r3, [r5, #4]
 800ab8e:	3201      	adds	r2, #1
 800ab90:	602a      	str	r2, [r5, #0]
 800ab92:	68a2      	ldr	r2, [r4, #8]
 800ab94:	3b01      	subs	r3, #1
 800ab96:	3a01      	subs	r2, #1
 800ab98:	606b      	str	r3, [r5, #4]
 800ab9a:	3701      	adds	r7, #1
 800ab9c:	60a2      	str	r2, [r4, #8]
 800ab9e:	b142      	cbz	r2, 800abb2 <_scanf_chars+0x8e>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dcd7      	bgt.n	800ab54 <_scanf_chars+0x30>
 800aba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aba8:	4629      	mov	r1, r5
 800abaa:	4640      	mov	r0, r8
 800abac:	4798      	blx	r3
 800abae:	2800      	cmp	r0, #0
 800abb0:	d0d0      	beq.n	800ab54 <_scanf_chars+0x30>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f013 0310 	ands.w	r3, r3, #16
 800abb8:	d105      	bne.n	800abc6 <_scanf_chars+0xa2>
 800abba:	68e2      	ldr	r2, [r4, #12]
 800abbc:	3201      	adds	r2, #1
 800abbe:	60e2      	str	r2, [r4, #12]
 800abc0:	69a2      	ldr	r2, [r4, #24]
 800abc2:	b102      	cbz	r2, 800abc6 <_scanf_chars+0xa2>
 800abc4:	7033      	strb	r3, [r6, #0]
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	443b      	add	r3, r7
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	2000      	movs	r0, #0
 800abce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd2:	bf00      	nop
 800abd4:	0800bb61 	.word	0x0800bb61

0800abd8 <_scanf_i>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	4698      	mov	r8, r3
 800abde:	4b76      	ldr	r3, [pc, #472]	; (800adb8 <_scanf_i+0x1e0>)
 800abe0:	460c      	mov	r4, r1
 800abe2:	4682      	mov	sl, r0
 800abe4:	4616      	mov	r6, r2
 800abe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abea:	b087      	sub	sp, #28
 800abec:	ab03      	add	r3, sp, #12
 800abee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800abf2:	4b72      	ldr	r3, [pc, #456]	; (800adbc <_scanf_i+0x1e4>)
 800abf4:	69a1      	ldr	r1, [r4, #24]
 800abf6:	4a72      	ldr	r2, [pc, #456]	; (800adc0 <_scanf_i+0x1e8>)
 800abf8:	2903      	cmp	r1, #3
 800abfa:	bf18      	it	ne
 800abfc:	461a      	movne	r2, r3
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	9201      	str	r2, [sp, #4]
 800ac02:	1e5a      	subs	r2, r3, #1
 800ac04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac08:	bf88      	it	hi
 800ac0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac0e:	4627      	mov	r7, r4
 800ac10:	bf82      	ittt	hi
 800ac12:	eb03 0905 	addhi.w	r9, r3, r5
 800ac16:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac1a:	60a3      	strhi	r3, [r4, #8]
 800ac1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ac20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac24:	bf98      	it	ls
 800ac26:	f04f 0900 	movls.w	r9, #0
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	463d      	mov	r5, r7
 800ac2e:	f04f 0b00 	mov.w	fp, #0
 800ac32:	6831      	ldr	r1, [r6, #0]
 800ac34:	ab03      	add	r3, sp, #12
 800ac36:	7809      	ldrb	r1, [r1, #0]
 800ac38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	f7f5 faef 	bl	8000220 <memchr>
 800ac42:	b328      	cbz	r0, 800ac90 <_scanf_i+0xb8>
 800ac44:	f1bb 0f01 	cmp.w	fp, #1
 800ac48:	d159      	bne.n	800acfe <_scanf_i+0x126>
 800ac4a:	6862      	ldr	r2, [r4, #4]
 800ac4c:	b92a      	cbnz	r2, 800ac5a <_scanf_i+0x82>
 800ac4e:	6822      	ldr	r2, [r4, #0]
 800ac50:	2308      	movs	r3, #8
 800ac52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	6022      	str	r2, [r4, #0]
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	68a2      	ldr	r2, [r4, #8]
 800ac64:	1e51      	subs	r1, r2, #1
 800ac66:	60a1      	str	r1, [r4, #8]
 800ac68:	b192      	cbz	r2, 800ac90 <_scanf_i+0xb8>
 800ac6a:	6832      	ldr	r2, [r6, #0]
 800ac6c:	1c51      	adds	r1, r2, #1
 800ac6e:	6031      	str	r1, [r6, #0]
 800ac70:	7812      	ldrb	r2, [r2, #0]
 800ac72:	f805 2b01 	strb.w	r2, [r5], #1
 800ac76:	6872      	ldr	r2, [r6, #4]
 800ac78:	3a01      	subs	r2, #1
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	6072      	str	r2, [r6, #4]
 800ac7e:	dc07      	bgt.n	800ac90 <_scanf_i+0xb8>
 800ac80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ac84:	4631      	mov	r1, r6
 800ac86:	4650      	mov	r0, sl
 800ac88:	4790      	blx	r2
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f040 8085 	bne.w	800ad9a <_scanf_i+0x1c2>
 800ac90:	f10b 0b01 	add.w	fp, fp, #1
 800ac94:	f1bb 0f03 	cmp.w	fp, #3
 800ac98:	d1cb      	bne.n	800ac32 <_scanf_i+0x5a>
 800ac9a:	6863      	ldr	r3, [r4, #4]
 800ac9c:	b90b      	cbnz	r3, 800aca2 <_scanf_i+0xca>
 800ac9e:	230a      	movs	r3, #10
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	6863      	ldr	r3, [r4, #4]
 800aca4:	4947      	ldr	r1, [pc, #284]	; (800adc4 <_scanf_i+0x1ec>)
 800aca6:	6960      	ldr	r0, [r4, #20]
 800aca8:	1ac9      	subs	r1, r1, r3
 800acaa:	f000 f8b9 	bl	800ae20 <__sccl>
 800acae:	f04f 0b00 	mov.w	fp, #0
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d03d      	beq.n	800ad36 <_scanf_i+0x15e>
 800acba:	6831      	ldr	r1, [r6, #0]
 800acbc:	6960      	ldr	r0, [r4, #20]
 800acbe:	f891 c000 	ldrb.w	ip, [r1]
 800acc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d035      	beq.n	800ad36 <_scanf_i+0x15e>
 800acca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800acce:	d124      	bne.n	800ad1a <_scanf_i+0x142>
 800acd0:	0510      	lsls	r0, r2, #20
 800acd2:	d522      	bpl.n	800ad1a <_scanf_i+0x142>
 800acd4:	f10b 0b01 	add.w	fp, fp, #1
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	d003      	beq.n	800ace6 <_scanf_i+0x10e>
 800acde:	3301      	adds	r3, #1
 800ace0:	f109 39ff 	add.w	r9, r9, #4294967295
 800ace4:	60a3      	str	r3, [r4, #8]
 800ace6:	6873      	ldr	r3, [r6, #4]
 800ace8:	3b01      	subs	r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	6073      	str	r3, [r6, #4]
 800acee:	dd1b      	ble.n	800ad28 <_scanf_i+0x150>
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	6033      	str	r3, [r6, #0]
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	e7d9      	b.n	800acb2 <_scanf_i+0xda>
 800acfe:	f1bb 0f02 	cmp.w	fp, #2
 800ad02:	d1ae      	bne.n	800ac62 <_scanf_i+0x8a>
 800ad04:	6822      	ldr	r2, [r4, #0]
 800ad06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad0e:	d1bf      	bne.n	800ac90 <_scanf_i+0xb8>
 800ad10:	2310      	movs	r3, #16
 800ad12:	6063      	str	r3, [r4, #4]
 800ad14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad18:	e7a2      	b.n	800ac60 <_scanf_i+0x88>
 800ad1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad1e:	6022      	str	r2, [r4, #0]
 800ad20:	780b      	ldrb	r3, [r1, #0]
 800ad22:	f805 3b01 	strb.w	r3, [r5], #1
 800ad26:	e7de      	b.n	800ace6 <_scanf_i+0x10e>
 800ad28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4650      	mov	r0, sl
 800ad30:	4798      	blx	r3
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d0df      	beq.n	800acf6 <_scanf_i+0x11e>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	05db      	lsls	r3, r3, #23
 800ad3a:	d50d      	bpl.n	800ad58 <_scanf_i+0x180>
 800ad3c:	42bd      	cmp	r5, r7
 800ad3e:	d909      	bls.n	800ad54 <_scanf_i+0x17c>
 800ad40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	4798      	blx	r3
 800ad4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ad52:	464d      	mov	r5, r9
 800ad54:	42bd      	cmp	r5, r7
 800ad56:	d02d      	beq.n	800adb4 <_scanf_i+0x1dc>
 800ad58:	6822      	ldr	r2, [r4, #0]
 800ad5a:	f012 0210 	ands.w	r2, r2, #16
 800ad5e:	d113      	bne.n	800ad88 <_scanf_i+0x1b0>
 800ad60:	702a      	strb	r2, [r5, #0]
 800ad62:	6863      	ldr	r3, [r4, #4]
 800ad64:	9e01      	ldr	r6, [sp, #4]
 800ad66:	4639      	mov	r1, r7
 800ad68:	4650      	mov	r0, sl
 800ad6a:	47b0      	blx	r6
 800ad6c:	6821      	ldr	r1, [r4, #0]
 800ad6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad72:	f011 0f20 	tst.w	r1, #32
 800ad76:	d013      	beq.n	800ada0 <_scanf_i+0x1c8>
 800ad78:	1d1a      	adds	r2, r3, #4
 800ad7a:	f8c8 2000 	str.w	r2, [r8]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6018      	str	r0, [r3, #0]
 800ad82:	68e3      	ldr	r3, [r4, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60e3      	str	r3, [r4, #12]
 800ad88:	1bed      	subs	r5, r5, r7
 800ad8a:	44ab      	add	fp, r5
 800ad8c:	6925      	ldr	r5, [r4, #16]
 800ad8e:	445d      	add	r5, fp
 800ad90:	6125      	str	r5, [r4, #16]
 800ad92:	2000      	movs	r0, #0
 800ad94:	b007      	add	sp, #28
 800ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9a:	f04f 0b00 	mov.w	fp, #0
 800ad9e:	e7ca      	b.n	800ad36 <_scanf_i+0x15e>
 800ada0:	1d1a      	adds	r2, r3, #4
 800ada2:	f8c8 2000 	str.w	r2, [r8]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f011 0f01 	tst.w	r1, #1
 800adac:	bf14      	ite	ne
 800adae:	8018      	strhne	r0, [r3, #0]
 800adb0:	6018      	streq	r0, [r3, #0]
 800adb2:	e7e6      	b.n	800ad82 <_scanf_i+0x1aa>
 800adb4:	2001      	movs	r0, #1
 800adb6:	e7ed      	b.n	800ad94 <_scanf_i+0x1bc>
 800adb8:	0800baa4 	.word	0x0800baa4
 800adbc:	0800af75 	.word	0x0800af75
 800adc0:	080084bd 	.word	0x080084bd
 800adc4:	0800beee 	.word	0x0800beee

0800adc8 <_read_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	; (800ade8 <_read_r+0x20>)
 800adcc:	4604      	mov	r4, r0
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	2200      	movs	r2, #0
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f7f6 fde2 	bl	80019a0 <_read>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_read_r+0x1e>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_read_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20000450 	.word	0x20000450
 800adec:	00000000 	.word	0x00000000

0800adf0 <nan>:
 800adf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800adf8 <nan+0x8>
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	00000000 	.word	0x00000000
 800adfc:	7ff80000 	.word	0x7ff80000

0800ae00 <_sbrk_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d06      	ldr	r5, [pc, #24]	; (800ae1c <_sbrk_r+0x1c>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f6 fe36 	bl	8001a7c <_sbrk>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_sbrk_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_sbrk_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000450 	.word	0x20000450

0800ae20 <__sccl>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	780b      	ldrb	r3, [r1, #0]
 800ae24:	4604      	mov	r4, r0
 800ae26:	2b5e      	cmp	r3, #94	; 0x5e
 800ae28:	bf0b      	itete	eq
 800ae2a:	784b      	ldrbeq	r3, [r1, #1]
 800ae2c:	1c48      	addne	r0, r1, #1
 800ae2e:	1c88      	addeq	r0, r1, #2
 800ae30:	2200      	movne	r2, #0
 800ae32:	bf08      	it	eq
 800ae34:	2201      	moveq	r2, #1
 800ae36:	1e61      	subs	r1, r4, #1
 800ae38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ae3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ae40:	42a9      	cmp	r1, r5
 800ae42:	d1fb      	bne.n	800ae3c <__sccl+0x1c>
 800ae44:	b90b      	cbnz	r3, 800ae4a <__sccl+0x2a>
 800ae46:	3801      	subs	r0, #1
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	f082 0201 	eor.w	r2, r2, #1
 800ae4e:	54e2      	strb	r2, [r4, r3]
 800ae50:	4605      	mov	r5, r0
 800ae52:	4628      	mov	r0, r5
 800ae54:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ae58:	292d      	cmp	r1, #45	; 0x2d
 800ae5a:	d006      	beq.n	800ae6a <__sccl+0x4a>
 800ae5c:	295d      	cmp	r1, #93	; 0x5d
 800ae5e:	d0f3      	beq.n	800ae48 <__sccl+0x28>
 800ae60:	b909      	cbnz	r1, 800ae66 <__sccl+0x46>
 800ae62:	4628      	mov	r0, r5
 800ae64:	e7f0      	b.n	800ae48 <__sccl+0x28>
 800ae66:	460b      	mov	r3, r1
 800ae68:	e7f1      	b.n	800ae4e <__sccl+0x2e>
 800ae6a:	786e      	ldrb	r6, [r5, #1]
 800ae6c:	2e5d      	cmp	r6, #93	; 0x5d
 800ae6e:	d0fa      	beq.n	800ae66 <__sccl+0x46>
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	dcf8      	bgt.n	800ae66 <__sccl+0x46>
 800ae74:	3502      	adds	r5, #2
 800ae76:	4619      	mov	r1, r3
 800ae78:	3101      	adds	r1, #1
 800ae7a:	428e      	cmp	r6, r1
 800ae7c:	5462      	strb	r2, [r4, r1]
 800ae7e:	dcfb      	bgt.n	800ae78 <__sccl+0x58>
 800ae80:	1af1      	subs	r1, r6, r3
 800ae82:	3901      	subs	r1, #1
 800ae84:	1c58      	adds	r0, r3, #1
 800ae86:	42b3      	cmp	r3, r6
 800ae88:	bfa8      	it	ge
 800ae8a:	2100      	movge	r1, #0
 800ae8c:	1843      	adds	r3, r0, r1
 800ae8e:	e7e0      	b.n	800ae52 <__sccl+0x32>

0800ae90 <_strtoul_l.constprop.0>:
 800ae90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae94:	4f36      	ldr	r7, [pc, #216]	; (800af70 <_strtoul_l.constprop.0+0xe0>)
 800ae96:	4686      	mov	lr, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aea0:	5de6      	ldrb	r6, [r4, r7]
 800aea2:	f016 0608 	ands.w	r6, r6, #8
 800aea6:	d1f8      	bne.n	800ae9a <_strtoul_l.constprop.0+0xa>
 800aea8:	2c2d      	cmp	r4, #45	; 0x2d
 800aeaa:	d12f      	bne.n	800af0c <_strtoul_l.constprop.0+0x7c>
 800aeac:	782c      	ldrb	r4, [r5, #0]
 800aeae:	2601      	movs	r6, #1
 800aeb0:	1c85      	adds	r5, r0, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d057      	beq.n	800af66 <_strtoul_l.constprop.0+0xd6>
 800aeb6:	2b10      	cmp	r3, #16
 800aeb8:	d109      	bne.n	800aece <_strtoul_l.constprop.0+0x3e>
 800aeba:	2c30      	cmp	r4, #48	; 0x30
 800aebc:	d107      	bne.n	800aece <_strtoul_l.constprop.0+0x3e>
 800aebe:	7828      	ldrb	r0, [r5, #0]
 800aec0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aec4:	2858      	cmp	r0, #88	; 0x58
 800aec6:	d149      	bne.n	800af5c <_strtoul_l.constprop.0+0xcc>
 800aec8:	786c      	ldrb	r4, [r5, #1]
 800aeca:	2310      	movs	r3, #16
 800aecc:	3502      	adds	r5, #2
 800aece:	f04f 38ff 	mov.w	r8, #4294967295
 800aed2:	2700      	movs	r7, #0
 800aed4:	fbb8 f8f3 	udiv	r8, r8, r3
 800aed8:	fb03 f908 	mul.w	r9, r3, r8
 800aedc:	ea6f 0909 	mvn.w	r9, r9
 800aee0:	4638      	mov	r0, r7
 800aee2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aee6:	f1bc 0f09 	cmp.w	ip, #9
 800aeea:	d814      	bhi.n	800af16 <_strtoul_l.constprop.0+0x86>
 800aeec:	4664      	mov	r4, ip
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	dd22      	ble.n	800af38 <_strtoul_l.constprop.0+0xa8>
 800aef2:	2f00      	cmp	r7, #0
 800aef4:	db1d      	blt.n	800af32 <_strtoul_l.constprop.0+0xa2>
 800aef6:	4580      	cmp	r8, r0
 800aef8:	d31b      	bcc.n	800af32 <_strtoul_l.constprop.0+0xa2>
 800aefa:	d101      	bne.n	800af00 <_strtoul_l.constprop.0+0x70>
 800aefc:	45a1      	cmp	r9, r4
 800aefe:	db18      	blt.n	800af32 <_strtoul_l.constprop.0+0xa2>
 800af00:	fb00 4003 	mla	r0, r0, r3, r4
 800af04:	2701      	movs	r7, #1
 800af06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af0a:	e7ea      	b.n	800aee2 <_strtoul_l.constprop.0+0x52>
 800af0c:	2c2b      	cmp	r4, #43	; 0x2b
 800af0e:	bf04      	itt	eq
 800af10:	782c      	ldrbeq	r4, [r5, #0]
 800af12:	1c85      	addeq	r5, r0, #2
 800af14:	e7cd      	b.n	800aeb2 <_strtoul_l.constprop.0+0x22>
 800af16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800af1a:	f1bc 0f19 	cmp.w	ip, #25
 800af1e:	d801      	bhi.n	800af24 <_strtoul_l.constprop.0+0x94>
 800af20:	3c37      	subs	r4, #55	; 0x37
 800af22:	e7e4      	b.n	800aeee <_strtoul_l.constprop.0+0x5e>
 800af24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800af28:	f1bc 0f19 	cmp.w	ip, #25
 800af2c:	d804      	bhi.n	800af38 <_strtoul_l.constprop.0+0xa8>
 800af2e:	3c57      	subs	r4, #87	; 0x57
 800af30:	e7dd      	b.n	800aeee <_strtoul_l.constprop.0+0x5e>
 800af32:	f04f 37ff 	mov.w	r7, #4294967295
 800af36:	e7e6      	b.n	800af06 <_strtoul_l.constprop.0+0x76>
 800af38:	2f00      	cmp	r7, #0
 800af3a:	da07      	bge.n	800af4c <_strtoul_l.constprop.0+0xbc>
 800af3c:	2322      	movs	r3, #34	; 0x22
 800af3e:	f8ce 3000 	str.w	r3, [lr]
 800af42:	f04f 30ff 	mov.w	r0, #4294967295
 800af46:	b932      	cbnz	r2, 800af56 <_strtoul_l.constprop.0+0xc6>
 800af48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af4c:	b106      	cbz	r6, 800af50 <_strtoul_l.constprop.0+0xc0>
 800af4e:	4240      	negs	r0, r0
 800af50:	2a00      	cmp	r2, #0
 800af52:	d0f9      	beq.n	800af48 <_strtoul_l.constprop.0+0xb8>
 800af54:	b107      	cbz	r7, 800af58 <_strtoul_l.constprop.0+0xc8>
 800af56:	1e69      	subs	r1, r5, #1
 800af58:	6011      	str	r1, [r2, #0]
 800af5a:	e7f5      	b.n	800af48 <_strtoul_l.constprop.0+0xb8>
 800af5c:	2430      	movs	r4, #48	; 0x30
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1b5      	bne.n	800aece <_strtoul_l.constprop.0+0x3e>
 800af62:	2308      	movs	r3, #8
 800af64:	e7b3      	b.n	800aece <_strtoul_l.constprop.0+0x3e>
 800af66:	2c30      	cmp	r4, #48	; 0x30
 800af68:	d0a9      	beq.n	800aebe <_strtoul_l.constprop.0+0x2e>
 800af6a:	230a      	movs	r3, #10
 800af6c:	e7af      	b.n	800aece <_strtoul_l.constprop.0+0x3e>
 800af6e:	bf00      	nop
 800af70:	0800bb61 	.word	0x0800bb61

0800af74 <_strtoul_r>:
 800af74:	f7ff bf8c 	b.w	800ae90 <_strtoul_l.constprop.0>

0800af78 <__submore>:
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	460c      	mov	r4, r1
 800af7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af84:	4299      	cmp	r1, r3
 800af86:	d11d      	bne.n	800afc4 <__submore+0x4c>
 800af88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800af8c:	f7ff fa28 	bl	800a3e0 <_malloc_r>
 800af90:	b918      	cbnz	r0, 800af9a <__submore+0x22>
 800af92:	f04f 30ff 	mov.w	r0, #4294967295
 800af96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800afa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800afa4:	6360      	str	r0, [r4, #52]	; 0x34
 800afa6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800afaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800afae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800afb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800afb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800afba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800afbe:	6020      	str	r0, [r4, #0]
 800afc0:	2000      	movs	r0, #0
 800afc2:	e7e8      	b.n	800af96 <__submore+0x1e>
 800afc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800afc6:	0077      	lsls	r7, r6, #1
 800afc8:	463a      	mov	r2, r7
 800afca:	f000 fa2d 	bl	800b428 <_realloc_r>
 800afce:	4605      	mov	r5, r0
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d0de      	beq.n	800af92 <__submore+0x1a>
 800afd4:	eb00 0806 	add.w	r8, r0, r6
 800afd8:	4601      	mov	r1, r0
 800afda:	4632      	mov	r2, r6
 800afdc:	4640      	mov	r0, r8
 800afde:	f7fe fcad 	bl	800993c <memcpy>
 800afe2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800afe6:	f8c4 8000 	str.w	r8, [r4]
 800afea:	e7e9      	b.n	800afc0 <__submore+0x48>

0800afec <__ascii_wctomb>:
 800afec:	b149      	cbz	r1, 800b002 <__ascii_wctomb+0x16>
 800afee:	2aff      	cmp	r2, #255	; 0xff
 800aff0:	bf85      	ittet	hi
 800aff2:	238a      	movhi	r3, #138	; 0x8a
 800aff4:	6003      	strhi	r3, [r0, #0]
 800aff6:	700a      	strbls	r2, [r1, #0]
 800aff8:	f04f 30ff 	movhi.w	r0, #4294967295
 800affc:	bf98      	it	ls
 800affe:	2001      	movls	r0, #1
 800b000:	4770      	bx	lr
 800b002:	4608      	mov	r0, r1
 800b004:	4770      	bx	lr
	...

0800b008 <__assert_func>:
 800b008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b00a:	4614      	mov	r4, r2
 800b00c:	461a      	mov	r2, r3
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <__assert_func+0x2c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4605      	mov	r5, r0
 800b014:	68d8      	ldr	r0, [r3, #12]
 800b016:	b14c      	cbz	r4, 800b02c <__assert_func+0x24>
 800b018:	4b07      	ldr	r3, [pc, #28]	; (800b038 <__assert_func+0x30>)
 800b01a:	9100      	str	r1, [sp, #0]
 800b01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b020:	4906      	ldr	r1, [pc, #24]	; (800b03c <__assert_func+0x34>)
 800b022:	462b      	mov	r3, r5
 800b024:	f000 f9a6 	bl	800b374 <fiprintf>
 800b028:	f000 fc46 	bl	800b8b8 <abort>
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <__assert_func+0x38>)
 800b02e:	461c      	mov	r4, r3
 800b030:	e7f3      	b.n	800b01a <__assert_func+0x12>
 800b032:	bf00      	nop
 800b034:	20000028 	.word	0x20000028
 800b038:	0800bef0 	.word	0x0800bef0
 800b03c:	0800befd 	.word	0x0800befd
 800b040:	0800bf2b 	.word	0x0800bf2b

0800b044 <__sflush_r>:
 800b044:	898a      	ldrh	r2, [r1, #12]
 800b046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04a:	4605      	mov	r5, r0
 800b04c:	0710      	lsls	r0, r2, #28
 800b04e:	460c      	mov	r4, r1
 800b050:	d458      	bmi.n	800b104 <__sflush_r+0xc0>
 800b052:	684b      	ldr	r3, [r1, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	dc05      	bgt.n	800b064 <__sflush_r+0x20>
 800b058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc02      	bgt.n	800b064 <__sflush_r+0x20>
 800b05e:	2000      	movs	r0, #0
 800b060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b066:	2e00      	cmp	r6, #0
 800b068:	d0f9      	beq.n	800b05e <__sflush_r+0x1a>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b070:	682f      	ldr	r7, [r5, #0]
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	d032      	beq.n	800b0dc <__sflush_r+0x98>
 800b076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	075a      	lsls	r2, r3, #29
 800b07c:	d505      	bpl.n	800b08a <__sflush_r+0x46>
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	1ac0      	subs	r0, r0, r3
 800b082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b084:	b10b      	cbz	r3, 800b08a <__sflush_r+0x46>
 800b086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b088:	1ac0      	subs	r0, r0, r3
 800b08a:	2300      	movs	r3, #0
 800b08c:	4602      	mov	r2, r0
 800b08e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	4628      	mov	r0, r5
 800b094:	47b0      	blx	r6
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	d106      	bne.n	800b0aa <__sflush_r+0x66>
 800b09c:	6829      	ldr	r1, [r5, #0]
 800b09e:	291d      	cmp	r1, #29
 800b0a0:	d82c      	bhi.n	800b0fc <__sflush_r+0xb8>
 800b0a2:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <__sflush_r+0x108>)
 800b0a4:	40ca      	lsrs	r2, r1
 800b0a6:	07d6      	lsls	r6, r2, #31
 800b0a8:	d528      	bpl.n	800b0fc <__sflush_r+0xb8>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6062      	str	r2, [r4, #4]
 800b0ae:	04d9      	lsls	r1, r3, #19
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	6022      	str	r2, [r4, #0]
 800b0b4:	d504      	bpl.n	800b0c0 <__sflush_r+0x7c>
 800b0b6:	1c42      	adds	r2, r0, #1
 800b0b8:	d101      	bne.n	800b0be <__sflush_r+0x7a>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	b903      	cbnz	r3, 800b0c0 <__sflush_r+0x7c>
 800b0be:	6560      	str	r0, [r4, #84]	; 0x54
 800b0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c2:	602f      	str	r7, [r5, #0]
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	d0ca      	beq.n	800b05e <__sflush_r+0x1a>
 800b0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0cc:	4299      	cmp	r1, r3
 800b0ce:	d002      	beq.n	800b0d6 <__sflush_r+0x92>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7ff f919 	bl	800a308 <_free_r>
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	6360      	str	r0, [r4, #52]	; 0x34
 800b0da:	e7c1      	b.n	800b060 <__sflush_r+0x1c>
 800b0dc:	6a21      	ldr	r1, [r4, #32]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b0      	blx	r6
 800b0e4:	1c41      	adds	r1, r0, #1
 800b0e6:	d1c7      	bne.n	800b078 <__sflush_r+0x34>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0c4      	beq.n	800b078 <__sflush_r+0x34>
 800b0ee:	2b1d      	cmp	r3, #29
 800b0f0:	d001      	beq.n	800b0f6 <__sflush_r+0xb2>
 800b0f2:	2b16      	cmp	r3, #22
 800b0f4:	d101      	bne.n	800b0fa <__sflush_r+0xb6>
 800b0f6:	602f      	str	r7, [r5, #0]
 800b0f8:	e7b1      	b.n	800b05e <__sflush_r+0x1a>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	e7ad      	b.n	800b060 <__sflush_r+0x1c>
 800b104:	690f      	ldr	r7, [r1, #16]
 800b106:	2f00      	cmp	r7, #0
 800b108:	d0a9      	beq.n	800b05e <__sflush_r+0x1a>
 800b10a:	0793      	lsls	r3, r2, #30
 800b10c:	680e      	ldr	r6, [r1, #0]
 800b10e:	bf08      	it	eq
 800b110:	694b      	ldreq	r3, [r1, #20]
 800b112:	600f      	str	r7, [r1, #0]
 800b114:	bf18      	it	ne
 800b116:	2300      	movne	r3, #0
 800b118:	eba6 0807 	sub.w	r8, r6, r7
 800b11c:	608b      	str	r3, [r1, #8]
 800b11e:	f1b8 0f00 	cmp.w	r8, #0
 800b122:	dd9c      	ble.n	800b05e <__sflush_r+0x1a>
 800b124:	6a21      	ldr	r1, [r4, #32]
 800b126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b128:	4643      	mov	r3, r8
 800b12a:	463a      	mov	r2, r7
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b0      	blx	r6
 800b130:	2800      	cmp	r0, #0
 800b132:	dc06      	bgt.n	800b142 <__sflush_r+0xfe>
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	e78e      	b.n	800b060 <__sflush_r+0x1c>
 800b142:	4407      	add	r7, r0
 800b144:	eba8 0800 	sub.w	r8, r8, r0
 800b148:	e7e9      	b.n	800b11e <__sflush_r+0xda>
 800b14a:	bf00      	nop
 800b14c:	20400001 	.word	0x20400001

0800b150 <_fflush_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	690b      	ldr	r3, [r1, #16]
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b913      	cbnz	r3, 800b160 <_fflush_r+0x10>
 800b15a:	2500      	movs	r5, #0
 800b15c:	4628      	mov	r0, r5
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	b118      	cbz	r0, 800b16a <_fflush_r+0x1a>
 800b162:	6983      	ldr	r3, [r0, #24]
 800b164:	b90b      	cbnz	r3, 800b16a <_fflush_r+0x1a>
 800b166:	f000 f887 	bl	800b278 <__sinit>
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <_fflush_r+0x6c>)
 800b16c:	429c      	cmp	r4, r3
 800b16e:	d11b      	bne.n	800b1a8 <_fflush_r+0x58>
 800b170:	686c      	ldr	r4, [r5, #4]
 800b172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0ef      	beq.n	800b15a <_fflush_r+0xa>
 800b17a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b17c:	07d0      	lsls	r0, r2, #31
 800b17e:	d404      	bmi.n	800b18a <_fflush_r+0x3a>
 800b180:	0599      	lsls	r1, r3, #22
 800b182:	d402      	bmi.n	800b18a <_fflush_r+0x3a>
 800b184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b186:	f000 f927 	bl	800b3d8 <__retarget_lock_acquire_recursive>
 800b18a:	4628      	mov	r0, r5
 800b18c:	4621      	mov	r1, r4
 800b18e:	f7ff ff59 	bl	800b044 <__sflush_r>
 800b192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b194:	07da      	lsls	r2, r3, #31
 800b196:	4605      	mov	r5, r0
 800b198:	d4e0      	bmi.n	800b15c <_fflush_r+0xc>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	059b      	lsls	r3, r3, #22
 800b19e:	d4dd      	bmi.n	800b15c <_fflush_r+0xc>
 800b1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a2:	f000 f91a 	bl	800b3da <__retarget_lock_release_recursive>
 800b1a6:	e7d9      	b.n	800b15c <_fflush_r+0xc>
 800b1a8:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <_fflush_r+0x70>)
 800b1aa:	429c      	cmp	r4, r3
 800b1ac:	d101      	bne.n	800b1b2 <_fflush_r+0x62>
 800b1ae:	68ac      	ldr	r4, [r5, #8]
 800b1b0:	e7df      	b.n	800b172 <_fflush_r+0x22>
 800b1b2:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <_fflush_r+0x74>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	bf08      	it	eq
 800b1b8:	68ec      	ldreq	r4, [r5, #12]
 800b1ba:	e7da      	b.n	800b172 <_fflush_r+0x22>
 800b1bc:	0800bf4c 	.word	0x0800bf4c
 800b1c0:	0800bf6c 	.word	0x0800bf6c
 800b1c4:	0800bf2c 	.word	0x0800bf2c

0800b1c8 <std>:
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1d6:	6083      	str	r3, [r0, #8]
 800b1d8:	8181      	strh	r1, [r0, #12]
 800b1da:	6643      	str	r3, [r0, #100]	; 0x64
 800b1dc:	81c2      	strh	r2, [r0, #14]
 800b1de:	6183      	str	r3, [r0, #24]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	2208      	movs	r2, #8
 800b1e4:	305c      	adds	r0, #92	; 0x5c
 800b1e6:	f7fb fb8f 	bl	8006908 <memset>
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <std+0x38>)
 800b1ec:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ee:	4b05      	ldr	r3, [pc, #20]	; (800b204 <std+0x3c>)
 800b1f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <std+0x40>)
 800b1f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1f6:	4b05      	ldr	r3, [pc, #20]	; (800b20c <std+0x44>)
 800b1f8:	6224      	str	r4, [r4, #32]
 800b1fa:	6323      	str	r3, [r4, #48]	; 0x30
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	bf00      	nop
 800b200:	080076b1 	.word	0x080076b1
 800b204:	080076d7 	.word	0x080076d7
 800b208:	0800770f 	.word	0x0800770f
 800b20c:	08007733 	.word	0x08007733

0800b210 <_cleanup_r>:
 800b210:	4901      	ldr	r1, [pc, #4]	; (800b218 <_cleanup_r+0x8>)
 800b212:	f000 b8c1 	b.w	800b398 <_fwalk_reent>
 800b216:	bf00      	nop
 800b218:	0800b151 	.word	0x0800b151

0800b21c <__sfmoreglue>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	2268      	movs	r2, #104	; 0x68
 800b220:	1e4d      	subs	r5, r1, #1
 800b222:	4355      	muls	r5, r2
 800b224:	460e      	mov	r6, r1
 800b226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b22a:	f7ff f8d9 	bl	800a3e0 <_malloc_r>
 800b22e:	4604      	mov	r4, r0
 800b230:	b140      	cbz	r0, 800b244 <__sfmoreglue+0x28>
 800b232:	2100      	movs	r1, #0
 800b234:	e9c0 1600 	strd	r1, r6, [r0]
 800b238:	300c      	adds	r0, #12
 800b23a:	60a0      	str	r0, [r4, #8]
 800b23c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b240:	f7fb fb62 	bl	8006908 <memset>
 800b244:	4620      	mov	r0, r4
 800b246:	bd70      	pop	{r4, r5, r6, pc}

0800b248 <__sfp_lock_acquire>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__sfp_lock_acquire+0x8>)
 800b24a:	f000 b8c5 	b.w	800b3d8 <__retarget_lock_acquire_recursive>
 800b24e:	bf00      	nop
 800b250:	20000455 	.word	0x20000455

0800b254 <__sfp_lock_release>:
 800b254:	4801      	ldr	r0, [pc, #4]	; (800b25c <__sfp_lock_release+0x8>)
 800b256:	f000 b8c0 	b.w	800b3da <__retarget_lock_release_recursive>
 800b25a:	bf00      	nop
 800b25c:	20000455 	.word	0x20000455

0800b260 <__sinit_lock_acquire>:
 800b260:	4801      	ldr	r0, [pc, #4]	; (800b268 <__sinit_lock_acquire+0x8>)
 800b262:	f000 b8b9 	b.w	800b3d8 <__retarget_lock_acquire_recursive>
 800b266:	bf00      	nop
 800b268:	20000456 	.word	0x20000456

0800b26c <__sinit_lock_release>:
 800b26c:	4801      	ldr	r0, [pc, #4]	; (800b274 <__sinit_lock_release+0x8>)
 800b26e:	f000 b8b4 	b.w	800b3da <__retarget_lock_release_recursive>
 800b272:	bf00      	nop
 800b274:	20000456 	.word	0x20000456

0800b278 <__sinit>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	4604      	mov	r4, r0
 800b27c:	f7ff fff0 	bl	800b260 <__sinit_lock_acquire>
 800b280:	69a3      	ldr	r3, [r4, #24]
 800b282:	b11b      	cbz	r3, 800b28c <__sinit+0x14>
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	f7ff bff0 	b.w	800b26c <__sinit_lock_release>
 800b28c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b290:	6523      	str	r3, [r4, #80]	; 0x50
 800b292:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <__sinit+0x68>)
 800b294:	4a13      	ldr	r2, [pc, #76]	; (800b2e4 <__sinit+0x6c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	62a2      	str	r2, [r4, #40]	; 0x28
 800b29a:	42a3      	cmp	r3, r4
 800b29c:	bf04      	itt	eq
 800b29e:	2301      	moveq	r3, #1
 800b2a0:	61a3      	streq	r3, [r4, #24]
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 f820 	bl	800b2e8 <__sfp>
 800b2a8:	6060      	str	r0, [r4, #4]
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 f81c 	bl	800b2e8 <__sfp>
 800b2b0:	60a0      	str	r0, [r4, #8]
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 f818 	bl	800b2e8 <__sfp>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	60e0      	str	r0, [r4, #12]
 800b2bc:	2104      	movs	r1, #4
 800b2be:	6860      	ldr	r0, [r4, #4]
 800b2c0:	f7ff ff82 	bl	800b1c8 <std>
 800b2c4:	68a0      	ldr	r0, [r4, #8]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	2109      	movs	r1, #9
 800b2ca:	f7ff ff7d 	bl	800b1c8 <std>
 800b2ce:	68e0      	ldr	r0, [r4, #12]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	2112      	movs	r1, #18
 800b2d4:	f7ff ff78 	bl	800b1c8 <std>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	61a3      	str	r3, [r4, #24]
 800b2dc:	e7d2      	b.n	800b284 <__sinit+0xc>
 800b2de:	bf00      	nop
 800b2e0:	0800bad0 	.word	0x0800bad0
 800b2e4:	0800b211 	.word	0x0800b211

0800b2e8 <__sfp>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	f7ff ffac 	bl	800b248 <__sfp_lock_acquire>
 800b2f0:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <__sfp+0x84>)
 800b2f2:	681e      	ldr	r6, [r3, #0]
 800b2f4:	69b3      	ldr	r3, [r6, #24]
 800b2f6:	b913      	cbnz	r3, 800b2fe <__sfp+0x16>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f7ff ffbd 	bl	800b278 <__sinit>
 800b2fe:	3648      	adds	r6, #72	; 0x48
 800b300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b304:	3b01      	subs	r3, #1
 800b306:	d503      	bpl.n	800b310 <__sfp+0x28>
 800b308:	6833      	ldr	r3, [r6, #0]
 800b30a:	b30b      	cbz	r3, 800b350 <__sfp+0x68>
 800b30c:	6836      	ldr	r6, [r6, #0]
 800b30e:	e7f7      	b.n	800b300 <__sfp+0x18>
 800b310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b314:	b9d5      	cbnz	r5, 800b34c <__sfp+0x64>
 800b316:	4b16      	ldr	r3, [pc, #88]	; (800b370 <__sfp+0x88>)
 800b318:	60e3      	str	r3, [r4, #12]
 800b31a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b31e:	6665      	str	r5, [r4, #100]	; 0x64
 800b320:	f000 f859 	bl	800b3d6 <__retarget_lock_init_recursive>
 800b324:	f7ff ff96 	bl	800b254 <__sfp_lock_release>
 800b328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b32c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	61a5      	str	r5, [r4, #24]
 800b334:	2208      	movs	r2, #8
 800b336:	4629      	mov	r1, r5
 800b338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b33c:	f7fb fae4 	bl	8006908 <memset>
 800b340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b348:	4620      	mov	r0, r4
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34c:	3468      	adds	r4, #104	; 0x68
 800b34e:	e7d9      	b.n	800b304 <__sfp+0x1c>
 800b350:	2104      	movs	r1, #4
 800b352:	4638      	mov	r0, r7
 800b354:	f7ff ff62 	bl	800b21c <__sfmoreglue>
 800b358:	4604      	mov	r4, r0
 800b35a:	6030      	str	r0, [r6, #0]
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1d5      	bne.n	800b30c <__sfp+0x24>
 800b360:	f7ff ff78 	bl	800b254 <__sfp_lock_release>
 800b364:	230c      	movs	r3, #12
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	e7ee      	b.n	800b348 <__sfp+0x60>
 800b36a:	bf00      	nop
 800b36c:	0800bad0 	.word	0x0800bad0
 800b370:	ffff0001 	.word	0xffff0001

0800b374 <fiprintf>:
 800b374:	b40e      	push	{r1, r2, r3}
 800b376:	b503      	push	{r0, r1, lr}
 800b378:	4601      	mov	r1, r0
 800b37a:	ab03      	add	r3, sp, #12
 800b37c:	4805      	ldr	r0, [pc, #20]	; (800b394 <fiprintf+0x20>)
 800b37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b382:	6800      	ldr	r0, [r0, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	f000 f8a7 	bl	800b4d8 <_vfiprintf_r>
 800b38a:	b002      	add	sp, #8
 800b38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b390:	b003      	add	sp, #12
 800b392:	4770      	bx	lr
 800b394:	20000028 	.word	0x20000028

0800b398 <_fwalk_reent>:
 800b398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b39c:	4606      	mov	r6, r0
 800b39e:	4688      	mov	r8, r1
 800b3a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3a4:	2700      	movs	r7, #0
 800b3a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3aa:	f1b9 0901 	subs.w	r9, r9, #1
 800b3ae:	d505      	bpl.n	800b3bc <_fwalk_reent+0x24>
 800b3b0:	6824      	ldr	r4, [r4, #0]
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	d1f7      	bne.n	800b3a6 <_fwalk_reent+0xe>
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3bc:	89ab      	ldrh	r3, [r5, #12]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d907      	bls.n	800b3d2 <_fwalk_reent+0x3a>
 800b3c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	d003      	beq.n	800b3d2 <_fwalk_reent+0x3a>
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	47c0      	blx	r8
 800b3d0:	4307      	orrs	r7, r0
 800b3d2:	3568      	adds	r5, #104	; 0x68
 800b3d4:	e7e9      	b.n	800b3aa <_fwalk_reent+0x12>

0800b3d6 <__retarget_lock_init_recursive>:
 800b3d6:	4770      	bx	lr

0800b3d8 <__retarget_lock_acquire_recursive>:
 800b3d8:	4770      	bx	lr

0800b3da <__retarget_lock_release_recursive>:
 800b3da:	4770      	bx	lr

0800b3dc <memmove>:
 800b3dc:	4288      	cmp	r0, r1
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	eb01 0402 	add.w	r4, r1, r2
 800b3e4:	d902      	bls.n	800b3ec <memmove+0x10>
 800b3e6:	4284      	cmp	r4, r0
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	d807      	bhi.n	800b3fc <memmove+0x20>
 800b3ec:	1e43      	subs	r3, r0, #1
 800b3ee:	42a1      	cmp	r1, r4
 800b3f0:	d008      	beq.n	800b404 <memmove+0x28>
 800b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fa:	e7f8      	b.n	800b3ee <memmove+0x12>
 800b3fc:	4402      	add	r2, r0
 800b3fe:	4601      	mov	r1, r0
 800b400:	428a      	cmp	r2, r1
 800b402:	d100      	bne.n	800b406 <memmove+0x2a>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b40e:	e7f7      	b.n	800b400 <memmove+0x24>

0800b410 <__malloc_lock>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__malloc_lock+0x8>)
 800b412:	f7ff bfe1 	b.w	800b3d8 <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	20000454 	.word	0x20000454

0800b41c <__malloc_unlock>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__malloc_unlock+0x8>)
 800b41e:	f7ff bfdc 	b.w	800b3da <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	20000454 	.word	0x20000454

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	4611      	mov	r1, r2
 800b43a:	f7fe bfd1 	b.w	800a3e0 <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7fe ff62 	bl	800a308 <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 faa0 	bl	800b990 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7fe ffbe 	bl	800a3e0 <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7fe fa62 	bl	800993c <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7fe ff44 	bl	800a308 <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>

0800b486 <__sfputc_r>:
 800b486:	6893      	ldr	r3, [r2, #8]
 800b488:	3b01      	subs	r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	b410      	push	{r4}
 800b48e:	6093      	str	r3, [r2, #8]
 800b490:	da08      	bge.n	800b4a4 <__sfputc_r+0x1e>
 800b492:	6994      	ldr	r4, [r2, #24]
 800b494:	42a3      	cmp	r3, r4
 800b496:	db01      	blt.n	800b49c <__sfputc_r+0x16>
 800b498:	290a      	cmp	r1, #10
 800b49a:	d103      	bne.n	800b4a4 <__sfputc_r+0x1e>
 800b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a0:	f000 b94a 	b.w	800b738 <__swbuf_r>
 800b4a4:	6813      	ldr	r3, [r2, #0]
 800b4a6:	1c58      	adds	r0, r3, #1
 800b4a8:	6010      	str	r0, [r2, #0]
 800b4aa:	7019      	strb	r1, [r3, #0]
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <__sfputs_r>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460f      	mov	r7, r1
 800b4ba:	4614      	mov	r4, r2
 800b4bc:	18d5      	adds	r5, r2, r3
 800b4be:	42ac      	cmp	r4, r5
 800b4c0:	d101      	bne.n	800b4c6 <__sfputs_r+0x12>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	e007      	b.n	800b4d6 <__sfputs_r+0x22>
 800b4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7ff ffda 	bl	800b486 <__sfputc_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d1f3      	bne.n	800b4be <__sfputs_r+0xa>
 800b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4d8 <_vfiprintf_r>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	460d      	mov	r5, r1
 800b4de:	b09d      	sub	sp, #116	; 0x74
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	4698      	mov	r8, r3
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	b118      	cbz	r0, 800b4f0 <_vfiprintf_r+0x18>
 800b4e8:	6983      	ldr	r3, [r0, #24]
 800b4ea:	b90b      	cbnz	r3, 800b4f0 <_vfiprintf_r+0x18>
 800b4ec:	f7ff fec4 	bl	800b278 <__sinit>
 800b4f0:	4b89      	ldr	r3, [pc, #548]	; (800b718 <_vfiprintf_r+0x240>)
 800b4f2:	429d      	cmp	r5, r3
 800b4f4:	d11b      	bne.n	800b52e <_vfiprintf_r+0x56>
 800b4f6:	6875      	ldr	r5, [r6, #4]
 800b4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_vfiprintf_r+0x32>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	059a      	lsls	r2, r3, #22
 800b502:	d402      	bmi.n	800b50a <_vfiprintf_r+0x32>
 800b504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b506:	f7ff ff67 	bl	800b3d8 <__retarget_lock_acquire_recursive>
 800b50a:	89ab      	ldrh	r3, [r5, #12]
 800b50c:	071b      	lsls	r3, r3, #28
 800b50e:	d501      	bpl.n	800b514 <_vfiprintf_r+0x3c>
 800b510:	692b      	ldr	r3, [r5, #16]
 800b512:	b9eb      	cbnz	r3, 800b550 <_vfiprintf_r+0x78>
 800b514:	4629      	mov	r1, r5
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f960 	bl	800b7dc <__swsetup_r>
 800b51c:	b1c0      	cbz	r0, 800b550 <_vfiprintf_r+0x78>
 800b51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b520:	07dc      	lsls	r4, r3, #31
 800b522:	d50e      	bpl.n	800b542 <_vfiprintf_r+0x6a>
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	b01d      	add	sp, #116	; 0x74
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	4b7b      	ldr	r3, [pc, #492]	; (800b71c <_vfiprintf_r+0x244>)
 800b530:	429d      	cmp	r5, r3
 800b532:	d101      	bne.n	800b538 <_vfiprintf_r+0x60>
 800b534:	68b5      	ldr	r5, [r6, #8]
 800b536:	e7df      	b.n	800b4f8 <_vfiprintf_r+0x20>
 800b538:	4b79      	ldr	r3, [pc, #484]	; (800b720 <_vfiprintf_r+0x248>)
 800b53a:	429d      	cmp	r5, r3
 800b53c:	bf08      	it	eq
 800b53e:	68f5      	ldreq	r5, [r6, #12]
 800b540:	e7da      	b.n	800b4f8 <_vfiprintf_r+0x20>
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	0598      	lsls	r0, r3, #22
 800b546:	d4ed      	bmi.n	800b524 <_vfiprintf_r+0x4c>
 800b548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b54a:	f7ff ff46 	bl	800b3da <__retarget_lock_release_recursive>
 800b54e:	e7e9      	b.n	800b524 <_vfiprintf_r+0x4c>
 800b550:	2300      	movs	r3, #0
 800b552:	9309      	str	r3, [sp, #36]	; 0x24
 800b554:	2320      	movs	r3, #32
 800b556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b55a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b55e:	2330      	movs	r3, #48	; 0x30
 800b560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b724 <_vfiprintf_r+0x24c>
 800b564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b568:	f04f 0901 	mov.w	r9, #1
 800b56c:	4623      	mov	r3, r4
 800b56e:	469a      	mov	sl, r3
 800b570:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b574:	b10a      	cbz	r2, 800b57a <_vfiprintf_r+0xa2>
 800b576:	2a25      	cmp	r2, #37	; 0x25
 800b578:	d1f9      	bne.n	800b56e <_vfiprintf_r+0x96>
 800b57a:	ebba 0b04 	subs.w	fp, sl, r4
 800b57e:	d00b      	beq.n	800b598 <_vfiprintf_r+0xc0>
 800b580:	465b      	mov	r3, fp
 800b582:	4622      	mov	r2, r4
 800b584:	4629      	mov	r1, r5
 800b586:	4630      	mov	r0, r6
 800b588:	f7ff ff94 	bl	800b4b4 <__sfputs_r>
 800b58c:	3001      	adds	r0, #1
 800b58e:	f000 80aa 	beq.w	800b6e6 <_vfiprintf_r+0x20e>
 800b592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b594:	445a      	add	r2, fp
 800b596:	9209      	str	r2, [sp, #36]	; 0x24
 800b598:	f89a 3000 	ldrb.w	r3, [sl]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 80a2 	beq.w	800b6e6 <_vfiprintf_r+0x20e>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ac:	f10a 0a01 	add.w	sl, sl, #1
 800b5b0:	9304      	str	r3, [sp, #16]
 800b5b2:	9307      	str	r3, [sp, #28]
 800b5b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5b8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ba:	4654      	mov	r4, sl
 800b5bc:	2205      	movs	r2, #5
 800b5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c2:	4858      	ldr	r0, [pc, #352]	; (800b724 <_vfiprintf_r+0x24c>)
 800b5c4:	f7f4 fe2c 	bl	8000220 <memchr>
 800b5c8:	9a04      	ldr	r2, [sp, #16]
 800b5ca:	b9d8      	cbnz	r0, 800b604 <_vfiprintf_r+0x12c>
 800b5cc:	06d1      	lsls	r1, r2, #27
 800b5ce:	bf44      	itt	mi
 800b5d0:	2320      	movmi	r3, #32
 800b5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d6:	0713      	lsls	r3, r2, #28
 800b5d8:	bf44      	itt	mi
 800b5da:	232b      	movmi	r3, #43	; 0x2b
 800b5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e6:	d015      	beq.n	800b614 <_vfiprintf_r+0x13c>
 800b5e8:	9a07      	ldr	r2, [sp, #28]
 800b5ea:	4654      	mov	r4, sl
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f04f 0c0a 	mov.w	ip, #10
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f8:	3b30      	subs	r3, #48	; 0x30
 800b5fa:	2b09      	cmp	r3, #9
 800b5fc:	d94e      	bls.n	800b69c <_vfiprintf_r+0x1c4>
 800b5fe:	b1b0      	cbz	r0, 800b62e <_vfiprintf_r+0x156>
 800b600:	9207      	str	r2, [sp, #28]
 800b602:	e014      	b.n	800b62e <_vfiprintf_r+0x156>
 800b604:	eba0 0308 	sub.w	r3, r0, r8
 800b608:	fa09 f303 	lsl.w	r3, r9, r3
 800b60c:	4313      	orrs	r3, r2
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	46a2      	mov	sl, r4
 800b612:	e7d2      	b.n	800b5ba <_vfiprintf_r+0xe2>
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	1d19      	adds	r1, r3, #4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	9103      	str	r1, [sp, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bfbb      	ittet	lt
 800b620:	425b      	neglt	r3, r3
 800b622:	f042 0202 	orrlt.w	r2, r2, #2
 800b626:	9307      	strge	r3, [sp, #28]
 800b628:	9307      	strlt	r3, [sp, #28]
 800b62a:	bfb8      	it	lt
 800b62c:	9204      	strlt	r2, [sp, #16]
 800b62e:	7823      	ldrb	r3, [r4, #0]
 800b630:	2b2e      	cmp	r3, #46	; 0x2e
 800b632:	d10c      	bne.n	800b64e <_vfiprintf_r+0x176>
 800b634:	7863      	ldrb	r3, [r4, #1]
 800b636:	2b2a      	cmp	r3, #42	; 0x2a
 800b638:	d135      	bne.n	800b6a6 <_vfiprintf_r+0x1ce>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	1d1a      	adds	r2, r3, #4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	9203      	str	r2, [sp, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	bfb8      	it	lt
 800b646:	f04f 33ff 	movlt.w	r3, #4294967295
 800b64a:	3402      	adds	r4, #2
 800b64c:	9305      	str	r3, [sp, #20]
 800b64e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b734 <_vfiprintf_r+0x25c>
 800b652:	7821      	ldrb	r1, [r4, #0]
 800b654:	2203      	movs	r2, #3
 800b656:	4650      	mov	r0, sl
 800b658:	f7f4 fde2 	bl	8000220 <memchr>
 800b65c:	b140      	cbz	r0, 800b670 <_vfiprintf_r+0x198>
 800b65e:	2340      	movs	r3, #64	; 0x40
 800b660:	eba0 000a 	sub.w	r0, r0, sl
 800b664:	fa03 f000 	lsl.w	r0, r3, r0
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	4303      	orrs	r3, r0
 800b66c:	3401      	adds	r4, #1
 800b66e:	9304      	str	r3, [sp, #16]
 800b670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b674:	482c      	ldr	r0, [pc, #176]	; (800b728 <_vfiprintf_r+0x250>)
 800b676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b67a:	2206      	movs	r2, #6
 800b67c:	f7f4 fdd0 	bl	8000220 <memchr>
 800b680:	2800      	cmp	r0, #0
 800b682:	d03f      	beq.n	800b704 <_vfiprintf_r+0x22c>
 800b684:	4b29      	ldr	r3, [pc, #164]	; (800b72c <_vfiprintf_r+0x254>)
 800b686:	bb1b      	cbnz	r3, 800b6d0 <_vfiprintf_r+0x1f8>
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	3307      	adds	r3, #7
 800b68c:	f023 0307 	bic.w	r3, r3, #7
 800b690:	3308      	adds	r3, #8
 800b692:	9303      	str	r3, [sp, #12]
 800b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b696:	443b      	add	r3, r7
 800b698:	9309      	str	r3, [sp, #36]	; 0x24
 800b69a:	e767      	b.n	800b56c <_vfiprintf_r+0x94>
 800b69c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	e7a5      	b.n	800b5f2 <_vfiprintf_r+0x11a>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	3401      	adds	r4, #1
 800b6aa:	9305      	str	r3, [sp, #20]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f04f 0c0a 	mov.w	ip, #10
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b8:	3a30      	subs	r2, #48	; 0x30
 800b6ba:	2a09      	cmp	r2, #9
 800b6bc:	d903      	bls.n	800b6c6 <_vfiprintf_r+0x1ee>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0c5      	beq.n	800b64e <_vfiprintf_r+0x176>
 800b6c2:	9105      	str	r1, [sp, #20]
 800b6c4:	e7c3      	b.n	800b64e <_vfiprintf_r+0x176>
 800b6c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e7f0      	b.n	800b6b2 <_vfiprintf_r+0x1da>
 800b6d0:	ab03      	add	r3, sp, #12
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	4b16      	ldr	r3, [pc, #88]	; (800b730 <_vfiprintf_r+0x258>)
 800b6d8:	a904      	add	r1, sp, #16
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7fb f9bc 	bl	8006a58 <_printf_float>
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	1c78      	adds	r0, r7, #1
 800b6e4:	d1d6      	bne.n	800b694 <_vfiprintf_r+0x1bc>
 800b6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6e8:	07d9      	lsls	r1, r3, #31
 800b6ea:	d405      	bmi.n	800b6f8 <_vfiprintf_r+0x220>
 800b6ec:	89ab      	ldrh	r3, [r5, #12]
 800b6ee:	059a      	lsls	r2, r3, #22
 800b6f0:	d402      	bmi.n	800b6f8 <_vfiprintf_r+0x220>
 800b6f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f4:	f7ff fe71 	bl	800b3da <__retarget_lock_release_recursive>
 800b6f8:	89ab      	ldrh	r3, [r5, #12]
 800b6fa:	065b      	lsls	r3, r3, #25
 800b6fc:	f53f af12 	bmi.w	800b524 <_vfiprintf_r+0x4c>
 800b700:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b702:	e711      	b.n	800b528 <_vfiprintf_r+0x50>
 800b704:	ab03      	add	r3, sp, #12
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	462a      	mov	r2, r5
 800b70a:	4b09      	ldr	r3, [pc, #36]	; (800b730 <_vfiprintf_r+0x258>)
 800b70c:	a904      	add	r1, sp, #16
 800b70e:	4630      	mov	r0, r6
 800b710:	f7fb fc46 	bl	8006fa0 <_printf_i>
 800b714:	e7e4      	b.n	800b6e0 <_vfiprintf_r+0x208>
 800b716:	bf00      	nop
 800b718:	0800bf4c 	.word	0x0800bf4c
 800b71c:	0800bf6c 	.word	0x0800bf6c
 800b720:	0800bf2c 	.word	0x0800bf2c
 800b724:	0800bec4 	.word	0x0800bec4
 800b728:	0800bece 	.word	0x0800bece
 800b72c:	08006a59 	.word	0x08006a59
 800b730:	0800b4b5 	.word	0x0800b4b5
 800b734:	0800beca 	.word	0x0800beca

0800b738 <__swbuf_r>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	460e      	mov	r6, r1
 800b73c:	4614      	mov	r4, r2
 800b73e:	4605      	mov	r5, r0
 800b740:	b118      	cbz	r0, 800b74a <__swbuf_r+0x12>
 800b742:	6983      	ldr	r3, [r0, #24]
 800b744:	b90b      	cbnz	r3, 800b74a <__swbuf_r+0x12>
 800b746:	f7ff fd97 	bl	800b278 <__sinit>
 800b74a:	4b21      	ldr	r3, [pc, #132]	; (800b7d0 <__swbuf_r+0x98>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d12b      	bne.n	800b7a8 <__swbuf_r+0x70>
 800b750:	686c      	ldr	r4, [r5, #4]
 800b752:	69a3      	ldr	r3, [r4, #24]
 800b754:	60a3      	str	r3, [r4, #8]
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	071a      	lsls	r2, r3, #28
 800b75a:	d52f      	bpl.n	800b7bc <__swbuf_r+0x84>
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	b36b      	cbz	r3, 800b7bc <__swbuf_r+0x84>
 800b760:	6923      	ldr	r3, [r4, #16]
 800b762:	6820      	ldr	r0, [r4, #0]
 800b764:	1ac0      	subs	r0, r0, r3
 800b766:	6963      	ldr	r3, [r4, #20]
 800b768:	b2f6      	uxtb	r6, r6
 800b76a:	4283      	cmp	r3, r0
 800b76c:	4637      	mov	r7, r6
 800b76e:	dc04      	bgt.n	800b77a <__swbuf_r+0x42>
 800b770:	4621      	mov	r1, r4
 800b772:	4628      	mov	r0, r5
 800b774:	f7ff fcec 	bl	800b150 <_fflush_r>
 800b778:	bb30      	cbnz	r0, 800b7c8 <__swbuf_r+0x90>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	60a3      	str	r3, [r4, #8]
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	701e      	strb	r6, [r3, #0]
 800b788:	6963      	ldr	r3, [r4, #20]
 800b78a:	3001      	adds	r0, #1
 800b78c:	4283      	cmp	r3, r0
 800b78e:	d004      	beq.n	800b79a <__swbuf_r+0x62>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	07db      	lsls	r3, r3, #31
 800b794:	d506      	bpl.n	800b7a4 <__swbuf_r+0x6c>
 800b796:	2e0a      	cmp	r6, #10
 800b798:	d104      	bne.n	800b7a4 <__swbuf_r+0x6c>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fcd7 	bl	800b150 <_fflush_r>
 800b7a2:	b988      	cbnz	r0, 800b7c8 <__swbuf_r+0x90>
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a8:	4b0a      	ldr	r3, [pc, #40]	; (800b7d4 <__swbuf_r+0x9c>)
 800b7aa:	429c      	cmp	r4, r3
 800b7ac:	d101      	bne.n	800b7b2 <__swbuf_r+0x7a>
 800b7ae:	68ac      	ldr	r4, [r5, #8]
 800b7b0:	e7cf      	b.n	800b752 <__swbuf_r+0x1a>
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <__swbuf_r+0xa0>)
 800b7b4:	429c      	cmp	r4, r3
 800b7b6:	bf08      	it	eq
 800b7b8:	68ec      	ldreq	r4, [r5, #12]
 800b7ba:	e7ca      	b.n	800b752 <__swbuf_r+0x1a>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 f80c 	bl	800b7dc <__swsetup_r>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d0cb      	beq.n	800b760 <__swbuf_r+0x28>
 800b7c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b7cc:	e7ea      	b.n	800b7a4 <__swbuf_r+0x6c>
 800b7ce:	bf00      	nop
 800b7d0:	0800bf4c 	.word	0x0800bf4c
 800b7d4:	0800bf6c 	.word	0x0800bf6c
 800b7d8:	0800bf2c 	.word	0x0800bf2c

0800b7dc <__swsetup_r>:
 800b7dc:	4b32      	ldr	r3, [pc, #200]	; (800b8a8 <__swsetup_r+0xcc>)
 800b7de:	b570      	push	{r4, r5, r6, lr}
 800b7e0:	681d      	ldr	r5, [r3, #0]
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	b125      	cbz	r5, 800b7f2 <__swsetup_r+0x16>
 800b7e8:	69ab      	ldr	r3, [r5, #24]
 800b7ea:	b913      	cbnz	r3, 800b7f2 <__swsetup_r+0x16>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f7ff fd43 	bl	800b278 <__sinit>
 800b7f2:	4b2e      	ldr	r3, [pc, #184]	; (800b8ac <__swsetup_r+0xd0>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d10f      	bne.n	800b818 <__swsetup_r+0x3c>
 800b7f8:	686c      	ldr	r4, [r5, #4]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b800:	0719      	lsls	r1, r3, #28
 800b802:	d42c      	bmi.n	800b85e <__swsetup_r+0x82>
 800b804:	06dd      	lsls	r5, r3, #27
 800b806:	d411      	bmi.n	800b82c <__swsetup_r+0x50>
 800b808:	2309      	movs	r3, #9
 800b80a:	6033      	str	r3, [r6, #0]
 800b80c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	f04f 30ff 	mov.w	r0, #4294967295
 800b816:	e03e      	b.n	800b896 <__swsetup_r+0xba>
 800b818:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <__swsetup_r+0xd4>)
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d101      	bne.n	800b822 <__swsetup_r+0x46>
 800b81e:	68ac      	ldr	r4, [r5, #8]
 800b820:	e7eb      	b.n	800b7fa <__swsetup_r+0x1e>
 800b822:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <__swsetup_r+0xd8>)
 800b824:	429c      	cmp	r4, r3
 800b826:	bf08      	it	eq
 800b828:	68ec      	ldreq	r4, [r5, #12]
 800b82a:	e7e6      	b.n	800b7fa <__swsetup_r+0x1e>
 800b82c:	0758      	lsls	r0, r3, #29
 800b82e:	d512      	bpl.n	800b856 <__swsetup_r+0x7a>
 800b830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b832:	b141      	cbz	r1, 800b846 <__swsetup_r+0x6a>
 800b834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <__swsetup_r+0x66>
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fe fd63 	bl	800a308 <_free_r>
 800b842:	2300      	movs	r3, #0
 800b844:	6363      	str	r3, [r4, #52]	; 0x34
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	2300      	movs	r3, #0
 800b850:	6063      	str	r3, [r4, #4]
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f043 0308 	orr.w	r3, r3, #8
 800b85c:	81a3      	strh	r3, [r4, #12]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	b94b      	cbnz	r3, 800b876 <__swsetup_r+0x9a>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b86c:	d003      	beq.n	800b876 <__swsetup_r+0x9a>
 800b86e:	4621      	mov	r1, r4
 800b870:	4630      	mov	r0, r6
 800b872:	f000 f84d 	bl	800b910 <__smakebuf_r>
 800b876:	89a0      	ldrh	r0, [r4, #12]
 800b878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b87c:	f010 0301 	ands.w	r3, r0, #1
 800b880:	d00a      	beq.n	800b898 <__swsetup_r+0xbc>
 800b882:	2300      	movs	r3, #0
 800b884:	60a3      	str	r3, [r4, #8]
 800b886:	6963      	ldr	r3, [r4, #20]
 800b888:	425b      	negs	r3, r3
 800b88a:	61a3      	str	r3, [r4, #24]
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	b943      	cbnz	r3, 800b8a2 <__swsetup_r+0xc6>
 800b890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b894:	d1ba      	bne.n	800b80c <__swsetup_r+0x30>
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	0781      	lsls	r1, r0, #30
 800b89a:	bf58      	it	pl
 800b89c:	6963      	ldrpl	r3, [r4, #20]
 800b89e:	60a3      	str	r3, [r4, #8]
 800b8a0:	e7f4      	b.n	800b88c <__swsetup_r+0xb0>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e7f7      	b.n	800b896 <__swsetup_r+0xba>
 800b8a6:	bf00      	nop
 800b8a8:	20000028 	.word	0x20000028
 800b8ac:	0800bf4c 	.word	0x0800bf4c
 800b8b0:	0800bf6c 	.word	0x0800bf6c
 800b8b4:	0800bf2c 	.word	0x0800bf2c

0800b8b8 <abort>:
 800b8b8:	b508      	push	{r3, lr}
 800b8ba:	2006      	movs	r0, #6
 800b8bc:	f000 f898 	bl	800b9f0 <raise>
 800b8c0:	2001      	movs	r0, #1
 800b8c2:	f7f6 f863 	bl	800198c <_exit>

0800b8c6 <__swhatbuf_r>:
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	460e      	mov	r6, r1
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	b096      	sub	sp, #88	; 0x58
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	461d      	mov	r5, r3
 800b8d6:	da08      	bge.n	800b8ea <__swhatbuf_r+0x24>
 800b8d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	602a      	str	r2, [r5, #0]
 800b8e0:	061a      	lsls	r2, r3, #24
 800b8e2:	d410      	bmi.n	800b906 <__swhatbuf_r+0x40>
 800b8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e8:	e00e      	b.n	800b908 <__swhatbuf_r+0x42>
 800b8ea:	466a      	mov	r2, sp
 800b8ec:	f000 f89c 	bl	800ba28 <_fstat_r>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	dbf1      	blt.n	800b8d8 <__swhatbuf_r+0x12>
 800b8f4:	9a01      	ldr	r2, [sp, #4]
 800b8f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8fe:	425a      	negs	r2, r3
 800b900:	415a      	adcs	r2, r3
 800b902:	602a      	str	r2, [r5, #0]
 800b904:	e7ee      	b.n	800b8e4 <__swhatbuf_r+0x1e>
 800b906:	2340      	movs	r3, #64	; 0x40
 800b908:	2000      	movs	r0, #0
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	b016      	add	sp, #88	; 0x58
 800b90e:	bd70      	pop	{r4, r5, r6, pc}

0800b910 <__smakebuf_r>:
 800b910:	898b      	ldrh	r3, [r1, #12]
 800b912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b914:	079d      	lsls	r5, r3, #30
 800b916:	4606      	mov	r6, r0
 800b918:	460c      	mov	r4, r1
 800b91a:	d507      	bpl.n	800b92c <__smakebuf_r+0x1c>
 800b91c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	6123      	str	r3, [r4, #16]
 800b924:	2301      	movs	r3, #1
 800b926:	6163      	str	r3, [r4, #20]
 800b928:	b002      	add	sp, #8
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	ab01      	add	r3, sp, #4
 800b92e:	466a      	mov	r2, sp
 800b930:	f7ff ffc9 	bl	800b8c6 <__swhatbuf_r>
 800b934:	9900      	ldr	r1, [sp, #0]
 800b936:	4605      	mov	r5, r0
 800b938:	4630      	mov	r0, r6
 800b93a:	f7fe fd51 	bl	800a3e0 <_malloc_r>
 800b93e:	b948      	cbnz	r0, 800b954 <__smakebuf_r+0x44>
 800b940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b944:	059a      	lsls	r2, r3, #22
 800b946:	d4ef      	bmi.n	800b928 <__smakebuf_r+0x18>
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	f043 0302 	orr.w	r3, r3, #2
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	e7e3      	b.n	800b91c <__smakebuf_r+0xc>
 800b954:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <__smakebuf_r+0x7c>)
 800b956:	62b3      	str	r3, [r6, #40]	; 0x28
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	6163      	str	r3, [r4, #20]
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	6120      	str	r0, [r4, #16]
 800b96a:	b15b      	cbz	r3, 800b984 <__smakebuf_r+0x74>
 800b96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b970:	4630      	mov	r0, r6
 800b972:	f000 f86b 	bl	800ba4c <_isatty_r>
 800b976:	b128      	cbz	r0, 800b984 <__smakebuf_r+0x74>
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	f043 0301 	orr.w	r3, r3, #1
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	89a0      	ldrh	r0, [r4, #12]
 800b986:	4305      	orrs	r5, r0
 800b988:	81a5      	strh	r5, [r4, #12]
 800b98a:	e7cd      	b.n	800b928 <__smakebuf_r+0x18>
 800b98c:	0800b211 	.word	0x0800b211

0800b990 <_malloc_usable_size_r>:
 800b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b994:	1f18      	subs	r0, r3, #4
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfbc      	itt	lt
 800b99a:	580b      	ldrlt	r3, [r1, r0]
 800b99c:	18c0      	addlt	r0, r0, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_raise_r>:
 800b9a0:	291f      	cmp	r1, #31
 800b9a2:	b538      	push	{r3, r4, r5, lr}
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	d904      	bls.n	800b9b4 <_raise_r+0x14>
 800b9aa:	2316      	movs	r3, #22
 800b9ac:	6003      	str	r3, [r0, #0]
 800b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9b6:	b112      	cbz	r2, 800b9be <_raise_r+0x1e>
 800b9b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9bc:	b94b      	cbnz	r3, 800b9d2 <_raise_r+0x32>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 f830 	bl	800ba24 <_getpid_r>
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ce:	f000 b817 	b.w	800ba00 <_kill_r>
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d00a      	beq.n	800b9ec <_raise_r+0x4c>
 800b9d6:	1c59      	adds	r1, r3, #1
 800b9d8:	d103      	bne.n	800b9e2 <_raise_r+0x42>
 800b9da:	2316      	movs	r3, #22
 800b9dc:	6003      	str	r3, [r0, #0]
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7e7      	b.n	800b9b2 <_raise_r+0x12>
 800b9e2:	2400      	movs	r4, #0
 800b9e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	4798      	blx	r3
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e7e0      	b.n	800b9b2 <_raise_r+0x12>

0800b9f0 <raise>:
 800b9f0:	4b02      	ldr	r3, [pc, #8]	; (800b9fc <raise+0xc>)
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	f7ff bfd3 	b.w	800b9a0 <_raise_r>
 800b9fa:	bf00      	nop
 800b9fc:	20000028 	.word	0x20000028

0800ba00 <_kill_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	; (800ba20 <_kill_r+0x20>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	f7f5 ffad 	bl	800196c <_kill>
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	d102      	bne.n	800ba1c <_kill_r+0x1c>
 800ba16:	682b      	ldr	r3, [r5, #0]
 800ba18:	b103      	cbz	r3, 800ba1c <_kill_r+0x1c>
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000450 	.word	0x20000450

0800ba24 <_getpid_r>:
 800ba24:	f7f5 bf9a 	b.w	800195c <_getpid>

0800ba28 <_fstat_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d07      	ldr	r5, [pc, #28]	; (800ba48 <_fstat_r+0x20>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	4611      	mov	r1, r2
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	f7f5 fff8 	bl	8001a2a <_fstat>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	d102      	bne.n	800ba44 <_fstat_r+0x1c>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	b103      	cbz	r3, 800ba44 <_fstat_r+0x1c>
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	bd38      	pop	{r3, r4, r5, pc}
 800ba46:	bf00      	nop
 800ba48:	20000450 	.word	0x20000450

0800ba4c <_isatty_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d06      	ldr	r5, [pc, #24]	; (800ba68 <_isatty_r+0x1c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	f7f5 fff7 	bl	8001a4a <_isatty>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_isatty_r+0x1a>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_isatty_r+0x1a>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20000450 	.word	0x20000450

0800ba6c <_init>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr

0800ba78 <_fini>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr
