
Temperature_regulation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d83c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800da10  0800da10  0001da10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df74  0800df74  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df74  0800df74  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df7c  0800df7c  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800df84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000027c  0800e200  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800e200  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae28  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e4  00000000  00000000  0003b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054af  00000000  00000000  00041110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bde8  00000000  00000000  000465bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e18  00000000  00000000  000623a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a1bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070dc  00000000  00000000  0015a210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d9f4 	.word	0x0800d9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000280 	.word	0x20000280
 800020c:	0800d9f4 	.word	0x0800d9f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fa47 	bl	80014d4 <null_ptr_check>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d117      	bne.n	8001082 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	20d0      	movs	r0, #208	; 0xd0
 800105a:	f000 f818 	bl	800108e <bmp2_get_regs>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b58      	cmp	r3, #88	; 0x58
 8001070:	d105      	bne.n	800107e <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fa79 	bl	800156a <get_calib_param>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800107e:	23fc      	movs	r3, #252	; 0xfc
 8001080:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b087      	sub	sp, #28
 8001092:	af00      	add	r7, sp, #0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	f000 fa18 	bl	80014d4 <null_ptr_check>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80010a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11e      	bne.n	80010ee <bmp2_get_regs+0x60>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d01b      	beq.n	80010ee <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68dc      	ldr	r4, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	7bf8      	ldrb	r0, [r7, #15]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	47a0      	blx	r4
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010e8:	23fe      	movs	r3, #254	; 0xfe
 80010ea:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010ec:	e001      	b.n	80010f2 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b08b      	sub	sp, #44	; 0x2c
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d901      	bls.n	8001116 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001112:	2304      	movs	r3, #4
 8001114:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f000 f9dc 	bl	80014d4 <null_ptr_check>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001126:	2b00      	cmp	r3, #0
 8001128:	d150      	bne.n	80011cc <bmp2_set_regs+0xce>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d04d      	beq.n	80011cc <bmp2_set_regs+0xce>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d04a      	beq.n	80011cc <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d043      	beq.n	80011c4 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d114      	bne.n	8001174 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]
 800114e:	e00d      	b.n	800116c <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	68f9      	ldr	r1, [r7, #12]
 800115c:	440b      	add	r3, r1
 800115e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	3301      	adds	r3, #1
 800116a:	77fb      	strb	r3, [r7, #31]
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8ed      	bhi.n	8001150 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d90b      	bls.n	8001192 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800117a:	f107 0114 	add.w	r1, r7, #20
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f000 f9c6 	bl	8001514 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3b01      	subs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e001      	b.n	8001196 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691c      	ldr	r4, [r3, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	7818      	ldrb	r0, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f107 0114 	add.w	r1, r7, #20
 80011a6:	6a3a      	ldr	r2, [r7, #32]
 80011a8:	47a0      	blx	r4
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011bc:	23fe      	movs	r3, #254	; 0xfe
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011c2:	e007      	b.n	80011d4 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011c4:	23fd      	movs	r3, #253	; 0xfd
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011ca:	e003      	b.n	80011d4 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011d2:	e000      	b.n	80011d6 <bmp2_set_regs+0xd8>
        if (len > 0)
 80011d4:	bf00      	nop
    }

    return rslt;
 80011d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80011da:	4618      	mov	r0, r3
 80011dc:	372c      	adds	r7, #44	; 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}

080011e2 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011ea:	23e0      	movs	r3, #224	; 0xe0
 80011ec:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011ee:	23b6      	movs	r3, #182	; 0xb6
 80011f0:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011f2:	f107 010d 	add.w	r1, r7, #13
 80011f6:	f107 000e 	add.w	r0, r7, #14
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f7ff ff7e 	bl	80010fe <bmp2_set_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800121c:	2300      	movs	r3, #0
 800121e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d02d      	beq.n	8001282 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001226:	f107 010c 	add.w	r1, r7, #12
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2202      	movs	r2, #2
 800122e:	20f4      	movs	r0, #244	; 0xf4
 8001230:	f7ff ff2d 	bl	800108e <bmp2_get_regs>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d122      	bne.n	8001286 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	109b      	asrs	r3, r3, #2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	109b      	asrs	r3, r3, #2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	715a      	strb	r2, [r3, #5]
 8001280:	e001      	b.n	8001286 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001282:	23ff      	movs	r3, #255	; 0xff
 8001284:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f9fd 	bl	80016a0 <conf_sensor>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012c0:	f107 010e 	add.w	r1, r7, #14
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2201      	movs	r2, #1
 80012c8:	20f3      	movs	r0, #243	; 0xf3
 80012ca:	f7ff fee0 	bl	800108e <bmp2_get_regs>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d110      	bne.n	80012fc <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	10db      	asrs	r3, r3, #3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	705a      	strb	r2, [r3, #1]
 80012f6:	e001      	b.n	80012fc <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f9bf 	bl	80016a0 <conf_sensor>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	2300      	movs	r3, #0
 8001342:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d024      	beq.n	800139e <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001354:	f107 0110 	add.w	r1, r7, #16
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2206      	movs	r2, #6
 800135c:	20f7      	movs	r0, #247	; 0xf7
 800135e:	f7ff fe96 	bl	800108e <bmp2_get_regs>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fab9 	bl	80018f0 <parse_sensor_data>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10b      	bne.n	80013a2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f80b 	bl	80013ae <bmp2_compensate_data>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]
 800139c:	e001      	b.n	80013a2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800139e:	23ff      	movs	r3, #255	; 0xff
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f88a 	bl	80014d4 <null_ptr_check>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d129      	bne.n	8001420 <bmp2_compensate_data+0x72>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <bmp2_compensate_data+0x72>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3308      	adds	r3, #8
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fabb 	bl	8001978 <compensate_temperature>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10a      	bne.n	8001424 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fba7 	bl	8001b68 <compensate_pressure>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800141e:	e001      	b.n	8001424 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <bmp2_compute_meas_time+0x9c>)
 800143e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001442:	461d      	mov	r5, r3
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <bmp2_compute_meas_time+0xa0>)
 800144e:	f107 0410 	add.w	r4, r7, #16
 8001452:	461d      	mov	r5, r3
 8001454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800145c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f837 	bl	80014d4 <null_ptr_check>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 800146c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001470:	2b00      	cmp	r3, #0
 8001472:	d122      	bne.n	80014ba <bmp2_compute_meas_time+0x8a>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01f      	beq.n	80014ba <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d111      	bne.n	80014a6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	3348      	adds	r3, #72	; 0x48
 800148a:	443b      	add	r3, r7
 800148c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	3348      	adds	r3, #72	; 0x48
 8001498:	443b      	add	r3, r7
 800149a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800149e:	441a      	add	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014a4:	e00c      	b.n	80014c0 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	78db      	ldrb	r3, [r3, #3]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	3348      	adds	r3, #72	; 0x48
 80014ae:	443b      	add	r3, r7
 80014b0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014b8:	e002      	b.n	80014c0 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014ba:	23ff      	movs	r3, #255	; 0xff
 80014bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80014c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	0800da10 	.word	0x0800da10
 80014d0:	0800da24 	.word	0x0800da24

080014d4 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <null_ptr_check+0x26>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <null_ptr_check+0x26>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <null_ptr_check+0x26>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e001      	b.n	8001504 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e015      	b.n	8001554 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	440b      	add	r3, r1
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	441a      	add	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	440b      	add	r3, r1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3e5      	bcc.n	8001528 <interleave_data+0x14>
    }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b08a      	sub	sp, #40	; 0x28
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001588:	f107 010c 	add.w	r1, r7, #12
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2219      	movs	r2, #25
 8001590:	2088      	movs	r0, #136	; 0x88
 8001592:	f7ff fd7c 	bl	800108e <bmp2_get_regs>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 800159c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d177      	bne.n	8001694 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015ca:	7c7b      	ldrb	r3, [r7, #17]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7c3b      	ldrb	r3, [r7, #16]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015dc:	7cfb      	ldrb	r3, [r7, #19]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7cbb      	ldrb	r3, [r7, #18]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7d3b      	ldrb	r3, [r7, #20]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7dbb      	ldrb	r3, [r7, #22]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21a      	sxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001614:	7e7b      	ldrb	r3, [r7, #25]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	7e3b      	ldrb	r3, [r7, #24]
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21a      	sxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7ebb      	ldrb	r3, [r7, #26]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001638:	7f7b      	ldrb	r3, [r7, #29]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	7f3b      	ldrb	r3, [r7, #28]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21a      	sxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7fbb      	ldrb	r3, [r7, #30]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 800165c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168c:	b25a      	sxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80016ae:	2300      	movs	r3, #0
 80016b0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80016b2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80016b6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d074      	beq.n	80017a8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016be:	f107 0114 	add.w	r1, r7, #20
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	20f4      	movs	r0, #244	; 0xf4
 80016c8:	f7ff fce1 	bl	800108e <bmp2_get_regs>
 80016cc:	4603      	mov	r3, r0
 80016ce:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d169      	bne.n	80017ac <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fd82 	bl	80011e2 <bmp2_soft_reset>
 80016de:	4603      	mov	r3, r0
 80016e0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d160      	bne.n	80017ac <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f861 	bl	80017b8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001710:	7d7b      	ldrb	r3, [r7, #21]
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f023 031c 	bic.w	r3, r3, #28
 8001718:	b25a      	sxtb	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	f003 031c 	and.w	r3, r3, #28
 8001726:	b25b      	sxtb	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001730:	7d7b      	ldrb	r3, [r7, #21]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	b25a      	sxtb	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	795b      	ldrb	r3, [r3, #5]
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800174e:	f107 0114 	add.w	r1, r7, #20
 8001752:	f107 0010 	add.w	r0, r7, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	f7ff fcd0 	bl	80010fe <bmp2_set_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <conf_sensor+0x10c>
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01d      	beq.n	80017ac <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001776:	7d3b      	ldrb	r3, [r7, #20]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001792:	f107 0114 	add.w	r1, r7, #20
 8001796:	f107 0010 	add.w	r0, r7, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f7ff fcae 	bl	80010fe <bmp2_set_regs>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
 80017a6:	e001      	b.n	80017ac <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017a8:	23ff      	movs	r3, #255	; 0xff
 80017aa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	f200 808b 	bhi.w	80018e2 <set_os_mode+0x12a>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <set_os_mode+0x1c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e9 	.word	0x080017e9
 80017d8:	0800181b 	.word	0x0800181b
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	080018b1 	.word	0x080018b1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 031c 	bic.w	r3, r3, #28
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            break;
 8001818:	e064      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	b25b      	sxtb	r3, r3
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	b25b      	sxtb	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f023 031c 	bic.w	r3, r3, #28
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	b25b      	sxtb	r3, r3
 8001844:	b2da      	uxtb	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	701a      	strb	r2, [r3, #0]
            break;
 800184a:	e04b      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	b25b      	sxtb	r3, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f023 031c 	bic.w	r3, r3, #28
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f043 030c 	orr.w	r3, r3, #12
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	701a      	strb	r2, [r3, #0]
            break;
 800187c:	e032      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b25b      	sxtb	r3, r3
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	b25b      	sxtb	r3, r3
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	f023 031c 	bic.w	r3, r3, #28
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	701a      	strb	r2, [r3, #0]
            break;
 80018ae:	e019      	b.n	80018e4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f023 031c 	bic.w	r3, r3, #28
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	f043 0314 	orr.w	r3, r3, #20
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	701a      	strb	r2, [r3, #0]
            break;
 80018e0:	e000      	b.n	80018e4 <set_os_mode+0x12c>
        default:
            break;
 80018e2:	bf00      	nop
    }
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3302      	adds	r3, #2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3303      	adds	r3, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3305      	adds	r3, #5
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	b2db      	uxtb	r3, r3
 8001944:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	431a      	orrs	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f000 fae5 	bl	8001f30 <st_check_boundaries>
 8001966:	4603      	mov	r3, r0
 8001968:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800196a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b08c      	sub	sp, #48	; 0x30
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fde7 	bl	8000564 <__aeabi_i2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <compensate_temperature+0x1d4>)
 800199c:	f7fe ff76 	bl	800088c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4614      	mov	r4, r2
 80019a6:	461d      	mov	r5, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	8b9b      	ldrh	r3, [r3, #28]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_ui2d>
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <compensate_temperature+0x1d8>)
 80019b8:	f7fe ff68 	bl	800088c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc80 	bl	80002c8 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdc4 	bl	8000564 <__aeabi_i2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fe28 	bl	8000638 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdb5 	bl	8000564 <__aeabi_i2d>
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a02:	f7fe ff43 	bl	800088c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	8b9b      	ldrh	r3, [r3, #28]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd96 	bl	8000544 <__aeabi_ui2d>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <compensate_temperature+0x1dc>)
 8001a1e:	f7fe ff35 	bl	800088c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fc4d 	bl	80002c8 <__aeabi_dsub>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4614      	mov	r4, r2
 8001a34:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd92 	bl	8000564 <__aeabi_i2d>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a48:	f7fe ff20 	bl	800088c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4690      	mov	r8, r2
 8001a52:	4699      	mov	r9, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8b9b      	ldrh	r3, [r3, #28]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd73 	bl	8000544 <__aeabi_ui2d>
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <compensate_temperature+0x1dc>)
 8001a64:	f7fe ff12 	bl	800088c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f7fe fc2a 	bl	80002c8 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fddc 	bl	8000638 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd68 	bl	8000564 <__aeabi_i2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
    var2 =
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fdcc 	bl	8000638 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ab0:	f7fe fc0c 	bl	80002cc <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f86c 	bl	8000b98 <__aeabi_d2iz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe fbfd 	bl	80002cc <__adddf3>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <compensate_temperature+0x1e0>)
 8001ae0:	f7fe fed4 	bl	800088c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <compensate_temperature+0x1e4>)
 8001af2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001af6:	f7ff f811 	bl	8000b1c <__aeabi_dcmplt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <compensate_temperature+0x1e4>)
 8001b06:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <compensate_temperature+0x1e8>)
 8001b16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b1a:	f7ff f81d 	bl	8000b58 <__aeabi_dcmpgt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <compensate_temperature+0x1e8>)
 8001b2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3730      	adds	r7, #48	; 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4c:	40d00000 	.word	0x40d00000
 8001b50:	40900000 	.word	0x40900000
 8001b54:	40c00000 	.word	0x40c00000
 8001b58:	40b40000 	.word	0x40b40000
 8001b5c:	c0440000 	.word	0xc0440000
 8001b60:	40554000 	.word	0x40554000
 8001b64:	00000000 	.word	0x00000000

08001b68 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcea 	bl	8000564 <__aeabi_i2d>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	f7fe fe78 	bl	800088c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4bcb      	ldr	r3, [pc, #812]	; (8001ed8 <compensate_pressure+0x370>)
 8001baa:	f7fe fb8d 	bl	80002c8 <__aeabi_dsub>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bbe:	f7fe fd3b 	bl	8000638 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc7 	bl	8000564 <__aeabi_i2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fd2b 	bl	8000638 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4bbb      	ldr	r3, [pc, #748]	; (8001edc <compensate_pressure+0x374>)
 8001bf0:	f7fe fe4c 	bl	800088c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcae 	bl	8000564 <__aeabi_i2d>
 8001c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0c:	f7fe fd14 	bl	8000638 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	f7fe fb56 	bl	80002cc <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c28:	f7fe fb50 	bl	80002cc <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4ba9      	ldr	r3, [pc, #676]	; (8001ee0 <compensate_pressure+0x378>)
 8001c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3e:	f7fe fe25 	bl	800088c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	461d      	mov	r5, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc87 	bl	8000564 <__aeabi_i2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4ba2      	ldr	r3, [pc, #648]	; (8001ee4 <compensate_pressure+0x37c>)
 8001c5c:	f7fe fcec 	bl	8000638 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb30 	bl	80002cc <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc72 	bl	8000564 <__aeabi_i2d>
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	f7fe fcd8 	bl	8000638 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c94:	f7fe fcd0 	bl	8000638 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <compensate_pressure+0x380>)
 8001ca6:	f7fe fdf1 	bl	800088c <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc53 	bl	8000564 <__aeabi_i2d>
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	f7fe fcb9 	bl	8000638 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe fafd 	bl	80002cc <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <compensate_pressure+0x380>)
 8001ce0:	f7fe fdd4 	bl	800088c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <compensate_pressure+0x374>)
 8001cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf6:	f7fe fdc9 	bl	800088c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <compensate_pressure+0x384>)
 8001d08:	f7fe fae0 	bl	80002cc <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc13 	bl	8000544 <__aeabi_ui2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fc87 	bl	8000638 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3e:	f7fe feed 	bl	8000b1c <__aeabi_dcmplt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <compensate_pressure+0x1f8>
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d54:	f7fe ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80de 	beq.w	8001f1c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbed 	bl	8000544 <__aeabi_ui2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	495f      	ldr	r1, [pc, #380]	; (8001ef0 <compensate_pressure+0x388>)
 8001d74:	f7fe faa8 	bl	80002c8 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <compensate_pressure+0x38c>)
 8001d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d8a:	f7fe fd7f 	bl	800088c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d96:	f7fe fa97 	bl	80002c8 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a347      	add	r3, pc, #284	; (adr r3, 8001ec0 <compensate_pressure+0x358>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc46 	bl	8000638 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db8:	f7fe fd68 	bl	800088c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbca 	bl	8000564 <__aeabi_i2d>
 8001dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dd4:	f7fe fc30 	bl	8000638 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de4:	f7fe fc28 	bl	8000638 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <compensate_pressure+0x390>)
 8001df6:	f7fe fd49 	bl	800088c <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbab 	bl	8000564 <__aeabi_i2d>
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	f7fe fc11 	bl	8000638 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <compensate_pressure+0x374>)
 8001e24:	f7fe fd32 	bl	800088c <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e38:	f7fe fa48 	bl	80002cc <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb8a 	bl	8000564 <__aeabi_i2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa38 	bl	80002cc <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <compensate_pressure+0x394>)
 8001e6a:	f7fe fd0f 	bl	800088c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e76:	f7fe fa29 	bl	80002cc <__adddf3>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e82:	a311      	add	r3, pc, #68	; (adr r3, 8001ec8 <compensate_pressure+0x360>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e8c:	f7fe fe46 	bl	8000b1c <__aeabi_dcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e96:	a30c      	add	r3, pc, #48	; (adr r3, 8001ec8 <compensate_pressure+0x360>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001ea6:	a30a      	add	r3, pc, #40	; (adr r3, 8001ed0 <compensate_pressure+0x368>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eb0:	f7fe fe52 	bl	8000b58 <__aeabi_dcmpgt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	e022      	b.n	8001f00 <compensate_pressure+0x398>
 8001eba:	bf00      	nop
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40b86a00 	.word	0x40b86a00
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40dd4c00 	.word	0x40dd4c00
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40fadb00 	.word	0x40fadb00
 8001ed8:	40ef4000 	.word	0x40ef4000
 8001edc:	40e00000 	.word	0x40e00000
 8001ee0:	40100000 	.word	0x40100000
 8001ee4:	40f00000 	.word	0x40f00000
 8001ee8:	41200000 	.word	0x41200000
 8001eec:	3ff00000 	.word	0x3ff00000
 8001ef0:	41300000 	.word	0x41300000
 8001ef4:	40b00000 	.word	0x40b00000
 8001ef8:	41e00000 	.word	0x41e00000
 8001efc:	40300000 	.word	0x40300000
 8001f00:	d007      	beq.n	8001f12 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001f02:	a309      	add	r3, pc, #36	; (adr r3, 8001f28 <compensate_pressure+0x3c0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3730      	adds	r7, #48	; 0x30
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bdb0      	pop	{r4, r5, r7, pc}
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40fadb00 	.word	0x40fadb00

08001f30 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db03      	blt.n	8001f4c <st_check_boundaries+0x1c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	dd09      	ble.n	8001f60 <st_check_boundaries+0x30>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db06      	blt.n	8001f60 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	dc02      	bgt.n	8001f60 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f5a:	23fa      	movs	r3, #250	; 0xfa
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e023      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db03      	blt.n	8001f6e <st_check_boundaries+0x3e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	dd09      	ble.n	8001f82 <st_check_boundaries+0x52>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db06      	blt.n	8001f82 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	dc02      	bgt.n	8001f82 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f7c:	23fb      	movs	r3, #251	; 0xfb
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e012      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db03      	blt.n	8001f90 <st_check_boundaries+0x60>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	dd09      	ble.n	8001fa4 <st_check_boundaries+0x74>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db03      	blt.n	8001f9e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <st_check_boundaries+0x88>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	dd02      	ble.n	8001fa4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f9e:	23f9      	movs	r3, #249	; 0xf9
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	000ffff0 	.word	0x000ffff0

08001fbc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff f837 	bl	8001038 <bmp2_init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f91c 	bl	8001212 <bmp2_get_config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f94e 	bl	8001292 <bmp2_set_config>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4619      	mov	r1, r3
 8002002:	2003      	movs	r0, #3
 8002004:	f7ff f980 	bl	8001308 <bmp2_set_power_mode>
 8002008:	4603      	mov	r3, r0
 800200a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 800200c:	f107 0108 	add.w	r1, r7, #8
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa0a 	bl	8001430 <bmp2_compute_meas_time>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6858      	ldr	r0, [r3, #4]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	891b      	ldrh	r3, [r3, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	f002 f95a 	bl	800430c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	f107 010f 	add.w	r1, r7, #15
 8002060:	2305      	movs	r3, #5
 8002062:	2201      	movs	r2, #1
 8002064:	f003 fc71 	bl	800594a <HAL_SPI_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2305      	movs	r3, #5
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	f003 fdd5 	bl	8005c26 <HAL_SPI_Receive>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	7dbb      	ldrb	r3, [r7, #22]
 8002082:	4413      	add	r3, r2
 8002084:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6858      	ldr	r0, [r3, #4]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	891b      	ldrh	r3, [r3, #8]
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	f002 f93b 	bl	800430c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002096:	7dbb      	ldrb	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <bmp2_spi_read+0x74>
    iError = -1;
 800209c:	23ff      	movs	r3, #255	; 0xff
 800209e:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6858      	ldr	r0, [r3, #4]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	891b      	ldrh	r3, [r3, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	f002 f91a 	bl	800430c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	f107 010f 	add.w	r1, r7, #15
 80020e0:	2305      	movs	r3, #5
 80020e2:	2201      	movs	r2, #1
 80020e4:	f003 fc31 	bl	800594a <HAL_SPI_Transmit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2305      	movs	r3, #5
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	f003 fc27 	bl	800594a <HAL_SPI_Transmit>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	7dbb      	ldrb	r3, [r7, #22]
 8002102:	4413      	add	r3, r2
 8002104:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6858      	ldr	r0, [r3, #4]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	891b      	ldrh	r3, [r3, #8]
 800210e:	2201      	movs	r2, #1
 8002110:	4619      	mov	r1, r3
 8002112:	f002 f8fb 	bl	800430c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <bmp2_spi_write+0x74>
    iError = -1;
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <bmp2_delay_us+0x24>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fa6d 	bl	8003620 <HAL_Delay>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08d      	sub	sp, #52	; 0x34
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800215c:	23ff      	movs	r3, #255	; 0xff
 800215e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = -1.0;
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <BMP2_ReadTemperature_degC+0x98>)
 8002168:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = 10;
 800216c:	230a      	movs	r3, #10
 800216e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f899 	bl	80012b0 <bmp2_get_status>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f8d1 	bl	8001332 <bmp2_get_sensor_data>
 8002190:	4603      	mov	r3, r0
 8002192:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 8002196:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800219a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 800219e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021ac:	7f3b      	ldrb	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <BMP2_ReadTemperature_degC+0x66>
 80021b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dcdb      	bgt.n	8002172 <BMP2_ReadTemperature_degC+0x1e>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685c      	ldr	r4, [r3, #4]
 80021be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c2:	f7fe fd31 	bl	8000c28 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021d2:	729a      	strb	r2, [r3, #10]

  return temp;
 80021d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021dc:	eeb0 0a47 	vmov.f32	s0, s14
 80021e0:	eef0 0a67 	vmov.f32	s1, s15
 80021e4:	3734      	adds	r7, #52	; 0x34
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	bff00000 	.word	0xbff00000

080021f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_DMA_Init+0x38>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <MX_DMA_Init+0x38>)
 80021fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_DMA_Init+0x38>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	200c      	movs	r0, #12
 8002214:	f001 fb03 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002218:	200c      	movs	r0, #12
 800221a:	f001 fb1c 	bl	8003856 <HAL_NVIC_EnableIRQ>

}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002242:	4bb4      	ldr	r3, [pc, #720]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4ab3      	ldr	r2, [pc, #716]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4bb1      	ldr	r3, [pc, #708]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	4bae      	ldr	r3, [pc, #696]	; (8002514 <MX_GPIO_Init+0x2e8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4aad      	ldr	r2, [pc, #692]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4bab      	ldr	r3, [pc, #684]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002272:	4ba8      	ldr	r3, [pc, #672]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4aa7      	ldr	r2, [pc, #668]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228a:	4ba2      	ldr	r3, [pc, #648]	; (8002514 <MX_GPIO_Init+0x2e8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4aa1      	ldr	r2, [pc, #644]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b9f      	ldr	r3, [pc, #636]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a9b      	ldr	r2, [pc, #620]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b99      	ldr	r3, [pc, #612]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b96      	ldr	r3, [pc, #600]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a95      	ldr	r2, [pc, #596]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b93      	ldr	r3, [pc, #588]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d2:	4b90      	ldr	r3, [pc, #576]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a8f      	ldr	r2, [pc, #572]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ea:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a89      	ldr	r2, [pc, #548]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b87      	ldr	r3, [pc, #540]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 8002302:	2200      	movs	r2, #0
 8002304:	f64f 5190 	movw	r1, #64912	; 0xfd90
 8002308:	4883      	ldr	r0, [pc, #524]	; (8002518 <MX_GPIO_Init+0x2ec>)
 800230a:	f001 ffff 	bl	800430c <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|COOLING_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f24e 0108 	movw	r1, #57352	; 0xe008
 8002314:	4881      	ldr	r0, [pc, #516]	; (800251c <MX_GPIO_Init+0x2f0>)
 8002316:	f001 fff9 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002320:	487f      	ldr	r0, [pc, #508]	; (8002520 <MX_GPIO_Init+0x2f4>)
 8002322:	f001 fff3 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232c:	487a      	ldr	r0, [pc, #488]	; (8002518 <MX_GPIO_Init+0x2ec>)
 800232e:	f001 ffed 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f244 2140 	movw	r1, #16960	; 0x4240
 8002338:	487a      	ldr	r0, [pc, #488]	; (8002524 <MX_GPIO_Init+0x2f8>)
 800233a:	f001 ffe7 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 800233e:	f642 0310 	movw	r3, #10256	; 0x2810
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	4619      	mov	r1, r3
 8002356:	4870      	ldr	r0, [pc, #448]	; (8002518 <MX_GPIO_Init+0x2ec>)
 8002358:	f001 fe14 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800235c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002362:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	486d      	ldr	r0, [pc, #436]	; (8002528 <MX_GPIO_Init+0x2fc>)
 8002374:	f001 fe06 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8002378:	2308      	movs	r3, #8
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002384:	2302      	movs	r3, #2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	4619      	mov	r1, r3
 800238e:	4863      	ldr	r0, [pc, #396]	; (800251c <MX_GPIO_Init+0x2f0>)
 8002390:	f001 fdf8 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8002394:	2320      	movs	r3, #32
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002398:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	4619      	mov	r1, r3
 80023a8:	485c      	ldr	r0, [pc, #368]	; (800251c <MX_GPIO_Init+0x2f0>)
 80023aa:	f001 fdeb 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 80023ae:	2301      	movs	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c0:	4619      	mov	r1, r3
 80023c2:	4859      	ldr	r0, [pc, #356]	; (8002528 <MX_GPIO_Init+0x2fc>)
 80023c4:	f001 fdde 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023c8:	2332      	movs	r3, #50	; 0x32
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023d8:	230b      	movs	r3, #11
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4619      	mov	r1, r3
 80023e2:	4851      	ldr	r0, [pc, #324]	; (8002528 <MX_GPIO_Init+0x2fc>)
 80023e4:	f001 fdce 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 80023e8:	2304      	movs	r3, #4
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ec:	2303      	movs	r3, #3
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	4619      	mov	r1, r3
 80023fa:	484b      	ldr	r0, [pc, #300]	; (8002528 <MX_GPIO_Init+0x2fc>)
 80023fc:	f001 fdc2 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8002400:	2308      	movs	r3, #8
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002404:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800240a:	2302      	movs	r3, #2
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002412:	4619      	mov	r1, r3
 8002414:	4844      	ldr	r0, [pc, #272]	; (8002528 <MX_GPIO_Init+0x2fc>)
 8002416:	f001 fdb5 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800241a:	2386      	movs	r3, #134	; 0x86
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800242a:	230b      	movs	r3, #11
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	483d      	ldr	r0, [pc, #244]	; (800252c <MX_GPIO_Init+0x300>)
 8002436:	f001 fda5 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800243a:	2310      	movs	r3, #16
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	4619      	mov	r1, r3
 800244c:	4837      	ldr	r0, [pc, #220]	; (800252c <MX_GPIO_Init+0x300>)
 800244e:	f001 fd99 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002452:	2340      	movs	r3, #64	; 0x40
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002462:	2302      	movs	r3, #2
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	482f      	ldr	r0, [pc, #188]	; (800252c <MX_GPIO_Init+0x300>)
 800246e:	f001 fd89 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002472:	f244 0381 	movw	r3, #16513	; 0x4081
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2301      	movs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	4825      	ldr	r0, [pc, #148]	; (8002520 <MX_GPIO_Init+0x2f4>)
 800248c:	f001 fd7a 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 8002490:	2302      	movs	r3, #2
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002494:	2303      	movs	r3, #3
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	481f      	ldr	r0, [pc, #124]	; (8002520 <MX_GPIO_Init+0x2f4>)
 80024a4:	f001 fd6e 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = COOLING_Pin|DISP_2_Pin|DISP_4_Pin;
 80024a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	4619      	mov	r1, r3
 80024c0:	4816      	ldr	r0, [pc, #88]	; (800251c <MX_GPIO_Init+0x2f0>)
 80024c2:	f001 fd5f 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 80024c6:	f24d 5380 	movw	r3, #54656	; 0xd580
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024cc:	2311      	movs	r3, #17
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_GPIO_Init+0x2ec>)
 80024e0:	f001 fd50 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <MX_GPIO_Init+0x2ec>)
 80024fe:	f001 fd41 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	e00d      	b.n	8002530 <MX_GPIO_Init+0x304>
 8002514:	40023800 	.word	0x40023800
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40020400 	.word	0x40020400
 8002524:	40021800 	.word	0x40021800
 8002528:	40020800 	.word	0x40020800
 800252c:	40020000 	.word	0x40020000
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002532:	230b      	movs	r3, #11
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	484f      	ldr	r0, [pc, #316]	; (800267c <MX_GPIO_Init+0x450>)
 800253e:	f001 fd21 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATERD13_Pin;
 8002542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002554:	2302      	movs	r3, #2
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATERD13_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4848      	ldr	r0, [pc, #288]	; (8002680 <MX_GPIO_Init+0x454>)
 8002560:	f001 fd10 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002564:	2340      	movs	r3, #64	; 0x40
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002568:	2301      	movs	r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	4842      	ldr	r0, [pc, #264]	; (8002684 <MX_GPIO_Init+0x458>)
 800257c:	f001 fd02 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002590:	4619      	mov	r1, r3
 8002592:	483c      	ldr	r0, [pc, #240]	; (8002684 <MX_GPIO_Init+0x458>)
 8002594:	f001 fcf6 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025a8:	2302      	movs	r3, #2
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b0:	4619      	mov	r1, r3
 80025b2:	4835      	ldr	r0, [pc, #212]	; (8002688 <MX_GPIO_Init+0x45c>)
 80025b4:	f001 fce6 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025ca:	230a      	movs	r3, #10
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	4619      	mov	r1, r3
 80025d4:	482d      	ldr	r0, [pc, #180]	; (800268c <MX_GPIO_Init+0x460>)
 80025d6:	f001 fcd5 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ec:	4619      	mov	r1, r3
 80025ee:	4827      	ldr	r0, [pc, #156]	; (800268c <MX_GPIO_Init+0x460>)
 80025f0:	f001 fcc8 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 80025f4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025fa:	2311      	movs	r3, #17
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fe:	2301      	movs	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260a:	4619      	mov	r1, r3
 800260c:	481d      	ldr	r0, [pc, #116]	; (8002684 <MX_GPIO_Init+0x458>)
 800260e:	f001 fcb9 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002612:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002624:	230b      	movs	r3, #11
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262c:	4619      	mov	r1, r3
 800262e:	4815      	ldr	r0, [pc, #84]	; (8002684 <MX_GPIO_Init+0x458>)
 8002630:	f001 fca8 	bl	8003f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	2006      	movs	r0, #6
 800263a:	f001 f8f0 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800263e:	2006      	movs	r0, #6
 8002640:	f001 f909 	bl	8003856 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	2009      	movs	r0, #9
 800264a:	f001 f8e8 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800264e:	2009      	movs	r0, #9
 8002650:	f001 f901 	bl	8003856 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	2017      	movs	r0, #23
 800265a:	f001 f8e0 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800265e:	2017      	movs	r0, #23
 8002660:	f001 f8f9 	bl	8003856 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2028      	movs	r0, #40	; 0x28
 800266a:	f001 f8d8 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800266e:	2028      	movs	r0, #40	; 0x28
 8002670:	f001 f8f1 	bl	8003856 <HAL_NVIC_EnableIRQ>

}
 8002674:	bf00      	nop
 8002676:	3738      	adds	r7, #56	; 0x38
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40020400 	.word	0x40020400
 8002680:	40020c00 	.word	0x40020c00
 8002684:	40021800 	.word	0x40021800
 8002688:	40020800 	.word	0x40020800
 800268c:	40020000 	.word	0x40020000

08002690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_I2C1_Init+0x74>)
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <MX_I2C1_Init+0x78>)
 8002698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_I2C1_Init+0x74>)
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <MX_I2C1_Init+0x7c>)
 800269e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_I2C1_Init+0x74>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_I2C1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_I2C1_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_I2C1_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <MX_I2C1_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <MX_I2C1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <MX_I2C1_Init+0x74>)
 80026cc:	f001 fe50 	bl	8004370 <HAL_I2C_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026d6:	f000 fab3 	bl	8002c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026da:	2100      	movs	r1, #0
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <MX_I2C1_Init+0x74>)
 80026de:	f001 fed7 	bl	8004490 <HAL_I2CEx_ConfigAnalogFilter>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026e8:	f000 faaa 	bl	8002c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026ec:	2100      	movs	r1, #0
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <MX_I2C1_Init+0x74>)
 80026f0:	f001 ff19 	bl	8004526 <HAL_I2CEx_ConfigDigitalFilter>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026fa:	f000 faa1 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000298 	.word	0x20000298
 8002708:	40005400 	.word	0x40005400
 800270c:	20404768 	.word	0x20404768

08002710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0aa      	sub	sp, #168	; 0xa8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	2284      	movs	r2, #132	; 0x84
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f006 f8ad 	bl	8008890 <memset>
  if(i2cHandle->Instance==I2C1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_I2C_MspInit+0xb4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d13c      	bne.n	80027ba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002744:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002746:	2300      	movs	r3, #0
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fc60 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800275a:	f000 fa71 	bl	8002c40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8002776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002790:	2304      	movs	r3, #4
 8002792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <HAL_I2C_MspInit+0xbc>)
 800279e:	f001 fbf1 	bl	8003f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 80027a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_I2C_MspInit+0xb8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027ba:	bf00      	nop
 80027bc:	37a8      	adds	r7, #168	; 0xa8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40005400 	.word	0x40005400
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020400 	.word	0x40020400

080027d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback. Changes reference value through USART command.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_UART_RxCpltCallback+0x74>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d12c      	bne.n	800283c <HAL_UART_RxCpltCallback+0x6c>
	{
		if(wiadomosc[2] == '.' && wiadomosc[5] == 'C')
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_UART_RxCpltCallback+0x78>)
 80027e4:	789b      	ldrb	r3, [r3, #2]
 80027e6:	2b2e      	cmp	r3, #46	; 0x2e
 80027e8:	d123      	bne.n	8002832 <HAL_UART_RxCpltCallback+0x62>
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_UART_RxCpltCallback+0x78>)
 80027ec:	795b      	ldrb	r3, [r3, #5]
 80027ee:	2b43      	cmp	r3, #67	; 0x43
 80027f0:	d11f      	bne.n	8002832 <HAL_UART_RxCpltCallback+0x62>
		{
			sscanf (wiadomosc,"%fC", &ref);
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_UART_RxCpltCallback+0x7c>)
 80027f4:	4916      	ldr	r1, [pc, #88]	; (8002850 <HAL_UART_RxCpltCallback+0x80>)
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <HAL_UART_RxCpltCallback+0x78>)
 80027f8:	f006 fef2 	bl	80095e0 <siscanf>
			if(ref < MIN_RANGE){ref = MIN_RANGE;}
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_UART_RxCpltCallback+0x7c>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d503      	bpl.n	8002818 <HAL_UART_RxCpltCallback+0x48>
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_UART_RxCpltCallback+0x7c>)
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_UART_RxCpltCallback+0x84>)
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00c      	b.n	8002832 <HAL_UART_RxCpltCallback+0x62>
			else if(ref > MAX_RANGE){ref = MAX_RANGE;}
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_UART_RxCpltCallback+0x7c>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002858 <HAL_UART_RxCpltCallback+0x88>
 8002822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	dd02      	ble.n	8002832 <HAL_UART_RxCpltCallback+0x62>
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_UART_RxCpltCallback+0x7c>)
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_UART_RxCpltCallback+0x8c>)
 8002830:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 8002832:	2206      	movs	r2, #6
 8002834:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_UART_RxCpltCallback+0x78>)
 8002836:	480a      	ldr	r0, [pc, #40]	; (8002860 <HAL_UART_RxCpltCallback+0x90>)
 8002838:	f004 fdf5 	bl	8007426 <HAL_UART_Receive_IT>
	}
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40004800 	.word	0x40004800
 8002848:	200002f0 	.word	0x200002f0
 800284c:	20000054 	.word	0x20000054
 8002850:	0800da44 	.word	0x0800da44
 8002854:	41d00000 	.word	0x41d00000
 8002858:	42700000 	.word	0x42700000
 800285c:	42700000 	.word	0x42700000
 8002860:	20000450 	.word	0x20000450

08002864 <HAL_GPIO_EXTI_Callback>:
  * @brief  Display of reference value and regulator state on User button press.
  * @param  specified Pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af02      	add	r7, sp, #8
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin)
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002874:	d11b      	bne.n	80028ae <HAL_GPIO_EXTI_Callback+0x4a>
	{
		dl_kom = sprintf((char *)komunikat1, "Ref: %2.2f degC Heating: %d Cooling: %d \r\n ",
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe84 	bl	8000588 <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_GPIO_EXTI_Callback+0x58>)
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	9001      	str	r0, [sp, #4]
 800288e:	9100      	str	r1, [sp, #0]
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8002894:	f006 fe84 	bl	80095a0 <siprintf>
 8002898:	4603      	mov	r3, r0
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_GPIO_EXTI_Callback+0x68>)
 800289e:	801a      	strh	r2, [r3, #0]
				ref,is_heating,is_cooling);
	    HAL_UART_Transmit(&huart3, komunikat1, dl_kom, 100);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_GPIO_EXTI_Callback+0x68>)
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80028a8:	4809      	ldr	r0, [pc, #36]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80028aa:	f004 fd39 	bl	8007320 <HAL_UART_Transmit>
	}
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000054 	.word	0x20000054
 80028bc:	20000300 	.word	0x20000300
 80028c0:	200002fc 	.word	0x200002fc
 80028c4:	0800da48 	.word	0x0800da48
 80028c8:	20000058 	.word	0x20000058
 80028cc:	200002f6 	.word	0x200002f6
 80028d0:	20000450 	.word	0x20000450

080028d4 <HAL_TIM_PeriodElapsedCallback>:
  * 		TIM2 sends current measure value through USART.
  * @param  htim TIM handle.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if (htim == &htim5) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	f040 80bc 	bne.w	8002a5e <HAL_TIM_PeriodElapsedCallback+0x18a>
	temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 80028e6:	486e      	ldr	r0, [pc, #440]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80028e8:	f7ff fc34 	bl	8002154 <BMP2_ReadTemperature_degC>
 80028ec:	ec53 2b10 	vmov	r2, r3, d0
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f998 	bl	8000c28 <__aeabi_d2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80028fc:	6013      	str	r3, [r2, #0]

	if(temp < (ref - HEATING_THRESHOLD)){
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002aac <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8002908:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800290c:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	dd0c      	ble.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x62>
	HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,1);
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002922:	4863      	ldr	r0, [pc, #396]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002924:	f001 fcf2 	bl	800430c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292e:	4861      	ldr	r0, [pc, #388]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002930:	f001 fcec 	bl	800430c <HAL_GPIO_WritePin>
 8002934:	e027      	b.n	8002986 <HAL_TIM_PeriodElapsedCallback+0xb2>
	}else if( temp > (ref + COOLING_THRESHOLD)){
 8002936:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002ab8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8002940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d50c      	bpl.n	800296e <HAL_TIM_PeriodElapsedCallback+0x9a>
	HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800295a:	4855      	ldr	r0, [pc, #340]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800295c:	f001 fcd6 	bl	800430c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,0);
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002966:	4853      	ldr	r0, [pc, #332]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002968:	f001 fcd0 	bl	800430c <HAL_GPIO_WritePin>
 800296c:	e00b      	b.n	8002986 <HAL_TIM_PeriodElapsedCallback+0xb2>
	}else{
	HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002974:	484e      	ldr	r0, [pc, #312]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002976:	f001 fcc9 	bl	800430c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002980:	484c      	ldr	r0, [pc, #304]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002982:	f001 fcc3 	bl	800430c <HAL_GPIO_WritePin>
	}

	if(temp < (ref + ONE_PERCENT_ACC) && temp > (ref - ONE_PERCENT_ACC)){
 8002986:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002abc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8002990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	dd14      	ble.n	80029ce <HAL_TIM_PeriodElapsedCallback+0xfa>
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002abc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80029ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	d505      	bpl.n	80029ce <HAL_TIM_PeriodElapsedCallback+0xfa>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 80029c2:	2201      	movs	r2, #1
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	483e      	ldr	r0, [pc, #248]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80029c8:	f001 fca0 	bl	800430c <HAL_GPIO_WritePin>
 80029cc:	e004      	b.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0x104>
	}else{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	483b      	ldr	r0, [pc, #236]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80029d4:	f001 fc9a 	bl	800430c <HAL_GPIO_WritePin>
	}

	if(temp < (ref + FIVE_PERCENT_ACC) && temp > (ref - FIVE_PERCENT_ACC)){
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002ac4 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 80029e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	dd15      	ble.n	8002a22 <HAL_TIM_PeriodElapsedCallback+0x14e>
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002ac4 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8002a00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d506      	bpl.n	8002a22 <HAL_TIM_PeriodElapsedCallback+0x14e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,1);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a1a:	4829      	ldr	r0, [pc, #164]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002a1c:	f001 fc76 	bl	800430c <HAL_GPIO_WritePin>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_PeriodElapsedCallback+0x15a>
		}else{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a28:	4825      	ldr	r0, [pc, #148]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002a2a:	f001 fc6f 	bl	800430c <HAL_GPIO_WritePin>
		}

	is_heating = HAL_GPIO_ReadPin(HEATER_GPIO_Port,HEATER_Pin);
 8002a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a32:	481f      	ldr	r0, [pc, #124]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002a34:	f001 fc52 	bl	80042dc <HAL_GPIO_ReadPin>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002a3e:	601a      	str	r2, [r3, #0]
	is_cooling = !(HAL_GPIO_ReadPin(COOLING_GPIO_Port,COOLING_Pin));
 8002a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a44:	481b      	ldr	r0, [pc, #108]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002a46:	f001 fc49 	bl	80042dc <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002a5a:	601a      	str	r2, [r3, #0]
  }else if(htim == &htim2){
	  dl_kom2 = sprintf((char *)komunikat2, "Temp: %2.2f degC \r\n ",
	  				temp);
	  HAL_UART_Transmit(&huart3, komunikat2, dl_kom2, 100);
  }
}
 8002a5c:	e019      	b.n	8002a92 <HAL_TIM_PeriodElapsedCallback+0x1be>
  }else if(htim == &htim2){
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d115      	bne.n	8002a92 <HAL_TIM_PeriodElapsedCallback+0x1be>
	  dl_kom2 = sprintf((char *)komunikat2, "Temp: %2.2f degC \r\n ",
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd8c 	bl	8000588 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002a76:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002a78:	f006 fd92 	bl	80095a0 <siprintf>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002a82:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, komunikat2, dl_kom2, 100);
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	2364      	movs	r3, #100	; 0x64
 8002a8a:	4913      	ldr	r1, [pc, #76]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002a8e:	f004 fc47 	bl	8007320 <HAL_UART_Transmit>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200003b8 	.word	0x200003b8
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	200002ec 	.word	0x200002ec
 8002aa8:	20000054 	.word	0x20000054
 8002aac:	3ca3d70a 	.word	0x3ca3d70a
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40021400 	.word	0x40021400
 8002ab8:	3dcccccd 	.word	0x3dcccccd
 8002abc:	3eae147b 	.word	0x3eae147b
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	3fd9999a 	.word	0x3fd9999a
 8002ac8:	20000300 	.word	0x20000300
 8002acc:	200002fc 	.word	0x200002fc
 8002ad0:	2000036c 	.word	0x2000036c
 8002ad4:	0800da74 	.word	0x0800da74
 8002ad8:	20000084 	.word	0x20000084
 8002adc:	200002f8 	.word	0x200002f8
 8002ae0:	20000450 	.word	0x20000450

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae8:	f000 fd3d 	bl	8003566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aec:	f000 f83a 	bl	8002b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af0:	f7ff fb9c 	bl	800222c <MX_GPIO_Init>
  MX_DMA_Init();
 8002af4:	f7ff fb7c 	bl	80021f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002af8:	f000 fc42 	bl	8003380 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002afc:	f000 fb4c 	bl	8003198 <MX_TIM6_Init>
  MX_TIM5_Init();
 8002b00:	f000 fafc 	bl	80030fc <MX_TIM5_Init>
  MX_I2C1_Init();
 8002b04:	f7ff fdc4 	bl	8002690 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002b08:	f000 faaa 	bl	8003060 <MX_TIM2_Init>
  MX_SPI4_Init();
 8002b0c:	f000 f89e 	bl	8002c4c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 6);
 8002b10:	2206      	movs	r2, #6
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <main+0x64>)
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <main+0x68>)
 8002b16:	f004 fc86 	bl	8007426 <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev_1);
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <main+0x6c>)
 8002b1c:	f7ff fa4e 	bl	8001fbc <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim5);
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <main+0x70>)
 8002b22:	f003 ff3f 	bl	80069a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002b26:	480c      	ldr	r0, [pc, #48]	; (8002b58 <main+0x74>)
 8002b28:	f003 ff3c 	bl	80069a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(HEATER_GPIO_Port,HEATER_Pin,0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b32:	480a      	ldr	r0, [pc, #40]	; (8002b5c <main+0x78>)
 8002b34:	f001 fbea 	bl	800430c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COOLING_GPIO_Port,COOLING_Pin,1);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b3e:	4808      	ldr	r0, [pc, #32]	; (8002b60 <main+0x7c>)
 8002b40:	f001 fbe4 	bl	800430c <HAL_GPIO_WritePin>
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <main+0x60>
 8002b46:	bf00      	nop
 8002b48:	200002f0 	.word	0x200002f0
 8002b4c:	20000450 	.word	0x20000450
 8002b50:	20000018 	.word	0x20000018
 8002b54:	200003b8 	.word	0x200003b8
 8002b58:	2000036c 	.word	0x2000036c
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40021400 	.word	0x40021400

08002b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b094      	sub	sp, #80	; 0x50
 8002b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b6a:	f107 0320 	add.w	r3, r7, #32
 8002b6e:	2230      	movs	r2, #48	; 0x30
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fe8c 	bl	8008890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b88:	f001 fd1a 	bl	80045c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <SystemClock_Config+0xd4>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <SystemClock_Config+0xd4>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <SystemClock_Config+0xd4>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <SystemClock_Config+0xd8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <SystemClock_Config+0xd8>)
 8002baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <SystemClock_Config+0xd8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002bd4:	23d8      	movs	r3, #216	; 0xd8
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be0:	f107 0320 	add.w	r3, r7, #32
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fd4b 	bl	8004680 <HAL_RCC_OscConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002bf0:	f000 f826 	bl	8002c40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bf4:	f001 fcf4 	bl	80045e0 <HAL_PWREx_EnableOverDrive>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002bfe:	f000 f81f 	bl	8002c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c02:	230f      	movs	r3, #15
 8002c04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c06:	2302      	movs	r3, #2
 8002c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2107      	movs	r1, #7
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 ffd1 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002c2c:	f000 f808 	bl	8002c40 <Error_Handler>
  }
}
 8002c30:	bf00      	nop
 8002c32:	3750      	adds	r7, #80	; 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <Error_Handler+0x8>
	...

08002c4c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <MX_SPI4_Init+0x78>)
 8002c54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c6a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c6e:	2202      	movs	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c82:	2210      	movs	r2, #16
 8002c84:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_SPI4_Init+0x74>)
 8002cac:	f002 fda2 	bl	80057f4 <HAL_SPI_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002cb6:	f7ff ffc3 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000304 	.word	0x20000304
 8002cc4:	40013400 	.word	0x40013400

08002cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_SPI_MspInit+0x8c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d12f      	bne.n	8002d4a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_SPI_MspInit+0x90>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002d1a:	2364      	movs	r3, #100	; 0x64
 8002d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4619      	mov	r1, r3
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_SPI_MspInit+0x94>)
 8002d36:	f001 f925 	bl	8003f84 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2054      	movs	r0, #84	; 0x54
 8002d40:	f000 fd6d 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d44:	2054      	movs	r0, #84	; 0x54
 8002d46:	f000 fd86 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_MspInit+0x44>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_MspInit+0x44>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_MspInit+0x44>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_MspInit+0x44>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_MspInit+0x44>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_MspInit+0x44>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df4:	f000 fbf4 	bl	80035e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f001 fa9d 	bl	8004340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 8002e0e:	2008      	movs	r0, #8
 8002e10:	f001 fa96 	bl	8004340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Stream1_IRQHandler+0x10>)
 8002e1e:	f000 fe75 	bl	8003b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200004d8 	.word	0x200004d8

08002e2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 8002e30:	2020      	movs	r0, #32
 8002e32:	f001 fa85 	bl	8004340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM2_IRQHandler+0x10>)
 8002e42:	f003 fe27 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000036c 	.word	0x2000036c

08002e50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <USART3_IRQHandler+0x10>)
 8002e56:	f004 fb2b 	bl	80074b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000450 	.word	0x20000450

08002e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e6c:	f001 fa68 	bl	8004340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <TIM5_IRQHandler+0x10>)
 8002e7a:	f003 fe0b 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200003b8 	.word	0x200003b8

08002e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <TIM6_DAC_IRQHandler+0x10>)
 8002e8e:	f003 fe01 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000404 	.word	0x20000404

08002e9c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <SPI4_IRQHandler+0x10>)
 8002ea2:	f003 fa03 	bl	80062ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000304 	.word	0x20000304

08002eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	return 1;
 8002eb4:	2301      	movs	r3, #1
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_kill>:

int _kill(int pid, int sig)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eca:	f005 fcb7 	bl	800883c <__errno>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2216      	movs	r2, #22
 8002ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_exit>:

void _exit (int status)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffe7 	bl	8002ec0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ef2:	e7fe      	b.n	8002ef2 <_exit+0x12>

08002ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e00a      	b.n	8002f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f06:	f3af 8000 	nop.w
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60ba      	str	r2, [r7, #8]
 8002f12:	b2ca      	uxtb	r2, r1
 8002f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbf0      	blt.n	8002f06 <_read+0x12>
	}

return len;
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e009      	b.n	8002f54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	dbf1      	blt.n	8002f40 <_write+0x12>
	}
	return len;
 8002f5c:	687b      	ldr	r3, [r7, #4]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_close>:

int _close(int file)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_isatty>:

int _isatty(int file)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
	return 1;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	return 0;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <_sbrk+0x5c>)
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <_sbrk+0x60>)
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <_sbrk+0x64>)
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <_sbrk+0x68>)
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <_sbrk+0x64>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d207      	bcs.n	8003010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003000:	f005 fc1c 	bl	800883c <__errno>
 8003004:	4603      	mov	r3, r0
 8003006:	220c      	movs	r2, #12
 8003008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e009      	b.n	8003024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	4a05      	ldr	r2, [pc, #20]	; (8003034 <_sbrk+0x64>)
 8003020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20050000 	.word	0x20050000
 8003030:	00000400 	.word	0x00000400
 8003034:	20000368 	.word	0x20000368
 8003038:	20000550 	.word	0x20000550

0800303c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <SystemInit+0x20>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <SystemInit+0x20>)
 8003048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800304c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <MX_TIM2_Init+0x94>)
 8003080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003084:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <MX_TIM2_Init+0x94>)
 8003088:	2248      	movs	r2, #72	; 0x48
 800308a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <MX_TIM2_Init+0x94>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <MX_TIM2_Init+0x94>)
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <MX_TIM2_Init+0x98>)
 8003096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <MX_TIM2_Init+0x94>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <MX_TIM2_Init+0x94>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <MX_TIM2_Init+0x94>)
 80030a6:	f003 fc25 	bl	80068f4 <HAL_TIM_Base_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80030b0:	f7ff fdc6 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4619      	mov	r1, r3
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <MX_TIM2_Init+0x94>)
 80030c2:	f003 fe07 	bl	8006cd4 <HAL_TIM_ConfigClockSource>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030cc:	f7ff fdb8 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_TIM2_Init+0x94>)
 80030de:	f004 f825 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030e8:	f7ff fdaa 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	2000036c 	.word	0x2000036c
 80030f8:	000f4240 	.word	0x000f4240

080030fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003110:	1d3b      	adds	r3, r7, #4
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <MX_TIM5_Init+0x94>)
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <MX_TIM5_Init+0x98>)
 800311e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <MX_TIM5_Init+0x94>)
 8003122:	2248      	movs	r2, #72	; 0x48
 8003124:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003126:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <MX_TIM5_Init+0x94>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <MX_TIM5_Init+0x94>)
 800312e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003132:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <MX_TIM5_Init+0x94>)
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <MX_TIM5_Init+0x94>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003140:	4813      	ldr	r0, [pc, #76]	; (8003190 <MX_TIM5_Init+0x94>)
 8003142:	f003 fbd7 	bl	80068f4 <HAL_TIM_Base_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800314c:	f7ff fd78 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003156:	f107 0310 	add.w	r3, r7, #16
 800315a:	4619      	mov	r1, r3
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <MX_TIM5_Init+0x94>)
 800315e:	f003 fdb9 	bl	8006cd4 <HAL_TIM_ConfigClockSource>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003168:	f7ff fd6a 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <MX_TIM5_Init+0x94>)
 800317a:	f003 ffd7 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003184:	f7ff fd5c 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003188:	bf00      	nop
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200003b8 	.word	0x200003b8
 8003194:	40000c00 	.word	0x40000c00

08003198 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <MX_TIM6_Init+0x68>)
 80031aa:	4a16      	ldr	r2, [pc, #88]	; (8003204 <MX_TIM6_Init+0x6c>)
 80031ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1079;
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <MX_TIM6_Init+0x68>)
 80031b0:	f240 4237 	movw	r2, #1079	; 0x437
 80031b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <MX_TIM6_Init+0x68>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <MX_TIM6_Init+0x68>)
 80031be:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80031c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <MX_TIM6_Init+0x68>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031ca:	480d      	ldr	r0, [pc, #52]	; (8003200 <MX_TIM6_Init+0x68>)
 80031cc:	f003 fb92 	bl	80068f4 <HAL_TIM_Base_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80031d6:	f7ff fd33 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4806      	ldr	r0, [pc, #24]	; (8003200 <MX_TIM6_Init+0x68>)
 80031e8:	f003 ffa0 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80031f2:	f7ff fd25 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000404 	.word	0x20000404
 8003204:	40001000 	.word	0x40001000

08003208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	; 0x38
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d14d      	bne.n	80032c6 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322a:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a4f      	ldr	r2, [pc, #316]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b4d      	ldr	r3, [pc, #308]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a49      	ldr	r2, [pc, #292]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 8003272:	2320      	movs	r3, #32
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003282:	2301      	movs	r3, #1
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4838      	ldr	r0, [pc, #224]	; (8003370 <HAL_TIM_Base_MspInit+0x168>)
 800328e:	f000 fe79 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 8003292:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032a4:	2301      	movs	r3, #1
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	4831      	ldr	r0, [pc, #196]	; (8003374 <HAL_TIM_Base_MspInit+0x16c>)
 80032b0:	f000 fe68 	bl	8003f84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	201c      	movs	r0, #28
 80032ba:	f000 fab0 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032be:	201c      	movs	r0, #28
 80032c0:	f000 fac9 	bl	8003856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80032c4:	e04e      	b.n	8003364 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <HAL_TIM_Base_MspInit+0x170>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d130      	bne.n	8003332 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032d6:	f043 0308 	orr.w	r3, r3, #8
 80032da:	6413      	str	r3, [r2, #64]	; 0x40
 80032dc:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LD4_Pin;
 8003300:	2308      	movs	r3, #8
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003310:	2302      	movs	r3, #2
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8003314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003318:	4619      	mov	r1, r3
 800331a:	4815      	ldr	r0, [pc, #84]	; (8003370 <HAL_TIM_Base_MspInit+0x168>)
 800331c:	f000 fe32 	bl	8003f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	2032      	movs	r0, #50	; 0x32
 8003326:	f000 fa7a 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800332a:	2032      	movs	r0, #50	; 0x32
 800332c:	f000 fa93 	bl	8003856 <HAL_NVIC_EnableIRQ>
}
 8003330:	e018      	b.n	8003364 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM6)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_TIM_Base_MspInit+0x174>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d113      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 8003342:	f043 0310 	orr.w	r3, r3, #16
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_TIM_Base_MspInit+0x164>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	2036      	movs	r0, #54	; 0x36
 800335a:	f000 fa60 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800335e:	2036      	movs	r0, #54	; 0x36
 8003360:	f000 fa79 	bl	8003856 <HAL_NVIC_EnableIRQ>
}
 8003364:	bf00      	nop
 8003366:	3738      	adds	r7, #56	; 0x38
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000
 8003374:	40020400 	.word	0x40020400
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40001000 	.word	0x40001000

08003380 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <MX_USART3_UART_Init+0x5c>)
 8003388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <MX_USART3_UART_Init+0x58>)
 80033c4:	f003 ff5e 	bl	8007284 <HAL_UART_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033ce:	f7ff fc37 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000450 	.word	0x20000450
 80033dc:	40004800 	.word	0x40004800

080033e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0aa      	sub	sp, #168	; 0xa8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033f8:	f107 0310 	add.w	r3, r7, #16
 80033fc:	2284      	movs	r2, #132	; 0x84
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f005 fa45 	bl	8008890 <memset>
  if(uartHandle->Instance==USART3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a3d      	ldr	r2, [pc, #244]	; (8003500 <HAL_UART_MspInit+0x120>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d172      	bne.n	80034f6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003414:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8003416:	2310      	movs	r3, #16
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fdf8 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800342a:	f7ff fc09 	bl	8002c40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800342e:	4b35      	ldr	r3, [pc, #212]	; (8003504 <HAL_UART_MspInit+0x124>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a34      	ldr	r2, [pc, #208]	; (8003504 <HAL_UART_MspInit+0x124>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_UART_MspInit+0x124>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_UART_MspInit+0x124>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <HAL_UART_MspInit+0x124>)
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_UART_MspInit+0x124>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800345e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003472:	2303      	movs	r3, #3
 8003474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003478:	2307      	movs	r3, #7
 800347a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800347e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003482:	4619      	mov	r1, r3
 8003484:	4820      	ldr	r0, [pc, #128]	; (8003508 <HAL_UART_MspInit+0x128>)
 8003486:	f000 fd7d 	bl	8003f84 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_UART_MspInit+0x12c>)
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_UART_MspInit+0x130>)
 800348e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_UART_MspInit+0x12c>)
 8003492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003496:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_UART_MspInit+0x12c>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80034ca:	4810      	ldr	r0, [pc, #64]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034cc:	f000 f9de 	bl	800388c <HAL_DMA_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80034d6:	f7ff fbb3 	bl	8002c40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034de:	675a      	str	r2, [r3, #116]	; 0x74
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_UART_MspInit+0x12c>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2027      	movs	r0, #39	; 0x27
 80034ec:	f000 f997 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034f0:	2027      	movs	r0, #39	; 0x27
 80034f2:	f000 f9b0 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034f6:	bf00      	nop
 80034f8:	37a8      	adds	r7, #168	; 0xa8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40004800 	.word	0x40004800
 8003504:	40023800 	.word	0x40023800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	200004d8 	.word	0x200004d8
 8003510:	40026028 	.word	0x40026028

08003514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800354c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003518:	480d      	ldr	r0, [pc, #52]	; (8003550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800351a:	490e      	ldr	r1, [pc, #56]	; (8003554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003520:	e002      	b.n	8003528 <LoopCopyDataInit>

08003522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003526:	3304      	adds	r3, #4

08003528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800352c:	d3f9      	bcc.n	8003522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003530:	4c0b      	ldr	r4, [pc, #44]	; (8003560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003534:	e001      	b.n	800353a <LoopFillZerobss>

08003536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003538:	3204      	adds	r2, #4

0800353a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800353c:	d3fb      	bcc.n	8003536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800353e:	f7ff fd7d 	bl	800303c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003542:	f005 f981 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003546:	f7ff facd 	bl	8002ae4 <main>
  bx  lr    
 800354a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800354c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003554:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8003558:	0800df84 	.word	0x0800df84
  ldr r2, =_sbss
 800355c:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8003560:	2000054c 	.word	0x2000054c

08003564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003564:	e7fe      	b.n	8003564 <ADC_IRQHandler>

08003566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356a:	2003      	movs	r0, #3
 800356c:	f000 f94c 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003570:	2000      	movs	r0, #0
 8003572:	f000 f805 	bl	8003580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003576:	f7ff fbf3 	bl	8002d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_InitTick+0x54>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_InitTick+0x58>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f967 	bl	8003872 <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00e      	b.n	80035cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d80a      	bhi.n	80035ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b4:	2200      	movs	r2, #0
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f000 f92f 	bl	800381e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_InitTick+0x5c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000009c 	.word	0x2000009c
 80035d8:	200000a4 	.word	0x200000a4
 80035dc:	200000a0 	.word	0x200000a0

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	200000a4 	.word	0x200000a4
 8003604:	20000538 	.word	0x20000538

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000538 	.word	0x20000538

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200000a4 	.word	0x200000a4

08003668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <__NVIC_SetPriorityGrouping+0x40>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	4313      	orrs	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00
 80036ac:	05fa0000 	.word	0x05fa0000

080036b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <__NVIC_EnableIRQ+0x38>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100

08003708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	bf28      	it	cs
 800377a:	2304      	movcs	r3, #4
 800377c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3304      	adds	r3, #4
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <NVIC_EncodePriority+0x30>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3b03      	subs	r3, #3
 800378a:	e000      	b.n	800378e <NVIC_EncodePriority+0x32>
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	4313      	orrs	r3, r2
         );
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff8e 	bl	8003708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff29 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff3e 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff8e 	bl	800375c <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5d 	bl	8003708 <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff31 	bl	80036cc <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003898:	f7ff feb6 	bl	8003608 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e099      	b.n	80039dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c8:	e00f      	b.n	80038ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ca:	f7ff fe9d 	bl	8003608 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d908      	bls.n	80038ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2203      	movs	r2, #3
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e078      	b.n	80039dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e8      	bne.n	80038ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_DMA_Init+0x158>)
 8003904:	4013      	ands	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b04      	cmp	r3, #4
 8003942:	d107      	bne.n	8003954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4313      	orrs	r3, r2
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b04      	cmp	r3, #4
 800397c:	d117      	bne.n	80039ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fa7b 	bl	8003e8c <DMA_CheckFifoParam>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039aa:	2301      	movs	r3, #1
 80039ac:	e016      	b.n	80039dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa32 	bl	8003e20 <DMA_CalcBaseAndBitshift>
 80039bc:	4603      	mov	r3, r0
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	223f      	movs	r2, #63	; 0x3f
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	f010803f 	.word	0xf010803f

080039e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039f6:	f7ff fe07 	bl	8003608 <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e052      	b.n	8003ac0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0216 	bic.w	r2, r2, #22
 8003a28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_DMA_Abort+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0208 	bic.w	r2, r2, #8
 8003a58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a6a:	e013      	b.n	8003a94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a6c:	f7ff fdcc 	bl	8003608 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d90c      	bls.n	8003a94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e015      	b.n	8003ac0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	223f      	movs	r2, #63	; 0x3f
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00c      	b.n	8003b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2205      	movs	r2, #5
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b18:	4b8e      	ldr	r3, [pc, #568]	; (8003d54 <HAL_DMA_IRQHandler+0x248>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a8e      	ldr	r2, [pc, #568]	; (8003d58 <HAL_DMA_IRQHandler+0x24c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0a9b      	lsrs	r3, r3, #10
 8003b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2208      	movs	r2, #8
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	2208      	movs	r2, #8
 8003b66:	409a      	lsls	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f043 0204 	orr.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	2210      	movs	r2, #16
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d043      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d03c      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	2210      	movs	r2, #16
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d024      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e01f      	b.n	8003c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
 8003c4c:	e016      	b.n	8003c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0208 	bic.w	r2, r2, #8
 8003c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2220      	movs	r2, #32
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 808f 	beq.w	8003dac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8087 	beq.w	8003dac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d136      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0216 	bic.w	r2, r2, #22
 8003cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x1da>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0208 	bic.w	r2, r2, #8
 8003cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	223f      	movs	r2, #63	; 0x3f
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d07e      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
        }
        return;
 8003d22:	e079      	b.n	8003e18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01d      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10d      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d031      	beq.n	8003dac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e02c      	b.n	8003dac <HAL_DMA_IRQHandler+0x2a0>
 8003d52:	bf00      	nop
 8003d54:	2000009c 	.word	0x2000009c
 8003d58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
 8003d6c:	e01e      	b.n	8003dac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10f      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0210 	bic.w	r2, r2, #16
 8003d8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d032      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2205      	movs	r2, #5
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d307      	bcc.n	8003df4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f2      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x2cc>
 8003df2:	e000      	b.n	8003df6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003df4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
 8003e16:	e000      	b.n	8003e1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e18:	bf00      	nop
    }
  }
}
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3b10      	subs	r3, #16
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <DMA_CalcBaseAndBitshift+0x60>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <DMA_CalcBaseAndBitshift+0x64>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d908      	bls.n	8003e60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <DMA_CalcBaseAndBitshift+0x68>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	1d1a      	adds	r2, r3, #4
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58
 8003e5e:	e006      	b.n	8003e6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <DMA_CalcBaseAndBitshift+0x68>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	aaaaaaab 	.word	0xaaaaaaab
 8003e84:	0800dab0 	.word	0x0800dab0
 8003e88:	fffffc00 	.word	0xfffffc00

08003e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11f      	bne.n	8003ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d856      	bhi.n	8003f5a <DMA_CheckFifoParam+0xce>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <DMA_CheckFifoParam+0x28>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ed7 	.word	0x08003ed7
 8003ebc:	08003ec5 	.word	0x08003ec5
 8003ec0:	08003f5b 	.word	0x08003f5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d046      	beq.n	8003f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed4:	e043      	b.n	8003f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ede:	d140      	bne.n	8003f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee4:	e03d      	b.n	8003f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	d121      	bne.n	8003f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d837      	bhi.n	8003f66 <DMA_CheckFifoParam+0xda>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <DMA_CheckFifoParam+0x70>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f13 	.word	0x08003f13
 8003f04:	08003f0d 	.word	0x08003f0d
 8003f08:	08003f25 	.word	0x08003f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e030      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d025      	beq.n	8003f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f22:	e022      	b.n	8003f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f2c:	d11f      	bne.n	8003f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f32:	e01c      	b.n	8003f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d903      	bls.n	8003f42 <DMA_CheckFifoParam+0xb6>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d003      	beq.n	8003f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f40:	e018      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      break;
 8003f46:	e015      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e00b      	b.n	8003f72 <DMA_CheckFifoParam+0xe6>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e00a      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e008      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f62:	bf00      	nop
 8003f64:	e006      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
    }
  } 
  
  return status; 
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e175      	b.n	8004290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	f040 8164 	bne.w	800428a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d005      	beq.n	8003fda <HAL_GPIO_Init+0x56>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d130      	bne.n	800403c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 0201 	and.w	r2, r3, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d017      	beq.n	8004078 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d123      	bne.n	80040cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0203 	and.w	r2, r3, #3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80be 	beq.w	800428a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_GPIO_Init+0x324>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <HAL_GPIO_Init+0x324>)
 8004114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_GPIO_Init+0x324>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004126:	4a61      	ldr	r2, [pc, #388]	; (80042ac <HAL_GPIO_Init+0x328>)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	3302      	adds	r3, #2
 800412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	220f      	movs	r2, #15
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_GPIO_Init+0x32c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d037      	beq.n	80041c2 <HAL_GPIO_Init+0x23e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a57      	ldr	r2, [pc, #348]	; (80042b4 <HAL_GPIO_Init+0x330>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d031      	beq.n	80041be <HAL_GPIO_Init+0x23a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_GPIO_Init+0x334>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02b      	beq.n	80041ba <HAL_GPIO_Init+0x236>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a55      	ldr	r2, [pc, #340]	; (80042bc <HAL_GPIO_Init+0x338>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d025      	beq.n	80041b6 <HAL_GPIO_Init+0x232>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_GPIO_Init+0x33c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <HAL_GPIO_Init+0x22e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <HAL_GPIO_Init+0x340>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d019      	beq.n	80041ae <HAL_GPIO_Init+0x22a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_GPIO_Init+0x344>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_GPIO_Init+0x226>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a51      	ldr	r2, [pc, #324]	; (80042cc <HAL_GPIO_Init+0x348>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00d      	beq.n	80041a6 <HAL_GPIO_Init+0x222>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_GPIO_Init+0x34c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <HAL_GPIO_Init+0x21e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4f      	ldr	r2, [pc, #316]	; (80042d4 <HAL_GPIO_Init+0x350>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_GPIO_Init+0x21a>
 800419a:	2309      	movs	r3, #9
 800419c:	e012      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 800419e:	230a      	movs	r3, #10
 80041a0:	e010      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041a2:	2308      	movs	r3, #8
 80041a4:	e00e      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041a6:	2307      	movs	r3, #7
 80041a8:	e00c      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041aa:	2306      	movs	r3, #6
 80041ac:	e00a      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041ae:	2305      	movs	r3, #5
 80041b0:	e008      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041b2:	2304      	movs	r3, #4
 80041b4:	e006      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041b6:	2303      	movs	r3, #3
 80041b8:	e004      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e002      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_GPIO_Init+0x240>
 80041c2:	2300      	movs	r3, #0
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	f002 0203 	and.w	r2, r2, #3
 80041ca:	0092      	lsls	r2, r2, #2
 80041cc:	4093      	lsls	r3, r2
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041d4:	4935      	ldr	r1, [pc, #212]	; (80042ac <HAL_GPIO_Init+0x328>)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	3302      	adds	r3, #2
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_GPIO_Init+0x354>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_GPIO_Init+0x354>)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_GPIO_Init+0x354>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <HAL_GPIO_Init+0x354>)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004236:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_GPIO_Init+0x354>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_GPIO_Init+0x354>)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_GPIO_Init+0x354>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_GPIO_Init+0x354>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	2b0f      	cmp	r3, #15
 8004294:	f67f ae86 	bls.w	8003fa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40013800 	.word	0x40013800
 80042b0:	40020000 	.word	0x40020000
 80042b4:	40020400 	.word	0x40020400
 80042b8:	40020800 	.word	0x40020800
 80042bc:	40020c00 	.word	0x40020c00
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40021400 	.word	0x40021400
 80042c8:	40021800 	.word	0x40021800
 80042cc:	40021c00 	.word	0x40021c00
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40022400 	.word	0x40022400
 80042d8:	40013c00 	.word	0x40013c00

080042dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e001      	b.n	80042fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
 8004318:	4613      	mov	r3, r2
 800431a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800431c:	787b      	ldrb	r3, [r7, #1]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004328:	e003      	b.n	8004332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	041a      	lsls	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	619a      	str	r2, [r3, #24]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004356:	4a05      	ldr	r2, [pc, #20]	; (800436c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fa80 	bl	8002864 <HAL_GPIO_EXTI_Callback>
  }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40013c00 	.word	0x40013c00

08004370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fe f9ba 	bl	8002710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e006      	b.n	80043f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d104      	bne.n	800440a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_I2C_Init+0x11c>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	02008000 	.word	0x02008000

08004490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d138      	bne.n	8004518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e032      	b.n	800451a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b20      	cmp	r3, #32
 800453a:	d139      	bne.n	80045b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004546:	2302      	movs	r3, #2
 8004548:	e033      	b.n	80045b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2224      	movs	r2, #36	; 0x24
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004578:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40007000 	.word	0x40007000

080045e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_PWREx_EnableOverDrive+0x98>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_PWREx_EnableOverDrive+0x98>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_PWREx_EnableOverDrive+0x98>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800460e:	f7fe fffb 	bl	8003608 <HAL_GetTick>
 8004612:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004614:	e009      	b.n	800462a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004616:	f7fe fff7 	bl	8003608 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004624:	d901      	bls.n	800462a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e022      	b.n	8004670 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800462a:	4b14      	ldr	r3, [pc, #80]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d1ee      	bne.n	8004616 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 800463e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004642:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004644:	f7fe ffe0 	bl	8003608 <HAL_GetTick>
 8004648:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800464a:	e009      	b.n	8004660 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800464c:	f7fe ffdc 	bl	8003608 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465a:	d901      	bls.n	8004660 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e007      	b.n	8004670 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466c:	d1ee      	bne.n	800464c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000

08004680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e291      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8087 	beq.w	80047b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a4:	4b96      	ldr	r3, [pc, #600]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d00c      	beq.n	80046ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d112      	bne.n	80046e2 <HAL_RCC_OscConfig+0x62>
 80046bc:	4b90      	ldr	r3, [pc, #576]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ca:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d06c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x130>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d168      	bne.n	80047b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e26b      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x7a>
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e02e      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x9c>
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0xc0>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6b      	ldr	r2, [pc, #428]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe ff52 	bl	8003608 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe ff4e 	bl	8003608 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e21f      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xe8>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe ff3e 	bl	8003608 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe ff3a 	bl	8003608 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e20b      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x110>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d069      	beq.n	8004892 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047be:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x190>
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d116      	bne.n	8004810 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x17a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1df      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	493d      	ldr	r1, [pc, #244]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	e040      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d023      	beq.n	8004860 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004818:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a38      	ldr	r2, [pc, #224]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fef0 	bl	8003608 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7fe feec 	bl	8003608 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1bd      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4929      	ldr	r1, [pc, #164]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe fecc 	bl	8003608 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004874:	f7fe fec8 	bl	8003608 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e199      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d038      	beq.n	8004910 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fe fea9 	bl	8003608 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe fea5 	bl	8003608 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e176      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x23a>
 80048d8:	e01a      	b.n	8004910 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fe fe8f 	bl	8003608 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe fe8b 	bl	8003608 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d903      	bls.n	8004904 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e15c      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
 8004900:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b91      	ldr	r3, [pc, #580]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ee      	bne.n	80048ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a4 	beq.w	8004a66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491e:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a87      	ldr	r2, [pc, #540]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
 8004936:	4b85      	ldr	r3, [pc, #532]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7e      	ldr	r2, [pc, #504]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fe fe53 	bl	8003608 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fe fe4f 	bl	8003608 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e120      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	4b75      	ldr	r3, [pc, #468]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x31a>
 800498c:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a6e      	ldr	r2, [pc, #440]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	e02d      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x33c>
 80049a2:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a66      	ldr	r2, [pc, #408]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	e01c      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x35e>
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a60      	ldr	r2, [pc, #384]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a5d      	ldr	r2, [pc, #372]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a5a      	ldr	r2, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fe fe03 	bl	8003608 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fe fdff 	bl	8003608 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0ce      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCC_OscConfig+0x386>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fded 	bl	8003608 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fe fde9 	bl	8003608 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a4 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d06b      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d149      	bne.n	8004b18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fe fdba 	bl	8003608 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fe fdb6 	bl	8003608 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e087      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4313      	orrs	r3, r2
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe fd8a 	bl	8003608 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe fd86 	bl	8003608 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e057      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x478>
 8004b16:	e04f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fe fd70 	bl	8003608 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe fd6c 	bl	8003608 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03d      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4ac>
 8004b4a:	e035      	b.n	8004bb8 <HAL_RCC_OscConfig+0x538>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCC_OscConfig+0x544>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d121      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0d0      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4965      	ldr	r1, [pc, #404]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b8      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c28:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a58      	ldr	r2, [pc, #352]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4c:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	494d      	ldr	r1, [pc, #308]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d040      	beq.n	8004cec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07f      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e073      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4936      	ldr	r1, [pc, #216]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbc:	f7fe fca4 	bl	8003608 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe fca0 	bl	8003608 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e053      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d210      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4922      	ldr	r1, [pc, #136]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e032      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4916      	ldr	r1, [pc, #88]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5a:	f000 f821 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	490a      	ldr	r1, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x1cc>)
 8004d6c:	5ccb      	ldrb	r3, [r1, r3]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1d0>)
 8004d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d76:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fc00 	bl	8003580 <HAL_InitTick>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023c00 	.word	0x40023c00
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0800da98 	.word	0x0800da98
 8004d98:	2000009c 	.word	0x2000009c
 8004d9c:	200000a0 	.word	0x200000a0

08004da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b094      	sub	sp, #80	; 0x50
 8004da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	2300      	movs	r3, #0
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	2300      	movs	r3, #0
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db8:	4b79      	ldr	r3, [pc, #484]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	f200 80e1 	bhi.w	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd2:	e0db      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd8:	e0db      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dde:	e0d8      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	6139      	str	r1, [r7, #16]
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	018b      	lsls	r3, r1, #6
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4e:	4651      	mov	r1, sl
 8004e50:	018a      	lsls	r2, r1, #6
 8004e52:	4651      	mov	r1, sl
 8004e54:	ebb2 0801 	subs.w	r8, r2, r1
 8004e58:	4659      	mov	r1, fp
 8004e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e72:	4690      	mov	r8, r2
 8004e74:	4699      	mov	r9, r3
 8004e76:	4623      	mov	r3, r4
 8004e78:	eb18 0303 	adds.w	r3, r8, r3
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	462b      	mov	r3, r5
 8004e80:	eb49 0303 	adc.w	r3, r9, r3
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e92:	4629      	mov	r1, r5
 8004e94:	024b      	lsls	r3, r1, #9
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	024a      	lsls	r2, r1, #9
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb0:	f7fb ff0a 	bl	8000cc8 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	e058      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebe:	4b38      	ldr	r3, [pc, #224]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4611      	mov	r1, r2
 8004eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eea:	0150      	lsls	r0, r2, #5
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f10:	ebb2 040a 	subs.w	r4, r2, sl
 8004f14:	eb63 050b 	sbc.w	r5, r3, fp
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	00eb      	lsls	r3, r5, #3
 8004f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f26:	00e2      	lsls	r2, r4, #3
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	4643      	mov	r3, r8
 8004f2e:	18e3      	adds	r3, r4, r3
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	464b      	mov	r3, r9
 8004f34:	eb45 0303 	adc.w	r3, r5, r3
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f46:	4629      	mov	r1, r5
 8004f48:	028b      	lsls	r3, r1, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f50:	4621      	mov	r1, r4
 8004f52:	028a      	lsls	r2, r1, #10
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	61fa      	str	r2, [r7, #28]
 8004f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f64:	f7fb feb0 	bl	8000cc8 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3750      	adds	r7, #80	; 0x50
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	2000009c 	.word	0x2000009c

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4903      	ldr	r1, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	0800daa8 	.word	0x0800daa8

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	f7ff ffdc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0b5b      	lsrs	r3, r3, #13
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4903      	ldr	r1, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	0800daa8 	.word	0x0800daa8

08005014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800503c:	4b69      	ldr	r3, [pc, #420]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005042:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	4b66      	ldr	r3, [pc, #408]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	4964      	ldr	r1, [pc, #400]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d017      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800506e:	4b5d      	ldr	r3, [pc, #372]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	4959      	ldr	r1, [pc, #356]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050aa:	4b4e      	ldr	r3, [pc, #312]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	494a      	ldr	r1, [pc, #296]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050d6:	2301      	movs	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 808b 	beq.w	800520e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f8:	4b3a      	ldr	r3, [pc, #232]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005102:	6413      	str	r3, [r2, #64]	; 0x40
 8005104:	4b37      	ldr	r3, [pc, #220]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005110:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fe fa74 	bl	8003608 <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fe fa70 	bl	8003608 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e357      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005136:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d035      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	429a      	cmp	r2, r3
 800515e:	d02e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005180:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005188:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d114      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fe fa38 	bl	8003608 <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fe fa34 	bl	8003608 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e319      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ee      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ca:	d111      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051da:	400b      	ands	r3, r1
 80051dc:	4901      	ldr	r1, [pc, #4]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
 80051e2:	e00b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40007000 	.word	0x40007000
 80051ec:	0ffffcff 	.word	0x0ffffcff
 80051f0:	4baa      	ldr	r3, [pc, #680]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4aa9      	ldr	r2, [pc, #676]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051fa:	6093      	str	r3, [r2, #8]
 80051fc:	4ba7      	ldr	r3, [pc, #668]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005208:	49a4      	ldr	r1, [pc, #656]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520a:	4313      	orrs	r3, r2
 800520c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800521a:	4ba0      	ldr	r3, [pc, #640]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005220:	4a9e      	ldr	r2, [pc, #632]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800522a:	4b9c      	ldr	r3, [pc, #624]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	4999      	ldr	r1, [pc, #612]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005248:	4b94      	ldr	r3, [pc, #592]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	4991      	ldr	r1, [pc, #580]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005278:	4988      	ldr	r1, [pc, #544]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800528c:	4b83      	ldr	r3, [pc, #524]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	4980      	ldr	r1, [pc, #512]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ae:	4b7b      	ldr	r3, [pc, #492]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	4977      	ldr	r1, [pc, #476]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d0:	4b72      	ldr	r3, [pc, #456]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	496f      	ldr	r1, [pc, #444]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052f2:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f023 020c 	bic.w	r2, r3, #12
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005300:	4966      	ldr	r1, [pc, #408]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	495e      	ldr	r1, [pc, #376]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005336:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	4955      	ldr	r1, [pc, #340]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	494d      	ldr	r1, [pc, #308]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800537a:	4b48      	ldr	r3, [pc, #288]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	4944      	ldr	r1, [pc, #272]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800539c:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	493c      	ldr	r1, [pc, #240]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	4933      	ldr	r1, [pc, #204]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e0:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ee:	492b      	ldr	r1, [pc, #172]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005410:	4922      	ldr	r1, [pc, #136]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005420:	d101      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	4912      	ldr	r1, [pc, #72]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005474:	4909      	ldr	r1, [pc, #36]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d006      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80d9 	beq.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a01      	ldr	r2, [pc, #4]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800549a:	e001      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800549c:	40023800 	.word	0x40023800
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fe f8b1 	bl	8003608 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054aa:	f7fe f8ad 	bl	8003608 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b64      	cmp	r3, #100	; 0x64
 80054b6:	d901      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e194      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054bc:	4b6c      	ldr	r3, [pc, #432]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d021      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11d      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054ea:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	019a      	lsls	r2, r3, #6
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	431a      	orrs	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	071b      	lsls	r3, r3, #28
 8005510:	4957      	ldr	r1, [pc, #348]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02e      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005542:	d129      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005544:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005552:	4b47      	ldr	r3, [pc, #284]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005558:	0f1b      	lsrs	r3, r3, #28
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	019a      	lsls	r2, r3, #6
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	071b      	lsls	r3, r3, #28
 8005578:	493d      	ldr	r1, [pc, #244]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005586:	f023 021f 	bic.w	r2, r3, #31
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	3b01      	subs	r3, #1
 8005590:	4937      	ldr	r1, [pc, #220]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01d      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b8:	0f1b      	lsrs	r3, r3, #28
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	019a      	lsls	r2, r3, #6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	071b      	lsls	r3, r3, #28
 80055d8:	4925      	ldr	r1, [pc, #148]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	019a      	lsls	r2, r3, #6
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4919      	ldr	r1, [pc, #100]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fd fff4 	bl	8003608 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005624:	f7fd fff0 	bl	8003608 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0d7      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 80cd 	bne.w	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005656:	f7fd ffd7 	bl	8003608 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800565e:	f7fd ffd3 	bl	8003608 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b64      	cmp	r3, #100	; 0x64
 800566a:	d903      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0ba      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005670:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005674:	4b5e      	ldr	r3, [pc, #376]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005680:	d0ed      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d12a      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056aa:	4b51      	ldr	r3, [pc, #324]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056b8:	4b4d      	ldr	r3, [pc, #308]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	0f1b      	lsrs	r3, r3, #28
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	019a      	lsls	r2, r3, #6
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	071b      	lsls	r3, r3, #28
 80056de:	4944      	ldr	r1, [pc, #272]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	493d      	ldr	r1, [pc, #244]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d022      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005714:	d11d      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	0e1b      	lsrs	r3, r3, #24
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005724:	4b32      	ldr	r3, [pc, #200]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	4929      	ldr	r1, [pc, #164]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d028      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	019a      	lsls	r2, r3, #6
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	431a      	orrs	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	4917      	ldr	r1, [pc, #92]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4911      	ldr	r1, [pc, #68]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057bc:	f7fd ff24 	bl	8003608 <HAL_GetTick>
 80057c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057c4:	f7fd ff20 	bl	8003608 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e007      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e2:	d1ef      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e09d      	b.n	8005942 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd fa3e 	bl	8002cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586c:	d902      	bls.n	8005874 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e002      	b.n	800587a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005878:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005882:	d007      	beq.n	8005894 <HAL_SPI_Init+0xa0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 0204 	and.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005910:	ea42 0103 	orr.w	r1, r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b088      	sub	sp, #32
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_SPI_Transmit+0x22>
 8005968:	2302      	movs	r3, #2
 800596a:	e158      	b.n	8005c1e <HAL_SPI_Transmit+0x2d4>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005974:	f7fd fe48 	bl	8003608 <HAL_GetTick>
 8005978:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598e:	e13d      	b.n	8005c0c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_SPI_Transmit+0x52>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059a0:	e134      	b.n	8005c0c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2203      	movs	r2, #3
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ec:	d10f      	bne.n	8005a0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d007      	beq.n	8005a2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a34:	d94b      	bls.n	8005ace <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_Transmit+0xfa>
 8005a3e:	8afb      	ldrh	r3, [r7, #22]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d13e      	bne.n	8005ac2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a68:	e02b      	b.n	8005ac2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d112      	bne.n	8005a9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9c:	e011      	b.n	8005ac2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9e:	f7fd fdb3 	bl	8003608 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d803      	bhi.n	8005ab6 <HAL_SPI_Transmit+0x16c>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d102      	bne.n	8005abc <HAL_SPI_Transmit+0x172>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ac0:	e0a4      	b.n	8005c0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ce      	bne.n	8005a6a <HAL_SPI_Transmit+0x120>
 8005acc:	e07c      	b.n	8005bc8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0x192>
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d170      	bne.n	8005bbe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d912      	bls.n	8005b0c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b02      	subs	r3, #2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b0a:	e058      	b.n	8005bbe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b32:	e044      	b.n	8005bbe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d12b      	bne.n	8005b9a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d912      	bls.n	8005b72 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b02      	subs	r3, #2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b70:	e025      	b.n	8005bbe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b98:	e011      	b.n	8005bbe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9a:	f7fd fd35 	bl	8003608 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d803      	bhi.n	8005bb2 <HAL_SPI_Transmit+0x268>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_Transmit+0x26e>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bbc:	e026      	b.n	8005c0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1b5      	bne.n	8005b34 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fe27 	bl	8006820 <SPI_EndRxTxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e000      	b.n	8005c0c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b088      	sub	sp, #32
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c42:	d112      	bne.n	8005c6a <HAL_SPI_Receive+0x44>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10e      	bne.n	8005c6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f910 	bl	8005e86 <HAL_SPI_TransmitReceive>
 8005c66:	4603      	mov	r3, r0
 8005c68:	e109      	b.n	8005e7e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_SPI_Receive+0x52>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e102      	b.n	8005e7e <HAL_SPI_Receive+0x258>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c80:	f7fd fcc2 	bl	8003608 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d002      	beq.n	8005c98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
 8005c94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c96:	e0e9      	b.n	8005e6c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_SPI_Receive+0x7e>
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ca8:	e0e0      	b.n	8005e6c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2204      	movs	r2, #4
 8005cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf4:	d908      	bls.n	8005d08 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	e007      	b.n	8005d18 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	d10f      	bne.n	8005d42 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d007      	beq.n	8005d60 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d68:	d867      	bhi.n	8005e3a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d6a:	e030      	b.n	8005dce <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d117      	bne.n	8005daa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f103 020c 	add.w	r2, r3, #12
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005da8:	e011      	b.n	8005dce <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005daa:	f7fd fc2d 	bl	8003608 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d803      	bhi.n	8005dc2 <HAL_SPI_Receive+0x19c>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d102      	bne.n	8005dc8 <HAL_SPI_Receive+0x1a2>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dcc:	e04e      	b.n	8005e6c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1c8      	bne.n	8005d6c <HAL_SPI_Receive+0x146>
 8005dda:	e034      	b.n	8005e46 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d115      	bne.n	8005e16 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	b292      	uxth	r2, r2
 8005df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e14:	e011      	b.n	8005e3a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e16:	f7fd fbf7 	bl	8003608 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d803      	bhi.n	8005e2e <HAL_SPI_Receive+0x208>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d102      	bne.n	8005e34 <HAL_SPI_Receive+0x20e>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e38:	e018      	b.n	8005e6c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ca      	bne.n	8005ddc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fc6c 	bl	8006728 <SPI_EndRxTransaction>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
 8005e68:	e000      	b.n	8005e6c <HAL_SPI_Receive+0x246>
  }

error :
 8005e6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08a      	sub	sp, #40	; 0x28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e94:	2301      	movs	r3, #1
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x26>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e1fb      	b.n	80062a4 <HAL_SPI_TransmitReceive+0x41e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fd fba8 	bl	8003608 <HAL_GetTick>
 8005eb8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ed0:	7efb      	ldrb	r3, [r7, #27]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x6e>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005edc:	d106      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x66>
 8005ee6:	7efb      	ldrb	r3, [r7, #27]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d003      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ef2:	e1cd      	b.n	8006290 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x80>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x80>
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f0c:	e1c0      	b.n	8006290 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d003      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2205      	movs	r2, #5
 8005f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	887a      	ldrh	r2, [r7, #2]
 8005f32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	887a      	ldrh	r2, [r7, #2]
 8005f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	887a      	ldrh	r2, [r7, #2]
 8005f4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f64:	d802      	bhi.n	8005f6c <HAL_SPI_TransmitReceive+0xe6>
 8005f66:	8a3b      	ldrh	r3, [r7, #16]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d908      	bls.n	8005f7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f7a:	605a      	str	r2, [r3, #4]
 8005f7c:	e007      	b.n	8005f8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d007      	beq.n	8005fac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005faa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fb4:	d97c      	bls.n	80060b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x13e>
 8005fbe:	8a7b      	ldrh	r3, [r7, #18]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d169      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	881a      	ldrh	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	1c9a      	adds	r2, r3, #2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe8:	e056      	b.n	8006098 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d11b      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x1aa>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x1aa>
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	2b01      	cmp	r3, #1
 8006006:	d113      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	1c9a      	adds	r2, r3, #2
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	d11c      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x1f2>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	b292      	uxth	r2, r2
 8006056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006078:	f7fd fac6 	bl	8003608 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006084:	429a      	cmp	r2, r3
 8006086:	d807      	bhi.n	8006098 <HAL_SPI_TransmitReceive+0x212>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d003      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006096:	e0fb      	b.n	8006290 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1a3      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x164>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d19d      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x164>
 80060ae:	e0df      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_SPI_TransmitReceive+0x23a>
 80060b8:	8a7b      	ldrh	r3, [r7, #18]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 80cb 	bne.w	8006256 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d912      	bls.n	80060f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	881a      	ldrh	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b02      	subs	r3, #2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ee:	e0b2      	b.n	8006256 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006116:	e09e      	b.n	8006256 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	d134      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x30a>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d02f      	beq.n	8006190 <HAL_SPI_TransmitReceive+0x30a>
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	2b01      	cmp	r3, #1
 8006134:	d12c      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d912      	bls.n	8006166 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	881a      	ldrh	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	1c9a      	adds	r2, r3, #2
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b02      	subs	r3, #2
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006164:	e012      	b.n	800618c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d148      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x3aa>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d042      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d923      	bls.n	80061fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	b292      	uxth	r2, r2
 80061c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b02      	subs	r3, #2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d81f      	bhi.n	800622c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	e016      	b.n	800622c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f103 020c 	add.w	r2, r3, #12
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800622c:	2301      	movs	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006230:	f7fd f9ea 	bl	8003608 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623c:	429a      	cmp	r2, r3
 800623e:	d803      	bhi.n	8006248 <HAL_SPI_TransmitReceive+0x3c2>
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <HAL_SPI_TransmitReceive+0x3c8>
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006254:	e01c      	b.n	8006290 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f af5b 	bne.w	8006118 <HAL_SPI_TransmitReceive+0x292>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	f47f af54 	bne.w	8006118 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fad3 	bl	8006820 <SPI_EndRxTxTransaction>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	661a      	str	r2, [r3, #96]	; 0x60
 800628c:	e000      	b.n	8006290 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800628e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	; 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	099b      	lsrs	r3, r3, #6
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    return;
 80062ee:	e0d7      	b.n	80064a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_SPI_IRQHandler+0x66>
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
    return;
 8006310:	e0c6      	b.n	80064a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <HAL_SPI_IRQHandler+0x8c>
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	099b      	lsrs	r3, r3, #6
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80b4 	beq.w	80064a0 <HAL_SPI_IRQHandler+0x1f4>
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80ad 	beq.w	80064a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	099b      	lsrs	r3, r3, #6
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d023      	beq.n	800639a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d011      	beq.n	8006382 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	f043 0204 	orr.w	r2, r3, #4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	e00b      	b.n	800639a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	693b      	ldr	r3, [r7, #16]
        return;
 8006398:	e082      	b.n	80064a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063aa:	f043 0201 	orr.w	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	f043 0208 	orr.w	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063e8:	2300      	movs	r3, #0
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d04f      	beq.n	800649e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800640c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_SPI_IRQHandler+0x17e>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d034      	beq.n	8006494 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0203 	bic.w	r2, r2, #3
 8006438:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643e:	2b00      	cmp	r3, #0
 8006440:	d011      	beq.n	8006466 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <HAL_SPI_IRQHandler+0x1fc>)
 8006448:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fb3a 	bl	8003ac8 <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <HAL_SPI_IRQHandler+0x1fc>)
 8006474:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fb24 	bl	8003ac8 <HAL_DMA_Abort_IT>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006492:	e003      	b.n	800649c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f809 	bl	80064ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800649a:	e000      	b.n	800649e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800649c:	bf00      	nop
    return;
 800649e:	bf00      	nop
  }
}
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	080064c1 	.word	0x080064c1

080064ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ffe5 	bl	80064ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064fc:	f7fd f884 	bl	8003608 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4413      	add	r3, r2
 800650a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800650c:	f7fd f87c 	bl	8003608 <HAL_GetTick>
 8006510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	015b      	lsls	r3, r3, #5
 8006518:	0d1b      	lsrs	r3, r3, #20
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006522:	e054      	b.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d050      	beq.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800652c:	f7fd f86c 	bl	8003608 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	429a      	cmp	r2, r3
 800653a:	d902      	bls.n	8006542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d13d      	bne.n	80065be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655a:	d111      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	d004      	beq.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656e:	d107      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006588:	d10f      	bne.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e017      	b.n	80065ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d19b      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000009c 	.word	0x2000009c

080065fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800660e:	f7fc fffb 	bl	8003608 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	4413      	add	r3, r2
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800661e:	f7fc fff3 	bl	8003608 <HAL_GetTick>
 8006622:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800662c:	4b3d      	ldr	r3, [pc, #244]	; (8006724 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	00da      	lsls	r2, r3, #3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	0d1b      	lsrs	r3, r3, #20
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006644:	e060      	b.n	8006708 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800664c:	d107      	bne.n	800665e <SPI_WaitFifoStateUntilTimeout+0x62>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800665c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d050      	beq.n	8006708 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006666:	f7fc ffcf 	bl	8003608 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	429a      	cmp	r2, r3
 8006674:	d902      	bls.n	800667c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d13d      	bne.n	80066f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800668a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006694:	d111      	bne.n	80066ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669e:	d004      	beq.n	80066aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a8:	d107      	bne.n	80066ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c2:	d10f      	bne.n	80066e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e010      	b.n	800671a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	3b01      	subs	r3, #1
 8006706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d196      	bne.n	8006646 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2000009c 	.word	0x2000009c

08006728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673c:	d111      	bne.n	8006762 <SPI_EndRxTransaction+0x3a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006746:	d004      	beq.n	8006752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006750:	d107      	bne.n	8006762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676a:	d112      	bne.n	8006792 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff feb8 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d021      	beq.n	80067c6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e03d      	b.n	800680e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <SPI_EndRxTransaction+0xf0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <SPI_EndRxTransaction+0xf4>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	0d5b      	lsrs	r3, r3, #21
 800679e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d0f2      	beq.n	80067a8 <SPI_EndRxTransaction+0x80>
 80067c2:	e000      	b.n	80067c6 <SPI_EndRxTransaction+0x9e>
        break;
 80067c4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ce:	d11d      	bne.n	800680c <SPI_EndRxTransaction+0xe4>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d004      	beq.n	80067e4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d113      	bne.n	800680c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff ff03 	bl	80065fc <SPI_WaitFifoStateUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	f043 0220 	orr.w	r2, r3, #32
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e000      	b.n	800680e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	2000009c 	.word	0x2000009c
 800681c:	165e9f81 	.word	0x165e9f81

08006820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2200      	movs	r2, #0
 8006834:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff fedf 	bl	80065fc <SPI_WaitFifoStateUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	f043 0220 	orr.w	r2, r3, #32
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e046      	b.n	80068e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <SPI_EndRxTxTransaction+0xcc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <SPI_EndRxTxTransaction+0xd0>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	0d5b      	lsrs	r3, r3, #21
 8006860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d112      	bne.n	800689a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff fe34 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e023      	b.n	80068e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d0f2      	beq.n	800689a <SPI_EndRxTxTransaction+0x7a>
 80068b4:	e000      	b.n	80068b8 <SPI_EndRxTxTransaction+0x98>
        break;
 80068b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fe99 	bl	80065fc <SPI_WaitFifoStateUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d4:	f043 0220 	orr.w	r2, r3, #32
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e000      	b.n	80068e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000009c 	.word	0x2000009c
 80068f0:	165e9f81 	.word	0x165e9f81

080068f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e049      	b.n	800699a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fc fc74 	bl	8003208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f000 fac0 	bl	8006eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d001      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e054      	b.n	8006a66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <HAL_TIM_Base_Start_IT+0xd0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d022      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e6:	d01d      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <HAL_TIM_Base_Start_IT+0xd4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d018      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <HAL_TIM_Base_Start_IT+0xd8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00e      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0x80>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIM_Base_Start_IT+0xe8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d115      	bne.n	8006a50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <HAL_TIM_Base_Start_IT+0xec>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b06      	cmp	r3, #6
 8006a34:	d015      	beq.n	8006a62 <HAL_TIM_Base_Start_IT+0xbe>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	d011      	beq.n	8006a62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4e:	e008      	b.n	8006a62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e000      	b.n	8006a64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40001800 	.word	0x40001800
 8006a90:	00010007 	.word	0x00010007

08006a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0202 	mvn.w	r2, #2
 8006ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9d0 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9c2 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9d3 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0204 	mvn.w	r2, #4
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9a6 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f998 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9a9 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0208 	mvn.w	r2, #8
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f97c 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f96e 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f97f 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d122      	bne.n	8006bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0210 	mvn.w	r2, #16
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f952 	bl	8006e7c <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f944 	bl	8006e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f955 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0201 	mvn.w	r2, #1
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fe5e 	bl	80028d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d10e      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fb0c 	bl	800725c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	d10e      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d107      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 faff 	bl	8007270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d10e      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f903 	bl	8006ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d10e      	bne.n	8006cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0220 	mvn.w	r2, #32
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fabf 	bl	8007248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e0b4      	b.n	8006e5a <HAL_TIM_ConfigClockSource+0x186>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	4b56      	ldr	r3, [pc, #344]	; (8006e64 <HAL_TIM_ConfigClockSource+0x190>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d28:	d03e      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0xd4>
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2e:	f200 8087 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d36:	f000 8086 	beq.w	8006e46 <HAL_TIM_ConfigClockSource+0x172>
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d87f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d01a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xa6>
 8006d44:	2b70      	cmp	r3, #112	; 0x70
 8006d46:	d87b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d48:	2b60      	cmp	r3, #96	; 0x60
 8006d4a:	d050      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x11a>
 8006d4c:	2b60      	cmp	r3, #96	; 0x60
 8006d4e:	d877      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d50:	2b50      	cmp	r3, #80	; 0x50
 8006d52:	d03c      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xfa>
 8006d54:	2b50      	cmp	r3, #80	; 0x50
 8006d56:	d873      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d058      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x13a>
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d86f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d064      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d86b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d060      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d867      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d05a      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d78:	e062      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f000 f9af 	bl	80070ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
      break;
 8006da6:	e04f      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f000 f998 	bl	80070ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e03c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 f90c 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2150      	movs	r1, #80	; 0x50
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f965 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e02c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 f92b 	bl	8007056 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2160      	movs	r1, #96	; 0x60
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f955 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e01c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 f8ec 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2140      	movs	r1, #64	; 0x40
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f945 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e00c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f000 f93c 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e3e:	e003      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	e000      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	fffeff88 	.word	0xfffeff88

08006e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a40      	ldr	r2, [pc, #256]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3c      	ldr	r2, [pc, #240]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d108      	bne.n	8006f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d02b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f18:	d027      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d023      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a29      	ldr	r2, [pc, #164]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d017      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <TIM_Base_SetConfig+0x128>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <TIM_Base_SetConfig+0x12c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <TIM_Base_SetConfig+0x130>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a25      	ldr	r2, [pc, #148]	; (8006fec <TIM_Base_SetConfig+0x134>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <TIM_Base_SetConfig+0x138>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a23      	ldr	r2, [pc, #140]	; (8006ff4 <TIM_Base_SetConfig+0x13c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d108      	bne.n	8006f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_Base_SetConfig+0xf8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d103      	bne.n	8006fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	40001800 	.word	0x40001800
 8006ff0:	40001c00 	.word	0x40001c00
 8006ff4:	40002000 	.word	0x40002000

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0210 	bic.w	r2, r3, #16
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f043 0307 	orr.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	021a      	lsls	r2, r3, #8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	431a      	orrs	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e06d      	b.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a30      	ldr	r2, [pc, #192]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2f      	ldr	r2, [pc, #188]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d108      	bne.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800717e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a20      	ldr	r2, [pc, #128]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b6:	d01d      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1a      	ldr	r2, [pc, #104]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a16      	ldr	r2, [pc, #88]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a15      	ldr	r2, [pc, #84]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d10c      	bne.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00
 8007240:	40014000 	.word	0x40014000
 8007244:	40001800 	.word	0x40001800

08007248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e040      	b.n	8007318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fc f89a 	bl	80033e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fbe6 	bl	8007a94 <UART_SetConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e022      	b.n	8007318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fe3e 	bl	8007f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fec5 	bl	80080a0 <UART_CheckIdleState>
 8007316:	4603      	mov	r3, r0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007334:	2b20      	cmp	r3, #32
 8007336:	d171      	bne.n	800741c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Transmit+0x24>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e06a      	b.n	800741e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2221      	movs	r2, #33	; 0x21
 8007354:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007356:	f7fc f957 	bl	8003608 <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d108      	bne.n	8007388 <HAL_UART_Transmit+0x68>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e003      	b.n	8007390 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007390:	e02c      	b.n	80073ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2200      	movs	r2, #0
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 feb6 	bl	800810e <UART_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e038      	b.n	800741e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	3302      	adds	r3, #2
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e007      	b.n	80073da <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1cc      	bne.n	8007392 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2200      	movs	r2, #0
 8007400:	2140      	movs	r1, #64	; 0x40
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fe83 	bl	800810e <UART_WaitOnFlagUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e005      	b.n	800741e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e000      	b.n	800741e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
  }
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b08a      	sub	sp, #40	; 0x28
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	4613      	mov	r3, r2
 8007432:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743a:	2b20      	cmp	r3, #32
 800743c:	d132      	bne.n	80074a4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HAL_UART_Receive_IT+0x24>
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e02b      	b.n	80074a6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d018      	beq.n	8007494 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	613b      	str	r3, [r7, #16]
   return(result);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	61bb      	str	r3, [r7, #24]
   return(result);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e6      	bne.n	8007462 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	461a      	mov	r2, r3
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fefe 	bl	800829c <UART_Start_Receive_IT>
 80074a0:	4603      	mov	r3, r0
 80074a2:	e000      	b.n	80074a6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3728      	adds	r7, #40	; 0x28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0ba      	sub	sp, #232	; 0xe8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074da:	f640 030f 	movw	r3, #2063	; 0x80f
 80074de:	4013      	ands	r3, r2
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d115      	bne.n	8007518 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8297 	beq.w	8007a3c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
      }
      return;
 8007516:	e291      	b.n	8007a3c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8117 	beq.w	8007750 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800752e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_UART_IRQHandler+0x298>)
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 810a 	beq.w	8007750 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d011      	beq.n	800756c <HAL_UART_IRQHandler+0xbc>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2201      	movs	r2, #1
 800755a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007562:	f043 0201 	orr.w	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <HAL_UART_IRQHandler+0xec>
 8007578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2202      	movs	r2, #2
 800758a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007592:	f043 0204 	orr.w	r2, r3, #4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d011      	beq.n	80075cc <HAL_UART_IRQHandler+0x11c>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2204      	movs	r2, #4
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c2:	f043 0202 	orr.w	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2208      	movs	r2, #8
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fe:	f043 0208 	orr.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007610:	2b00      	cmp	r3, #0
 8007612:	d012      	beq.n	800763a <HAL_UART_IRQHandler+0x18a>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 81fd 	beq.w	8007a40 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d005      	beq.n	8007692 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800768a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04f      	beq.n	8007732 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fec8 	bl	8008428 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d141      	bne.n	800772a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1d9      	bne.n	80076a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fe:	4a13      	ldr	r2, [pc, #76]	; (800774c <HAL_UART_IRQHandler+0x29c>)
 8007700:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	4618      	mov	r0, r3
 8007708:	f7fc f9de 	bl	8003ac8 <HAL_DMA_Abort_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d017      	beq.n	8007742 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	e00f      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9a0 	bl	8007a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	e00b      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f99c 	bl	8007a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	e007      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f998 	bl	8007a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007740:	e17e      	b.n	8007a40 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	bf00      	nop
    return;
 8007744:	e17c      	b.n	8007a40 <HAL_UART_IRQHandler+0x590>
 8007746:	bf00      	nop
 8007748:	04000120 	.word	0x04000120
 800774c:	080084f1 	.word	0x080084f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 814c 	bne.w	80079f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8145 	beq.w	80079f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 813e 	beq.w	80079f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	f040 80b6 	bne.w	80078fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800779a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8150 	beq.w	8007a44 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f080 8148 	bcs.w	8007a44 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c8:	f000 8086 	beq.w	80078d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800780e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1da      	bne.n	80077cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3308      	adds	r3, #8
 800781c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007828:	f023 0301 	bic.w	r3, r3, #1
 800782c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800783a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800783e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800784c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e1      	bne.n	8007816 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800787c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e3      	bne.n	8007852 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a8:	f023 0310 	bic.w	r3, r3, #16
 80078ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80078bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e4      	bne.n	8007898 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fc f888 	bl	80039e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8c2 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078f8:	e0a4      	b.n	8007a44 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007906:	b29b      	uxth	r3, r3
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8096 	beq.w	8007a48 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800791c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8091 	beq.w	8007a48 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800793a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
 800794a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800794e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e4      	bne.n	8007926 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	623b      	str	r3, [r7, #32]
   return(result);
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007980:	633a      	str	r2, [r7, #48]	; 0x30
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e3      	bne.n	800795c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	69b9      	ldr	r1, [r7, #24]
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	617b      	str	r3, [r7, #20]
   return(result);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e4      	bne.n	80079a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f846 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079f0:	e02a      	b.n	8007a48 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d01c      	beq.n	8007a4c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
    }
    return;
 8007a1a:	e017      	b.n	8007a4c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_UART_IRQHandler+0x59e>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fd71 	bl	800851c <UART_EndTransmit_IT>
    return;
 8007a3a:	e008      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a3c:	bf00      	nop
 8007a3e:	e006      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
    return;
 8007a40:	bf00      	nop
 8007a42:	e004      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a44:	bf00      	nop
 8007a46:	e002      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a48:	bf00      	nop
 8007a4a:	e000      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
    return;
 8007a4c:	bf00      	nop
  }

}
 8007a4e:	37e8      	adds	r7, #232	; 0xe8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4ba6      	ldr	r3, [pc, #664]	; (8007d58 <UART_SetConfig+0x2c4>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	6979      	ldr	r1, [r7, #20]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a94      	ldr	r2, [pc, #592]	; (8007d5c <UART_SetConfig+0x2c8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d120      	bne.n	8007b52 <UART_SetConfig+0xbe>
 8007b10:	4b93      	ldr	r3, [pc, #588]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d816      	bhi.n	8007b4c <UART_SetConfig+0xb8>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x90>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b41 	.word	0x08007b41
 8007b2c:	08007b3b 	.word	0x08007b3b
 8007b30:	08007b47 	.word	0x08007b47
 8007b34:	2301      	movs	r3, #1
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e150      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e14d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b40:	2304      	movs	r3, #4
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e14a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b46:	2308      	movs	r3, #8
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e147      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e144      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a83      	ldr	r2, [pc, #524]	; (8007d64 <UART_SetConfig+0x2d0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d132      	bne.n	8007bc2 <UART_SetConfig+0x12e>
 8007b5c:	4b80      	ldr	r3, [pc, #512]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b62:	f003 030c 	and.w	r3, r3, #12
 8007b66:	2b0c      	cmp	r3, #12
 8007b68:	d828      	bhi.n	8007bbc <UART_SetConfig+0x128>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <UART_SetConfig+0xdc>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bbd 	.word	0x08007bbd
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007bbd 	.word	0x08007bbd
 8007b88:	08007bbd 	.word	0x08007bbd
 8007b8c:	08007bbd 	.word	0x08007bbd
 8007b90:	08007bab 	.word	0x08007bab
 8007b94:	08007bbd 	.word	0x08007bbd
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bbd 	.word	0x08007bbd
 8007ba0:	08007bb7 	.word	0x08007bb7
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e118      	b.n	8007ddc <UART_SetConfig+0x348>
 8007baa:	2302      	movs	r3, #2
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e115      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e112      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	e10f      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	e10c      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a68      	ldr	r2, [pc, #416]	; (8007d68 <UART_SetConfig+0x2d4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d120      	bne.n	8007c0e <UART_SetConfig+0x17a>
 8007bcc:	4b64      	ldr	r3, [pc, #400]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bd6:	2b30      	cmp	r3, #48	; 0x30
 8007bd8:	d013      	beq.n	8007c02 <UART_SetConfig+0x16e>
 8007bda:	2b30      	cmp	r3, #48	; 0x30
 8007bdc:	d814      	bhi.n	8007c08 <UART_SetConfig+0x174>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d009      	beq.n	8007bf6 <UART_SetConfig+0x162>
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d810      	bhi.n	8007c08 <UART_SetConfig+0x174>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <UART_SetConfig+0x15c>
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d006      	beq.n	8007bfc <UART_SetConfig+0x168>
 8007bee:	e00b      	b.n	8007c08 <UART_SetConfig+0x174>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e0f2      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e0ef      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e0ec      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c02:	2308      	movs	r3, #8
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e0e9      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e0e6      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a56      	ldr	r2, [pc, #344]	; (8007d6c <UART_SetConfig+0x2d8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d120      	bne.n	8007c5a <UART_SetConfig+0x1c6>
 8007c18:	4b51      	ldr	r3, [pc, #324]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c22:	2bc0      	cmp	r3, #192	; 0xc0
 8007c24:	d013      	beq.n	8007c4e <UART_SetConfig+0x1ba>
 8007c26:	2bc0      	cmp	r3, #192	; 0xc0
 8007c28:	d814      	bhi.n	8007c54 <UART_SetConfig+0x1c0>
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d009      	beq.n	8007c42 <UART_SetConfig+0x1ae>
 8007c2e:	2b80      	cmp	r3, #128	; 0x80
 8007c30:	d810      	bhi.n	8007c54 <UART_SetConfig+0x1c0>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <UART_SetConfig+0x1a8>
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d006      	beq.n	8007c48 <UART_SetConfig+0x1b4>
 8007c3a:	e00b      	b.n	8007c54 <UART_SetConfig+0x1c0>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e0cc      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c42:	2302      	movs	r3, #2
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e0c9      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e0c6      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e0c3      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c54:	2310      	movs	r3, #16
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e0c0      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a44      	ldr	r2, [pc, #272]	; (8007d70 <UART_SetConfig+0x2dc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d125      	bne.n	8007cb0 <UART_SetConfig+0x21c>
 8007c64:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d017      	beq.n	8007ca4 <UART_SetConfig+0x210>
 8007c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c78:	d817      	bhi.n	8007caa <UART_SetConfig+0x216>
 8007c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7e:	d00b      	beq.n	8007c98 <UART_SetConfig+0x204>
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d811      	bhi.n	8007caa <UART_SetConfig+0x216>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <UART_SetConfig+0x1fe>
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8e:	d006      	beq.n	8007c9e <UART_SetConfig+0x20a>
 8007c90:	e00b      	b.n	8007caa <UART_SetConfig+0x216>
 8007c92:	2300      	movs	r3, #0
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0a1      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e09e      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e09b      	b.n	8007ddc <UART_SetConfig+0x348>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e098      	b.n	8007ddc <UART_SetConfig+0x348>
 8007caa:	2310      	movs	r3, #16
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e095      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <UART_SetConfig+0x2e0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d125      	bne.n	8007d06 <UART_SetConfig+0x272>
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc8:	d017      	beq.n	8007cfa <UART_SetConfig+0x266>
 8007cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cce:	d817      	bhi.n	8007d00 <UART_SetConfig+0x26c>
 8007cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd4:	d00b      	beq.n	8007cee <UART_SetConfig+0x25a>
 8007cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cda:	d811      	bhi.n	8007d00 <UART_SetConfig+0x26c>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <UART_SetConfig+0x254>
 8007ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x260>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x26c>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e076      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e073      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e070      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e06d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e06a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <UART_SetConfig+0x2e4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d138      	bne.n	8007d82 <UART_SetConfig+0x2ee>
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1e:	d017      	beq.n	8007d50 <UART_SetConfig+0x2bc>
 8007d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d24:	d82a      	bhi.n	8007d7c <UART_SetConfig+0x2e8>
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2a:	d00b      	beq.n	8007d44 <UART_SetConfig+0x2b0>
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d30:	d824      	bhi.n	8007d7c <UART_SetConfig+0x2e8>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <UART_SetConfig+0x2aa>
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d006      	beq.n	8007d4a <UART_SetConfig+0x2b6>
 8007d3c:	e01e      	b.n	8007d7c <UART_SetConfig+0x2e8>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e04b      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d44:	2302      	movs	r3, #2
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e048      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e045      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d50:	2308      	movs	r3, #8
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e042      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d56:	bf00      	nop
 8007d58:	efff69f3 	.word	0xefff69f3
 8007d5c:	40011000 	.word	0x40011000
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40004400 	.word	0x40004400
 8007d68:	40004800 	.word	0x40004800
 8007d6c:	40004c00 	.word	0x40004c00
 8007d70:	40005000 	.word	0x40005000
 8007d74:	40011400 	.word	0x40011400
 8007d78:	40007800 	.word	0x40007800
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	e02c      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a72      	ldr	r2, [pc, #456]	; (8007f50 <UART_SetConfig+0x4bc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d125      	bne.n	8007dd8 <UART_SetConfig+0x344>
 8007d8c:	4b71      	ldr	r3, [pc, #452]	; (8007f54 <UART_SetConfig+0x4c0>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d9a:	d017      	beq.n	8007dcc <UART_SetConfig+0x338>
 8007d9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007da0:	d817      	bhi.n	8007dd2 <UART_SetConfig+0x33e>
 8007da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da6:	d00b      	beq.n	8007dc0 <UART_SetConfig+0x32c>
 8007da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dac:	d811      	bhi.n	8007dd2 <UART_SetConfig+0x33e>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <UART_SetConfig+0x326>
 8007db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db6:	d006      	beq.n	8007dc6 <UART_SetConfig+0x332>
 8007db8:	e00b      	b.n	8007dd2 <UART_SetConfig+0x33e>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	77fb      	strb	r3, [r7, #31]
 8007dbe:	e00d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e00a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dc6:	2304      	movs	r3, #4
 8007dc8:	77fb      	strb	r3, [r7, #31]
 8007dca:	e007      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e004      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	77fb      	strb	r3, [r7, #31]
 8007dd6:	e001      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de4:	d15b      	bne.n	8007e9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007de6:	7ffb      	ldrb	r3, [r7, #31]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d828      	bhi.n	8007e3e <UART_SetConfig+0x3aa>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0x360>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e3f 	.word	0x08007e3f
 8007e04:	08007e2f 	.word	0x08007e2f
 8007e08:	08007e3f 	.word	0x08007e3f
 8007e0c:	08007e3f 	.word	0x08007e3f
 8007e10:	08007e3f 	.word	0x08007e3f
 8007e14:	08007e37 	.word	0x08007e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7fd f8d4 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	61b8      	str	r0, [r7, #24]
        break;
 8007e1e:	e013      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e20:	f7fd f8e4 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8007e24:	61b8      	str	r0, [r7, #24]
        break;
 8007e26:	e00f      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e28:	4b4b      	ldr	r3, [pc, #300]	; (8007f58 <UART_SetConfig+0x4c4>)
 8007e2a:	61bb      	str	r3, [r7, #24]
        break;
 8007e2c:	e00c      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2e:	f7fc ffb7 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8007e32:	61b8      	str	r0, [r7, #24]
        break;
 8007e34:	e008      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3a:	61bb      	str	r3, [r7, #24]
        break;
 8007e3c:	e004      	b.n	8007e48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	77bb      	strb	r3, [r7, #30]
        break;
 8007e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d074      	beq.n	8007f38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	005a      	lsls	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	441a      	add	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d916      	bls.n	8007e98 <UART_SetConfig+0x404>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	d212      	bcs.n	8007e98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f023 030f 	bic.w	r3, r3, #15
 8007e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	89fa      	ldrh	r2, [r7, #14]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	e04f      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	77bb      	strb	r3, [r7, #30]
 8007e9c:	e04c      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d828      	bhi.n	8007ef6 <UART_SetConfig+0x462>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x418>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007ef7 	.word	0x08007ef7
 8007ebc:	08007ee7 	.word	0x08007ee7
 8007ec0:	08007ef7 	.word	0x08007ef7
 8007ec4:	08007ef7 	.word	0x08007ef7
 8007ec8:	08007ef7 	.word	0x08007ef7
 8007ecc:	08007eef 	.word	0x08007eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed0:	f7fd f878 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007ed4:	61b8      	str	r0, [r7, #24]
        break;
 8007ed6:	e013      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd f888 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8007edc:	61b8      	str	r0, [r7, #24]
        break;
 8007ede:	e00f      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <UART_SetConfig+0x4c4>)
 8007ee2:	61bb      	str	r3, [r7, #24]
        break;
 8007ee4:	e00c      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee6:	f7fc ff5b 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8007eea:	61b8      	str	r0, [r7, #24]
        break;
 8007eec:	e008      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef2:	61bb      	str	r3, [r7, #24]
        break;
 8007ef4:	e004      	b.n	8007f00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	77bb      	strb	r3, [r7, #30]
        break;
 8007efe:	bf00      	nop
    }

    if (pclk != 0U)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	085a      	lsrs	r2, r3, #1
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b0f      	cmp	r3, #15
 8007f1e:	d909      	bls.n	8007f34 <UART_SetConfig+0x4a0>
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d205      	bcs.n	8007f34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e001      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40007c00 	.word	0x40007c00
 8007f54:	40023800 	.word	0x40023800
 8007f58:	00f42400 	.word	0x00f42400

08007f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01a      	beq.n	8008072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805a:	d10a      	bne.n	8008072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	605a      	str	r2, [r3, #4]
  }
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080b0:	f7fb faaa 	bl	8003608 <HAL_GetTick>
 80080b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10e      	bne.n	80080e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f81b 	bl	800810e <UART_WaitOnFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e011      	b.n	8008106 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b09c      	sub	sp, #112	; 0x70
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811e:	e0a7      	b.n	8008270 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	f000 80a3 	beq.w	8008270 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812a:	f7fb fa6d 	bl	8003608 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008136:	429a      	cmp	r2, r3
 8008138:	d302      	bcc.n	8008140 <UART_WaitOnFlagUntilTimeout+0x32>
 800813a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813c:	2b00      	cmp	r3, #0
 800813e:	d13f      	bne.n	80081c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800814e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008154:	667b      	str	r3, [r7, #100]	; 0x64
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008160:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800816c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e6      	bne.n	8008140 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	663b      	str	r3, [r7, #96]	; 0x60
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008192:	64ba      	str	r2, [r7, #72]	; 0x48
 8008194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e068      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d050      	beq.n	8008270 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081dc:	d148      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008206:	637b      	str	r3, [r7, #52]	; 0x34
 8008208:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800820c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e6      	bne.n	80081e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	613b      	str	r3, [r7, #16]
   return(result);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	66bb      	str	r3, [r7, #104]	; 0x68
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800823a:	623a      	str	r2, [r7, #32]
 800823c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	69f9      	ldr	r1, [r7, #28]
 8008240:	6a3a      	ldr	r2, [r7, #32]
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	61bb      	str	r3, [r7, #24]
   return(result);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e5      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e010      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	429a      	cmp	r2, r3
 800827e:	bf0c      	ite	eq
 8008280:	2301      	moveq	r3, #1
 8008282:	2300      	movne	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	429a      	cmp	r2, r3
 800828c:	f43f af48 	beq.w	8008120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3770      	adds	r7, #112	; 0x70
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800829c:	b480      	push	{r7}
 800829e:	b097      	sub	sp, #92	; 0x5c
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d10e      	bne.n	80082ee <UART_Start_Receive_IT+0x52>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <UART_Start_Receive_IT+0x48>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082e2:	e02d      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082ec:	e028      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10d      	bne.n	8008312 <UART_Start_Receive_IT+0x76>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d104      	bne.n	8008308 <UART_Start_Receive_IT+0x6c>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008306:	e01b      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	227f      	movs	r2, #127	; 0x7f
 800830c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008310:	e016      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831a:	d10d      	bne.n	8008338 <UART_Start_Receive_IT+0x9c>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <UART_Start_Receive_IT+0x92>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	227f      	movs	r2, #127	; 0x7f
 8008328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800832c:	e008      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	223f      	movs	r2, #63	; 0x3f
 8008332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008336:	e003      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2222      	movs	r2, #34	; 0x22
 800834c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	657b      	str	r3, [r7, #84]	; 0x54
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008370:	64ba      	str	r2, [r7, #72]	; 0x48
 8008372:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800837e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838c:	d107      	bne.n	800839e <UART_Start_Receive_IT+0x102>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4a21      	ldr	r2, [pc, #132]	; (8008420 <UART_Start_Receive_IT+0x184>)
 800839a:	669a      	str	r2, [r3, #104]	; 0x68
 800839c:	e002      	b.n	80083a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4a20      	ldr	r2, [pc, #128]	; (8008424 <UART_Start_Receive_IT+0x188>)
 80083a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d019      	beq.n	80083e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80083c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34
 80083cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_Start_Receive_IT+0x110>
 80083de:	e018      	b.n	8008412 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	613b      	str	r3, [r7, #16]
   return(result);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f043 0320 	orr.w	r3, r3, #32
 80083f4:	653b      	str	r3, [r7, #80]	; 0x50
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	69f9      	ldr	r1, [r7, #28]
 8008404:	6a3a      	ldr	r2, [r7, #32]
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	61bb      	str	r3, [r7, #24]
   return(result);
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	375c      	adds	r7, #92	; 0x5c
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	080086d7 	.word	0x080086d7
 8008424:	08008571 	.word	0x08008571

08008428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b095      	sub	sp, #84	; 0x54
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	643b      	str	r3, [r7, #64]	; 0x40
 8008450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	61fb      	str	r3, [r7, #28]
   return(result);
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	64bb      	str	r3, [r7, #72]	; 0x48
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849a:	2b01      	cmp	r3, #1
 800849c:	d118      	bne.n	80084d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f023 0310 	bic.w	r3, r3, #16
 80084b2:	647b      	str	r3, [r7, #68]	; 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6979      	ldr	r1, [r7, #20]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e6      	bne.n	800849e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084e4:	bf00      	nop
 80084e6:	3754      	adds	r7, #84	; 0x54
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff faaa 	bl	8007a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	60bb      	str	r3, [r7, #8]
   return(result);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	613b      	str	r3, [r7, #16]
   return(result);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e6      	bne.n	8008524 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fa76 	bl	8007a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008568:	bf00      	nop
 800856a:	3720      	adds	r7, #32
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b096      	sub	sp, #88	; 0x58
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800857e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008588:	2b22      	cmp	r3, #34	; 0x22
 800858a:	f040 8098 	bne.w	80086be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008598:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a8:	400a      	ands	r2, r1
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d17b      	bne.n	80086ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ea:	653b      	str	r3, [r7, #80]	; 0x50
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f4:	647b      	str	r3, [r7, #68]	; 0x44
 80085f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	623b      	str	r3, [r7, #32]
   return(result);
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008628:	633a      	str	r2, [r7, #48]	; 0x30
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008654:	2b01      	cmp	r3, #1
 8008656:	d12e      	bne.n	80086b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	60fb      	str	r3, [r7, #12]
   return(result);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b10      	cmp	r3, #16
 800869c:	d103      	bne.n	80086a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2210      	movs	r2, #16
 80086a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff f9e4 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086b4:	e00b      	b.n	80086ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fa f88a 	bl	80027d0 <HAL_UART_RxCpltCallback>
}
 80086bc:	e007      	b.n	80086ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699a      	ldr	r2, [r3, #24]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0208 	orr.w	r2, r2, #8
 80086cc:	619a      	str	r2, [r3, #24]
}
 80086ce:	bf00      	nop
 80086d0:	3758      	adds	r7, #88	; 0x58
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b096      	sub	sp, #88	; 0x58
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086ee:	2b22      	cmp	r3, #34	; 0x22
 80086f0:	f040 8098 	bne.w	8008824 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008702:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008704:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800870c:	4013      	ands	r3, r2
 800870e:	b29a      	uxth	r2, r3
 8008710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008712:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d17b      	bne.n	8008834 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875a:	643b      	str	r3, [r7, #64]	; 0x40
 800875c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e6      	bne.n	800873c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	61fb      	str	r3, [r7, #28]
   return(result);
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	64bb      	str	r3, [r7, #72]	; 0x48
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800878e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d12e      	bne.n	800881c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f023 0310 	bic.w	r3, r3, #16
 80087d8:	647b      	str	r3, [r7, #68]	; 0x44
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6979      	ldr	r1, [r7, #20]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	613b      	str	r3, [r7, #16]
   return(result);
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e6      	bne.n	80087c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d103      	bne.n	800880c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2210      	movs	r2, #16
 800880a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff f931 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800881a:	e00b      	b.n	8008834 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7f9 ffd7 	bl	80027d0 <HAL_UART_RxCpltCallback>
}
 8008822:	e007      	b.n	8008834 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0208 	orr.w	r2, r2, #8
 8008832:	619a      	str	r2, [r3, #24]
}
 8008834:	bf00      	nop
 8008836:	3758      	adds	r7, #88	; 0x58
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <__errno>:
 800883c:	4b01      	ldr	r3, [pc, #4]	; (8008844 <__errno+0x8>)
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	200000a8 	.word	0x200000a8

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	; (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	; (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	; (800888c <__libc_init_array+0x44>)
 800885c:	f005 f8ca 	bl	800d9f4 <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	0800df7c 	.word	0x0800df7c
 8008884:	0800df7c 	.word	0x0800df7c
 8008888:	0800df7c 	.word	0x0800df7c
 800888c:	0800df80 	.word	0x0800df80

08008890 <memset>:
 8008890:	4402      	add	r2, r0
 8008892:	4603      	mov	r3, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	d100      	bne.n	800889a <memset+0xa>
 8008898:	4770      	bx	lr
 800889a:	f803 1b01 	strb.w	r1, [r3], #1
 800889e:	e7f9      	b.n	8008894 <memset+0x4>

080088a0 <__cvt>:
 80088a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	ec55 4b10 	vmov	r4, r5, d0
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	460e      	mov	r6, r1
 80088ac:	4619      	mov	r1, r3
 80088ae:	462b      	mov	r3, r5
 80088b0:	bfbb      	ittet	lt
 80088b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088b6:	461d      	movlt	r5, r3
 80088b8:	2300      	movge	r3, #0
 80088ba:	232d      	movlt	r3, #45	; 0x2d
 80088bc:	700b      	strb	r3, [r1, #0]
 80088be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088c4:	4691      	mov	r9, r2
 80088c6:	f023 0820 	bic.w	r8, r3, #32
 80088ca:	bfbc      	itt	lt
 80088cc:	4622      	movlt	r2, r4
 80088ce:	4614      	movlt	r4, r2
 80088d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088d4:	d005      	beq.n	80088e2 <__cvt+0x42>
 80088d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088da:	d100      	bne.n	80088de <__cvt+0x3e>
 80088dc:	3601      	adds	r6, #1
 80088de:	2102      	movs	r1, #2
 80088e0:	e000      	b.n	80088e4 <__cvt+0x44>
 80088e2:	2103      	movs	r1, #3
 80088e4:	ab03      	add	r3, sp, #12
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	ab02      	add	r3, sp, #8
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	ec45 4b10 	vmov	d0, r4, r5
 80088f0:	4653      	mov	r3, sl
 80088f2:	4632      	mov	r2, r6
 80088f4:	f001 fe58 	bl	800a5a8 <_dtoa_r>
 80088f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088fc:	4607      	mov	r7, r0
 80088fe:	d102      	bne.n	8008906 <__cvt+0x66>
 8008900:	f019 0f01 	tst.w	r9, #1
 8008904:	d022      	beq.n	800894c <__cvt+0xac>
 8008906:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800890a:	eb07 0906 	add.w	r9, r7, r6
 800890e:	d110      	bne.n	8008932 <__cvt+0x92>
 8008910:	783b      	ldrb	r3, [r7, #0]
 8008912:	2b30      	cmp	r3, #48	; 0x30
 8008914:	d10a      	bne.n	800892c <__cvt+0x8c>
 8008916:	2200      	movs	r2, #0
 8008918:	2300      	movs	r3, #0
 800891a:	4620      	mov	r0, r4
 800891c:	4629      	mov	r1, r5
 800891e:	f7f8 f8f3 	bl	8000b08 <__aeabi_dcmpeq>
 8008922:	b918      	cbnz	r0, 800892c <__cvt+0x8c>
 8008924:	f1c6 0601 	rsb	r6, r6, #1
 8008928:	f8ca 6000 	str.w	r6, [sl]
 800892c:	f8da 3000 	ldr.w	r3, [sl]
 8008930:	4499      	add	r9, r3
 8008932:	2200      	movs	r2, #0
 8008934:	2300      	movs	r3, #0
 8008936:	4620      	mov	r0, r4
 8008938:	4629      	mov	r1, r5
 800893a:	f7f8 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800893e:	b108      	cbz	r0, 8008944 <__cvt+0xa4>
 8008940:	f8cd 900c 	str.w	r9, [sp, #12]
 8008944:	2230      	movs	r2, #48	; 0x30
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	454b      	cmp	r3, r9
 800894a:	d307      	bcc.n	800895c <__cvt+0xbc>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008950:	1bdb      	subs	r3, r3, r7
 8008952:	4638      	mov	r0, r7
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	b004      	add	sp, #16
 8008958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895c:	1c59      	adds	r1, r3, #1
 800895e:	9103      	str	r1, [sp, #12]
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	e7f0      	b.n	8008946 <__cvt+0xa6>

08008964 <__exponent>:
 8008964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008966:	4603      	mov	r3, r0
 8008968:	2900      	cmp	r1, #0
 800896a:	bfb8      	it	lt
 800896c:	4249      	neglt	r1, r1
 800896e:	f803 2b02 	strb.w	r2, [r3], #2
 8008972:	bfb4      	ite	lt
 8008974:	222d      	movlt	r2, #45	; 0x2d
 8008976:	222b      	movge	r2, #43	; 0x2b
 8008978:	2909      	cmp	r1, #9
 800897a:	7042      	strb	r2, [r0, #1]
 800897c:	dd2a      	ble.n	80089d4 <__exponent+0x70>
 800897e:	f10d 0407 	add.w	r4, sp, #7
 8008982:	46a4      	mov	ip, r4
 8008984:	270a      	movs	r7, #10
 8008986:	46a6      	mov	lr, r4
 8008988:	460a      	mov	r2, r1
 800898a:	fb91 f6f7 	sdiv	r6, r1, r7
 800898e:	fb07 1516 	mls	r5, r7, r6, r1
 8008992:	3530      	adds	r5, #48	; 0x30
 8008994:	2a63      	cmp	r2, #99	; 0x63
 8008996:	f104 34ff 	add.w	r4, r4, #4294967295
 800899a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800899e:	4631      	mov	r1, r6
 80089a0:	dcf1      	bgt.n	8008986 <__exponent+0x22>
 80089a2:	3130      	adds	r1, #48	; 0x30
 80089a4:	f1ae 0502 	sub.w	r5, lr, #2
 80089a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089ac:	1c44      	adds	r4, r0, #1
 80089ae:	4629      	mov	r1, r5
 80089b0:	4561      	cmp	r1, ip
 80089b2:	d30a      	bcc.n	80089ca <__exponent+0x66>
 80089b4:	f10d 0209 	add.w	r2, sp, #9
 80089b8:	eba2 020e 	sub.w	r2, r2, lr
 80089bc:	4565      	cmp	r5, ip
 80089be:	bf88      	it	hi
 80089c0:	2200      	movhi	r2, #0
 80089c2:	4413      	add	r3, r2
 80089c4:	1a18      	subs	r0, r3, r0
 80089c6:	b003      	add	sp, #12
 80089c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089d2:	e7ed      	b.n	80089b0 <__exponent+0x4c>
 80089d4:	2330      	movs	r3, #48	; 0x30
 80089d6:	3130      	adds	r1, #48	; 0x30
 80089d8:	7083      	strb	r3, [r0, #2]
 80089da:	70c1      	strb	r1, [r0, #3]
 80089dc:	1d03      	adds	r3, r0, #4
 80089de:	e7f1      	b.n	80089c4 <__exponent+0x60>

080089e0 <_printf_float>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	ed2d 8b02 	vpush	{d8}
 80089e8:	b08d      	sub	sp, #52	; 0x34
 80089ea:	460c      	mov	r4, r1
 80089ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089f0:	4616      	mov	r6, r2
 80089f2:	461f      	mov	r7, r3
 80089f4:	4605      	mov	r5, r0
 80089f6:	f002 ff35 	bl	800b864 <_localeconv_r>
 80089fa:	f8d0 a000 	ldr.w	sl, [r0]
 80089fe:	4650      	mov	r0, sl
 8008a00:	f7f7 fc06 	bl	8000210 <strlen>
 8008a04:	2300      	movs	r3, #0
 8008a06:	930a      	str	r3, [sp, #40]	; 0x28
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a14:	3307      	adds	r3, #7
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	f103 0208 	add.w	r2, r3, #8
 8008a1e:	f8c8 2000 	str.w	r2, [r8]
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a38:	ee08 0a10 	vmov	s16, r0
 8008a3c:	4b9f      	ldr	r3, [pc, #636]	; (8008cbc <_printf_float+0x2dc>)
 8008a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	f7f8 f891 	bl	8000b6c <__aeabi_dcmpun>
 8008a4a:	bb88      	cbnz	r0, 8008ab0 <_printf_float+0xd0>
 8008a4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a50:	4b9a      	ldr	r3, [pc, #616]	; (8008cbc <_printf_float+0x2dc>)
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	f7f8 f86b 	bl	8000b30 <__aeabi_dcmple>
 8008a5a:	bb48      	cbnz	r0, 8008ab0 <_printf_float+0xd0>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f8 f85a 	bl	8000b1c <__aeabi_dcmplt>
 8008a68:	b110      	cbz	r0, 8008a70 <_printf_float+0x90>
 8008a6a:	232d      	movs	r3, #45	; 0x2d
 8008a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a70:	4b93      	ldr	r3, [pc, #588]	; (8008cc0 <_printf_float+0x2e0>)
 8008a72:	4894      	ldr	r0, [pc, #592]	; (8008cc4 <_printf_float+0x2e4>)
 8008a74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a78:	bf94      	ite	ls
 8008a7a:	4698      	movls	r8, r3
 8008a7c:	4680      	movhi	r8, r0
 8008a7e:	2303      	movs	r3, #3
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	9b05      	ldr	r3, [sp, #20]
 8008a84:	f023 0204 	bic.w	r2, r3, #4
 8008a88:	6022      	str	r2, [r4, #0]
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	9700      	str	r7, [sp, #0]
 8008a90:	4633      	mov	r3, r6
 8008a92:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a94:	4621      	mov	r1, r4
 8008a96:	4628      	mov	r0, r5
 8008a98:	f000 f9d8 	bl	8008e4c <_printf_common>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f040 8090 	bne.w	8008bc2 <_printf_float+0x1e2>
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	b00d      	add	sp, #52	; 0x34
 8008aa8:	ecbd 8b02 	vpop	{d8}
 8008aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	f7f8 f858 	bl	8000b6c <__aeabi_dcmpun>
 8008abc:	b140      	cbz	r0, 8008ad0 <_printf_float+0xf0>
 8008abe:	464b      	mov	r3, r9
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bfbc      	itt	lt
 8008ac4:	232d      	movlt	r3, #45	; 0x2d
 8008ac6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aca:	487f      	ldr	r0, [pc, #508]	; (8008cc8 <_printf_float+0x2e8>)
 8008acc:	4b7f      	ldr	r3, [pc, #508]	; (8008ccc <_printf_float+0x2ec>)
 8008ace:	e7d1      	b.n	8008a74 <_printf_float+0x94>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ad6:	9206      	str	r2, [sp, #24]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	d13f      	bne.n	8008b5c <_printf_float+0x17c>
 8008adc:	2306      	movs	r3, #6
 8008ade:	6063      	str	r3, [r4, #4]
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	6861      	ldr	r1, [r4, #4]
 8008ae4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9303      	str	r3, [sp, #12]
 8008aec:	ab0a      	add	r3, sp, #40	; 0x28
 8008aee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008af2:	ab09      	add	r3, sp, #36	; 0x24
 8008af4:	ec49 8b10 	vmov	d0, r8, r9
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b00:	4628      	mov	r0, r5
 8008b02:	f7ff fecd 	bl	80088a0 <__cvt>
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0a:	2b47      	cmp	r3, #71	; 0x47
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	d108      	bne.n	8008b22 <_printf_float+0x142>
 8008b10:	1cc8      	adds	r0, r1, #3
 8008b12:	db02      	blt.n	8008b1a <_printf_float+0x13a>
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	4299      	cmp	r1, r3
 8008b18:	dd41      	ble.n	8008b9e <_printf_float+0x1be>
 8008b1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b1e:	fa5f fb8b 	uxtb.w	fp, fp
 8008b22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b26:	d820      	bhi.n	8008b6a <_printf_float+0x18a>
 8008b28:	3901      	subs	r1, #1
 8008b2a:	465a      	mov	r2, fp
 8008b2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b30:	9109      	str	r1, [sp, #36]	; 0x24
 8008b32:	f7ff ff17 	bl	8008964 <__exponent>
 8008b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b38:	1813      	adds	r3, r2, r0
 8008b3a:	2a01      	cmp	r2, #1
 8008b3c:	4681      	mov	r9, r0
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	dc02      	bgt.n	8008b48 <_printf_float+0x168>
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	07d2      	lsls	r2, r2, #31
 8008b46:	d501      	bpl.n	8008b4c <_printf_float+0x16c>
 8008b48:	3301      	adds	r3, #1
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d09c      	beq.n	8008a8e <_printf_float+0xae>
 8008b54:	232d      	movs	r3, #45	; 0x2d
 8008b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5a:	e798      	b.n	8008a8e <_printf_float+0xae>
 8008b5c:	9a06      	ldr	r2, [sp, #24]
 8008b5e:	2a47      	cmp	r2, #71	; 0x47
 8008b60:	d1be      	bne.n	8008ae0 <_printf_float+0x100>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1bc      	bne.n	8008ae0 <_printf_float+0x100>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e7b9      	b.n	8008ade <_printf_float+0xfe>
 8008b6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b6e:	d118      	bne.n	8008ba2 <_printf_float+0x1c2>
 8008b70:	2900      	cmp	r1, #0
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	dd0b      	ble.n	8008b8e <_printf_float+0x1ae>
 8008b76:	6121      	str	r1, [r4, #16]
 8008b78:	b913      	cbnz	r3, 8008b80 <_printf_float+0x1a0>
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	07d0      	lsls	r0, r2, #31
 8008b7e:	d502      	bpl.n	8008b86 <_printf_float+0x1a6>
 8008b80:	3301      	adds	r3, #1
 8008b82:	440b      	add	r3, r1
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b88:	f04f 0900 	mov.w	r9, #0
 8008b8c:	e7de      	b.n	8008b4c <_printf_float+0x16c>
 8008b8e:	b913      	cbnz	r3, 8008b96 <_printf_float+0x1b6>
 8008b90:	6822      	ldr	r2, [r4, #0]
 8008b92:	07d2      	lsls	r2, r2, #31
 8008b94:	d501      	bpl.n	8008b9a <_printf_float+0x1ba>
 8008b96:	3302      	adds	r3, #2
 8008b98:	e7f4      	b.n	8008b84 <_printf_float+0x1a4>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f2      	b.n	8008b84 <_printf_float+0x1a4>
 8008b9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	db05      	blt.n	8008bb4 <_printf_float+0x1d4>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	6121      	str	r1, [r4, #16]
 8008bac:	07d8      	lsls	r0, r3, #31
 8008bae:	d5ea      	bpl.n	8008b86 <_printf_float+0x1a6>
 8008bb0:	1c4b      	adds	r3, r1, #1
 8008bb2:	e7e7      	b.n	8008b84 <_printf_float+0x1a4>
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	bfd4      	ite	le
 8008bb8:	f1c1 0202 	rsble	r2, r1, #2
 8008bbc:	2201      	movgt	r2, #1
 8008bbe:	4413      	add	r3, r2
 8008bc0:	e7e0      	b.n	8008b84 <_printf_float+0x1a4>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	055a      	lsls	r2, r3, #21
 8008bc6:	d407      	bmi.n	8008bd8 <_printf_float+0x1f8>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	4642      	mov	r2, r8
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	d12c      	bne.n	8008c30 <_printf_float+0x250>
 8008bd6:	e764      	b.n	8008aa2 <_printf_float+0xc2>
 8008bd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bdc:	f240 80e0 	bls.w	8008da0 <_printf_float+0x3c0>
 8008be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	f7f7 ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d034      	beq.n	8008c5a <_printf_float+0x27a>
 8008bf0:	4a37      	ldr	r2, [pc, #220]	; (8008cd0 <_printf_float+0x2f0>)
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f43f af51 	beq.w	8008aa2 <_printf_float+0xc2>
 8008c00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c04:	429a      	cmp	r2, r3
 8008c06:	db02      	blt.n	8008c0e <_printf_float+0x22e>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	07d8      	lsls	r0, r3, #31
 8008c0c:	d510      	bpl.n	8008c30 <_printf_float+0x250>
 8008c0e:	ee18 3a10 	vmov	r3, s16
 8008c12:	4652      	mov	r2, sl
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f43f af41 	beq.w	8008aa2 <_printf_float+0xc2>
 8008c20:	f04f 0800 	mov.w	r8, #0
 8008c24:	f104 091a 	add.w	r9, r4, #26
 8008c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4543      	cmp	r3, r8
 8008c2e:	dc09      	bgt.n	8008c44 <_printf_float+0x264>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	079b      	lsls	r3, r3, #30
 8008c34:	f100 8105 	bmi.w	8008e42 <_printf_float+0x462>
 8008c38:	68e0      	ldr	r0, [r4, #12]
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	bfb8      	it	lt
 8008c40:	4618      	movlt	r0, r3
 8008c42:	e730      	b.n	8008aa6 <_printf_float+0xc6>
 8008c44:	2301      	movs	r3, #1
 8008c46:	464a      	mov	r2, r9
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f af27 	beq.w	8008aa2 <_printf_float+0xc2>
 8008c54:	f108 0801 	add.w	r8, r8, #1
 8008c58:	e7e6      	b.n	8008c28 <_printf_float+0x248>
 8008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dc39      	bgt.n	8008cd4 <_printf_float+0x2f4>
 8008c60:	4a1b      	ldr	r2, [pc, #108]	; (8008cd0 <_printf_float+0x2f0>)
 8008c62:	2301      	movs	r3, #1
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af19 	beq.w	8008aa2 <_printf_float+0xc2>
 8008c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c74:	4313      	orrs	r3, r2
 8008c76:	d102      	bne.n	8008c7e <_printf_float+0x29e>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d5d8      	bpl.n	8008c30 <_printf_float+0x250>
 8008c7e:	ee18 3a10 	vmov	r3, s16
 8008c82:	4652      	mov	r2, sl
 8008c84:	4631      	mov	r1, r6
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b8      	blx	r7
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	f43f af09 	beq.w	8008aa2 <_printf_float+0xc2>
 8008c90:	f04f 0900 	mov.w	r9, #0
 8008c94:	f104 0a1a 	add.w	sl, r4, #26
 8008c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9a:	425b      	negs	r3, r3
 8008c9c:	454b      	cmp	r3, r9
 8008c9e:	dc01      	bgt.n	8008ca4 <_printf_float+0x2c4>
 8008ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca2:	e792      	b.n	8008bca <_printf_float+0x1ea>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	47b8      	blx	r7
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f43f aef7 	beq.w	8008aa2 <_printf_float+0xc2>
 8008cb4:	f109 0901 	add.w	r9, r9, #1
 8008cb8:	e7ee      	b.n	8008c98 <_printf_float+0x2b8>
 8008cba:	bf00      	nop
 8008cbc:	7fefffff 	.word	0x7fefffff
 8008cc0:	0800dabc 	.word	0x0800dabc
 8008cc4:	0800dac0 	.word	0x0800dac0
 8008cc8:	0800dac8 	.word	0x0800dac8
 8008ccc:	0800dac4 	.word	0x0800dac4
 8008cd0:	0800dec1 	.word	0x0800dec1
 8008cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bfa8      	it	ge
 8008cdc:	461a      	movge	r2, r3
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	4691      	mov	r9, r2
 8008ce2:	dc37      	bgt.n	8008d54 <_printf_float+0x374>
 8008ce4:	f04f 0b00 	mov.w	fp, #0
 8008ce8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cec:	f104 021a 	add.w	r2, r4, #26
 8008cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	eba3 0309 	sub.w	r3, r3, r9
 8008cf8:	455b      	cmp	r3, fp
 8008cfa:	dc33      	bgt.n	8008d64 <_printf_float+0x384>
 8008cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d00:	429a      	cmp	r2, r3
 8008d02:	db3b      	blt.n	8008d7c <_printf_float+0x39c>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	07da      	lsls	r2, r3, #31
 8008d08:	d438      	bmi.n	8008d7c <_printf_float+0x39c>
 8008d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d10:	1a9a      	subs	r2, r3, r2
 8008d12:	eba3 0901 	sub.w	r9, r3, r1
 8008d16:	4591      	cmp	r9, r2
 8008d18:	bfa8      	it	ge
 8008d1a:	4691      	movge	r9, r2
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	dc35      	bgt.n	8008d8e <_printf_float+0x3ae>
 8008d22:	f04f 0800 	mov.w	r8, #0
 8008d26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d2a:	f104 0a1a 	add.w	sl, r4, #26
 8008d2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	eba3 0309 	sub.w	r3, r3, r9
 8008d38:	4543      	cmp	r3, r8
 8008d3a:	f77f af79 	ble.w	8008c30 <_printf_float+0x250>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4652      	mov	r2, sl
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f aeaa 	beq.w	8008aa2 <_printf_float+0xc2>
 8008d4e:	f108 0801 	add.w	r8, r8, #1
 8008d52:	e7ec      	b.n	8008d2e <_printf_float+0x34e>
 8008d54:	4613      	mov	r3, r2
 8008d56:	4631      	mov	r1, r6
 8008d58:	4642      	mov	r2, r8
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d1c0      	bne.n	8008ce4 <_printf_float+0x304>
 8008d62:	e69e      	b.n	8008aa2 <_printf_float+0xc2>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	9205      	str	r2, [sp, #20]
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f ae97 	beq.w	8008aa2 <_printf_float+0xc2>
 8008d74:	9a05      	ldr	r2, [sp, #20]
 8008d76:	f10b 0b01 	add.w	fp, fp, #1
 8008d7a:	e7b9      	b.n	8008cf0 <_printf_float+0x310>
 8008d7c:	ee18 3a10 	vmov	r3, s16
 8008d80:	4652      	mov	r2, sl
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d1be      	bne.n	8008d0a <_printf_float+0x32a>
 8008d8c:	e689      	b.n	8008aa2 <_printf_float+0xc2>
 8008d8e:	9a05      	ldr	r2, [sp, #20]
 8008d90:	464b      	mov	r3, r9
 8008d92:	4442      	add	r2, r8
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d1c1      	bne.n	8008d22 <_printf_float+0x342>
 8008d9e:	e680      	b.n	8008aa2 <_printf_float+0xc2>
 8008da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da2:	2a01      	cmp	r2, #1
 8008da4:	dc01      	bgt.n	8008daa <_printf_float+0x3ca>
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d538      	bpl.n	8008e1c <_printf_float+0x43c>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4642      	mov	r2, r8
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	f43f ae74 	beq.w	8008aa2 <_printf_float+0xc2>
 8008dba:	ee18 3a10 	vmov	r3, s16
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f ae6b 	beq.w	8008aa2 <_printf_float+0xc2>
 8008dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f7f7 fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8008dd8:	b9d8      	cbnz	r0, 8008e12 <_printf_float+0x432>
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	f108 0201 	add.w	r2, r8, #1
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	d10e      	bne.n	8008e0a <_printf_float+0x42a>
 8008dec:	e659      	b.n	8008aa2 <_printf_float+0xc2>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4652      	mov	r2, sl
 8008df2:	4631      	mov	r1, r6
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b8      	blx	r7
 8008df8:	3001      	adds	r0, #1
 8008dfa:	f43f ae52 	beq.w	8008aa2 <_printf_float+0xc2>
 8008dfe:	f108 0801 	add.w	r8, r8, #1
 8008e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4543      	cmp	r3, r8
 8008e08:	dcf1      	bgt.n	8008dee <_printf_float+0x40e>
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e10:	e6dc      	b.n	8008bcc <_printf_float+0x1ec>
 8008e12:	f04f 0800 	mov.w	r8, #0
 8008e16:	f104 0a1a 	add.w	sl, r4, #26
 8008e1a:	e7f2      	b.n	8008e02 <_printf_float+0x422>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4642      	mov	r2, r8
 8008e20:	e7df      	b.n	8008de2 <_printf_float+0x402>
 8008e22:	2301      	movs	r3, #1
 8008e24:	464a      	mov	r2, r9
 8008e26:	4631      	mov	r1, r6
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b8      	blx	r7
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f43f ae38 	beq.w	8008aa2 <_printf_float+0xc2>
 8008e32:	f108 0801 	add.w	r8, r8, #1
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	4543      	cmp	r3, r8
 8008e3e:	dcf0      	bgt.n	8008e22 <_printf_float+0x442>
 8008e40:	e6fa      	b.n	8008c38 <_printf_float+0x258>
 8008e42:	f04f 0800 	mov.w	r8, #0
 8008e46:	f104 0919 	add.w	r9, r4, #25
 8008e4a:	e7f4      	b.n	8008e36 <_printf_float+0x456>

08008e4c <_printf_common>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	4616      	mov	r6, r2
 8008e52:	4699      	mov	r9, r3
 8008e54:	688a      	ldr	r2, [r1, #8]
 8008e56:	690b      	ldr	r3, [r1, #16]
 8008e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	bfb8      	it	lt
 8008e60:	4613      	movlt	r3, r2
 8008e62:	6033      	str	r3, [r6, #0]
 8008e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e68:	4607      	mov	r7, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	b10a      	cbz	r2, 8008e72 <_printf_common+0x26>
 8008e6e:	3301      	adds	r3, #1
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	0699      	lsls	r1, r3, #26
 8008e76:	bf42      	ittt	mi
 8008e78:	6833      	ldrmi	r3, [r6, #0]
 8008e7a:	3302      	addmi	r3, #2
 8008e7c:	6033      	strmi	r3, [r6, #0]
 8008e7e:	6825      	ldr	r5, [r4, #0]
 8008e80:	f015 0506 	ands.w	r5, r5, #6
 8008e84:	d106      	bne.n	8008e94 <_printf_common+0x48>
 8008e86:	f104 0a19 	add.w	sl, r4, #25
 8008e8a:	68e3      	ldr	r3, [r4, #12]
 8008e8c:	6832      	ldr	r2, [r6, #0]
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dc26      	bgt.n	8008ee2 <_printf_common+0x96>
 8008e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e98:	1e13      	subs	r3, r2, #0
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	bf18      	it	ne
 8008e9e:	2301      	movne	r3, #1
 8008ea0:	0692      	lsls	r2, r2, #26
 8008ea2:	d42b      	bmi.n	8008efc <_printf_common+0xb0>
 8008ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	4638      	mov	r0, r7
 8008eac:	47c0      	blx	r8
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d01e      	beq.n	8008ef0 <_printf_common+0xa4>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	68e5      	ldr	r5, [r4, #12]
 8008eb6:	6832      	ldr	r2, [r6, #0]
 8008eb8:	f003 0306 	and.w	r3, r3, #6
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	bf08      	it	eq
 8008ec0:	1aad      	subeq	r5, r5, r2
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	bf0c      	ite	eq
 8008ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ecc:	2500      	movne	r5, #0
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	bfc4      	itt	gt
 8008ed2:	1a9b      	subgt	r3, r3, r2
 8008ed4:	18ed      	addgt	r5, r5, r3
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	341a      	adds	r4, #26
 8008eda:	42b5      	cmp	r5, r6
 8008edc:	d11a      	bne.n	8008f14 <_printf_common+0xc8>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e008      	b.n	8008ef4 <_printf_common+0xa8>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4638      	mov	r0, r7
 8008eea:	47c0      	blx	r8
 8008eec:	3001      	adds	r0, #1
 8008eee:	d103      	bne.n	8008ef8 <_printf_common+0xac>
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef8:	3501      	adds	r5, #1
 8008efa:	e7c6      	b.n	8008e8a <_printf_common+0x3e>
 8008efc:	18e1      	adds	r1, r4, r3
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	2030      	movs	r0, #48	; 0x30
 8008f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f06:	4422      	add	r2, r4
 8008f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f10:	3302      	adds	r3, #2
 8008f12:	e7c7      	b.n	8008ea4 <_printf_common+0x58>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4622      	mov	r2, r4
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c0      	blx	r8
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d0e6      	beq.n	8008ef0 <_printf_common+0xa4>
 8008f22:	3601      	adds	r6, #1
 8008f24:	e7d9      	b.n	8008eda <_printf_common+0x8e>
	...

08008f28 <_printf_i>:
 8008f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	7e0f      	ldrb	r7, [r1, #24]
 8008f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f30:	2f78      	cmp	r7, #120	; 0x78
 8008f32:	4691      	mov	r9, r2
 8008f34:	4680      	mov	r8, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	469a      	mov	sl, r3
 8008f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f3e:	d807      	bhi.n	8008f50 <_printf_i+0x28>
 8008f40:	2f62      	cmp	r7, #98	; 0x62
 8008f42:	d80a      	bhi.n	8008f5a <_printf_i+0x32>
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	f000 80d8 	beq.w	80090fa <_printf_i+0x1d2>
 8008f4a:	2f58      	cmp	r7, #88	; 0x58
 8008f4c:	f000 80a3 	beq.w	8009096 <_printf_i+0x16e>
 8008f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f58:	e03a      	b.n	8008fd0 <_printf_i+0xa8>
 8008f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f5e:	2b15      	cmp	r3, #21
 8008f60:	d8f6      	bhi.n	8008f50 <_printf_i+0x28>
 8008f62:	a101      	add	r1, pc, #4	; (adr r1, 8008f68 <_printf_i+0x40>)
 8008f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f68:	08008fc1 	.word	0x08008fc1
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008f51 	.word	0x08008f51
 8008f74:	08008f51 	.word	0x08008f51
 8008f78:	08008f51 	.word	0x08008f51
 8008f7c:	08008f51 	.word	0x08008f51
 8008f80:	08008fd5 	.word	0x08008fd5
 8008f84:	08008f51 	.word	0x08008f51
 8008f88:	08008f51 	.word	0x08008f51
 8008f8c:	08008f51 	.word	0x08008f51
 8008f90:	08008f51 	.word	0x08008f51
 8008f94:	080090e1 	.word	0x080090e1
 8008f98:	08009005 	.word	0x08009005
 8008f9c:	080090c3 	.word	0x080090c3
 8008fa0:	08008f51 	.word	0x08008f51
 8008fa4:	08008f51 	.word	0x08008f51
 8008fa8:	08009103 	.word	0x08009103
 8008fac:	08008f51 	.word	0x08008f51
 8008fb0:	08009005 	.word	0x08009005
 8008fb4:	08008f51 	.word	0x08008f51
 8008fb8:	08008f51 	.word	0x08008f51
 8008fbc:	080090cb 	.word	0x080090cb
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	602a      	str	r2, [r5, #0]
 8008fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0a3      	b.n	800911c <_printf_i+0x1f4>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	6829      	ldr	r1, [r5, #0]
 8008fd8:	0606      	lsls	r6, r0, #24
 8008fda:	f101 0304 	add.w	r3, r1, #4
 8008fde:	d50a      	bpl.n	8008ff6 <_printf_i+0xce>
 8008fe0:	680e      	ldr	r6, [r1, #0]
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	da03      	bge.n	8008ff0 <_printf_i+0xc8>
 8008fe8:	232d      	movs	r3, #45	; 0x2d
 8008fea:	4276      	negs	r6, r6
 8008fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff0:	485e      	ldr	r0, [pc, #376]	; (800916c <_printf_i+0x244>)
 8008ff2:	230a      	movs	r3, #10
 8008ff4:	e019      	b.n	800902a <_printf_i+0x102>
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ffe:	bf18      	it	ne
 8009000:	b236      	sxthne	r6, r6
 8009002:	e7ef      	b.n	8008fe4 <_printf_i+0xbc>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	6820      	ldr	r0, [r4, #0]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	6029      	str	r1, [r5, #0]
 800900c:	0601      	lsls	r1, r0, #24
 800900e:	d501      	bpl.n	8009014 <_printf_i+0xec>
 8009010:	681e      	ldr	r6, [r3, #0]
 8009012:	e002      	b.n	800901a <_printf_i+0xf2>
 8009014:	0646      	lsls	r6, r0, #25
 8009016:	d5fb      	bpl.n	8009010 <_printf_i+0xe8>
 8009018:	881e      	ldrh	r6, [r3, #0]
 800901a:	4854      	ldr	r0, [pc, #336]	; (800916c <_printf_i+0x244>)
 800901c:	2f6f      	cmp	r7, #111	; 0x6f
 800901e:	bf0c      	ite	eq
 8009020:	2308      	moveq	r3, #8
 8009022:	230a      	movne	r3, #10
 8009024:	2100      	movs	r1, #0
 8009026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800902a:	6865      	ldr	r5, [r4, #4]
 800902c:	60a5      	str	r5, [r4, #8]
 800902e:	2d00      	cmp	r5, #0
 8009030:	bfa2      	ittt	ge
 8009032:	6821      	ldrge	r1, [r4, #0]
 8009034:	f021 0104 	bicge.w	r1, r1, #4
 8009038:	6021      	strge	r1, [r4, #0]
 800903a:	b90e      	cbnz	r6, 8009040 <_printf_i+0x118>
 800903c:	2d00      	cmp	r5, #0
 800903e:	d04d      	beq.n	80090dc <_printf_i+0x1b4>
 8009040:	4615      	mov	r5, r2
 8009042:	fbb6 f1f3 	udiv	r1, r6, r3
 8009046:	fb03 6711 	mls	r7, r3, r1, r6
 800904a:	5dc7      	ldrb	r7, [r0, r7]
 800904c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009050:	4637      	mov	r7, r6
 8009052:	42bb      	cmp	r3, r7
 8009054:	460e      	mov	r6, r1
 8009056:	d9f4      	bls.n	8009042 <_printf_i+0x11a>
 8009058:	2b08      	cmp	r3, #8
 800905a:	d10b      	bne.n	8009074 <_printf_i+0x14c>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	07de      	lsls	r6, r3, #31
 8009060:	d508      	bpl.n	8009074 <_printf_i+0x14c>
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	6861      	ldr	r1, [r4, #4]
 8009066:	4299      	cmp	r1, r3
 8009068:	bfde      	ittt	le
 800906a:	2330      	movle	r3, #48	; 0x30
 800906c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009070:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009074:	1b52      	subs	r2, r2, r5
 8009076:	6122      	str	r2, [r4, #16]
 8009078:	f8cd a000 	str.w	sl, [sp]
 800907c:	464b      	mov	r3, r9
 800907e:	aa03      	add	r2, sp, #12
 8009080:	4621      	mov	r1, r4
 8009082:	4640      	mov	r0, r8
 8009084:	f7ff fee2 	bl	8008e4c <_printf_common>
 8009088:	3001      	adds	r0, #1
 800908a:	d14c      	bne.n	8009126 <_printf_i+0x1fe>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	b004      	add	sp, #16
 8009092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009096:	4835      	ldr	r0, [pc, #212]	; (800916c <_printf_i+0x244>)
 8009098:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800909c:	6829      	ldr	r1, [r5, #0]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80090a4:	6029      	str	r1, [r5, #0]
 80090a6:	061d      	lsls	r5, r3, #24
 80090a8:	d514      	bpl.n	80090d4 <_printf_i+0x1ac>
 80090aa:	07df      	lsls	r7, r3, #31
 80090ac:	bf44      	itt	mi
 80090ae:	f043 0320 	orrmi.w	r3, r3, #32
 80090b2:	6023      	strmi	r3, [r4, #0]
 80090b4:	b91e      	cbnz	r6, 80090be <_printf_i+0x196>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f023 0320 	bic.w	r3, r3, #32
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	2310      	movs	r3, #16
 80090c0:	e7b0      	b.n	8009024 <_printf_i+0xfc>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	f043 0320 	orr.w	r3, r3, #32
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	2378      	movs	r3, #120	; 0x78
 80090cc:	4828      	ldr	r0, [pc, #160]	; (8009170 <_printf_i+0x248>)
 80090ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090d2:	e7e3      	b.n	800909c <_printf_i+0x174>
 80090d4:	0659      	lsls	r1, r3, #25
 80090d6:	bf48      	it	mi
 80090d8:	b2b6      	uxthmi	r6, r6
 80090da:	e7e6      	b.n	80090aa <_printf_i+0x182>
 80090dc:	4615      	mov	r5, r2
 80090de:	e7bb      	b.n	8009058 <_printf_i+0x130>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	6826      	ldr	r6, [r4, #0]
 80090e4:	6961      	ldr	r1, [r4, #20]
 80090e6:	1d18      	adds	r0, r3, #4
 80090e8:	6028      	str	r0, [r5, #0]
 80090ea:	0635      	lsls	r5, r6, #24
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	d501      	bpl.n	80090f4 <_printf_i+0x1cc>
 80090f0:	6019      	str	r1, [r3, #0]
 80090f2:	e002      	b.n	80090fa <_printf_i+0x1d2>
 80090f4:	0670      	lsls	r0, r6, #25
 80090f6:	d5fb      	bpl.n	80090f0 <_printf_i+0x1c8>
 80090f8:	8019      	strh	r1, [r3, #0]
 80090fa:	2300      	movs	r3, #0
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	4615      	mov	r5, r2
 8009100:	e7ba      	b.n	8009078 <_printf_i+0x150>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	1d1a      	adds	r2, r3, #4
 8009106:	602a      	str	r2, [r5, #0]
 8009108:	681d      	ldr	r5, [r3, #0]
 800910a:	6862      	ldr	r2, [r4, #4]
 800910c:	2100      	movs	r1, #0
 800910e:	4628      	mov	r0, r5
 8009110:	f7f7 f886 	bl	8000220 <memchr>
 8009114:	b108      	cbz	r0, 800911a <_printf_i+0x1f2>
 8009116:	1b40      	subs	r0, r0, r5
 8009118:	6060      	str	r0, [r4, #4]
 800911a:	6863      	ldr	r3, [r4, #4]
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	2300      	movs	r3, #0
 8009120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009124:	e7a8      	b.n	8009078 <_printf_i+0x150>
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	462a      	mov	r2, r5
 800912a:	4649      	mov	r1, r9
 800912c:	4640      	mov	r0, r8
 800912e:	47d0      	blx	sl
 8009130:	3001      	adds	r0, #1
 8009132:	d0ab      	beq.n	800908c <_printf_i+0x164>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	079b      	lsls	r3, r3, #30
 8009138:	d413      	bmi.n	8009162 <_printf_i+0x23a>
 800913a:	68e0      	ldr	r0, [r4, #12]
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	4298      	cmp	r0, r3
 8009140:	bfb8      	it	lt
 8009142:	4618      	movlt	r0, r3
 8009144:	e7a4      	b.n	8009090 <_printf_i+0x168>
 8009146:	2301      	movs	r3, #1
 8009148:	4632      	mov	r2, r6
 800914a:	4649      	mov	r1, r9
 800914c:	4640      	mov	r0, r8
 800914e:	47d0      	blx	sl
 8009150:	3001      	adds	r0, #1
 8009152:	d09b      	beq.n	800908c <_printf_i+0x164>
 8009154:	3501      	adds	r5, #1
 8009156:	68e3      	ldr	r3, [r4, #12]
 8009158:	9903      	ldr	r1, [sp, #12]
 800915a:	1a5b      	subs	r3, r3, r1
 800915c:	42ab      	cmp	r3, r5
 800915e:	dcf2      	bgt.n	8009146 <_printf_i+0x21e>
 8009160:	e7eb      	b.n	800913a <_printf_i+0x212>
 8009162:	2500      	movs	r5, #0
 8009164:	f104 0619 	add.w	r6, r4, #25
 8009168:	e7f5      	b.n	8009156 <_printf_i+0x22e>
 800916a:	bf00      	nop
 800916c:	0800dacc 	.word	0x0800dacc
 8009170:	0800dadd 	.word	0x0800dadd

08009174 <_scanf_float>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	b087      	sub	sp, #28
 800917a:	4617      	mov	r7, r2
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	688b      	ldr	r3, [r1, #8]
 8009180:	1e5a      	subs	r2, r3, #1
 8009182:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009186:	bf83      	ittte	hi
 8009188:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800918c:	195b      	addhi	r3, r3, r5
 800918e:	9302      	strhi	r3, [sp, #8]
 8009190:	2300      	movls	r3, #0
 8009192:	bf86      	itte	hi
 8009194:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009198:	608b      	strhi	r3, [r1, #8]
 800919a:	9302      	strls	r3, [sp, #8]
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	468b      	mov	fp, r1
 80091a0:	2500      	movs	r5, #0
 80091a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80091a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80091aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091ae:	4680      	mov	r8, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	465e      	mov	r6, fp
 80091b4:	46aa      	mov	sl, r5
 80091b6:	46a9      	mov	r9, r5
 80091b8:	9501      	str	r5, [sp, #4]
 80091ba:	68a2      	ldr	r2, [r4, #8]
 80091bc:	b152      	cbz	r2, 80091d4 <_scanf_float+0x60>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b4e      	cmp	r3, #78	; 0x4e
 80091c4:	d864      	bhi.n	8009290 <_scanf_float+0x11c>
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d83c      	bhi.n	8009244 <_scanf_float+0xd0>
 80091ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80091ce:	b2c8      	uxtb	r0, r1
 80091d0:	280e      	cmp	r0, #14
 80091d2:	d93a      	bls.n	800924a <_scanf_float+0xd6>
 80091d4:	f1b9 0f00 	cmp.w	r9, #0
 80091d8:	d003      	beq.n	80091e2 <_scanf_float+0x6e>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e6:	f1ba 0f01 	cmp.w	sl, #1
 80091ea:	f200 8113 	bhi.w	8009414 <_scanf_float+0x2a0>
 80091ee:	455e      	cmp	r6, fp
 80091f0:	f200 8105 	bhi.w	80093fe <_scanf_float+0x28a>
 80091f4:	2501      	movs	r5, #1
 80091f6:	4628      	mov	r0, r5
 80091f8:	b007      	add	sp, #28
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009202:	2a0d      	cmp	r2, #13
 8009204:	d8e6      	bhi.n	80091d4 <_scanf_float+0x60>
 8009206:	a101      	add	r1, pc, #4	; (adr r1, 800920c <_scanf_float+0x98>)
 8009208:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800920c:	0800934b 	.word	0x0800934b
 8009210:	080091d5 	.word	0x080091d5
 8009214:	080091d5 	.word	0x080091d5
 8009218:	080091d5 	.word	0x080091d5
 800921c:	080093ab 	.word	0x080093ab
 8009220:	08009383 	.word	0x08009383
 8009224:	080091d5 	.word	0x080091d5
 8009228:	080091d5 	.word	0x080091d5
 800922c:	08009359 	.word	0x08009359
 8009230:	080091d5 	.word	0x080091d5
 8009234:	080091d5 	.word	0x080091d5
 8009238:	080091d5 	.word	0x080091d5
 800923c:	080091d5 	.word	0x080091d5
 8009240:	08009311 	.word	0x08009311
 8009244:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009248:	e7db      	b.n	8009202 <_scanf_float+0x8e>
 800924a:	290e      	cmp	r1, #14
 800924c:	d8c2      	bhi.n	80091d4 <_scanf_float+0x60>
 800924e:	a001      	add	r0, pc, #4	; (adr r0, 8009254 <_scanf_float+0xe0>)
 8009250:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009254:	08009303 	.word	0x08009303
 8009258:	080091d5 	.word	0x080091d5
 800925c:	08009303 	.word	0x08009303
 8009260:	08009397 	.word	0x08009397
 8009264:	080091d5 	.word	0x080091d5
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092ed 	.word	0x080092ed
 8009270:	080092ed 	.word	0x080092ed
 8009274:	080092ed 	.word	0x080092ed
 8009278:	080092ed 	.word	0x080092ed
 800927c:	080092ed 	.word	0x080092ed
 8009280:	080092ed 	.word	0x080092ed
 8009284:	080092ed 	.word	0x080092ed
 8009288:	080092ed 	.word	0x080092ed
 800928c:	080092ed 	.word	0x080092ed
 8009290:	2b6e      	cmp	r3, #110	; 0x6e
 8009292:	d809      	bhi.n	80092a8 <_scanf_float+0x134>
 8009294:	2b60      	cmp	r3, #96	; 0x60
 8009296:	d8b2      	bhi.n	80091fe <_scanf_float+0x8a>
 8009298:	2b54      	cmp	r3, #84	; 0x54
 800929a:	d077      	beq.n	800938c <_scanf_float+0x218>
 800929c:	2b59      	cmp	r3, #89	; 0x59
 800929e:	d199      	bne.n	80091d4 <_scanf_float+0x60>
 80092a0:	2d07      	cmp	r5, #7
 80092a2:	d197      	bne.n	80091d4 <_scanf_float+0x60>
 80092a4:	2508      	movs	r5, #8
 80092a6:	e029      	b.n	80092fc <_scanf_float+0x188>
 80092a8:	2b74      	cmp	r3, #116	; 0x74
 80092aa:	d06f      	beq.n	800938c <_scanf_float+0x218>
 80092ac:	2b79      	cmp	r3, #121	; 0x79
 80092ae:	e7f6      	b.n	800929e <_scanf_float+0x12a>
 80092b0:	6821      	ldr	r1, [r4, #0]
 80092b2:	05c8      	lsls	r0, r1, #23
 80092b4:	d51a      	bpl.n	80092ec <_scanf_float+0x178>
 80092b6:	9b02      	ldr	r3, [sp, #8]
 80092b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092bc:	6021      	str	r1, [r4, #0]
 80092be:	f109 0901 	add.w	r9, r9, #1
 80092c2:	b11b      	cbz	r3, 80092cc <_scanf_float+0x158>
 80092c4:	3b01      	subs	r3, #1
 80092c6:	3201      	adds	r2, #1
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	60a2      	str	r2, [r4, #8]
 80092cc:	68a3      	ldr	r3, [r4, #8]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	3301      	adds	r3, #1
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3b01      	subs	r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	607b      	str	r3, [r7, #4]
 80092e0:	f340 8084 	ble.w	80093ec <_scanf_float+0x278>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	603b      	str	r3, [r7, #0]
 80092ea:	e766      	b.n	80091ba <_scanf_float+0x46>
 80092ec:	eb1a 0f05 	cmn.w	sl, r5
 80092f0:	f47f af70 	bne.w	80091d4 <_scanf_float+0x60>
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092fa:	6022      	str	r2, [r4, #0]
 80092fc:	f806 3b01 	strb.w	r3, [r6], #1
 8009300:	e7e4      	b.n	80092cc <_scanf_float+0x158>
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	0610      	lsls	r0, r2, #24
 8009306:	f57f af65 	bpl.w	80091d4 <_scanf_float+0x60>
 800930a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800930e:	e7f4      	b.n	80092fa <_scanf_float+0x186>
 8009310:	f1ba 0f00 	cmp.w	sl, #0
 8009314:	d10e      	bne.n	8009334 <_scanf_float+0x1c0>
 8009316:	f1b9 0f00 	cmp.w	r9, #0
 800931a:	d10e      	bne.n	800933a <_scanf_float+0x1c6>
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009322:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009326:	d108      	bne.n	800933a <_scanf_float+0x1c6>
 8009328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800932c:	6022      	str	r2, [r4, #0]
 800932e:	f04f 0a01 	mov.w	sl, #1
 8009332:	e7e3      	b.n	80092fc <_scanf_float+0x188>
 8009334:	f1ba 0f02 	cmp.w	sl, #2
 8009338:	d055      	beq.n	80093e6 <_scanf_float+0x272>
 800933a:	2d01      	cmp	r5, #1
 800933c:	d002      	beq.n	8009344 <_scanf_float+0x1d0>
 800933e:	2d04      	cmp	r5, #4
 8009340:	f47f af48 	bne.w	80091d4 <_scanf_float+0x60>
 8009344:	3501      	adds	r5, #1
 8009346:	b2ed      	uxtb	r5, r5
 8009348:	e7d8      	b.n	80092fc <_scanf_float+0x188>
 800934a:	f1ba 0f01 	cmp.w	sl, #1
 800934e:	f47f af41 	bne.w	80091d4 <_scanf_float+0x60>
 8009352:	f04f 0a02 	mov.w	sl, #2
 8009356:	e7d1      	b.n	80092fc <_scanf_float+0x188>
 8009358:	b97d      	cbnz	r5, 800937a <_scanf_float+0x206>
 800935a:	f1b9 0f00 	cmp.w	r9, #0
 800935e:	f47f af3c 	bne.w	80091da <_scanf_float+0x66>
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009368:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800936c:	f47f af39 	bne.w	80091e2 <_scanf_float+0x6e>
 8009370:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009374:	6022      	str	r2, [r4, #0]
 8009376:	2501      	movs	r5, #1
 8009378:	e7c0      	b.n	80092fc <_scanf_float+0x188>
 800937a:	2d03      	cmp	r5, #3
 800937c:	d0e2      	beq.n	8009344 <_scanf_float+0x1d0>
 800937e:	2d05      	cmp	r5, #5
 8009380:	e7de      	b.n	8009340 <_scanf_float+0x1cc>
 8009382:	2d02      	cmp	r5, #2
 8009384:	f47f af26 	bne.w	80091d4 <_scanf_float+0x60>
 8009388:	2503      	movs	r5, #3
 800938a:	e7b7      	b.n	80092fc <_scanf_float+0x188>
 800938c:	2d06      	cmp	r5, #6
 800938e:	f47f af21 	bne.w	80091d4 <_scanf_float+0x60>
 8009392:	2507      	movs	r5, #7
 8009394:	e7b2      	b.n	80092fc <_scanf_float+0x188>
 8009396:	6822      	ldr	r2, [r4, #0]
 8009398:	0591      	lsls	r1, r2, #22
 800939a:	f57f af1b 	bpl.w	80091d4 <_scanf_float+0x60>
 800939e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80093a8:	e7a8      	b.n	80092fc <_scanf_float+0x188>
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80093b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80093b4:	d006      	beq.n	80093c4 <_scanf_float+0x250>
 80093b6:	0550      	lsls	r0, r2, #21
 80093b8:	f57f af0c 	bpl.w	80091d4 <_scanf_float+0x60>
 80093bc:	f1b9 0f00 	cmp.w	r9, #0
 80093c0:	f43f af0f 	beq.w	80091e2 <_scanf_float+0x6e>
 80093c4:	0591      	lsls	r1, r2, #22
 80093c6:	bf58      	it	pl
 80093c8:	9901      	ldrpl	r1, [sp, #4]
 80093ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093ce:	bf58      	it	pl
 80093d0:	eba9 0101 	subpl.w	r1, r9, r1
 80093d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80093d8:	bf58      	it	pl
 80093da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	f04f 0900 	mov.w	r9, #0
 80093e4:	e78a      	b.n	80092fc <_scanf_float+0x188>
 80093e6:	f04f 0a03 	mov.w	sl, #3
 80093ea:	e787      	b.n	80092fc <_scanf_float+0x188>
 80093ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093f0:	4639      	mov	r1, r7
 80093f2:	4640      	mov	r0, r8
 80093f4:	4798      	blx	r3
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f43f aedf 	beq.w	80091ba <_scanf_float+0x46>
 80093fc:	e6ea      	b.n	80091d4 <_scanf_float+0x60>
 80093fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009402:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009406:	463a      	mov	r2, r7
 8009408:	4640      	mov	r0, r8
 800940a:	4798      	blx	r3
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	3b01      	subs	r3, #1
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	e6ec      	b.n	80091ee <_scanf_float+0x7a>
 8009414:	1e6b      	subs	r3, r5, #1
 8009416:	2b06      	cmp	r3, #6
 8009418:	d825      	bhi.n	8009466 <_scanf_float+0x2f2>
 800941a:	2d02      	cmp	r5, #2
 800941c:	d836      	bhi.n	800948c <_scanf_float+0x318>
 800941e:	455e      	cmp	r6, fp
 8009420:	f67f aee8 	bls.w	80091f4 <_scanf_float+0x80>
 8009424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009428:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800942c:	463a      	mov	r2, r7
 800942e:	4640      	mov	r0, r8
 8009430:	4798      	blx	r3
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	e7f1      	b.n	800941e <_scanf_float+0x2aa>
 800943a:	9802      	ldr	r0, [sp, #8]
 800943c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009440:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009444:	9002      	str	r0, [sp, #8]
 8009446:	463a      	mov	r2, r7
 8009448:	4640      	mov	r0, r8
 800944a:	4798      	blx	r3
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	3b01      	subs	r3, #1
 8009450:	6123      	str	r3, [r4, #16]
 8009452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009456:	fa5f fa8a 	uxtb.w	sl, sl
 800945a:	f1ba 0f02 	cmp.w	sl, #2
 800945e:	d1ec      	bne.n	800943a <_scanf_float+0x2c6>
 8009460:	3d03      	subs	r5, #3
 8009462:	b2ed      	uxtb	r5, r5
 8009464:	1b76      	subs	r6, r6, r5
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	05da      	lsls	r2, r3, #23
 800946a:	d52f      	bpl.n	80094cc <_scanf_float+0x358>
 800946c:	055b      	lsls	r3, r3, #21
 800946e:	d510      	bpl.n	8009492 <_scanf_float+0x31e>
 8009470:	455e      	cmp	r6, fp
 8009472:	f67f aebf 	bls.w	80091f4 <_scanf_float+0x80>
 8009476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800947a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800947e:	463a      	mov	r2, r7
 8009480:	4640      	mov	r0, r8
 8009482:	4798      	blx	r3
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	3b01      	subs	r3, #1
 8009488:	6123      	str	r3, [r4, #16]
 800948a:	e7f1      	b.n	8009470 <_scanf_float+0x2fc>
 800948c:	46aa      	mov	sl, r5
 800948e:	9602      	str	r6, [sp, #8]
 8009490:	e7df      	b.n	8009452 <_scanf_float+0x2de>
 8009492:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	2965      	cmp	r1, #101	; 0x65
 800949a:	f103 33ff 	add.w	r3, r3, #4294967295
 800949e:	f106 35ff 	add.w	r5, r6, #4294967295
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	d00c      	beq.n	80094c0 <_scanf_float+0x34c>
 80094a6:	2945      	cmp	r1, #69	; 0x45
 80094a8:	d00a      	beq.n	80094c0 <_scanf_float+0x34c>
 80094aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094ae:	463a      	mov	r2, r7
 80094b0:	4640      	mov	r0, r8
 80094b2:	4798      	blx	r3
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	1eb5      	subs	r5, r6, #2
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094c4:	463a      	mov	r2, r7
 80094c6:	4640      	mov	r0, r8
 80094c8:	4798      	blx	r3
 80094ca:	462e      	mov	r6, r5
 80094cc:	6825      	ldr	r5, [r4, #0]
 80094ce:	f015 0510 	ands.w	r5, r5, #16
 80094d2:	d159      	bne.n	8009588 <_scanf_float+0x414>
 80094d4:	7035      	strb	r5, [r6, #0]
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e0:	d11b      	bne.n	800951a <_scanf_float+0x3a6>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	454b      	cmp	r3, r9
 80094e6:	eba3 0209 	sub.w	r2, r3, r9
 80094ea:	d123      	bne.n	8009534 <_scanf_float+0x3c0>
 80094ec:	2200      	movs	r2, #0
 80094ee:	4659      	mov	r1, fp
 80094f0:	4640      	mov	r0, r8
 80094f2:	f000 ff1f 	bl	800a334 <_strtod_r>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	f012 0f02 	tst.w	r2, #2
 80094fe:	ec57 6b10 	vmov	r6, r7, d0
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	d021      	beq.n	800954a <_scanf_float+0x3d6>
 8009506:	9903      	ldr	r1, [sp, #12]
 8009508:	1d1a      	adds	r2, r3, #4
 800950a:	600a      	str	r2, [r1, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	e9c3 6700 	strd	r6, r7, [r3]
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60e3      	str	r3, [r4, #12]
 8009518:	e66d      	b.n	80091f6 <_scanf_float+0x82>
 800951a:	9b04      	ldr	r3, [sp, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0e5      	beq.n	80094ec <_scanf_float+0x378>
 8009520:	9905      	ldr	r1, [sp, #20]
 8009522:	230a      	movs	r3, #10
 8009524:	462a      	mov	r2, r5
 8009526:	3101      	adds	r1, #1
 8009528:	4640      	mov	r0, r8
 800952a:	f000 ff8b 	bl	800a444 <_strtol_r>
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	9e05      	ldr	r6, [sp, #20]
 8009532:	1ac2      	subs	r2, r0, r3
 8009534:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009538:	429e      	cmp	r6, r3
 800953a:	bf28      	it	cs
 800953c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009540:	4912      	ldr	r1, [pc, #72]	; (800958c <_scanf_float+0x418>)
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f82c 	bl	80095a0 <siprintf>
 8009548:	e7d0      	b.n	80094ec <_scanf_float+0x378>
 800954a:	9903      	ldr	r1, [sp, #12]
 800954c:	f012 0f04 	tst.w	r2, #4
 8009550:	f103 0204 	add.w	r2, r3, #4
 8009554:	600a      	str	r2, [r1, #0]
 8009556:	d1d9      	bne.n	800950c <_scanf_float+0x398>
 8009558:	f8d3 8000 	ldr.w	r8, [r3]
 800955c:	ee10 2a10 	vmov	r2, s0
 8009560:	ee10 0a10 	vmov	r0, s0
 8009564:	463b      	mov	r3, r7
 8009566:	4639      	mov	r1, r7
 8009568:	f7f7 fb00 	bl	8000b6c <__aeabi_dcmpun>
 800956c:	b128      	cbz	r0, 800957a <_scanf_float+0x406>
 800956e:	4808      	ldr	r0, [pc, #32]	; (8009590 <_scanf_float+0x41c>)
 8009570:	f000 f810 	bl	8009594 <nanf>
 8009574:	ed88 0a00 	vstr	s0, [r8]
 8009578:	e7cb      	b.n	8009512 <_scanf_float+0x39e>
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	f7f7 fb53 	bl	8000c28 <__aeabi_d2f>
 8009582:	f8c8 0000 	str.w	r0, [r8]
 8009586:	e7c4      	b.n	8009512 <_scanf_float+0x39e>
 8009588:	2500      	movs	r5, #0
 800958a:	e634      	b.n	80091f6 <_scanf_float+0x82>
 800958c:	0800daee 	.word	0x0800daee
 8009590:	0800df13 	.word	0x0800df13

08009594 <nanf>:
 8009594:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800959c <nanf+0x8>
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	7fc00000 	.word	0x7fc00000

080095a0 <siprintf>:
 80095a0:	b40e      	push	{r1, r2, r3}
 80095a2:	b500      	push	{lr}
 80095a4:	b09c      	sub	sp, #112	; 0x70
 80095a6:	ab1d      	add	r3, sp, #116	; 0x74
 80095a8:	9002      	str	r0, [sp, #8]
 80095aa:	9006      	str	r0, [sp, #24]
 80095ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <siprintf+0x38>)
 80095b2:	9107      	str	r1, [sp, #28]
 80095b4:	9104      	str	r1, [sp, #16]
 80095b6:	4909      	ldr	r1, [pc, #36]	; (80095dc <siprintf+0x3c>)
 80095b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095bc:	9105      	str	r1, [sp, #20]
 80095be:	6800      	ldr	r0, [r0, #0]
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	a902      	add	r1, sp, #8
 80095c4:	f002 ffa0 	bl	800c508 <_svfiprintf_r>
 80095c8:	9b02      	ldr	r3, [sp, #8]
 80095ca:	2200      	movs	r2, #0
 80095cc:	701a      	strb	r2, [r3, #0]
 80095ce:	b01c      	add	sp, #112	; 0x70
 80095d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d4:	b003      	add	sp, #12
 80095d6:	4770      	bx	lr
 80095d8:	200000a8 	.word	0x200000a8
 80095dc:	ffff0208 	.word	0xffff0208

080095e0 <siscanf>:
 80095e0:	b40e      	push	{r1, r2, r3}
 80095e2:	b510      	push	{r4, lr}
 80095e4:	b09f      	sub	sp, #124	; 0x7c
 80095e6:	ac21      	add	r4, sp, #132	; 0x84
 80095e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80095ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80095f0:	9201      	str	r2, [sp, #4]
 80095f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80095f6:	9004      	str	r0, [sp, #16]
 80095f8:	9008      	str	r0, [sp, #32]
 80095fa:	f7f6 fe09 	bl	8000210 <strlen>
 80095fe:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <siscanf+0x50>)
 8009600:	9005      	str	r0, [sp, #20]
 8009602:	9009      	str	r0, [sp, #36]	; 0x24
 8009604:	930d      	str	r3, [sp, #52]	; 0x34
 8009606:	480b      	ldr	r0, [pc, #44]	; (8009634 <siscanf+0x54>)
 8009608:	9a01      	ldr	r2, [sp, #4]
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9403      	str	r4, [sp, #12]
 800960e:	2300      	movs	r3, #0
 8009610:	9311      	str	r3, [sp, #68]	; 0x44
 8009612:	9316      	str	r3, [sp, #88]	; 0x58
 8009614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009618:	f8ad 301e 	strh.w	r3, [sp, #30]
 800961c:	a904      	add	r1, sp, #16
 800961e:	4623      	mov	r3, r4
 8009620:	f003 f8cc 	bl	800c7bc <__ssvfiscanf_r>
 8009624:	b01f      	add	sp, #124	; 0x7c
 8009626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962a:	b003      	add	sp, #12
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	0800965b 	.word	0x0800965b
 8009634:	200000a8 	.word	0x200000a8

08009638 <__sread>:
 8009638:	b510      	push	{r4, lr}
 800963a:	460c      	mov	r4, r1
 800963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009640:	f003 fb86 	bl	800cd50 <_read_r>
 8009644:	2800      	cmp	r0, #0
 8009646:	bfab      	itete	ge
 8009648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800964a:	89a3      	ldrhlt	r3, [r4, #12]
 800964c:	181b      	addge	r3, r3, r0
 800964e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009652:	bfac      	ite	ge
 8009654:	6563      	strge	r3, [r4, #84]	; 0x54
 8009656:	81a3      	strhlt	r3, [r4, #12]
 8009658:	bd10      	pop	{r4, pc}

0800965a <__seofread>:
 800965a:	2000      	movs	r0, #0
 800965c:	4770      	bx	lr

0800965e <__swrite>:
 800965e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	461f      	mov	r7, r3
 8009664:	898b      	ldrh	r3, [r1, #12]
 8009666:	05db      	lsls	r3, r3, #23
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	4616      	mov	r6, r2
 800966e:	d505      	bpl.n	800967c <__swrite+0x1e>
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	2302      	movs	r3, #2
 8009676:	2200      	movs	r2, #0
 8009678:	f002 f8f8 	bl	800b86c <_lseek_r>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	4632      	mov	r2, r6
 800968a:	463b      	mov	r3, r7
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	f000 bed9 	b.w	800a448 <_write_r>

08009696 <__sseek>:
 8009696:	b510      	push	{r4, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969e:	f002 f8e5 	bl	800b86c <_lseek_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	bf15      	itete	ne
 80096a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096b2:	81a3      	strheq	r3, [r4, #12]
 80096b4:	bf18      	it	ne
 80096b6:	81a3      	strhne	r3, [r4, #12]
 80096b8:	bd10      	pop	{r4, pc}

080096ba <__sclose>:
 80096ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096be:	f000 bed5 	b.w	800a46c <_close_r>

080096c2 <strncmp>:
 80096c2:	b510      	push	{r4, lr}
 80096c4:	b17a      	cbz	r2, 80096e6 <strncmp+0x24>
 80096c6:	4603      	mov	r3, r0
 80096c8:	3901      	subs	r1, #1
 80096ca:	1884      	adds	r4, r0, r2
 80096cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096d4:	4290      	cmp	r0, r2
 80096d6:	d101      	bne.n	80096dc <strncmp+0x1a>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d101      	bne.n	80096e0 <strncmp+0x1e>
 80096dc:	1a80      	subs	r0, r0, r2
 80096de:	bd10      	pop	{r4, pc}
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1f3      	bne.n	80096cc <strncmp+0xa>
 80096e4:	e7fa      	b.n	80096dc <strncmp+0x1a>
 80096e6:	4610      	mov	r0, r2
 80096e8:	e7f9      	b.n	80096de <strncmp+0x1c>

080096ea <sulp>:
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	ec45 4b10 	vmov	d0, r4, r5
 80096f4:	4616      	mov	r6, r2
 80096f6:	f002 fc65 	bl	800bfc4 <__ulp>
 80096fa:	ec51 0b10 	vmov	r0, r1, d0
 80096fe:	b17e      	cbz	r6, 8009720 <sulp+0x36>
 8009700:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009704:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009708:	2b00      	cmp	r3, #0
 800970a:	dd09      	ble.n	8009720 <sulp+0x36>
 800970c:	051b      	lsls	r3, r3, #20
 800970e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009712:	2400      	movs	r4, #0
 8009714:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009718:	4622      	mov	r2, r4
 800971a:	462b      	mov	r3, r5
 800971c:	f7f6 ff8c 	bl	8000638 <__aeabi_dmul>
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	0000      	movs	r0, r0
 8009724:	0000      	movs	r0, r0
	...

08009728 <_strtod_l>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	ed2d 8b02 	vpush	{d8}
 8009730:	b09d      	sub	sp, #116	; 0x74
 8009732:	461f      	mov	r7, r3
 8009734:	2300      	movs	r3, #0
 8009736:	9318      	str	r3, [sp, #96]	; 0x60
 8009738:	4ba2      	ldr	r3, [pc, #648]	; (80099c4 <_strtod_l+0x29c>)
 800973a:	9213      	str	r2, [sp, #76]	; 0x4c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	4604      	mov	r4, r0
 8009742:	4618      	mov	r0, r3
 8009744:	4688      	mov	r8, r1
 8009746:	f7f6 fd63 	bl	8000210 <strlen>
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	4605      	mov	r5, r0
 8009750:	f04f 0b00 	mov.w	fp, #0
 8009754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	2a2b      	cmp	r2, #43	; 0x2b
 800975e:	d04e      	beq.n	80097fe <_strtod_l+0xd6>
 8009760:	d83b      	bhi.n	80097da <_strtod_l+0xb2>
 8009762:	2a0d      	cmp	r2, #13
 8009764:	d834      	bhi.n	80097d0 <_strtod_l+0xa8>
 8009766:	2a08      	cmp	r2, #8
 8009768:	d834      	bhi.n	80097d4 <_strtod_l+0xac>
 800976a:	2a00      	cmp	r2, #0
 800976c:	d03e      	beq.n	80097ec <_strtod_l+0xc4>
 800976e:	2300      	movs	r3, #0
 8009770:	930a      	str	r3, [sp, #40]	; 0x28
 8009772:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009774:	7833      	ldrb	r3, [r6, #0]
 8009776:	2b30      	cmp	r3, #48	; 0x30
 8009778:	f040 80b0 	bne.w	80098dc <_strtod_l+0x1b4>
 800977c:	7873      	ldrb	r3, [r6, #1]
 800977e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009782:	2b58      	cmp	r3, #88	; 0x58
 8009784:	d168      	bne.n	8009858 <_strtod_l+0x130>
 8009786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	ab18      	add	r3, sp, #96	; 0x60
 800978c:	9702      	str	r7, [sp, #8]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4a8d      	ldr	r2, [pc, #564]	; (80099c8 <_strtod_l+0x2a0>)
 8009792:	ab19      	add	r3, sp, #100	; 0x64
 8009794:	a917      	add	r1, sp, #92	; 0x5c
 8009796:	4620      	mov	r0, r4
 8009798:	f001 fd5c 	bl	800b254 <__gethex>
 800979c:	f010 0707 	ands.w	r7, r0, #7
 80097a0:	4605      	mov	r5, r0
 80097a2:	d005      	beq.n	80097b0 <_strtod_l+0x88>
 80097a4:	2f06      	cmp	r7, #6
 80097a6:	d12c      	bne.n	8009802 <_strtod_l+0xda>
 80097a8:	3601      	adds	r6, #1
 80097aa:	2300      	movs	r3, #0
 80097ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80097ae:	930a      	str	r3, [sp, #40]	; 0x28
 80097b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 8590 	bne.w	800a2d8 <_strtod_l+0xbb0>
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	b1eb      	cbz	r3, 80097f8 <_strtod_l+0xd0>
 80097bc:	4652      	mov	r2, sl
 80097be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097c2:	ec43 2b10 	vmov	d0, r2, r3
 80097c6:	b01d      	add	sp, #116	; 0x74
 80097c8:	ecbd 8b02 	vpop	{d8}
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	2a20      	cmp	r2, #32
 80097d2:	d1cc      	bne.n	800976e <_strtod_l+0x46>
 80097d4:	3301      	adds	r3, #1
 80097d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80097d8:	e7be      	b.n	8009758 <_strtod_l+0x30>
 80097da:	2a2d      	cmp	r2, #45	; 0x2d
 80097dc:	d1c7      	bne.n	800976e <_strtod_l+0x46>
 80097de:	2201      	movs	r2, #1
 80097e0:	920a      	str	r2, [sp, #40]	; 0x28
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e6:	785b      	ldrb	r3, [r3, #1]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1c2      	bne.n	8009772 <_strtod_l+0x4a>
 80097ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 856e 	bne.w	800a2d4 <_strtod_l+0xbac>
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	e7e1      	b.n	80097c2 <_strtod_l+0x9a>
 80097fe:	2200      	movs	r2, #0
 8009800:	e7ee      	b.n	80097e0 <_strtod_l+0xb8>
 8009802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009804:	b13a      	cbz	r2, 8009816 <_strtod_l+0xee>
 8009806:	2135      	movs	r1, #53	; 0x35
 8009808:	a81a      	add	r0, sp, #104	; 0x68
 800980a:	f002 fce6 	bl	800c1da <__copybits>
 800980e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009810:	4620      	mov	r0, r4
 8009812:	f002 f8a5 	bl	800b960 <_Bfree>
 8009816:	3f01      	subs	r7, #1
 8009818:	2f04      	cmp	r7, #4
 800981a:	d806      	bhi.n	800982a <_strtod_l+0x102>
 800981c:	e8df f007 	tbb	[pc, r7]
 8009820:	1714030a 	.word	0x1714030a
 8009824:	0a          	.byte	0x0a
 8009825:	00          	.byte	0x00
 8009826:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800982a:	0728      	lsls	r0, r5, #28
 800982c:	d5c0      	bpl.n	80097b0 <_strtod_l+0x88>
 800982e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009832:	e7bd      	b.n	80097b0 <_strtod_l+0x88>
 8009834:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800983a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800983e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009842:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009846:	e7f0      	b.n	800982a <_strtod_l+0x102>
 8009848:	f8df b180 	ldr.w	fp, [pc, #384]	; 80099cc <_strtod_l+0x2a4>
 800984c:	e7ed      	b.n	800982a <_strtod_l+0x102>
 800984e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009852:	f04f 3aff 	mov.w	sl, #4294967295
 8009856:	e7e8      	b.n	800982a <_strtod_l+0x102>
 8009858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	9217      	str	r2, [sp, #92]	; 0x5c
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	2b30      	cmp	r3, #48	; 0x30
 8009862:	d0f9      	beq.n	8009858 <_strtod_l+0x130>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0a3      	beq.n	80097b0 <_strtod_l+0x88>
 8009868:	2301      	movs	r3, #1
 800986a:	f04f 0900 	mov.w	r9, #0
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	9308      	str	r3, [sp, #32]
 8009874:	f8cd 901c 	str.w	r9, [sp, #28]
 8009878:	464f      	mov	r7, r9
 800987a:	220a      	movs	r2, #10
 800987c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800987e:	7806      	ldrb	r6, [r0, #0]
 8009880:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009884:	b2d9      	uxtb	r1, r3
 8009886:	2909      	cmp	r1, #9
 8009888:	d92a      	bls.n	80098e0 <_strtod_l+0x1b8>
 800988a:	9905      	ldr	r1, [sp, #20]
 800988c:	462a      	mov	r2, r5
 800988e:	f7ff ff18 	bl	80096c2 <strncmp>
 8009892:	b398      	cbz	r0, 80098fc <_strtod_l+0x1d4>
 8009894:	2000      	movs	r0, #0
 8009896:	4632      	mov	r2, r6
 8009898:	463d      	mov	r5, r7
 800989a:	9005      	str	r0, [sp, #20]
 800989c:	4603      	mov	r3, r0
 800989e:	2a65      	cmp	r2, #101	; 0x65
 80098a0:	d001      	beq.n	80098a6 <_strtod_l+0x17e>
 80098a2:	2a45      	cmp	r2, #69	; 0x45
 80098a4:	d118      	bne.n	80098d8 <_strtod_l+0x1b0>
 80098a6:	b91d      	cbnz	r5, 80098b0 <_strtod_l+0x188>
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	4302      	orrs	r2, r0
 80098ac:	d09e      	beq.n	80097ec <_strtod_l+0xc4>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80098b4:	f108 0201 	add.w	r2, r8, #1
 80098b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80098ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098be:	2a2b      	cmp	r2, #43	; 0x2b
 80098c0:	d075      	beq.n	80099ae <_strtod_l+0x286>
 80098c2:	2a2d      	cmp	r2, #45	; 0x2d
 80098c4:	d07b      	beq.n	80099be <_strtod_l+0x296>
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098ce:	2909      	cmp	r1, #9
 80098d0:	f240 8082 	bls.w	80099d8 <_strtod_l+0x2b0>
 80098d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098d8:	2600      	movs	r6, #0
 80098da:	e09d      	b.n	8009a18 <_strtod_l+0x2f0>
 80098dc:	2300      	movs	r3, #0
 80098de:	e7c4      	b.n	800986a <_strtod_l+0x142>
 80098e0:	2f08      	cmp	r7, #8
 80098e2:	bfd8      	it	le
 80098e4:	9907      	ldrle	r1, [sp, #28]
 80098e6:	f100 0001 	add.w	r0, r0, #1
 80098ea:	bfda      	itte	le
 80098ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80098f0:	9307      	strle	r3, [sp, #28]
 80098f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80098f6:	3701      	adds	r7, #1
 80098f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80098fa:	e7bf      	b.n	800987c <_strtod_l+0x154>
 80098fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098fe:	195a      	adds	r2, r3, r5
 8009900:	9217      	str	r2, [sp, #92]	; 0x5c
 8009902:	5d5a      	ldrb	r2, [r3, r5]
 8009904:	2f00      	cmp	r7, #0
 8009906:	d037      	beq.n	8009978 <_strtod_l+0x250>
 8009908:	9005      	str	r0, [sp, #20]
 800990a:	463d      	mov	r5, r7
 800990c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009910:	2b09      	cmp	r3, #9
 8009912:	d912      	bls.n	800993a <_strtod_l+0x212>
 8009914:	2301      	movs	r3, #1
 8009916:	e7c2      	b.n	800989e <_strtod_l+0x176>
 8009918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	9217      	str	r2, [sp, #92]	; 0x5c
 800991e:	785a      	ldrb	r2, [r3, #1]
 8009920:	3001      	adds	r0, #1
 8009922:	2a30      	cmp	r2, #48	; 0x30
 8009924:	d0f8      	beq.n	8009918 <_strtod_l+0x1f0>
 8009926:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800992a:	2b08      	cmp	r3, #8
 800992c:	f200 84d9 	bhi.w	800a2e2 <_strtod_l+0xbba>
 8009930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009932:	9005      	str	r0, [sp, #20]
 8009934:	2000      	movs	r0, #0
 8009936:	9308      	str	r3, [sp, #32]
 8009938:	4605      	mov	r5, r0
 800993a:	3a30      	subs	r2, #48	; 0x30
 800993c:	f100 0301 	add.w	r3, r0, #1
 8009940:	d014      	beq.n	800996c <_strtod_l+0x244>
 8009942:	9905      	ldr	r1, [sp, #20]
 8009944:	4419      	add	r1, r3
 8009946:	9105      	str	r1, [sp, #20]
 8009948:	462b      	mov	r3, r5
 800994a:	eb00 0e05 	add.w	lr, r0, r5
 800994e:	210a      	movs	r1, #10
 8009950:	4573      	cmp	r3, lr
 8009952:	d113      	bne.n	800997c <_strtod_l+0x254>
 8009954:	182b      	adds	r3, r5, r0
 8009956:	2b08      	cmp	r3, #8
 8009958:	f105 0501 	add.w	r5, r5, #1
 800995c:	4405      	add	r5, r0
 800995e:	dc1c      	bgt.n	800999a <_strtod_l+0x272>
 8009960:	9907      	ldr	r1, [sp, #28]
 8009962:	230a      	movs	r3, #10
 8009964:	fb03 2301 	mla	r3, r3, r1, r2
 8009968:	9307      	str	r3, [sp, #28]
 800996a:	2300      	movs	r3, #0
 800996c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800996e:	1c51      	adds	r1, r2, #1
 8009970:	9117      	str	r1, [sp, #92]	; 0x5c
 8009972:	7852      	ldrb	r2, [r2, #1]
 8009974:	4618      	mov	r0, r3
 8009976:	e7c9      	b.n	800990c <_strtod_l+0x1e4>
 8009978:	4638      	mov	r0, r7
 800997a:	e7d2      	b.n	8009922 <_strtod_l+0x1fa>
 800997c:	2b08      	cmp	r3, #8
 800997e:	dc04      	bgt.n	800998a <_strtod_l+0x262>
 8009980:	9e07      	ldr	r6, [sp, #28]
 8009982:	434e      	muls	r6, r1
 8009984:	9607      	str	r6, [sp, #28]
 8009986:	3301      	adds	r3, #1
 8009988:	e7e2      	b.n	8009950 <_strtod_l+0x228>
 800998a:	f103 0c01 	add.w	ip, r3, #1
 800998e:	f1bc 0f10 	cmp.w	ip, #16
 8009992:	bfd8      	it	le
 8009994:	fb01 f909 	mulle.w	r9, r1, r9
 8009998:	e7f5      	b.n	8009986 <_strtod_l+0x25e>
 800999a:	2d10      	cmp	r5, #16
 800999c:	bfdc      	itt	le
 800999e:	230a      	movle	r3, #10
 80099a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80099a4:	e7e1      	b.n	800996a <_strtod_l+0x242>
 80099a6:	2300      	movs	r3, #0
 80099a8:	9305      	str	r3, [sp, #20]
 80099aa:	2301      	movs	r3, #1
 80099ac:	e77c      	b.n	80098a8 <_strtod_l+0x180>
 80099ae:	f04f 0c00 	mov.w	ip, #0
 80099b2:	f108 0202 	add.w	r2, r8, #2
 80099b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80099b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099bc:	e785      	b.n	80098ca <_strtod_l+0x1a2>
 80099be:	f04f 0c01 	mov.w	ip, #1
 80099c2:	e7f6      	b.n	80099b2 <_strtod_l+0x28a>
 80099c4:	0800dd40 	.word	0x0800dd40
 80099c8:	0800daf4 	.word	0x0800daf4
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099d2:	1c51      	adds	r1, r2, #1
 80099d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80099d6:	7852      	ldrb	r2, [r2, #1]
 80099d8:	2a30      	cmp	r2, #48	; 0x30
 80099da:	d0f9      	beq.n	80099d0 <_strtod_l+0x2a8>
 80099dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099e0:	2908      	cmp	r1, #8
 80099e2:	f63f af79 	bhi.w	80098d8 <_strtod_l+0x1b0>
 80099e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80099ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099ec:	9206      	str	r2, [sp, #24]
 80099ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099f0:	1c51      	adds	r1, r2, #1
 80099f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80099f4:	7852      	ldrb	r2, [r2, #1]
 80099f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80099fa:	2e09      	cmp	r6, #9
 80099fc:	d937      	bls.n	8009a6e <_strtod_l+0x346>
 80099fe:	9e06      	ldr	r6, [sp, #24]
 8009a00:	1b89      	subs	r1, r1, r6
 8009a02:	2908      	cmp	r1, #8
 8009a04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a08:	dc02      	bgt.n	8009a10 <_strtod_l+0x2e8>
 8009a0a:	4576      	cmp	r6, lr
 8009a0c:	bfa8      	it	ge
 8009a0e:	4676      	movge	r6, lr
 8009a10:	f1bc 0f00 	cmp.w	ip, #0
 8009a14:	d000      	beq.n	8009a18 <_strtod_l+0x2f0>
 8009a16:	4276      	negs	r6, r6
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	d14d      	bne.n	8009ab8 <_strtod_l+0x390>
 8009a1c:	9904      	ldr	r1, [sp, #16]
 8009a1e:	4301      	orrs	r1, r0
 8009a20:	f47f aec6 	bne.w	80097b0 <_strtod_l+0x88>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f aee1 	bne.w	80097ec <_strtod_l+0xc4>
 8009a2a:	2a69      	cmp	r2, #105	; 0x69
 8009a2c:	d027      	beq.n	8009a7e <_strtod_l+0x356>
 8009a2e:	dc24      	bgt.n	8009a7a <_strtod_l+0x352>
 8009a30:	2a49      	cmp	r2, #73	; 0x49
 8009a32:	d024      	beq.n	8009a7e <_strtod_l+0x356>
 8009a34:	2a4e      	cmp	r2, #78	; 0x4e
 8009a36:	f47f aed9 	bne.w	80097ec <_strtod_l+0xc4>
 8009a3a:	499f      	ldr	r1, [pc, #636]	; (8009cb8 <_strtod_l+0x590>)
 8009a3c:	a817      	add	r0, sp, #92	; 0x5c
 8009a3e:	f001 fe61 	bl	800b704 <__match>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f aed2 	beq.w	80097ec <_strtod_l+0xc4>
 8009a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b28      	cmp	r3, #40	; 0x28
 8009a4e:	d12d      	bne.n	8009aac <_strtod_l+0x384>
 8009a50:	499a      	ldr	r1, [pc, #616]	; (8009cbc <_strtod_l+0x594>)
 8009a52:	aa1a      	add	r2, sp, #104	; 0x68
 8009a54:	a817      	add	r0, sp, #92	; 0x5c
 8009a56:	f001 fe69 	bl	800b72c <__hexnan>
 8009a5a:	2805      	cmp	r0, #5
 8009a5c:	d126      	bne.n	8009aac <_strtod_l+0x384>
 8009a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a6c:	e6a0      	b.n	80097b0 <_strtod_l+0x88>
 8009a6e:	210a      	movs	r1, #10
 8009a70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009a74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a78:	e7b9      	b.n	80099ee <_strtod_l+0x2c6>
 8009a7a:	2a6e      	cmp	r2, #110	; 0x6e
 8009a7c:	e7db      	b.n	8009a36 <_strtod_l+0x30e>
 8009a7e:	4990      	ldr	r1, [pc, #576]	; (8009cc0 <_strtod_l+0x598>)
 8009a80:	a817      	add	r0, sp, #92	; 0x5c
 8009a82:	f001 fe3f 	bl	800b704 <__match>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f aeb0 	beq.w	80097ec <_strtod_l+0xc4>
 8009a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a8e:	498d      	ldr	r1, [pc, #564]	; (8009cc4 <_strtod_l+0x59c>)
 8009a90:	3b01      	subs	r3, #1
 8009a92:	a817      	add	r0, sp, #92	; 0x5c
 8009a94:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a96:	f001 fe35 	bl	800b704 <__match>
 8009a9a:	b910      	cbnz	r0, 8009aa2 <_strtod_l+0x37a>
 8009a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aa2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009cd4 <_strtod_l+0x5ac>
 8009aa6:	f04f 0a00 	mov.w	sl, #0
 8009aaa:	e681      	b.n	80097b0 <_strtod_l+0x88>
 8009aac:	4886      	ldr	r0, [pc, #536]	; (8009cc8 <_strtod_l+0x5a0>)
 8009aae:	f003 f963 	bl	800cd78 <nan>
 8009ab2:	ec5b ab10 	vmov	sl, fp, d0
 8009ab6:	e67b      	b.n	80097b0 <_strtod_l+0x88>
 8009ab8:	9b05      	ldr	r3, [sp, #20]
 8009aba:	9807      	ldr	r0, [sp, #28]
 8009abc:	1af3      	subs	r3, r6, r3
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	bf08      	it	eq
 8009ac2:	462f      	moveq	r7, r5
 8009ac4:	2d10      	cmp	r5, #16
 8009ac6:	9306      	str	r3, [sp, #24]
 8009ac8:	46a8      	mov	r8, r5
 8009aca:	bfa8      	it	ge
 8009acc:	f04f 0810 	movge.w	r8, #16
 8009ad0:	f7f6 fd38 	bl	8000544 <__aeabi_ui2d>
 8009ad4:	2d09      	cmp	r5, #9
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	dd13      	ble.n	8009b04 <_strtod_l+0x3dc>
 8009adc:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <_strtod_l+0x5a4>)
 8009ade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ae2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ae6:	f7f6 fda7 	bl	8000638 <__aeabi_dmul>
 8009aea:	4682      	mov	sl, r0
 8009aec:	4648      	mov	r0, r9
 8009aee:	468b      	mov	fp, r1
 8009af0:	f7f6 fd28 	bl	8000544 <__aeabi_ui2d>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4650      	mov	r0, sl
 8009afa:	4659      	mov	r1, fp
 8009afc:	f7f6 fbe6 	bl	80002cc <__adddf3>
 8009b00:	4682      	mov	sl, r0
 8009b02:	468b      	mov	fp, r1
 8009b04:	2d0f      	cmp	r5, #15
 8009b06:	dc38      	bgt.n	8009b7a <_strtod_l+0x452>
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f43f ae50 	beq.w	80097b0 <_strtod_l+0x88>
 8009b10:	dd24      	ble.n	8009b5c <_strtod_l+0x434>
 8009b12:	2b16      	cmp	r3, #22
 8009b14:	dc0b      	bgt.n	8009b2e <_strtod_l+0x406>
 8009b16:	496d      	ldr	r1, [pc, #436]	; (8009ccc <_strtod_l+0x5a4>)
 8009b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b20:	4652      	mov	r2, sl
 8009b22:	465b      	mov	r3, fp
 8009b24:	f7f6 fd88 	bl	8000638 <__aeabi_dmul>
 8009b28:	4682      	mov	sl, r0
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	e640      	b.n	80097b0 <_strtod_l+0x88>
 8009b2e:	9a06      	ldr	r2, [sp, #24]
 8009b30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b34:	4293      	cmp	r3, r2
 8009b36:	db20      	blt.n	8009b7a <_strtod_l+0x452>
 8009b38:	4c64      	ldr	r4, [pc, #400]	; (8009ccc <_strtod_l+0x5a4>)
 8009b3a:	f1c5 050f 	rsb	r5, r5, #15
 8009b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4a:	f7f6 fd75 	bl	8000638 <__aeabi_dmul>
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	1b5d      	subs	r5, r3, r5
 8009b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b5a:	e7e3      	b.n	8009b24 <_strtod_l+0x3fc>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	3316      	adds	r3, #22
 8009b60:	db0b      	blt.n	8009b7a <_strtod_l+0x452>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	1b9e      	subs	r6, r3, r6
 8009b66:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <_strtod_l+0x5a4>)
 8009b68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b70:	4650      	mov	r0, sl
 8009b72:	4659      	mov	r1, fp
 8009b74:	f7f6 fe8a 	bl	800088c <__aeabi_ddiv>
 8009b78:	e7d6      	b.n	8009b28 <_strtod_l+0x400>
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	eba5 0808 	sub.w	r8, r5, r8
 8009b80:	4498      	add	r8, r3
 8009b82:	f1b8 0f00 	cmp.w	r8, #0
 8009b86:	dd74      	ble.n	8009c72 <_strtod_l+0x54a>
 8009b88:	f018 030f 	ands.w	r3, r8, #15
 8009b8c:	d00a      	beq.n	8009ba4 <_strtod_l+0x47c>
 8009b8e:	494f      	ldr	r1, [pc, #316]	; (8009ccc <_strtod_l+0x5a4>)
 8009b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b9c:	f7f6 fd4c 	bl	8000638 <__aeabi_dmul>
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	f038 080f 	bics.w	r8, r8, #15
 8009ba8:	d04f      	beq.n	8009c4a <_strtod_l+0x522>
 8009baa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bae:	dd22      	ble.n	8009bf6 <_strtod_l+0x4ce>
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	462e      	mov	r6, r5
 8009bb4:	9507      	str	r5, [sp, #28]
 8009bb6:	9505      	str	r5, [sp, #20]
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009cd4 <_strtod_l+0x5ac>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	f04f 0a00 	mov.w	sl, #0
 8009bc4:	9b07      	ldr	r3, [sp, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f43f adf2 	beq.w	80097b0 <_strtod_l+0x88>
 8009bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f001 fec6 	bl	800b960 <_Bfree>
 8009bd4:	9905      	ldr	r1, [sp, #20]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f001 fec2 	bl	800b960 <_Bfree>
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4620      	mov	r0, r4
 8009be0:	f001 febe 	bl	800b960 <_Bfree>
 8009be4:	9907      	ldr	r1, [sp, #28]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 feba 	bl	800b960 <_Bfree>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 feb6 	bl	800b960 <_Bfree>
 8009bf4:	e5dc      	b.n	80097b0 <_strtod_l+0x88>
 8009bf6:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <_strtod_l+0x5a8>)
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c00:	4650      	mov	r0, sl
 8009c02:	4659      	mov	r1, fp
 8009c04:	4699      	mov	r9, r3
 8009c06:	f1b8 0f01 	cmp.w	r8, #1
 8009c0a:	dc21      	bgt.n	8009c50 <_strtod_l+0x528>
 8009c0c:	b10b      	cbz	r3, 8009c12 <_strtod_l+0x4ea>
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <_strtod_l+0x5a8>)
 8009c14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	465b      	mov	r3, fp
 8009c20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <_strtod_l+0x5ac>)
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	492a      	ldr	r1, [pc, #168]	; (8009cd8 <_strtod_l+0x5b0>)
 8009c30:	428b      	cmp	r3, r1
 8009c32:	4682      	mov	sl, r0
 8009c34:	d8bc      	bhi.n	8009bb0 <_strtod_l+0x488>
 8009c36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	bf86      	itte	hi
 8009c3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009cdc <_strtod_l+0x5b4>
 8009c42:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	e084      	b.n	8009d5a <_strtod_l+0x632>
 8009c50:	f018 0f01 	tst.w	r8, #1
 8009c54:	d005      	beq.n	8009c62 <_strtod_l+0x53a>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fcec 	bl	8000638 <__aeabi_dmul>
 8009c60:	2301      	movs	r3, #1
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	3208      	adds	r2, #8
 8009c66:	f109 0901 	add.w	r9, r9, #1
 8009c6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c6e:	9204      	str	r2, [sp, #16]
 8009c70:	e7c9      	b.n	8009c06 <_strtod_l+0x4de>
 8009c72:	d0ea      	beq.n	8009c4a <_strtod_l+0x522>
 8009c74:	f1c8 0800 	rsb	r8, r8, #0
 8009c78:	f018 020f 	ands.w	r2, r8, #15
 8009c7c:	d00a      	beq.n	8009c94 <_strtod_l+0x56c>
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <_strtod_l+0x5a4>)
 8009c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c84:	4650      	mov	r0, sl
 8009c86:	4659      	mov	r1, fp
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fdfe 	bl	800088c <__aeabi_ddiv>
 8009c90:	4682      	mov	sl, r0
 8009c92:	468b      	mov	fp, r1
 8009c94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c98:	d0d7      	beq.n	8009c4a <_strtod_l+0x522>
 8009c9a:	f1b8 0f1f 	cmp.w	r8, #31
 8009c9e:	dd1f      	ble.n	8009ce0 <_strtod_l+0x5b8>
 8009ca0:	2500      	movs	r5, #0
 8009ca2:	462e      	mov	r6, r5
 8009ca4:	9507      	str	r5, [sp, #28]
 8009ca6:	9505      	str	r5, [sp, #20]
 8009ca8:	2322      	movs	r3, #34	; 0x22
 8009caa:	f04f 0a00 	mov.w	sl, #0
 8009cae:	f04f 0b00 	mov.w	fp, #0
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	e786      	b.n	8009bc4 <_strtod_l+0x49c>
 8009cb6:	bf00      	nop
 8009cb8:	0800dac9 	.word	0x0800dac9
 8009cbc:	0800db08 	.word	0x0800db08
 8009cc0:	0800dac1 	.word	0x0800dac1
 8009cc4:	0800dc4c 	.word	0x0800dc4c
 8009cc8:	0800df13 	.word	0x0800df13
 8009ccc:	0800ddd8 	.word	0x0800ddd8
 8009cd0:	0800ddb0 	.word	0x0800ddb0
 8009cd4:	7ff00000 	.word	0x7ff00000
 8009cd8:	7ca00000 	.word	0x7ca00000
 8009cdc:	7fefffff 	.word	0x7fefffff
 8009ce0:	f018 0310 	ands.w	r3, r8, #16
 8009ce4:	bf18      	it	ne
 8009ce6:	236a      	movne	r3, #106	; 0x6a
 8009ce8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a098 <_strtod_l+0x970>
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	4650      	mov	r0, sl
 8009cf0:	4659      	mov	r1, fp
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f018 0f01 	tst.w	r8, #1
 8009cf8:	d004      	beq.n	8009d04 <_strtod_l+0x5dc>
 8009cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009cfe:	f7f6 fc9b 	bl	8000638 <__aeabi_dmul>
 8009d02:	2301      	movs	r3, #1
 8009d04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d08:	f109 0908 	add.w	r9, r9, #8
 8009d0c:	d1f2      	bne.n	8009cf4 <_strtod_l+0x5cc>
 8009d0e:	b10b      	cbz	r3, 8009d14 <_strtod_l+0x5ec>
 8009d10:	4682      	mov	sl, r0
 8009d12:	468b      	mov	fp, r1
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	b1c3      	cbz	r3, 8009d4a <_strtod_l+0x622>
 8009d18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4659      	mov	r1, fp
 8009d24:	dd11      	ble.n	8009d4a <_strtod_l+0x622>
 8009d26:	2b1f      	cmp	r3, #31
 8009d28:	f340 8124 	ble.w	8009f74 <_strtod_l+0x84c>
 8009d2c:	2b34      	cmp	r3, #52	; 0x34
 8009d2e:	bfde      	ittt	le
 8009d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d34:	f04f 33ff 	movle.w	r3, #4294967295
 8009d38:	fa03 f202 	lslle.w	r2, r3, r2
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	bfcc      	ite	gt
 8009d42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d46:	ea02 0b01 	andle.w	fp, r2, r1
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	f7f6 fed9 	bl	8000b08 <__aeabi_dcmpeq>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1a2      	bne.n	8009ca0 <_strtod_l+0x578>
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	9908      	ldr	r1, [sp, #32]
 8009d60:	462b      	mov	r3, r5
 8009d62:	463a      	mov	r2, r7
 8009d64:	4620      	mov	r0, r4
 8009d66:	f001 fe63 	bl	800ba30 <__s2b>
 8009d6a:	9007      	str	r0, [sp, #28]
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f43f af1f 	beq.w	8009bb0 <_strtod_l+0x488>
 8009d72:	9b05      	ldr	r3, [sp, #20]
 8009d74:	1b9e      	subs	r6, r3, r6
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfb4      	ite	lt
 8009d7c:	4633      	movlt	r3, r6
 8009d7e:	2300      	movge	r3, #0
 8009d80:	930c      	str	r3, [sp, #48]	; 0x30
 8009d82:	9b06      	ldr	r3, [sp, #24]
 8009d84:	2500      	movs	r5, #0
 8009d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d8c:	462e      	mov	r6, r5
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	4620      	mov	r0, r4
 8009d92:	6859      	ldr	r1, [r3, #4]
 8009d94:	f001 fda4 	bl	800b8e0 <_Balloc>
 8009d98:	9005      	str	r0, [sp, #20]
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f af0c 	beq.w	8009bb8 <_strtod_l+0x490>
 8009da0:	9b07      	ldr	r3, [sp, #28]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	3202      	adds	r2, #2
 8009da6:	f103 010c 	add.w	r1, r3, #12
 8009daa:	0092      	lsls	r2, r2, #2
 8009dac:	300c      	adds	r0, #12
 8009dae:	f001 fd89 	bl	800b8c4 <memcpy>
 8009db2:	ec4b ab10 	vmov	d0, sl, fp
 8009db6:	aa1a      	add	r2, sp, #104	; 0x68
 8009db8:	a919      	add	r1, sp, #100	; 0x64
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f002 f97e 	bl	800c0bc <__d2b>
 8009dc0:	ec4b ab18 	vmov	d8, sl, fp
 8009dc4:	9018      	str	r0, [sp, #96]	; 0x60
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f aef6 	beq.w	8009bb8 <_strtod_l+0x490>
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f001 fec8 	bl	800bb64 <__i2b>
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f aeee 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dde:	9904      	ldr	r1, [sp, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfab      	itete	ge
 8009de4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009de6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009de8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009dea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009dee:	bfac      	ite	ge
 8009df0:	eb03 0902 	addge.w	r9, r3, r2
 8009df4:	1ad7      	sublt	r7, r2, r3
 8009df6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009df8:	eba3 0801 	sub.w	r8, r3, r1
 8009dfc:	4490      	add	r8, r2
 8009dfe:	4ba1      	ldr	r3, [pc, #644]	; (800a084 <_strtod_l+0x95c>)
 8009e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e04:	4598      	cmp	r8, r3
 8009e06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e0a:	f280 80c7 	bge.w	8009f9c <_strtod_l+0x874>
 8009e0e:	eba3 0308 	sub.w	r3, r3, r8
 8009e12:	2b1f      	cmp	r3, #31
 8009e14:	eba2 0203 	sub.w	r2, r2, r3
 8009e18:	f04f 0101 	mov.w	r1, #1
 8009e1c:	f300 80b1 	bgt.w	8009f82 <_strtod_l+0x85a>
 8009e20:	fa01 f303 	lsl.w	r3, r1, r3
 8009e24:	930d      	str	r3, [sp, #52]	; 0x34
 8009e26:	2300      	movs	r3, #0
 8009e28:	9308      	str	r3, [sp, #32]
 8009e2a:	eb09 0802 	add.w	r8, r9, r2
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	45c1      	cmp	r9, r8
 8009e32:	4417      	add	r7, r2
 8009e34:	441f      	add	r7, r3
 8009e36:	464b      	mov	r3, r9
 8009e38:	bfa8      	it	ge
 8009e3a:	4643      	movge	r3, r8
 8009e3c:	42bb      	cmp	r3, r7
 8009e3e:	bfa8      	it	ge
 8009e40:	463b      	movge	r3, r7
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	bfc2      	ittt	gt
 8009e46:	eba8 0803 	subgt.w	r8, r8, r3
 8009e4a:	1aff      	subgt	r7, r7, r3
 8009e4c:	eba9 0903 	subgt.w	r9, r9, r3
 8009e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd17      	ble.n	8009e86 <_strtod_l+0x75e>
 8009e56:	4631      	mov	r1, r6
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f001 ff42 	bl	800bce4 <__pow5mult>
 8009e60:	4606      	mov	r6, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aea8 	beq.w	8009bb8 <_strtod_l+0x490>
 8009e68:	4601      	mov	r1, r0
 8009e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f001 fe8f 	bl	800bb90 <__multiply>
 8009e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f43f ae9f 	beq.w	8009bb8 <_strtod_l+0x490>
 8009e7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f001 fd6f 	bl	800b960 <_Bfree>
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	9318      	str	r3, [sp, #96]	; 0x60
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	f300 808c 	bgt.w	8009fa6 <_strtod_l+0x87e>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dd08      	ble.n	8009ea6 <_strtod_l+0x77e>
 8009e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e96:	9905      	ldr	r1, [sp, #20]
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 ff23 	bl	800bce4 <__pow5mult>
 8009e9e:	9005      	str	r0, [sp, #20]
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f ae89 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	dd08      	ble.n	8009ebc <_strtod_l+0x794>
 8009eaa:	9905      	ldr	r1, [sp, #20]
 8009eac:	463a      	mov	r2, r7
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f001 ff72 	bl	800bd98 <__lshift>
 8009eb4:	9005      	str	r0, [sp, #20]
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f ae7e 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x7ac>
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 ff66 	bl	800bd98 <__lshift>
 8009ecc:	4606      	mov	r6, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae72 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ed4:	9a05      	ldr	r2, [sp, #20]
 8009ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f001 ffe9 	bl	800beb0 <__mdiff>
 8009ede:	4605      	mov	r5, r0
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	f43f ae69 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ee6:	68c3      	ldr	r3, [r0, #12]
 8009ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eea:	2300      	movs	r3, #0
 8009eec:	60c3      	str	r3, [r0, #12]
 8009eee:	4631      	mov	r1, r6
 8009ef0:	f001 ffc2 	bl	800be78 <__mcmp>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	da60      	bge.n	8009fba <_strtod_l+0x892>
 8009ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009efa:	ea53 030a 	orrs.w	r3, r3, sl
 8009efe:	f040 8082 	bne.w	800a006 <_strtod_l+0x8de>
 8009f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d17d      	bne.n	800a006 <_strtod_l+0x8de>
 8009f0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f0e:	0d1b      	lsrs	r3, r3, #20
 8009f10:	051b      	lsls	r3, r3, #20
 8009f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f16:	d976      	bls.n	800a006 <_strtod_l+0x8de>
 8009f18:	696b      	ldr	r3, [r5, #20]
 8009f1a:	b913      	cbnz	r3, 8009f22 <_strtod_l+0x7fa>
 8009f1c:	692b      	ldr	r3, [r5, #16]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	dd71      	ble.n	800a006 <_strtod_l+0x8de>
 8009f22:	4629      	mov	r1, r5
 8009f24:	2201      	movs	r2, #1
 8009f26:	4620      	mov	r0, r4
 8009f28:	f001 ff36 	bl	800bd98 <__lshift>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4605      	mov	r5, r0
 8009f30:	f001 ffa2 	bl	800be78 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dd66      	ble.n	800a006 <_strtod_l+0x8de>
 8009f38:	9904      	ldr	r1, [sp, #16]
 8009f3a:	4a53      	ldr	r2, [pc, #332]	; (800a088 <_strtod_l+0x960>)
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	f000 8081 	beq.w	800a046 <_strtod_l+0x91e>
 8009f44:	ea02 010b 	and.w	r1, r2, fp
 8009f48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f4c:	dc7b      	bgt.n	800a046 <_strtod_l+0x91e>
 8009f4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f52:	f77f aea9 	ble.w	8009ca8 <_strtod_l+0x580>
 8009f56:	4b4d      	ldr	r3, [pc, #308]	; (800a08c <_strtod_l+0x964>)
 8009f58:	4650      	mov	r0, sl
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f7f6 fb6b 	bl	8000638 <__aeabi_dmul>
 8009f62:	460b      	mov	r3, r1
 8009f64:	4303      	orrs	r3, r0
 8009f66:	bf08      	it	eq
 8009f68:	2322      	moveq	r3, #34	; 0x22
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	468b      	mov	fp, r1
 8009f6e:	bf08      	it	eq
 8009f70:	6023      	streq	r3, [r4, #0]
 8009f72:	e62b      	b.n	8009bcc <_strtod_l+0x4a4>
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295
 8009f78:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f80:	e6e3      	b.n	8009d4a <_strtod_l+0x622>
 8009f82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f92:	fa01 f308 	lsl.w	r3, r1, r8
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	910d      	str	r1, [sp, #52]	; 0x34
 8009f9a:	e746      	b.n	8009e2a <_strtod_l+0x702>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9308      	str	r3, [sp, #32]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fa4:	e741      	b.n	8009e2a <_strtod_l+0x702>
 8009fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fa8:	4642      	mov	r2, r8
 8009faa:	4620      	mov	r0, r4
 8009fac:	f001 fef4 	bl	800bd98 <__lshift>
 8009fb0:	9018      	str	r0, [sp, #96]	; 0x60
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f47f af6b 	bne.w	8009e8e <_strtod_l+0x766>
 8009fb8:	e5fe      	b.n	8009bb8 <_strtod_l+0x490>
 8009fba:	465f      	mov	r7, fp
 8009fbc:	d16e      	bne.n	800a09c <_strtod_l+0x974>
 8009fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc4:	b342      	cbz	r2, 800a018 <_strtod_l+0x8f0>
 8009fc6:	4a32      	ldr	r2, [pc, #200]	; (800a090 <_strtod_l+0x968>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d128      	bne.n	800a01e <_strtod_l+0x8f6>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4651      	mov	r1, sl
 8009fd0:	b1eb      	cbz	r3, 800a00e <_strtod_l+0x8e6>
 8009fd2:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <_strtod_l+0x960>)
 8009fd4:	403b      	ands	r3, r7
 8009fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295
 8009fde:	d819      	bhi.n	800a014 <_strtod_l+0x8ec>
 8009fe0:	0d1b      	lsrs	r3, r3, #20
 8009fe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d117      	bne.n	800a01e <_strtod_l+0x8f6>
 8009fee:	4b29      	ldr	r3, [pc, #164]	; (800a094 <_strtod_l+0x96c>)
 8009ff0:	429f      	cmp	r7, r3
 8009ff2:	d102      	bne.n	8009ffa <_strtod_l+0x8d2>
 8009ff4:	3101      	adds	r1, #1
 8009ff6:	f43f addf 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <_strtod_l+0x960>)
 8009ffc:	403b      	ands	r3, r7
 8009ffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a002:	f04f 0a00 	mov.w	sl, #0
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1a4      	bne.n	8009f56 <_strtod_l+0x82e>
 800a00c:	e5de      	b.n	8009bcc <_strtod_l+0x4a4>
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
 800a012:	e7ea      	b.n	8009fea <_strtod_l+0x8c2>
 800a014:	4613      	mov	r3, r2
 800a016:	e7e8      	b.n	8009fea <_strtod_l+0x8c2>
 800a018:	ea53 030a 	orrs.w	r3, r3, sl
 800a01c:	d08c      	beq.n	8009f38 <_strtod_l+0x810>
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	b1db      	cbz	r3, 800a05a <_strtod_l+0x932>
 800a022:	423b      	tst	r3, r7
 800a024:	d0ef      	beq.n	800a006 <_strtod_l+0x8de>
 800a026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a028:	9a04      	ldr	r2, [sp, #16]
 800a02a:	4650      	mov	r0, sl
 800a02c:	4659      	mov	r1, fp
 800a02e:	b1c3      	cbz	r3, 800a062 <_strtod_l+0x93a>
 800a030:	f7ff fb5b 	bl	80096ea <sulp>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	ec51 0b18 	vmov	r0, r1, d8
 800a03c:	f7f6 f946 	bl	80002cc <__adddf3>
 800a040:	4682      	mov	sl, r0
 800a042:	468b      	mov	fp, r1
 800a044:	e7df      	b.n	800a006 <_strtod_l+0x8de>
 800a046:	4013      	ands	r3, r2
 800a048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a04c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a050:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a054:	f04f 3aff 	mov.w	sl, #4294967295
 800a058:	e7d5      	b.n	800a006 <_strtod_l+0x8de>
 800a05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a05c:	ea13 0f0a 	tst.w	r3, sl
 800a060:	e7e0      	b.n	800a024 <_strtod_l+0x8fc>
 800a062:	f7ff fb42 	bl	80096ea <sulp>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	ec51 0b18 	vmov	r0, r1, d8
 800a06e:	f7f6 f92b 	bl	80002c8 <__aeabi_dsub>
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4682      	mov	sl, r0
 800a078:	468b      	mov	fp, r1
 800a07a:	f7f6 fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0c1      	beq.n	800a006 <_strtod_l+0x8de>
 800a082:	e611      	b.n	8009ca8 <_strtod_l+0x580>
 800a084:	fffffc02 	.word	0xfffffc02
 800a088:	7ff00000 	.word	0x7ff00000
 800a08c:	39500000 	.word	0x39500000
 800a090:	000fffff 	.word	0x000fffff
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800db20 	.word	0x0800db20
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f002 f868 	bl	800c174 <__ratio>
 800a0a4:	ec59 8b10 	vmov	r8, r9, d0
 800a0a8:	ee10 0a10 	vmov	r0, s0
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 fd3c 	bl	8000b30 <__aeabi_dcmple>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d07a      	beq.n	800a1b2 <_strtod_l+0xa8a>
 800a0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d04a      	beq.n	800a158 <_strtod_l+0xa30>
 800a0c2:	4b95      	ldr	r3, [pc, #596]	; (800a318 <_strtod_l+0xbf0>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a318 <_strtod_l+0xbf0>
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	4b92      	ldr	r3, [pc, #584]	; (800a31c <_strtod_l+0xbf4>)
 800a0d4:	403b      	ands	r3, r7
 800a0d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0da:	4b91      	ldr	r3, [pc, #580]	; (800a320 <_strtod_l+0xbf8>)
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f040 80b0 	bne.w	800a242 <_strtod_l+0xb1a>
 800a0e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a0ea:	ec4b ab10 	vmov	d0, sl, fp
 800a0ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0f2:	f001 ff67 	bl	800bfc4 <__ulp>
 800a0f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0fa:	ec53 2b10 	vmov	r2, r3, d0
 800a0fe:	f7f6 fa9b 	bl	8000638 <__aeabi_dmul>
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	f7f6 f8e1 	bl	80002cc <__adddf3>
 800a10a:	460b      	mov	r3, r1
 800a10c:	4983      	ldr	r1, [pc, #524]	; (800a31c <_strtod_l+0xbf4>)
 800a10e:	4a85      	ldr	r2, [pc, #532]	; (800a324 <_strtod_l+0xbfc>)
 800a110:	4019      	ands	r1, r3
 800a112:	4291      	cmp	r1, r2
 800a114:	4682      	mov	sl, r0
 800a116:	d960      	bls.n	800a1da <_strtod_l+0xab2>
 800a118:	ee18 3a90 	vmov	r3, s17
 800a11c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a120:	4293      	cmp	r3, r2
 800a122:	d104      	bne.n	800a12e <_strtod_l+0xa06>
 800a124:	ee18 3a10 	vmov	r3, s16
 800a128:	3301      	adds	r3, #1
 800a12a:	f43f ad45 	beq.w	8009bb8 <_strtod_l+0x490>
 800a12e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a330 <_strtod_l+0xc08>
 800a132:	f04f 3aff 	mov.w	sl, #4294967295
 800a136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a138:	4620      	mov	r0, r4
 800a13a:	f001 fc11 	bl	800b960 <_Bfree>
 800a13e:	9905      	ldr	r1, [sp, #20]
 800a140:	4620      	mov	r0, r4
 800a142:	f001 fc0d 	bl	800b960 <_Bfree>
 800a146:	4631      	mov	r1, r6
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 fc09 	bl	800b960 <_Bfree>
 800a14e:	4629      	mov	r1, r5
 800a150:	4620      	mov	r0, r4
 800a152:	f001 fc05 	bl	800b960 <_Bfree>
 800a156:	e61a      	b.n	8009d8e <_strtod_l+0x666>
 800a158:	f1ba 0f00 	cmp.w	sl, #0
 800a15c:	d11b      	bne.n	800a196 <_strtod_l+0xa6e>
 800a15e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a162:	b9f3      	cbnz	r3, 800a1a2 <_strtod_l+0xa7a>
 800a164:	4b6c      	ldr	r3, [pc, #432]	; (800a318 <_strtod_l+0xbf0>)
 800a166:	2200      	movs	r2, #0
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 800a170:	b9d0      	cbnz	r0, 800a1a8 <_strtod_l+0xa80>
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	4b6c      	ldr	r3, [pc, #432]	; (800a328 <_strtod_l+0xc00>)
 800a178:	2200      	movs	r2, #0
 800a17a:	f7f6 fa5d 	bl	8000638 <__aeabi_dmul>
 800a17e:	4680      	mov	r8, r0
 800a180:	4689      	mov	r9, r1
 800a182:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a186:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a18a:	9315      	str	r3, [sp, #84]	; 0x54
 800a18c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a194:	e79d      	b.n	800a0d2 <_strtod_l+0x9aa>
 800a196:	f1ba 0f01 	cmp.w	sl, #1
 800a19a:	d102      	bne.n	800a1a2 <_strtod_l+0xa7a>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f43f ad83 	beq.w	8009ca8 <_strtod_l+0x580>
 800a1a2:	4b62      	ldr	r3, [pc, #392]	; (800a32c <_strtod_l+0xc04>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	e78e      	b.n	800a0c6 <_strtod_l+0x99e>
 800a1a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a328 <_strtod_l+0xc00>
 800a1ac:	f04f 0800 	mov.w	r8, #0
 800a1b0:	e7e7      	b.n	800a182 <_strtod_l+0xa5a>
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	; (800a328 <_strtod_l+0xc00>)
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7f6 fa3d 	bl	8000638 <__aeabi_dmul>
 800a1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4689      	mov	r9, r1
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_strtod_l+0xaac>
 800a1c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ca:	900e      	str	r0, [sp, #56]	; 0x38
 800a1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a1d2:	e7dd      	b.n	800a190 <_strtod_l+0xa68>
 800a1d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a1d8:	e7f9      	b.n	800a1ce <_strtod_l+0xaa6>
 800a1da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1a8      	bne.n	800a136 <_strtod_l+0xa0e>
 800a1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ea:	0d1b      	lsrs	r3, r3, #20
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d1a1      	bne.n	800a136 <_strtod_l+0xa0e>
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	f7f6 fd7f 	bl	8000cf8 <__aeabi_d2lz>
 800a1fa:	f7f6 f9ef 	bl	80005dc <__aeabi_l2d>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 f85f 	bl	80002c8 <__aeabi_dsub>
 800a20a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a20c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a210:	ea43 030a 	orr.w	r3, r3, sl
 800a214:	4313      	orrs	r3, r2
 800a216:	4680      	mov	r8, r0
 800a218:	4689      	mov	r9, r1
 800a21a:	d055      	beq.n	800a2c8 <_strtod_l+0xba0>
 800a21c:	a336      	add	r3, pc, #216	; (adr r3, 800a2f8 <_strtod_l+0xbd0>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f7f6 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 800a226:	2800      	cmp	r0, #0
 800a228:	f47f acd0 	bne.w	8009bcc <_strtod_l+0x4a4>
 800a22c:	a334      	add	r3, pc, #208	; (adr r3, 800a300 <_strtod_l+0xbd8>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 fc8f 	bl	8000b58 <__aeabi_dcmpgt>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	f43f af7b 	beq.w	800a136 <_strtod_l+0xa0e>
 800a240:	e4c4      	b.n	8009bcc <_strtod_l+0x4a4>
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	b333      	cbz	r3, 800a294 <_strtod_l+0xb6c>
 800a246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a248:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a24c:	d822      	bhi.n	800a294 <_strtod_l+0xb6c>
 800a24e:	a32e      	add	r3, pc, #184	; (adr r3, 800a308 <_strtod_l+0xbe0>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 fc6a 	bl	8000b30 <__aeabi_dcmple>
 800a25c:	b1a0      	cbz	r0, 800a288 <_strtod_l+0xb60>
 800a25e:	4649      	mov	r1, r9
 800a260:	4640      	mov	r0, r8
 800a262:	f7f6 fcc1 	bl	8000be8 <__aeabi_d2uiz>
 800a266:	2801      	cmp	r0, #1
 800a268:	bf38      	it	cc
 800a26a:	2001      	movcc	r0, #1
 800a26c:	f7f6 f96a 	bl	8000544 <__aeabi_ui2d>
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	4680      	mov	r8, r0
 800a274:	4689      	mov	r9, r1
 800a276:	bb23      	cbnz	r3, 800a2c2 <_strtod_l+0xb9a>
 800a278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a27c:	9010      	str	r0, [sp, #64]	; 0x40
 800a27e:	9311      	str	r3, [sp, #68]	; 0x44
 800a280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a28c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
 800a294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a298:	eeb0 0a48 	vmov.f32	s0, s16
 800a29c:	eef0 0a68 	vmov.f32	s1, s17
 800a2a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2a4:	f001 fe8e 	bl	800bfc4 <__ulp>
 800a2a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2ac:	ec53 2b10 	vmov	r2, r3, d0
 800a2b0:	f7f6 f9c2 	bl	8000638 <__aeabi_dmul>
 800a2b4:	ec53 2b18 	vmov	r2, r3, d8
 800a2b8:	f7f6 f808 	bl	80002cc <__adddf3>
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	e78d      	b.n	800a1de <_strtod_l+0xab6>
 800a2c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a2c6:	e7db      	b.n	800a280 <_strtod_l+0xb58>
 800a2c8:	a311      	add	r3, pc, #68	; (adr r3, 800a310 <_strtod_l+0xbe8>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 fc25 	bl	8000b1c <__aeabi_dcmplt>
 800a2d2:	e7b2      	b.n	800a23a <_strtod_l+0xb12>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	f7ff ba6b 	b.w	80097b8 <_strtod_l+0x90>
 800a2e2:	2a65      	cmp	r2, #101	; 0x65
 800a2e4:	f43f ab5f 	beq.w	80099a6 <_strtod_l+0x27e>
 800a2e8:	2a45      	cmp	r2, #69	; 0x45
 800a2ea:	f43f ab5c 	beq.w	80099a6 <_strtod_l+0x27e>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f7ff bb94 	b.w	8009a1c <_strtod_l+0x2f4>
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	94a03595 	.word	0x94a03595
 800a2fc:	3fdfffff 	.word	0x3fdfffff
 800a300:	35afe535 	.word	0x35afe535
 800a304:	3fe00000 	.word	0x3fe00000
 800a308:	ffc00000 	.word	0xffc00000
 800a30c:	41dfffff 	.word	0x41dfffff
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fcfffff 	.word	0x3fcfffff
 800a318:	3ff00000 	.word	0x3ff00000
 800a31c:	7ff00000 	.word	0x7ff00000
 800a320:	7fe00000 	.word	0x7fe00000
 800a324:	7c9fffff 	.word	0x7c9fffff
 800a328:	3fe00000 	.word	0x3fe00000
 800a32c:	bff00000 	.word	0xbff00000
 800a330:	7fefffff 	.word	0x7fefffff

0800a334 <_strtod_r>:
 800a334:	4b01      	ldr	r3, [pc, #4]	; (800a33c <_strtod_r+0x8>)
 800a336:	f7ff b9f7 	b.w	8009728 <_strtod_l>
 800a33a:	bf00      	nop
 800a33c:	20000110 	.word	0x20000110

0800a340 <_strtol_l.constprop.0>:
 800a340:	2b01      	cmp	r3, #1
 800a342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a346:	d001      	beq.n	800a34c <_strtol_l.constprop.0+0xc>
 800a348:	2b24      	cmp	r3, #36	; 0x24
 800a34a:	d906      	bls.n	800a35a <_strtol_l.constprop.0+0x1a>
 800a34c:	f7fe fa76 	bl	800883c <__errno>
 800a350:	2316      	movs	r3, #22
 800a352:	6003      	str	r3, [r0, #0]
 800a354:	2000      	movs	r0, #0
 800a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a440 <_strtol_l.constprop.0+0x100>
 800a35e:	460d      	mov	r5, r1
 800a360:	462e      	mov	r6, r5
 800a362:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a366:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a36a:	f017 0708 	ands.w	r7, r7, #8
 800a36e:	d1f7      	bne.n	800a360 <_strtol_l.constprop.0+0x20>
 800a370:	2c2d      	cmp	r4, #45	; 0x2d
 800a372:	d132      	bne.n	800a3da <_strtol_l.constprop.0+0x9a>
 800a374:	782c      	ldrb	r4, [r5, #0]
 800a376:	2701      	movs	r7, #1
 800a378:	1cb5      	adds	r5, r6, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d05b      	beq.n	800a436 <_strtol_l.constprop.0+0xf6>
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d109      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a382:	2c30      	cmp	r4, #48	; 0x30
 800a384:	d107      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a386:	782c      	ldrb	r4, [r5, #0]
 800a388:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a38c:	2c58      	cmp	r4, #88	; 0x58
 800a38e:	d14d      	bne.n	800a42c <_strtol_l.constprop.0+0xec>
 800a390:	786c      	ldrb	r4, [r5, #1]
 800a392:	2310      	movs	r3, #16
 800a394:	3502      	adds	r5, #2
 800a396:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a39a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a39e:	f04f 0c00 	mov.w	ip, #0
 800a3a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a3a6:	4666      	mov	r6, ip
 800a3a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a3b0:	f1be 0f09 	cmp.w	lr, #9
 800a3b4:	d816      	bhi.n	800a3e4 <_strtol_l.constprop.0+0xa4>
 800a3b6:	4674      	mov	r4, lr
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	dd24      	ble.n	800a406 <_strtol_l.constprop.0+0xc6>
 800a3bc:	f1bc 0f00 	cmp.w	ip, #0
 800a3c0:	db1e      	blt.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3c2:	45b1      	cmp	r9, r6
 800a3c4:	d31c      	bcc.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3c6:	d101      	bne.n	800a3cc <_strtol_l.constprop.0+0x8c>
 800a3c8:	45a2      	cmp	sl, r4
 800a3ca:	db19      	blt.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3cc:	fb06 4603 	mla	r6, r6, r3, r4
 800a3d0:	f04f 0c01 	mov.w	ip, #1
 800a3d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3d8:	e7e8      	b.n	800a3ac <_strtol_l.constprop.0+0x6c>
 800a3da:	2c2b      	cmp	r4, #43	; 0x2b
 800a3dc:	bf04      	itt	eq
 800a3de:	782c      	ldrbeq	r4, [r5, #0]
 800a3e0:	1cb5      	addeq	r5, r6, #2
 800a3e2:	e7ca      	b.n	800a37a <_strtol_l.constprop.0+0x3a>
 800a3e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a3e8:	f1be 0f19 	cmp.w	lr, #25
 800a3ec:	d801      	bhi.n	800a3f2 <_strtol_l.constprop.0+0xb2>
 800a3ee:	3c37      	subs	r4, #55	; 0x37
 800a3f0:	e7e2      	b.n	800a3b8 <_strtol_l.constprop.0+0x78>
 800a3f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a3f6:	f1be 0f19 	cmp.w	lr, #25
 800a3fa:	d804      	bhi.n	800a406 <_strtol_l.constprop.0+0xc6>
 800a3fc:	3c57      	subs	r4, #87	; 0x57
 800a3fe:	e7db      	b.n	800a3b8 <_strtol_l.constprop.0+0x78>
 800a400:	f04f 3cff 	mov.w	ip, #4294967295
 800a404:	e7e6      	b.n	800a3d4 <_strtol_l.constprop.0+0x94>
 800a406:	f1bc 0f00 	cmp.w	ip, #0
 800a40a:	da05      	bge.n	800a418 <_strtol_l.constprop.0+0xd8>
 800a40c:	2322      	movs	r3, #34	; 0x22
 800a40e:	6003      	str	r3, [r0, #0]
 800a410:	4646      	mov	r6, r8
 800a412:	b942      	cbnz	r2, 800a426 <_strtol_l.constprop.0+0xe6>
 800a414:	4630      	mov	r0, r6
 800a416:	e79e      	b.n	800a356 <_strtol_l.constprop.0+0x16>
 800a418:	b107      	cbz	r7, 800a41c <_strtol_l.constprop.0+0xdc>
 800a41a:	4276      	negs	r6, r6
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	d0f9      	beq.n	800a414 <_strtol_l.constprop.0+0xd4>
 800a420:	f1bc 0f00 	cmp.w	ip, #0
 800a424:	d000      	beq.n	800a428 <_strtol_l.constprop.0+0xe8>
 800a426:	1e69      	subs	r1, r5, #1
 800a428:	6011      	str	r1, [r2, #0]
 800a42a:	e7f3      	b.n	800a414 <_strtol_l.constprop.0+0xd4>
 800a42c:	2430      	movs	r4, #48	; 0x30
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1b1      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a432:	2308      	movs	r3, #8
 800a434:	e7af      	b.n	800a396 <_strtol_l.constprop.0+0x56>
 800a436:	2c30      	cmp	r4, #48	; 0x30
 800a438:	d0a5      	beq.n	800a386 <_strtol_l.constprop.0+0x46>
 800a43a:	230a      	movs	r3, #10
 800a43c:	e7ab      	b.n	800a396 <_strtol_l.constprop.0+0x56>
 800a43e:	bf00      	nop
 800a440:	0800db49 	.word	0x0800db49

0800a444 <_strtol_r>:
 800a444:	f7ff bf7c 	b.w	800a340 <_strtol_l.constprop.0>

0800a448 <_write_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	; (800a468 <_write_r+0x20>)
 800a44c:	4604      	mov	r4, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f8 fd69 	bl	8002f2e <_write>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_write_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_write_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20000544 	.word	0x20000544

0800a46c <_close_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d06      	ldr	r5, [pc, #24]	; (800a488 <_close_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	f7f8 fd75 	bl	8002f66 <_close>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_close_r+0x1a>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_close_r+0x1a>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000544 	.word	0x20000544

0800a48c <quorem>:
 800a48c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	6903      	ldr	r3, [r0, #16]
 800a492:	690c      	ldr	r4, [r1, #16]
 800a494:	42a3      	cmp	r3, r4
 800a496:	4607      	mov	r7, r0
 800a498:	f2c0 8081 	blt.w	800a59e <quorem+0x112>
 800a49c:	3c01      	subs	r4, #1
 800a49e:	f101 0814 	add.w	r8, r1, #20
 800a4a2:	f100 0514 	add.w	r5, r0, #20
 800a4a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4c4:	d331      	bcc.n	800a52a <quorem+0x9e>
 800a4c6:	f04f 0e00 	mov.w	lr, #0
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	46ac      	mov	ip, r5
 800a4ce:	46f2      	mov	sl, lr
 800a4d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4d4:	b293      	uxth	r3, r2
 800a4d6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e4:	f8dc a000 	ldr.w	sl, [ip]
 800a4e8:	0c12      	lsrs	r2, r2, #16
 800a4ea:	fa13 f38a 	uxtah	r3, r3, sl
 800a4ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a504:	f8bd 3000 	ldrh.w	r3, [sp]
 800a508:	4581      	cmp	r9, r0
 800a50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a50e:	f84c 3b04 	str.w	r3, [ip], #4
 800a512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a516:	d2db      	bcs.n	800a4d0 <quorem+0x44>
 800a518:	f855 300b 	ldr.w	r3, [r5, fp]
 800a51c:	b92b      	cbnz	r3, 800a52a <quorem+0x9e>
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	3b04      	subs	r3, #4
 800a522:	429d      	cmp	r5, r3
 800a524:	461a      	mov	r2, r3
 800a526:	d32e      	bcc.n	800a586 <quorem+0xfa>
 800a528:	613c      	str	r4, [r7, #16]
 800a52a:	4638      	mov	r0, r7
 800a52c:	f001 fca4 	bl	800be78 <__mcmp>
 800a530:	2800      	cmp	r0, #0
 800a532:	db24      	blt.n	800a57e <quorem+0xf2>
 800a534:	3601      	adds	r6, #1
 800a536:	4628      	mov	r0, r5
 800a538:	f04f 0c00 	mov.w	ip, #0
 800a53c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a540:	f8d0 e000 	ldr.w	lr, [r0]
 800a544:	b293      	uxth	r3, r2
 800a546:	ebac 0303 	sub.w	r3, ip, r3
 800a54a:	0c12      	lsrs	r2, r2, #16
 800a54c:	fa13 f38e 	uxtah	r3, r3, lr
 800a550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a558:	b29b      	uxth	r3, r3
 800a55a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55e:	45c1      	cmp	r9, r8
 800a560:	f840 3b04 	str.w	r3, [r0], #4
 800a564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a568:	d2e8      	bcs.n	800a53c <quorem+0xb0>
 800a56a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a56e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a572:	b922      	cbnz	r2, 800a57e <quorem+0xf2>
 800a574:	3b04      	subs	r3, #4
 800a576:	429d      	cmp	r5, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	d30a      	bcc.n	800a592 <quorem+0x106>
 800a57c:	613c      	str	r4, [r7, #16]
 800a57e:	4630      	mov	r0, r6
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	3b04      	subs	r3, #4
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	d1cc      	bne.n	800a528 <quorem+0x9c>
 800a58e:	3c01      	subs	r4, #1
 800a590:	e7c7      	b.n	800a522 <quorem+0x96>
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	3b04      	subs	r3, #4
 800a596:	2a00      	cmp	r2, #0
 800a598:	d1f0      	bne.n	800a57c <quorem+0xf0>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	e7eb      	b.n	800a576 <quorem+0xea>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e7ee      	b.n	800a580 <quorem+0xf4>
 800a5a2:	0000      	movs	r0, r0
 800a5a4:	0000      	movs	r0, r0
	...

0800a5a8 <_dtoa_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ed2d 8b04 	vpush	{d8-d9}
 800a5b0:	ec57 6b10 	vmov	r6, r7, d0
 800a5b4:	b093      	sub	sp, #76	; 0x4c
 800a5b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5bc:	9106      	str	r1, [sp, #24]
 800a5be:	ee10 aa10 	vmov	sl, s0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c8:	46bb      	mov	fp, r7
 800a5ca:	b975      	cbnz	r5, 800a5ea <_dtoa_r+0x42>
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	f001 f95f 	bl	800b890 <malloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5d6:	b920      	cbnz	r0, 800a5e2 <_dtoa_r+0x3a>
 800a5d8:	4ba7      	ldr	r3, [pc, #668]	; (800a878 <_dtoa_r+0x2d0>)
 800a5da:	21ea      	movs	r1, #234	; 0xea
 800a5dc:	48a7      	ldr	r0, [pc, #668]	; (800a87c <_dtoa_r+0x2d4>)
 800a5de:	f002 fcd7 	bl	800cf90 <__assert_func>
 800a5e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5e6:	6005      	str	r5, [r0, #0]
 800a5e8:	60c5      	str	r5, [r0, #12]
 800a5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	b151      	cbz	r1, 800a606 <_dtoa_r+0x5e>
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	604a      	str	r2, [r1, #4]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4093      	lsls	r3, r2
 800a5f8:	608b      	str	r3, [r1, #8]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 f9b0 	bl	800b960 <_Bfree>
 800a600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	1e3b      	subs	r3, r7, #0
 800a608:	bfaa      	itet	ge
 800a60a:	2300      	movge	r3, #0
 800a60c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a610:	f8c8 3000 	strge.w	r3, [r8]
 800a614:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <_dtoa_r+0x2d8>)
 800a616:	bfbc      	itt	lt
 800a618:	2201      	movlt	r2, #1
 800a61a:	f8c8 2000 	strlt.w	r2, [r8]
 800a61e:	ea33 030b 	bics.w	r3, r3, fp
 800a622:	d11b      	bne.n	800a65c <_dtoa_r+0xb4>
 800a624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a626:	f242 730f 	movw	r3, #9999	; 0x270f
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a630:	4333      	orrs	r3, r6
 800a632:	f000 8592 	beq.w	800b15a <_dtoa_r+0xbb2>
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	b963      	cbnz	r3, 800a654 <_dtoa_r+0xac>
 800a63a:	4b92      	ldr	r3, [pc, #584]	; (800a884 <_dtoa_r+0x2dc>)
 800a63c:	e022      	b.n	800a684 <_dtoa_r+0xdc>
 800a63e:	4b92      	ldr	r3, [pc, #584]	; (800a888 <_dtoa_r+0x2e0>)
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	3308      	adds	r3, #8
 800a644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	9801      	ldr	r0, [sp, #4]
 800a64a:	b013      	add	sp, #76	; 0x4c
 800a64c:	ecbd 8b04 	vpop	{d8-d9}
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	4b8b      	ldr	r3, [pc, #556]	; (800a884 <_dtoa_r+0x2dc>)
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	3303      	adds	r3, #3
 800a65a:	e7f3      	b.n	800a644 <_dtoa_r+0x9c>
 800a65c:	2200      	movs	r2, #0
 800a65e:	2300      	movs	r3, #0
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f6 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 800a668:	ec4b ab19 	vmov	d9, sl, fp
 800a66c:	4680      	mov	r8, r0
 800a66e:	b158      	cbz	r0, 800a688 <_dtoa_r+0xe0>
 800a670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a672:	2301      	movs	r3, #1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 856b 	beq.w	800b154 <_dtoa_r+0xbac>
 800a67e:	4883      	ldr	r0, [pc, #524]	; (800a88c <_dtoa_r+0x2e4>)
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	1e43      	subs	r3, r0, #1
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e7df      	b.n	800a648 <_dtoa_r+0xa0>
 800a688:	ec4b ab10 	vmov	d0, sl, fp
 800a68c:	aa10      	add	r2, sp, #64	; 0x40
 800a68e:	a911      	add	r1, sp, #68	; 0x44
 800a690:	4620      	mov	r0, r4
 800a692:	f001 fd13 	bl	800c0bc <__d2b>
 800a696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a69a:	ee08 0a10 	vmov	s16, r0
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	f000 8084 	beq.w	800a7ac <_dtoa_r+0x204>
 800a6a4:	ee19 3a90 	vmov	r3, s19
 800a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6b0:	4656      	mov	r6, sl
 800a6b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6be:	4b74      	ldr	r3, [pc, #464]	; (800a890 <_dtoa_r+0x2e8>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fdff 	bl	80002c8 <__aeabi_dsub>
 800a6ca:	a365      	add	r3, pc, #404	; (adr r3, 800a860 <_dtoa_r+0x2b8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ffb2 	bl	8000638 <__aeabi_dmul>
 800a6d4:	a364      	add	r3, pc, #400	; (adr r3, 800a868 <_dtoa_r+0x2c0>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fdf7 	bl	80002cc <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	f7f5 ff3e 	bl	8000564 <__aeabi_i2d>
 800a6e8:	a361      	add	r3, pc, #388	; (adr r3, 800a870 <_dtoa_r+0x2c8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ffa3 	bl	8000638 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f5 fde7 	bl	80002cc <__adddf3>
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa49 	bl	8000b98 <__aeabi_d2iz>
 800a706:	2200      	movs	r2, #0
 800a708:	9000      	str	r0, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 fa04 	bl	8000b1c <__aeabi_dcmplt>
 800a714:	b150      	cbz	r0, 800a72c <_dtoa_r+0x184>
 800a716:	9800      	ldr	r0, [sp, #0]
 800a718:	f7f5 ff24 	bl	8000564 <__aeabi_i2d>
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	f7f6 f9f2 	bl	8000b08 <__aeabi_dcmpeq>
 800a724:	b910      	cbnz	r0, 800a72c <_dtoa_r+0x184>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b16      	cmp	r3, #22
 800a730:	d85a      	bhi.n	800a7e8 <_dtoa_r+0x240>
 800a732:	9a00      	ldr	r2, [sp, #0]
 800a734:	4b57      	ldr	r3, [pc, #348]	; (800a894 <_dtoa_r+0x2ec>)
 800a736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	ec51 0b19 	vmov	r0, r1, d9
 800a742:	f7f6 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	d050      	beq.n	800a7ec <_dtoa_r+0x244>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	930b      	str	r3, [sp, #44]	; 0x2c
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	1b5d      	subs	r5, r3, r5
 800a758:	1e6b      	subs	r3, r5, #1
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	bf45      	ittet	mi
 800a75e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a762:	9304      	strmi	r3, [sp, #16]
 800a764:	2300      	movpl	r3, #0
 800a766:	2300      	movmi	r3, #0
 800a768:	bf4c      	ite	mi
 800a76a:	9305      	strmi	r3, [sp, #20]
 800a76c:	9304      	strpl	r3, [sp, #16]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db3d      	blt.n	800a7f0 <_dtoa_r+0x248>
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	9a00      	ldr	r2, [sp, #0]
 800a778:	920a      	str	r2, [sp, #40]	; 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	2300      	movs	r3, #0
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b09      	cmp	r3, #9
 800a786:	f200 8089 	bhi.w	800a89c <_dtoa_r+0x2f4>
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	bfc4      	itt	gt
 800a78e:	3b04      	subgt	r3, #4
 800a790:	9306      	strgt	r3, [sp, #24]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	f1a3 0302 	sub.w	r3, r3, #2
 800a798:	bfcc      	ite	gt
 800a79a:	2500      	movgt	r5, #0
 800a79c:	2501      	movle	r5, #1
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f200 8087 	bhi.w	800a8b2 <_dtoa_r+0x30a>
 800a7a4:	e8df f003 	tbb	[pc, r3]
 800a7a8:	59383a2d 	.word	0x59383a2d
 800a7ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7b0:	441d      	add	r5, r3
 800a7b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	bfc1      	itttt	gt
 800a7ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7ca:	bfda      	itte	le
 800a7cc:	f1c3 0320 	rsble	r3, r3, #32
 800a7d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7d4:	4318      	orrgt	r0, r3
 800a7d6:	f7f5 feb5 	bl	8000544 <__aeabi_ui2d>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7e2:	3d01      	subs	r5, #1
 800a7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7e6:	e76a      	b.n	800a6be <_dtoa_r+0x116>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7b2      	b.n	800a752 <_dtoa_r+0x1aa>
 800a7ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ee:	e7b1      	b.n	800a754 <_dtoa_r+0x1ac>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	9a00      	ldr	r2, [sp, #0]
 800a7f4:	1a9b      	subs	r3, r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	4253      	negs	r3, r2
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a800:	e7bf      	b.n	800a782 <_dtoa_r+0x1da>
 800a802:	2300      	movs	r3, #0
 800a804:	9308      	str	r3, [sp, #32]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc55      	bgt.n	800a8b8 <_dtoa_r+0x310>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a812:	461a      	mov	r2, r3
 800a814:	9209      	str	r2, [sp, #36]	; 0x24
 800a816:	e00c      	b.n	800a832 <_dtoa_r+0x28a>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f3      	b.n	800a804 <_dtoa_r+0x25c>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	4413      	add	r3, r2
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	3301      	adds	r3, #1
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	bfb8      	it	lt
 800a830:	2301      	movlt	r3, #1
 800a832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a834:	2200      	movs	r2, #0
 800a836:	6042      	str	r2, [r0, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	f102 0614 	add.w	r6, r2, #20
 800a83e:	429e      	cmp	r6, r3
 800a840:	6841      	ldr	r1, [r0, #4]
 800a842:	d93d      	bls.n	800a8c0 <_dtoa_r+0x318>
 800a844:	4620      	mov	r0, r4
 800a846:	f001 f84b 	bl	800b8e0 <_Balloc>
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d13b      	bne.n	800a8c8 <_dtoa_r+0x320>
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <_dtoa_r+0x2f0>)
 800a852:	4602      	mov	r2, r0
 800a854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a858:	e6c0      	b.n	800a5dc <_dtoa_r+0x34>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e7df      	b.n	800a81e <_dtoa_r+0x276>
 800a85e:	bf00      	nop
 800a860:	636f4361 	.word	0x636f4361
 800a864:	3fd287a7 	.word	0x3fd287a7
 800a868:	8b60c8b3 	.word	0x8b60c8b3
 800a86c:	3fc68a28 	.word	0x3fc68a28
 800a870:	509f79fb 	.word	0x509f79fb
 800a874:	3fd34413 	.word	0x3fd34413
 800a878:	0800dc56 	.word	0x0800dc56
 800a87c:	0800dc6d 	.word	0x0800dc6d
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	0800dc52 	.word	0x0800dc52
 800a888:	0800dc49 	.word	0x0800dc49
 800a88c:	0800dec2 	.word	0x0800dec2
 800a890:	3ff80000 	.word	0x3ff80000
 800a894:	0800ddd8 	.word	0x0800ddd8
 800a898:	0800dcc8 	.word	0x0800dcc8
 800a89c:	2501      	movs	r5, #1
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	9508      	str	r5, [sp, #32]
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	e7b0      	b.n	800a814 <_dtoa_r+0x26c>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9308      	str	r3, [sp, #32]
 800a8b6:	e7f5      	b.n	800a8a4 <_dtoa_r+0x2fc>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8be:	e7b8      	b.n	800a832 <_dtoa_r+0x28a>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	6041      	str	r1, [r0, #4]
 800a8c4:	0052      	lsls	r2, r2, #1
 800a8c6:	e7b8      	b.n	800a83a <_dtoa_r+0x292>
 800a8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ca:	9a01      	ldr	r2, [sp, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	f200 809d 	bhi.w	800aa10 <_dtoa_r+0x468>
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	f000 809a 	beq.w	800aa10 <_dtoa_r+0x468>
 800a8dc:	9b00      	ldr	r3, [sp, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd32      	ble.n	800a948 <_dtoa_r+0x3a0>
 800a8e2:	4ab7      	ldr	r2, [pc, #732]	; (800abc0 <_dtoa_r+0x618>)
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8f0:	9b00      	ldr	r3, [sp, #0]
 800a8f2:	05d8      	lsls	r0, r3, #23
 800a8f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8f8:	d516      	bpl.n	800a928 <_dtoa_r+0x380>
 800a8fa:	4bb2      	ldr	r3, [pc, #712]	; (800abc4 <_dtoa_r+0x61c>)
 800a8fc:	ec51 0b19 	vmov	r0, r1, d9
 800a900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a904:	f7f5 ffc2 	bl	800088c <__aeabi_ddiv>
 800a908:	f007 070f 	and.w	r7, r7, #15
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	2503      	movs	r5, #3
 800a912:	4eac      	ldr	r6, [pc, #688]	; (800abc4 <_dtoa_r+0x61c>)
 800a914:	b957      	cbnz	r7, 800a92c <_dtoa_r+0x384>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	4650      	mov	r0, sl
 800a91c:	4659      	mov	r1, fp
 800a91e:	f7f5 ffb5 	bl	800088c <__aeabi_ddiv>
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	e028      	b.n	800a97a <_dtoa_r+0x3d2>
 800a928:	2502      	movs	r5, #2
 800a92a:	e7f2      	b.n	800a912 <_dtoa_r+0x36a>
 800a92c:	07f9      	lsls	r1, r7, #31
 800a92e:	d508      	bpl.n	800a942 <_dtoa_r+0x39a>
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a938:	f7f5 fe7e 	bl	8000638 <__aeabi_dmul>
 800a93c:	3501      	adds	r5, #1
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	107f      	asrs	r7, r7, #1
 800a944:	3608      	adds	r6, #8
 800a946:	e7e5      	b.n	800a914 <_dtoa_r+0x36c>
 800a948:	f000 809b 	beq.w	800aa82 <_dtoa_r+0x4da>
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	4f9d      	ldr	r7, [pc, #628]	; (800abc4 <_dtoa_r+0x61c>)
 800a950:	425e      	negs	r6, r3
 800a952:	4b9b      	ldr	r3, [pc, #620]	; (800abc0 <_dtoa_r+0x618>)
 800a954:	f006 020f 	and.w	r2, r6, #15
 800a958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b19 	vmov	r0, r1, d9
 800a964:	f7f5 fe68 	bl	8000638 <__aeabi_dmul>
 800a968:	1136      	asrs	r6, r6, #4
 800a96a:	4682      	mov	sl, r0
 800a96c:	468b      	mov	fp, r1
 800a96e:	2300      	movs	r3, #0
 800a970:	2502      	movs	r5, #2
 800a972:	2e00      	cmp	r6, #0
 800a974:	d17a      	bne.n	800aa6c <_dtoa_r+0x4c4>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1d3      	bne.n	800a922 <_dtoa_r+0x37a>
 800a97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8082 	beq.w	800aa86 <_dtoa_r+0x4de>
 800a982:	4b91      	ldr	r3, [pc, #580]	; (800abc8 <_dtoa_r+0x620>)
 800a984:	2200      	movs	r2, #0
 800a986:	4650      	mov	r0, sl
 800a988:	4659      	mov	r1, fp
 800a98a:	f7f6 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d079      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d076      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd36      	ble.n	800aa0c <_dtoa_r+0x464>
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	1e5f      	subs	r7, r3, #1
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4b88      	ldr	r3, [pc, #544]	; (800abcc <_dtoa_r+0x624>)
 800a9aa:	f7f5 fe45 	bl	8000638 <__aeabi_dmul>
 800a9ae:	9e02      	ldr	r6, [sp, #8]
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f5 fdd4 	bl	8000564 <__aeabi_i2d>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	f7f5 fe3a 	bl	8000638 <__aeabi_dmul>
 800a9c4:	4b82      	ldr	r3, [pc, #520]	; (800abd0 <_dtoa_r+0x628>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f7f5 fc80 	bl	80002cc <__adddf3>
 800a9cc:	46d0      	mov	r8, sl
 800a9ce:	46d9      	mov	r9, fp
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d158      	bne.n	800aa8c <_dtoa_r+0x4e4>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	; (800abd4 <_dtoa_r+0x62c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc71 	bl	80002c8 <__aeabi_dsub>
 800a9e6:	4652      	mov	r2, sl
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	f7f6 f8b3 	bl	8000b58 <__aeabi_dcmpgt>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f040 8295 	bne.w	800af22 <_dtoa_r+0x97a>
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f6 f88b 	bl	8000b1c <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8289 	bne.w	800af1e <_dtoa_r+0x976>
 800aa0c:	ec5b ab19 	vmov	sl, fp, d9
 800aa10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f2c0 8148 	blt.w	800aca8 <_dtoa_r+0x700>
 800aa18:	9a00      	ldr	r2, [sp, #0]
 800aa1a:	2a0e      	cmp	r2, #14
 800aa1c:	f300 8144 	bgt.w	800aca8 <_dtoa_r+0x700>
 800aa20:	4b67      	ldr	r3, [pc, #412]	; (800abc0 <_dtoa_r+0x618>)
 800aa22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f280 80d5 	bge.w	800abdc <_dtoa_r+0x634>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f300 80d1 	bgt.w	800abdc <_dtoa_r+0x634>
 800aa3a:	f040 826f 	bne.w	800af1c <_dtoa_r+0x974>
 800aa3e:	4b65      	ldr	r3, [pc, #404]	; (800abd4 <_dtoa_r+0x62c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fdf7 	bl	8000638 <__aeabi_dmul>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	f7f6 f879 	bl	8000b44 <__aeabi_dcmpge>
 800aa52:	9e03      	ldr	r6, [sp, #12]
 800aa54:	4637      	mov	r7, r6
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8245 	bne.w	800aee6 <_dtoa_r+0x93e>
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	f805 3b01 	strb.w	r3, [r5], #1
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	e240      	b.n	800aeee <_dtoa_r+0x946>
 800aa6c:	07f2      	lsls	r2, r6, #31
 800aa6e:	d505      	bpl.n	800aa7c <_dtoa_r+0x4d4>
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f7f5 fde0 	bl	8000638 <__aeabi_dmul>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	1076      	asrs	r6, r6, #1
 800aa7e:	3708      	adds	r7, #8
 800aa80:	e777      	b.n	800a972 <_dtoa_r+0x3ca>
 800aa82:	2502      	movs	r5, #2
 800aa84:	e779      	b.n	800a97a <_dtoa_r+0x3d2>
 800aa86:	9f00      	ldr	r7, [sp, #0]
 800aa88:	9e03      	ldr	r6, [sp, #12]
 800aa8a:	e794      	b.n	800a9b6 <_dtoa_r+0x40e>
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <_dtoa_r+0x618>)
 800aa90:	4431      	add	r1, r6
 800aa92:	910d      	str	r1, [sp, #52]	; 0x34
 800aa94:	9908      	ldr	r1, [sp, #32]
 800aa96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d043      	beq.n	800ab2a <_dtoa_r+0x582>
 800aaa2:	494d      	ldr	r1, [pc, #308]	; (800abd8 <_dtoa_r+0x630>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fef1 	bl	800088c <__aeabi_ddiv>
 800aaaa:	4652      	mov	r2, sl
 800aaac:	465b      	mov	r3, fp
 800aaae:	f7f5 fc0b 	bl	80002c8 <__aeabi_dsub>
 800aab2:	9d01      	ldr	r5, [sp, #4]
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	4649      	mov	r1, r9
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7f6 f86c 	bl	8000b98 <__aeabi_d2iz>
 800aac0:	4606      	mov	r6, r0
 800aac2:	f7f5 fd4f 	bl	8000564 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fbfb 	bl	80002c8 <__aeabi_dsub>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	f805 6b01 	strb.w	r6, [r5], #1
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	f7f6 f81c 	bl	8000b1c <__aeabi_dcmplt>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d163      	bne.n	800abb0 <_dtoa_r+0x608>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4936      	ldr	r1, [pc, #216]	; (800abc8 <_dtoa_r+0x620>)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f5 fbea 	bl	80002c8 <__aeabi_dsub>
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	f7f6 f810 	bl	8000b1c <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 80b5 	bne.w	800ac6c <_dtoa_r+0x6c4>
 800ab02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d081      	beq.n	800aa0c <_dtoa_r+0x464>
 800ab08:	4b30      	ldr	r3, [pc, #192]	; (800abcc <_dtoa_r+0x624>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fd92 	bl	8000638 <__aeabi_dmul>
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <_dtoa_r+0x624>)
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd8a 	bl	8000638 <__aeabi_dmul>
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	e7c6      	b.n	800aab8 <_dtoa_r+0x510>
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f7f5 fd83 	bl	8000638 <__aeabi_dmul>
 800ab32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab34:	9d01      	ldr	r5, [sp, #4]
 800ab36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7f6 f82a 	bl	8000b98 <__aeabi_d2iz>
 800ab44:	4606      	mov	r6, r0
 800ab46:	f7f5 fd0d 	bl	8000564 <__aeabi_i2d>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fbb8 	bl	80002c8 <__aeabi_dsub>
 800ab58:	f805 6b01 	strb.w	r6, [r5], #1
 800ab5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	4680      	mov	r8, r0
 800ab62:	4689      	mov	r9, r1
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	d124      	bne.n	800abb4 <_dtoa_r+0x60c>
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <_dtoa_r+0x630>)
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	4659      	mov	r1, fp
 800ab70:	f7f5 fbac 	bl	80002cc <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 ffec 	bl	8000b58 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d173      	bne.n	800ac6c <_dtoa_r+0x6c4>
 800ab84:	4652      	mov	r2, sl
 800ab86:	465b      	mov	r3, fp
 800ab88:	4913      	ldr	r1, [pc, #76]	; (800abd8 <_dtoa_r+0x630>)
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fb9c 	bl	80002c8 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4640      	mov	r0, r8
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af35 	beq.w	800aa0c <_dtoa_r+0x464>
 800aba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba4:	1e6b      	subs	r3, r5, #1
 800aba6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abac:	2b30      	cmp	r3, #48	; 0x30
 800abae:	d0f8      	beq.n	800aba2 <_dtoa_r+0x5fa>
 800abb0:	9700      	str	r7, [sp, #0]
 800abb2:	e049      	b.n	800ac48 <_dtoa_r+0x6a0>
 800abb4:	4b05      	ldr	r3, [pc, #20]	; (800abcc <_dtoa_r+0x624>)
 800abb6:	f7f5 fd3f 	bl	8000638 <__aeabi_dmul>
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	e7bd      	b.n	800ab3c <_dtoa_r+0x594>
 800abc0:	0800ddd8 	.word	0x0800ddd8
 800abc4:	0800ddb0 	.word	0x0800ddb0
 800abc8:	3ff00000 	.word	0x3ff00000
 800abcc:	40240000 	.word	0x40240000
 800abd0:	401c0000 	.word	0x401c0000
 800abd4:	40140000 	.word	0x40140000
 800abd8:	3fe00000 	.word	0x3fe00000
 800abdc:	9d01      	ldr	r5, [sp, #4]
 800abde:	4656      	mov	r6, sl
 800abe0:	465f      	mov	r7, fp
 800abe2:	4642      	mov	r2, r8
 800abe4:	464b      	mov	r3, r9
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fe4f 	bl	800088c <__aeabi_ddiv>
 800abee:	f7f5 ffd3 	bl	8000b98 <__aeabi_d2iz>
 800abf2:	4682      	mov	sl, r0
 800abf4:	f7f5 fcb6 	bl	8000564 <__aeabi_i2d>
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	f7f5 fd1c 	bl	8000638 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac0c:	f7f5 fb5c 	bl	80002c8 <__aeabi_dsub>
 800ac10:	f805 6b01 	strb.w	r6, [r5], #1
 800ac14:	9e01      	ldr	r6, [sp, #4]
 800ac16:	9f03      	ldr	r7, [sp, #12]
 800ac18:	1bae      	subs	r6, r5, r6
 800ac1a:	42b7      	cmp	r7, r6
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	d135      	bne.n	800ac8e <_dtoa_r+0x6e6>
 800ac22:	f7f5 fb53 	bl	80002cc <__adddf3>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	f7f5 ff93 	bl	8000b58 <__aeabi_dcmpgt>
 800ac32:	b9d0      	cbnz	r0, 800ac6a <_dtoa_r+0x6c2>
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 800ac40:	b110      	cbz	r0, 800ac48 <_dtoa_r+0x6a0>
 800ac42:	f01a 0f01 	tst.w	sl, #1
 800ac46:	d110      	bne.n	800ac6a <_dtoa_r+0x6c2>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	ee18 1a10 	vmov	r1, s16
 800ac4e:	f000 fe87 	bl	800b960 <_Bfree>
 800ac52:	2300      	movs	r3, #0
 800ac54:	9800      	ldr	r0, [sp, #0]
 800ac56:	702b      	strb	r3, [r5, #0]
 800ac58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	6018      	str	r0, [r3, #0]
 800ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f acf1 	beq.w	800a648 <_dtoa_r+0xa0>
 800ac66:	601d      	str	r5, [r3, #0]
 800ac68:	e4ee      	b.n	800a648 <_dtoa_r+0xa0>
 800ac6a:	9f00      	ldr	r7, [sp, #0]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	461d      	mov	r5, r3
 800ac70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac74:	2a39      	cmp	r2, #57	; 0x39
 800ac76:	d106      	bne.n	800ac86 <_dtoa_r+0x6de>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d1f7      	bne.n	800ac6e <_dtoa_r+0x6c6>
 800ac7e:	9901      	ldr	r1, [sp, #4]
 800ac80:	2230      	movs	r2, #48	; 0x30
 800ac82:	3701      	adds	r7, #1
 800ac84:	700a      	strb	r2, [r1, #0]
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	3201      	adds	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e790      	b.n	800abb0 <_dtoa_r+0x608>
 800ac8e:	4ba6      	ldr	r3, [pc, #664]	; (800af28 <_dtoa_r+0x980>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fcd1 	bl	8000638 <__aeabi_dmul>
 800ac96:	2200      	movs	r2, #0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f7f5 ff33 	bl	8000b08 <__aeabi_dcmpeq>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d09d      	beq.n	800abe2 <_dtoa_r+0x63a>
 800aca6:	e7cf      	b.n	800ac48 <_dtoa_r+0x6a0>
 800aca8:	9a08      	ldr	r2, [sp, #32]
 800acaa:	2a00      	cmp	r2, #0
 800acac:	f000 80d7 	beq.w	800ae5e <_dtoa_r+0x8b6>
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	2a01      	cmp	r2, #1
 800acb4:	f300 80ba 	bgt.w	800ae2c <_dtoa_r+0x884>
 800acb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80b2 	beq.w	800ae24 <_dtoa_r+0x87c>
 800acc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc4:	9e07      	ldr	r6, [sp, #28]
 800acc6:	9d04      	ldr	r5, [sp, #16]
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	441a      	add	r2, r3
 800accc:	9204      	str	r2, [sp, #16]
 800acce:	9a05      	ldr	r2, [sp, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	441a      	add	r2, r3
 800acd4:	4620      	mov	r0, r4
 800acd6:	9205      	str	r2, [sp, #20]
 800acd8:	f000 ff44 	bl	800bb64 <__i2b>
 800acdc:	4607      	mov	r7, r0
 800acde:	2d00      	cmp	r5, #0
 800ace0:	dd0c      	ble.n	800acfc <_dtoa_r+0x754>
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x754>
 800ace8:	42ab      	cmp	r3, r5
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	bfa8      	it	ge
 800acee:	462b      	movge	r3, r5
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9204      	str	r2, [sp, #16]
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	1aed      	subs	r5, r5, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	9b07      	ldr	r3, [sp, #28]
 800acfe:	b31b      	cbz	r3, 800ad48 <_dtoa_r+0x7a0>
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80af 	beq.w	800ae66 <_dtoa_r+0x8be>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd13      	ble.n	800ad34 <_dtoa_r+0x78c>
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 ffe7 	bl	800bce4 <__pow5mult>
 800ad16:	ee18 2a10 	vmov	r2, s16
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 ff36 	bl	800bb90 <__multiply>
 800ad24:	ee18 1a10 	vmov	r1, s16
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fe18 	bl	800b960 <_Bfree>
 800ad30:	ee08 8a10 	vmov	s16, r8
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	1b9a      	subs	r2, r3, r6
 800ad38:	d006      	beq.n	800ad48 <_dtoa_r+0x7a0>
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 ffd0 	bl	800bce4 <__pow5mult>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 ff0a 	bl	800bb64 <__i2b>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	4606      	mov	r6, r0
 800ad56:	f340 8088 	ble.w	800ae6a <_dtoa_r+0x8c2>
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 ffc0 	bl	800bce4 <__pow5mult>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f340 8081 	ble.w	800ae70 <_dtoa_r+0x8c8>
 800ad6e:	f04f 0800 	mov.w	r8, #0
 800ad72:	6933      	ldr	r3, [r6, #16]
 800ad74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad78:	6918      	ldr	r0, [r3, #16]
 800ad7a:	f000 fea3 	bl	800bac4 <__hi0bits>
 800ad7e:	f1c0 0020 	rsb	r0, r0, #32
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4418      	add	r0, r3
 800ad86:	f010 001f 	ands.w	r0, r0, #31
 800ad8a:	f000 8092 	beq.w	800aeb2 <_dtoa_r+0x90a>
 800ad8e:	f1c0 0320 	rsb	r3, r0, #32
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	f340 808a 	ble.w	800aeac <_dtoa_r+0x904>
 800ad98:	f1c0 001c 	rsb	r0, r0, #28
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	4403      	add	r3, r0
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	4403      	add	r3, r0
 800ada6:	4405      	add	r5, r0
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd07      	ble.n	800adc0 <_dtoa_r+0x818>
 800adb0:	ee18 1a10 	vmov	r1, s16
 800adb4:	461a      	mov	r2, r3
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 ffee 	bl	800bd98 <__lshift>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x82a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 ffe4 	bl	800bd98 <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d06e      	beq.n	800aeb6 <_dtoa_r+0x90e>
 800add8:	ee18 0a10 	vmov	r0, s16
 800addc:	4631      	mov	r1, r6
 800adde:	f001 f84b 	bl	800be78 <__mcmp>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	da67      	bge.n	800aeb6 <_dtoa_r+0x90e>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	220a      	movs	r2, #10
 800adf2:	2300      	movs	r3, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fdd5 	bl	800b9a4 <__multadd>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	ee08 0a10 	vmov	s16, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81b1 	beq.w	800b168 <_dtoa_r+0xbc0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	4639      	mov	r1, r7
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fdc9 	bl	800b9a4 <__multadd>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4607      	mov	r7, r0
 800ae18:	f300 808e 	bgt.w	800af38 <_dtoa_r+0x990>
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc51      	bgt.n	800aec6 <_dtoa_r+0x91e>
 800ae22:	e089      	b.n	800af38 <_dtoa_r+0x990>
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae2a:	e74b      	b.n	800acc4 <_dtoa_r+0x71c>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1e5e      	subs	r6, r3, #1
 800ae30:	9b07      	ldr	r3, [sp, #28]
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	bfbf      	itttt	lt
 800ae36:	9b07      	ldrlt	r3, [sp, #28]
 800ae38:	9607      	strlt	r6, [sp, #28]
 800ae3a:	1af2      	sublt	r2, r6, r3
 800ae3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae3e:	bfb6      	itet	lt
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	1b9e      	subge	r6, r3, r6
 800ae44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	bfb8      	it	lt
 800ae4a:	2600      	movlt	r6, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb7      	itett	lt
 800ae50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae58:	1a9d      	sublt	r5, r3, r2
 800ae5a:	2300      	movlt	r3, #0
 800ae5c:	e734      	b.n	800acc8 <_dtoa_r+0x720>
 800ae5e:	9e07      	ldr	r6, [sp, #28]
 800ae60:	9d04      	ldr	r5, [sp, #16]
 800ae62:	9f08      	ldr	r7, [sp, #32]
 800ae64:	e73b      	b.n	800acde <_dtoa_r+0x736>
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	e767      	b.n	800ad3a <_dtoa_r+0x792>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	dc18      	bgt.n	800aea2 <_dtoa_r+0x8fa>
 800ae70:	f1ba 0f00 	cmp.w	sl, #0
 800ae74:	d115      	bne.n	800aea2 <_dtoa_r+0x8fa>
 800ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7a:	b993      	cbnz	r3, 800aea2 <_dtoa_r+0x8fa>
 800ae7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae80:	0d1b      	lsrs	r3, r3, #20
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	b183      	cbz	r3, 800aea8 <_dtoa_r+0x900>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f04f 0801 	mov.w	r8, #1
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af6a 	bne.w	800ad72 <_dtoa_r+0x7ca>
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e76f      	b.n	800ad82 <_dtoa_r+0x7da>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	e7f6      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aea8:	4698      	mov	r8, r3
 800aeaa:	e7f4      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aeac:	f43f af7d 	beq.w	800adaa <_dtoa_r+0x802>
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	301c      	adds	r0, #28
 800aeb4:	e772      	b.n	800ad9c <_dtoa_r+0x7f4>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc37      	bgt.n	800af2c <_dtoa_r+0x984>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	dd34      	ble.n	800af2c <_dtoa_r+0x984>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	b96b      	cbnz	r3, 800aee6 <_dtoa_r+0x93e>
 800aeca:	4631      	mov	r1, r6
 800aecc:	2205      	movs	r2, #5
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 fd68 	bl	800b9a4 <__multadd>
 800aed4:	4601      	mov	r1, r0
 800aed6:	4606      	mov	r6, r0
 800aed8:	ee18 0a10 	vmov	r0, s16
 800aedc:	f000 ffcc 	bl	800be78 <__mcmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	f73f adbb 	bgt.w	800aa5c <_dtoa_r+0x4b4>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	9d01      	ldr	r5, [sp, #4]
 800aeea:	43db      	mvns	r3, r3
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	4631      	mov	r1, r6
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fd33 	bl	800b960 <_Bfree>
 800aefa:	2f00      	cmp	r7, #0
 800aefc:	f43f aea4 	beq.w	800ac48 <_dtoa_r+0x6a0>
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d005      	beq.n	800af12 <_dtoa_r+0x96a>
 800af06:	45b8      	cmp	r8, r7
 800af08:	d003      	beq.n	800af12 <_dtoa_r+0x96a>
 800af0a:	4641      	mov	r1, r8
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fd27 	bl	800b960 <_Bfree>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fd23 	bl	800b960 <_Bfree>
 800af1a:	e695      	b.n	800ac48 <_dtoa_r+0x6a0>
 800af1c:	2600      	movs	r6, #0
 800af1e:	4637      	mov	r7, r6
 800af20:	e7e1      	b.n	800aee6 <_dtoa_r+0x93e>
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4637      	mov	r7, r6
 800af26:	e599      	b.n	800aa5c <_dtoa_r+0x4b4>
 800af28:	40240000 	.word	0x40240000
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80ca 	beq.w	800b0c8 <_dtoa_r+0xb20>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	2d00      	cmp	r5, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x9a0>
 800af3c:	4639      	mov	r1, r7
 800af3e:	462a      	mov	r2, r5
 800af40:	4620      	mov	r0, r4
 800af42:	f000 ff29 	bl	800bd98 <__lshift>
 800af46:	4607      	mov	r7, r0
 800af48:	f1b8 0f00 	cmp.w	r8, #0
 800af4c:	d05b      	beq.n	800b006 <_dtoa_r+0xa5e>
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fcc5 	bl	800b8e0 <_Balloc>
 800af56:	4605      	mov	r5, r0
 800af58:	b928      	cbnz	r0, 800af66 <_dtoa_r+0x9be>
 800af5a:	4b87      	ldr	r3, [pc, #540]	; (800b178 <_dtoa_r+0xbd0>)
 800af5c:	4602      	mov	r2, r0
 800af5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af62:	f7ff bb3b 	b.w	800a5dc <_dtoa_r+0x34>
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	f107 010c 	add.w	r1, r7, #12
 800af70:	300c      	adds	r0, #12
 800af72:	f000 fca7 	bl	800b8c4 <memcpy>
 800af76:	2201      	movs	r2, #1
 800af78:	4629      	mov	r1, r5
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 ff0c 	bl	800bd98 <__lshift>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	f103 0901 	add.w	r9, r3, #1
 800af86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af8a:	4413      	add	r3, r2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f00a 0301 	and.w	r3, sl, #1
 800af92:	46b8      	mov	r8, r7
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4631      	mov	r1, r6
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f7ff fa75 	bl	800a48c <quorem>
 800afa2:	4641      	mov	r1, r8
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 ff63 	bl	800be78 <__mcmp>
 800afb2:	463a      	mov	r2, r7
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 ff79 	bl	800beb0 <__mdiff>
 800afbe:	68c2      	ldr	r2, [r0, #12]
 800afc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afc4:	4605      	mov	r5, r0
 800afc6:	bb02      	cbnz	r2, 800b00a <_dtoa_r+0xa62>
 800afc8:	4601      	mov	r1, r0
 800afca:	ee18 0a10 	vmov	r0, s16
 800afce:	f000 ff53 	bl	800be78 <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	9207      	str	r2, [sp, #28]
 800afda:	f000 fcc1 	bl	800b960 <_Bfree>
 800afde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afe2:	ea43 0102 	orr.w	r1, r3, r2
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	430b      	orrs	r3, r1
 800afea:	464d      	mov	r5, r9
 800afec:	d10f      	bne.n	800b00e <_dtoa_r+0xa66>
 800afee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff2:	d02a      	beq.n	800b04a <_dtoa_r+0xaa2>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0xa58>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b000:	f88b a000 	strb.w	sl, [fp]
 800b004:	e775      	b.n	800aef2 <_dtoa_r+0x94a>
 800b006:	4638      	mov	r0, r7
 800b008:	e7ba      	b.n	800af80 <_dtoa_r+0x9d8>
 800b00a:	2201      	movs	r2, #1
 800b00c:	e7e2      	b.n	800afd4 <_dtoa_r+0xa2c>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db04      	blt.n	800b01e <_dtoa_r+0xa76>
 800b014:	9906      	ldr	r1, [sp, #24]
 800b016:	430b      	orrs	r3, r1
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d122      	bne.n	800b064 <_dtoa_r+0xabc>
 800b01e:	2a00      	cmp	r2, #0
 800b020:	ddee      	ble.n	800b000 <_dtoa_r+0xa58>
 800b022:	ee18 1a10 	vmov	r1, s16
 800b026:	2201      	movs	r2, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 feb5 	bl	800bd98 <__lshift>
 800b02e:	4631      	mov	r1, r6
 800b030:	ee08 0a10 	vmov	s16, r0
 800b034:	f000 ff20 	bl	800be78 <__mcmp>
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc03      	bgt.n	800b044 <_dtoa_r+0xa9c>
 800b03c:	d1e0      	bne.n	800b000 <_dtoa_r+0xa58>
 800b03e:	f01a 0f01 	tst.w	sl, #1
 800b042:	d0dd      	beq.n	800b000 <_dtoa_r+0xa58>
 800b044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b048:	d1d7      	bne.n	800affa <_dtoa_r+0xa52>
 800b04a:	2339      	movs	r3, #57	; 0x39
 800b04c:	f88b 3000 	strb.w	r3, [fp]
 800b050:	462b      	mov	r3, r5
 800b052:	461d      	mov	r5, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b05a:	2a39      	cmp	r2, #57	; 0x39
 800b05c:	d071      	beq.n	800b142 <_dtoa_r+0xb9a>
 800b05e:	3201      	adds	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e746      	b.n	800aef2 <_dtoa_r+0x94a>
 800b064:	2a00      	cmp	r2, #0
 800b066:	dd07      	ble.n	800b078 <_dtoa_r+0xad0>
 800b068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06c:	d0ed      	beq.n	800b04a <_dtoa_r+0xaa2>
 800b06e:	f10a 0301 	add.w	r3, sl, #1
 800b072:	f88b 3000 	strb.w	r3, [fp]
 800b076:	e73c      	b.n	800aef2 <_dtoa_r+0x94a>
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b07e:	4599      	cmp	r9, r3
 800b080:	d047      	beq.n	800b112 <_dtoa_r+0xb6a>
 800b082:	ee18 1a10 	vmov	r1, s16
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fc8a 	bl	800b9a4 <__multadd>
 800b090:	45b8      	cmp	r8, r7
 800b092:	ee08 0a10 	vmov	s16, r0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	f04f 020a 	mov.w	r2, #10
 800b09e:	4641      	mov	r1, r8
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	d106      	bne.n	800b0b2 <_dtoa_r+0xb0a>
 800b0a4:	f000 fc7e 	bl	800b9a4 <__multadd>
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f109 0901 	add.w	r9, r9, #1
 800b0b0:	e772      	b.n	800af98 <_dtoa_r+0x9f0>
 800b0b2:	f000 fc77 	bl	800b9a4 <__multadd>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fc70 	bl	800b9a4 <__multadd>
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	e7f1      	b.n	800b0ac <_dtoa_r+0xb04>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	9d01      	ldr	r5, [sp, #4]
 800b0ce:	ee18 0a10 	vmov	r0, s16
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	f7ff f9da 	bl	800a48c <quorem>
 800b0d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	f805 ab01 	strb.w	sl, [r5], #1
 800b0e2:	1aea      	subs	r2, r5, r3
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	dd09      	ble.n	800b0fe <_dtoa_r+0xb56>
 800b0ea:	ee18 1a10 	vmov	r1, s16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fc56 	bl	800b9a4 <__multadd>
 800b0f8:	ee08 0a10 	vmov	s16, r0
 800b0fc:	e7e7      	b.n	800b0ce <_dtoa_r+0xb26>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfc8      	it	gt
 800b104:	461d      	movgt	r5, r3
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	bfd8      	it	le
 800b10a:	2501      	movle	r5, #1
 800b10c:	441d      	add	r5, r3
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	2201      	movs	r2, #1
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fe3d 	bl	800bd98 <__lshift>
 800b11e:	4631      	mov	r1, r6
 800b120:	ee08 0a10 	vmov	s16, r0
 800b124:	f000 fea8 	bl	800be78 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc91      	bgt.n	800b050 <_dtoa_r+0xaa8>
 800b12c:	d102      	bne.n	800b134 <_dtoa_r+0xb8c>
 800b12e:	f01a 0f01 	tst.w	sl, #1
 800b132:	d18d      	bne.n	800b050 <_dtoa_r+0xaa8>
 800b134:	462b      	mov	r3, r5
 800b136:	461d      	mov	r5, r3
 800b138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13c:	2a30      	cmp	r2, #48	; 0x30
 800b13e:	d0fa      	beq.n	800b136 <_dtoa_r+0xb8e>
 800b140:	e6d7      	b.n	800aef2 <_dtoa_r+0x94a>
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d184      	bne.n	800b052 <_dtoa_r+0xaaa>
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	7013      	strb	r3, [r2, #0]
 800b152:	e6ce      	b.n	800aef2 <_dtoa_r+0x94a>
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <_dtoa_r+0xbd4>)
 800b156:	f7ff ba95 	b.w	800a684 <_dtoa_r+0xdc>
 800b15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f47f aa6e 	bne.w	800a63e <_dtoa_r+0x96>
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_dtoa_r+0xbd8>)
 800b164:	f7ff ba8e 	b.w	800a684 <_dtoa_r+0xdc>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dcae      	bgt.n	800b0cc <_dtoa_r+0xb24>
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	2b02      	cmp	r3, #2
 800b172:	f73f aea8 	bgt.w	800aec6 <_dtoa_r+0x91e>
 800b176:	e7a9      	b.n	800b0cc <_dtoa_r+0xb24>
 800b178:	0800dcc8 	.word	0x0800dcc8
 800b17c:	0800dec1 	.word	0x0800dec1
 800b180:	0800dc49 	.word	0x0800dc49

0800b184 <rshift>:
 800b184:	6903      	ldr	r3, [r0, #16]
 800b186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b18a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b18e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b192:	f100 0414 	add.w	r4, r0, #20
 800b196:	dd45      	ble.n	800b224 <rshift+0xa0>
 800b198:	f011 011f 	ands.w	r1, r1, #31
 800b19c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1a4:	d10c      	bne.n	800b1c0 <rshift+0x3c>
 800b1a6:	f100 0710 	add.w	r7, r0, #16
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	42b1      	cmp	r1, r6
 800b1ae:	d334      	bcc.n	800b21a <rshift+0x96>
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	1eea      	subs	r2, r5, #3
 800b1b6:	4296      	cmp	r6, r2
 800b1b8:	bf38      	it	cc
 800b1ba:	2300      	movcc	r3, #0
 800b1bc:	4423      	add	r3, r4
 800b1be:	e015      	b.n	800b1ec <rshift+0x68>
 800b1c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1c4:	f1c1 0820 	rsb	r8, r1, #32
 800b1c8:	40cf      	lsrs	r7, r1
 800b1ca:	f105 0e04 	add.w	lr, r5, #4
 800b1ce:	46a1      	mov	r9, r4
 800b1d0:	4576      	cmp	r6, lr
 800b1d2:	46f4      	mov	ip, lr
 800b1d4:	d815      	bhi.n	800b202 <rshift+0x7e>
 800b1d6:	1a9a      	subs	r2, r3, r2
 800b1d8:	0092      	lsls	r2, r2, #2
 800b1da:	3a04      	subs	r2, #4
 800b1dc:	3501      	adds	r5, #1
 800b1de:	42ae      	cmp	r6, r5
 800b1e0:	bf38      	it	cc
 800b1e2:	2200      	movcc	r2, #0
 800b1e4:	18a3      	adds	r3, r4, r2
 800b1e6:	50a7      	str	r7, [r4, r2]
 800b1e8:	b107      	cbz	r7, 800b1ec <rshift+0x68>
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	1b1a      	subs	r2, r3, r4
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1f4:	bf08      	it	eq
 800b1f6:	2300      	moveq	r3, #0
 800b1f8:	6102      	str	r2, [r0, #16]
 800b1fa:	bf08      	it	eq
 800b1fc:	6143      	streq	r3, [r0, #20]
 800b1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b202:	f8dc c000 	ldr.w	ip, [ip]
 800b206:	fa0c fc08 	lsl.w	ip, ip, r8
 800b20a:	ea4c 0707 	orr.w	r7, ip, r7
 800b20e:	f849 7b04 	str.w	r7, [r9], #4
 800b212:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b216:	40cf      	lsrs	r7, r1
 800b218:	e7da      	b.n	800b1d0 <rshift+0x4c>
 800b21a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b21e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b222:	e7c3      	b.n	800b1ac <rshift+0x28>
 800b224:	4623      	mov	r3, r4
 800b226:	e7e1      	b.n	800b1ec <rshift+0x68>

0800b228 <__hexdig_fun>:
 800b228:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	d802      	bhi.n	800b236 <__hexdig_fun+0xe>
 800b230:	3820      	subs	r0, #32
 800b232:	b2c0      	uxtb	r0, r0
 800b234:	4770      	bx	lr
 800b236:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b23a:	2b05      	cmp	r3, #5
 800b23c:	d801      	bhi.n	800b242 <__hexdig_fun+0x1a>
 800b23e:	3847      	subs	r0, #71	; 0x47
 800b240:	e7f7      	b.n	800b232 <__hexdig_fun+0xa>
 800b242:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b246:	2b05      	cmp	r3, #5
 800b248:	d801      	bhi.n	800b24e <__hexdig_fun+0x26>
 800b24a:	3827      	subs	r0, #39	; 0x27
 800b24c:	e7f1      	b.n	800b232 <__hexdig_fun+0xa>
 800b24e:	2000      	movs	r0, #0
 800b250:	4770      	bx	lr
	...

0800b254 <__gethex>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	ed2d 8b02 	vpush	{d8}
 800b25c:	b089      	sub	sp, #36	; 0x24
 800b25e:	ee08 0a10 	vmov	s16, r0
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	4bb4      	ldr	r3, [pc, #720]	; (800b538 <__gethex+0x2e4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	4618      	mov	r0, r3
 800b26c:	468b      	mov	fp, r1
 800b26e:	4690      	mov	r8, r2
 800b270:	f7f4 ffce 	bl	8000210 <strlen>
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	f8db 2000 	ldr.w	r2, [fp]
 800b27a:	4403      	add	r3, r0
 800b27c:	4682      	mov	sl, r0
 800b27e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b282:	9305      	str	r3, [sp, #20]
 800b284:	1c93      	adds	r3, r2, #2
 800b286:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b28a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b28e:	32fe      	adds	r2, #254	; 0xfe
 800b290:	18d1      	adds	r1, r2, r3
 800b292:	461f      	mov	r7, r3
 800b294:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b298:	9100      	str	r1, [sp, #0]
 800b29a:	2830      	cmp	r0, #48	; 0x30
 800b29c:	d0f8      	beq.n	800b290 <__gethex+0x3c>
 800b29e:	f7ff ffc3 	bl	800b228 <__hexdig_fun>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d13a      	bne.n	800b31e <__gethex+0xca>
 800b2a8:	9901      	ldr	r1, [sp, #4]
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f7fe fa08 	bl	80096c2 <strncmp>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d168      	bne.n	800b38a <__gethex+0x136>
 800b2b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2bc:	eb07 060a 	add.w	r6, r7, sl
 800b2c0:	f7ff ffb2 	bl	800b228 <__hexdig_fun>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d062      	beq.n	800b38e <__gethex+0x13a>
 800b2c8:	4633      	mov	r3, r6
 800b2ca:	7818      	ldrb	r0, [r3, #0]
 800b2cc:	2830      	cmp	r0, #48	; 0x30
 800b2ce:	461f      	mov	r7, r3
 800b2d0:	f103 0301 	add.w	r3, r3, #1
 800b2d4:	d0f9      	beq.n	800b2ca <__gethex+0x76>
 800b2d6:	f7ff ffa7 	bl	800b228 <__hexdig_fun>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	fab0 f480 	clz	r4, r0
 800b2e0:	0964      	lsrs	r4, r4, #5
 800b2e2:	4635      	mov	r5, r6
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4616      	mov	r6, r2
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	7830      	ldrb	r0, [r6, #0]
 800b2ee:	f7ff ff9b 	bl	800b228 <__hexdig_fun>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1f8      	bne.n	800b2e8 <__gethex+0x94>
 800b2f6:	9901      	ldr	r1, [sp, #4]
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fe f9e1 	bl	80096c2 <strncmp>
 800b300:	b980      	cbnz	r0, 800b324 <__gethex+0xd0>
 800b302:	b94d      	cbnz	r5, 800b318 <__gethex+0xc4>
 800b304:	eb06 050a 	add.w	r5, r6, sl
 800b308:	462a      	mov	r2, r5
 800b30a:	4616      	mov	r6, r2
 800b30c:	3201      	adds	r2, #1
 800b30e:	7830      	ldrb	r0, [r6, #0]
 800b310:	f7ff ff8a 	bl	800b228 <__hexdig_fun>
 800b314:	2800      	cmp	r0, #0
 800b316:	d1f8      	bne.n	800b30a <__gethex+0xb6>
 800b318:	1bad      	subs	r5, r5, r6
 800b31a:	00ad      	lsls	r5, r5, #2
 800b31c:	e004      	b.n	800b328 <__gethex+0xd4>
 800b31e:	2400      	movs	r4, #0
 800b320:	4625      	mov	r5, r4
 800b322:	e7e0      	b.n	800b2e6 <__gethex+0x92>
 800b324:	2d00      	cmp	r5, #0
 800b326:	d1f7      	bne.n	800b318 <__gethex+0xc4>
 800b328:	7833      	ldrb	r3, [r6, #0]
 800b32a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b32e:	2b50      	cmp	r3, #80	; 0x50
 800b330:	d13b      	bne.n	800b3aa <__gethex+0x156>
 800b332:	7873      	ldrb	r3, [r6, #1]
 800b334:	2b2b      	cmp	r3, #43	; 0x2b
 800b336:	d02c      	beq.n	800b392 <__gethex+0x13e>
 800b338:	2b2d      	cmp	r3, #45	; 0x2d
 800b33a:	d02e      	beq.n	800b39a <__gethex+0x146>
 800b33c:	1c71      	adds	r1, r6, #1
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	7808      	ldrb	r0, [r1, #0]
 800b344:	f7ff ff70 	bl	800b228 <__hexdig_fun>
 800b348:	1e43      	subs	r3, r0, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b18      	cmp	r3, #24
 800b34e:	d82c      	bhi.n	800b3aa <__gethex+0x156>
 800b350:	f1a0 0210 	sub.w	r2, r0, #16
 800b354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b358:	f7ff ff66 	bl	800b228 <__hexdig_fun>
 800b35c:	1e43      	subs	r3, r0, #1
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b18      	cmp	r3, #24
 800b362:	d91d      	bls.n	800b3a0 <__gethex+0x14c>
 800b364:	f1b9 0f00 	cmp.w	r9, #0
 800b368:	d000      	beq.n	800b36c <__gethex+0x118>
 800b36a:	4252      	negs	r2, r2
 800b36c:	4415      	add	r5, r2
 800b36e:	f8cb 1000 	str.w	r1, [fp]
 800b372:	b1e4      	cbz	r4, 800b3ae <__gethex+0x15a>
 800b374:	9b00      	ldr	r3, [sp, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bf14      	ite	ne
 800b37a:	2700      	movne	r7, #0
 800b37c:	2706      	moveq	r7, #6
 800b37e:	4638      	mov	r0, r7
 800b380:	b009      	add	sp, #36	; 0x24
 800b382:	ecbd 8b02 	vpop	{d8}
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	463e      	mov	r6, r7
 800b38c:	4625      	mov	r5, r4
 800b38e:	2401      	movs	r4, #1
 800b390:	e7ca      	b.n	800b328 <__gethex+0xd4>
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	1cb1      	adds	r1, r6, #2
 800b398:	e7d3      	b.n	800b342 <__gethex+0xee>
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	e7fa      	b.n	800b396 <__gethex+0x142>
 800b3a0:	230a      	movs	r3, #10
 800b3a2:	fb03 0202 	mla	r2, r3, r2, r0
 800b3a6:	3a10      	subs	r2, #16
 800b3a8:	e7d4      	b.n	800b354 <__gethex+0x100>
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	e7df      	b.n	800b36e <__gethex+0x11a>
 800b3ae:	1bf3      	subs	r3, r6, r7
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	dc0b      	bgt.n	800b3d0 <__gethex+0x17c>
 800b3b8:	ee18 0a10 	vmov	r0, s16
 800b3bc:	f000 fa90 	bl	800b8e0 <_Balloc>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	b940      	cbnz	r0, 800b3d6 <__gethex+0x182>
 800b3c4:	4b5d      	ldr	r3, [pc, #372]	; (800b53c <__gethex+0x2e8>)
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	21de      	movs	r1, #222	; 0xde
 800b3ca:	485d      	ldr	r0, [pc, #372]	; (800b540 <__gethex+0x2ec>)
 800b3cc:	f001 fde0 	bl	800cf90 <__assert_func>
 800b3d0:	3101      	adds	r1, #1
 800b3d2:	105b      	asrs	r3, r3, #1
 800b3d4:	e7ee      	b.n	800b3b4 <__gethex+0x160>
 800b3d6:	f100 0914 	add.w	r9, r0, #20
 800b3da:	f04f 0b00 	mov.w	fp, #0
 800b3de:	f1ca 0301 	rsb	r3, sl, #1
 800b3e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3e6:	f8cd b000 	str.w	fp, [sp]
 800b3ea:	9306      	str	r3, [sp, #24]
 800b3ec:	42b7      	cmp	r7, r6
 800b3ee:	d340      	bcc.n	800b472 <__gethex+0x21e>
 800b3f0:	9802      	ldr	r0, [sp, #8]
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	f840 3b04 	str.w	r3, [r0], #4
 800b3f8:	eba0 0009 	sub.w	r0, r0, r9
 800b3fc:	1080      	asrs	r0, r0, #2
 800b3fe:	0146      	lsls	r6, r0, #5
 800b400:	6120      	str	r0, [r4, #16]
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fb5e 	bl	800bac4 <__hi0bits>
 800b408:	1a30      	subs	r0, r6, r0
 800b40a:	f8d8 6000 	ldr.w	r6, [r8]
 800b40e:	42b0      	cmp	r0, r6
 800b410:	dd63      	ble.n	800b4da <__gethex+0x286>
 800b412:	1b87      	subs	r7, r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	4620      	mov	r0, r4
 800b418:	f000 ff02 	bl	800c220 <__any_on>
 800b41c:	4682      	mov	sl, r0
 800b41e:	b1a8      	cbz	r0, 800b44c <__gethex+0x1f8>
 800b420:	1e7b      	subs	r3, r7, #1
 800b422:	1159      	asrs	r1, r3, #5
 800b424:	f003 021f 	and.w	r2, r3, #31
 800b428:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b42c:	f04f 0a01 	mov.w	sl, #1
 800b430:	fa0a f202 	lsl.w	r2, sl, r2
 800b434:	420a      	tst	r2, r1
 800b436:	d009      	beq.n	800b44c <__gethex+0x1f8>
 800b438:	4553      	cmp	r3, sl
 800b43a:	dd05      	ble.n	800b448 <__gethex+0x1f4>
 800b43c:	1eb9      	subs	r1, r7, #2
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 feee 	bl	800c220 <__any_on>
 800b444:	2800      	cmp	r0, #0
 800b446:	d145      	bne.n	800b4d4 <__gethex+0x280>
 800b448:	f04f 0a02 	mov.w	sl, #2
 800b44c:	4639      	mov	r1, r7
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff fe98 	bl	800b184 <rshift>
 800b454:	443d      	add	r5, r7
 800b456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45a:	42ab      	cmp	r3, r5
 800b45c:	da4c      	bge.n	800b4f8 <__gethex+0x2a4>
 800b45e:	ee18 0a10 	vmov	r0, s16
 800b462:	4621      	mov	r1, r4
 800b464:	f000 fa7c 	bl	800b960 <_Bfree>
 800b468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b46a:	2300      	movs	r3, #0
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	27a3      	movs	r7, #163	; 0xa3
 800b470:	e785      	b.n	800b37e <__gethex+0x12a>
 800b472:	1e73      	subs	r3, r6, #1
 800b474:	9a05      	ldr	r2, [sp, #20]
 800b476:	9303      	str	r3, [sp, #12]
 800b478:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d019      	beq.n	800b4b4 <__gethex+0x260>
 800b480:	f1bb 0f20 	cmp.w	fp, #32
 800b484:	d107      	bne.n	800b496 <__gethex+0x242>
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	9a00      	ldr	r2, [sp, #0]
 800b48a:	f843 2b04 	str.w	r2, [r3], #4
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	2300      	movs	r3, #0
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	469b      	mov	fp, r3
 800b496:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b49a:	f7ff fec5 	bl	800b228 <__hexdig_fun>
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	f000 000f 	and.w	r0, r0, #15
 800b4a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4a8:	4303      	orrs	r3, r0
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	f10b 0b04 	add.w	fp, fp, #4
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	e00d      	b.n	800b4d0 <__gethex+0x27c>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	9a06      	ldr	r2, [sp, #24]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	42bb      	cmp	r3, r7
 800b4bc:	d3e0      	bcc.n	800b480 <__gethex+0x22c>
 800b4be:	4618      	mov	r0, r3
 800b4c0:	9901      	ldr	r1, [sp, #4]
 800b4c2:	9307      	str	r3, [sp, #28]
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	f7fe f8fc 	bl	80096c2 <strncmp>
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1d7      	bne.n	800b480 <__gethex+0x22c>
 800b4d0:	461e      	mov	r6, r3
 800b4d2:	e78b      	b.n	800b3ec <__gethex+0x198>
 800b4d4:	f04f 0a03 	mov.w	sl, #3
 800b4d8:	e7b8      	b.n	800b44c <__gethex+0x1f8>
 800b4da:	da0a      	bge.n	800b4f2 <__gethex+0x29e>
 800b4dc:	1a37      	subs	r7, r6, r0
 800b4de:	4621      	mov	r1, r4
 800b4e0:	ee18 0a10 	vmov	r0, s16
 800b4e4:	463a      	mov	r2, r7
 800b4e6:	f000 fc57 	bl	800bd98 <__lshift>
 800b4ea:	1bed      	subs	r5, r5, r7
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	f100 0914 	add.w	r9, r0, #20
 800b4f2:	f04f 0a00 	mov.w	sl, #0
 800b4f6:	e7ae      	b.n	800b456 <__gethex+0x202>
 800b4f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4fc:	42a8      	cmp	r0, r5
 800b4fe:	dd72      	ble.n	800b5e6 <__gethex+0x392>
 800b500:	1b45      	subs	r5, r0, r5
 800b502:	42ae      	cmp	r6, r5
 800b504:	dc36      	bgt.n	800b574 <__gethex+0x320>
 800b506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d02a      	beq.n	800b564 <__gethex+0x310>
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d02c      	beq.n	800b56c <__gethex+0x318>
 800b512:	2b01      	cmp	r3, #1
 800b514:	d11c      	bne.n	800b550 <__gethex+0x2fc>
 800b516:	42ae      	cmp	r6, r5
 800b518:	d11a      	bne.n	800b550 <__gethex+0x2fc>
 800b51a:	2e01      	cmp	r6, #1
 800b51c:	d112      	bne.n	800b544 <__gethex+0x2f0>
 800b51e:	9a04      	ldr	r2, [sp, #16]
 800b520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	2301      	movs	r3, #1
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	f8c9 3000 	str.w	r3, [r9]
 800b52e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b530:	2762      	movs	r7, #98	; 0x62
 800b532:	601c      	str	r4, [r3, #0]
 800b534:	e723      	b.n	800b37e <__gethex+0x12a>
 800b536:	bf00      	nop
 800b538:	0800dd40 	.word	0x0800dd40
 800b53c:	0800dcc8 	.word	0x0800dcc8
 800b540:	0800dcd9 	.word	0x0800dcd9
 800b544:	1e71      	subs	r1, r6, #1
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fe6a 	bl	800c220 <__any_on>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1e6      	bne.n	800b51e <__gethex+0x2ca>
 800b550:	ee18 0a10 	vmov	r0, s16
 800b554:	4621      	mov	r1, r4
 800b556:	f000 fa03 	bl	800b960 <_Bfree>
 800b55a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b55c:	2300      	movs	r3, #0
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	2750      	movs	r7, #80	; 0x50
 800b562:	e70c      	b.n	800b37e <__gethex+0x12a>
 800b564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f2      	bne.n	800b550 <__gethex+0x2fc>
 800b56a:	e7d8      	b.n	800b51e <__gethex+0x2ca>
 800b56c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1d5      	bne.n	800b51e <__gethex+0x2ca>
 800b572:	e7ed      	b.n	800b550 <__gethex+0x2fc>
 800b574:	1e6f      	subs	r7, r5, #1
 800b576:	f1ba 0f00 	cmp.w	sl, #0
 800b57a:	d131      	bne.n	800b5e0 <__gethex+0x38c>
 800b57c:	b127      	cbz	r7, 800b588 <__gethex+0x334>
 800b57e:	4639      	mov	r1, r7
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fe4d 	bl	800c220 <__any_on>
 800b586:	4682      	mov	sl, r0
 800b588:	117b      	asrs	r3, r7, #5
 800b58a:	2101      	movs	r1, #1
 800b58c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b590:	f007 071f 	and.w	r7, r7, #31
 800b594:	fa01 f707 	lsl.w	r7, r1, r7
 800b598:	421f      	tst	r7, r3
 800b59a:	4629      	mov	r1, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	bf18      	it	ne
 800b5a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5a4:	1b76      	subs	r6, r6, r5
 800b5a6:	f7ff fded 	bl	800b184 <rshift>
 800b5aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5ae:	2702      	movs	r7, #2
 800b5b0:	f1ba 0f00 	cmp.w	sl, #0
 800b5b4:	d048      	beq.n	800b648 <__gethex+0x3f4>
 800b5b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d015      	beq.n	800b5ea <__gethex+0x396>
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d017      	beq.n	800b5f2 <__gethex+0x39e>
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d109      	bne.n	800b5da <__gethex+0x386>
 800b5c6:	f01a 0f02 	tst.w	sl, #2
 800b5ca:	d006      	beq.n	800b5da <__gethex+0x386>
 800b5cc:	f8d9 0000 	ldr.w	r0, [r9]
 800b5d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5d4:	f01a 0f01 	tst.w	sl, #1
 800b5d8:	d10e      	bne.n	800b5f8 <__gethex+0x3a4>
 800b5da:	f047 0710 	orr.w	r7, r7, #16
 800b5de:	e033      	b.n	800b648 <__gethex+0x3f4>
 800b5e0:	f04f 0a01 	mov.w	sl, #1
 800b5e4:	e7d0      	b.n	800b588 <__gethex+0x334>
 800b5e6:	2701      	movs	r7, #1
 800b5e8:	e7e2      	b.n	800b5b0 <__gethex+0x35c>
 800b5ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ec:	f1c3 0301 	rsb	r3, r3, #1
 800b5f0:	9315      	str	r3, [sp, #84]	; 0x54
 800b5f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0f0      	beq.n	800b5da <__gethex+0x386>
 800b5f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5fc:	f104 0314 	add.w	r3, r4, #20
 800b600:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b604:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b608:	f04f 0c00 	mov.w	ip, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b612:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b616:	d01c      	beq.n	800b652 <__gethex+0x3fe>
 800b618:	3201      	adds	r2, #1
 800b61a:	6002      	str	r2, [r0, #0]
 800b61c:	2f02      	cmp	r7, #2
 800b61e:	f104 0314 	add.w	r3, r4, #20
 800b622:	d13f      	bne.n	800b6a4 <__gethex+0x450>
 800b624:	f8d8 2000 	ldr.w	r2, [r8]
 800b628:	3a01      	subs	r2, #1
 800b62a:	42b2      	cmp	r2, r6
 800b62c:	d10a      	bne.n	800b644 <__gethex+0x3f0>
 800b62e:	1171      	asrs	r1, r6, #5
 800b630:	2201      	movs	r2, #1
 800b632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b636:	f006 061f 	and.w	r6, r6, #31
 800b63a:	fa02 f606 	lsl.w	r6, r2, r6
 800b63e:	421e      	tst	r6, r3
 800b640:	bf18      	it	ne
 800b642:	4617      	movne	r7, r2
 800b644:	f047 0720 	orr.w	r7, r7, #32
 800b648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b64a:	601c      	str	r4, [r3, #0]
 800b64c:	9b04      	ldr	r3, [sp, #16]
 800b64e:	601d      	str	r5, [r3, #0]
 800b650:	e695      	b.n	800b37e <__gethex+0x12a>
 800b652:	4299      	cmp	r1, r3
 800b654:	f843 cc04 	str.w	ip, [r3, #-4]
 800b658:	d8d8      	bhi.n	800b60c <__gethex+0x3b8>
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	459b      	cmp	fp, r3
 800b65e:	db19      	blt.n	800b694 <__gethex+0x440>
 800b660:	6861      	ldr	r1, [r4, #4]
 800b662:	ee18 0a10 	vmov	r0, s16
 800b666:	3101      	adds	r1, #1
 800b668:	f000 f93a 	bl	800b8e0 <_Balloc>
 800b66c:	4681      	mov	r9, r0
 800b66e:	b918      	cbnz	r0, 800b678 <__gethex+0x424>
 800b670:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <__gethex+0x488>)
 800b672:	4602      	mov	r2, r0
 800b674:	2184      	movs	r1, #132	; 0x84
 800b676:	e6a8      	b.n	800b3ca <__gethex+0x176>
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	3202      	adds	r2, #2
 800b67c:	f104 010c 	add.w	r1, r4, #12
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	300c      	adds	r0, #12
 800b684:	f000 f91e 	bl	800b8c4 <memcpy>
 800b688:	4621      	mov	r1, r4
 800b68a:	ee18 0a10 	vmov	r0, s16
 800b68e:	f000 f967 	bl	800b960 <_Bfree>
 800b692:	464c      	mov	r4, r9
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b69c:	6122      	str	r2, [r4, #16]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	615a      	str	r2, [r3, #20]
 800b6a2:	e7bb      	b.n	800b61c <__gethex+0x3c8>
 800b6a4:	6922      	ldr	r2, [r4, #16]
 800b6a6:	455a      	cmp	r2, fp
 800b6a8:	dd0b      	ble.n	800b6c2 <__gethex+0x46e>
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7ff fd69 	bl	800b184 <rshift>
 800b6b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6b6:	3501      	adds	r5, #1
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	f6ff aed0 	blt.w	800b45e <__gethex+0x20a>
 800b6be:	2701      	movs	r7, #1
 800b6c0:	e7c0      	b.n	800b644 <__gethex+0x3f0>
 800b6c2:	f016 061f 	ands.w	r6, r6, #31
 800b6c6:	d0fa      	beq.n	800b6be <__gethex+0x46a>
 800b6c8:	4453      	add	r3, sl
 800b6ca:	f1c6 0620 	rsb	r6, r6, #32
 800b6ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6d2:	f000 f9f7 	bl	800bac4 <__hi0bits>
 800b6d6:	42b0      	cmp	r0, r6
 800b6d8:	dbe7      	blt.n	800b6aa <__gethex+0x456>
 800b6da:	e7f0      	b.n	800b6be <__gethex+0x46a>
 800b6dc:	0800dcc8 	.word	0x0800dcc8

0800b6e0 <L_shift>:
 800b6e0:	f1c2 0208 	rsb	r2, r2, #8
 800b6e4:	0092      	lsls	r2, r2, #2
 800b6e6:	b570      	push	{r4, r5, r6, lr}
 800b6e8:	f1c2 0620 	rsb	r6, r2, #32
 800b6ec:	6843      	ldr	r3, [r0, #4]
 800b6ee:	6804      	ldr	r4, [r0, #0]
 800b6f0:	fa03 f506 	lsl.w	r5, r3, r6
 800b6f4:	432c      	orrs	r4, r5
 800b6f6:	40d3      	lsrs	r3, r2
 800b6f8:	6004      	str	r4, [r0, #0]
 800b6fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6fe:	4288      	cmp	r0, r1
 800b700:	d3f4      	bcc.n	800b6ec <L_shift+0xc>
 800b702:	bd70      	pop	{r4, r5, r6, pc}

0800b704 <__match>:
 800b704:	b530      	push	{r4, r5, lr}
 800b706:	6803      	ldr	r3, [r0, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b70e:	b914      	cbnz	r4, 800b716 <__match+0x12>
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	2001      	movs	r0, #1
 800b714:	bd30      	pop	{r4, r5, pc}
 800b716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b71e:	2d19      	cmp	r5, #25
 800b720:	bf98      	it	ls
 800b722:	3220      	addls	r2, #32
 800b724:	42a2      	cmp	r2, r4
 800b726:	d0f0      	beq.n	800b70a <__match+0x6>
 800b728:	2000      	movs	r0, #0
 800b72a:	e7f3      	b.n	800b714 <__match+0x10>

0800b72c <__hexnan>:
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	680b      	ldr	r3, [r1, #0]
 800b732:	115e      	asrs	r6, r3, #5
 800b734:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b738:	f013 031f 	ands.w	r3, r3, #31
 800b73c:	b087      	sub	sp, #28
 800b73e:	bf18      	it	ne
 800b740:	3604      	addne	r6, #4
 800b742:	2500      	movs	r5, #0
 800b744:	1f37      	subs	r7, r6, #4
 800b746:	4690      	mov	r8, r2
 800b748:	6802      	ldr	r2, [r0, #0]
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	4682      	mov	sl, r0
 800b74e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b752:	46b9      	mov	r9, r7
 800b754:	463c      	mov	r4, r7
 800b756:	9502      	str	r5, [sp, #8]
 800b758:	46ab      	mov	fp, r5
 800b75a:	7851      	ldrb	r1, [r2, #1]
 800b75c:	1c53      	adds	r3, r2, #1
 800b75e:	9303      	str	r3, [sp, #12]
 800b760:	b341      	cbz	r1, 800b7b4 <__hexnan+0x88>
 800b762:	4608      	mov	r0, r1
 800b764:	9205      	str	r2, [sp, #20]
 800b766:	9104      	str	r1, [sp, #16]
 800b768:	f7ff fd5e 	bl	800b228 <__hexdig_fun>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d14f      	bne.n	800b810 <__hexnan+0xe4>
 800b770:	9904      	ldr	r1, [sp, #16]
 800b772:	9a05      	ldr	r2, [sp, #20]
 800b774:	2920      	cmp	r1, #32
 800b776:	d818      	bhi.n	800b7aa <__hexnan+0x7e>
 800b778:	9b02      	ldr	r3, [sp, #8]
 800b77a:	459b      	cmp	fp, r3
 800b77c:	dd13      	ble.n	800b7a6 <__hexnan+0x7a>
 800b77e:	454c      	cmp	r4, r9
 800b780:	d206      	bcs.n	800b790 <__hexnan+0x64>
 800b782:	2d07      	cmp	r5, #7
 800b784:	dc04      	bgt.n	800b790 <__hexnan+0x64>
 800b786:	462a      	mov	r2, r5
 800b788:	4649      	mov	r1, r9
 800b78a:	4620      	mov	r0, r4
 800b78c:	f7ff ffa8 	bl	800b6e0 <L_shift>
 800b790:	4544      	cmp	r4, r8
 800b792:	d950      	bls.n	800b836 <__hexnan+0x10a>
 800b794:	2300      	movs	r3, #0
 800b796:	f1a4 0904 	sub.w	r9, r4, #4
 800b79a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b79e:	f8cd b008 	str.w	fp, [sp, #8]
 800b7a2:	464c      	mov	r4, r9
 800b7a4:	461d      	mov	r5, r3
 800b7a6:	9a03      	ldr	r2, [sp, #12]
 800b7a8:	e7d7      	b.n	800b75a <__hexnan+0x2e>
 800b7aa:	2929      	cmp	r1, #41	; 0x29
 800b7ac:	d156      	bne.n	800b85c <__hexnan+0x130>
 800b7ae:	3202      	adds	r2, #2
 800b7b0:	f8ca 2000 	str.w	r2, [sl]
 800b7b4:	f1bb 0f00 	cmp.w	fp, #0
 800b7b8:	d050      	beq.n	800b85c <__hexnan+0x130>
 800b7ba:	454c      	cmp	r4, r9
 800b7bc:	d206      	bcs.n	800b7cc <__hexnan+0xa0>
 800b7be:	2d07      	cmp	r5, #7
 800b7c0:	dc04      	bgt.n	800b7cc <__hexnan+0xa0>
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff ff8a 	bl	800b6e0 <L_shift>
 800b7cc:	4544      	cmp	r4, r8
 800b7ce:	d934      	bls.n	800b83a <__hexnan+0x10e>
 800b7d0:	f1a8 0204 	sub.w	r2, r8, #4
 800b7d4:	4623      	mov	r3, r4
 800b7d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7da:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7de:	429f      	cmp	r7, r3
 800b7e0:	d2f9      	bcs.n	800b7d6 <__hexnan+0xaa>
 800b7e2:	1b3b      	subs	r3, r7, r4
 800b7e4:	f023 0303 	bic.w	r3, r3, #3
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	3401      	adds	r4, #1
 800b7ec:	3e03      	subs	r6, #3
 800b7ee:	42b4      	cmp	r4, r6
 800b7f0:	bf88      	it	hi
 800b7f2:	2304      	movhi	r3, #4
 800b7f4:	4443      	add	r3, r8
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f843 2b04 	str.w	r2, [r3], #4
 800b7fc:	429f      	cmp	r7, r3
 800b7fe:	d2fb      	bcs.n	800b7f8 <__hexnan+0xcc>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	b91b      	cbnz	r3, 800b80c <__hexnan+0xe0>
 800b804:	4547      	cmp	r7, r8
 800b806:	d127      	bne.n	800b858 <__hexnan+0x12c>
 800b808:	2301      	movs	r3, #1
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	2005      	movs	r0, #5
 800b80e:	e026      	b.n	800b85e <__hexnan+0x132>
 800b810:	3501      	adds	r5, #1
 800b812:	2d08      	cmp	r5, #8
 800b814:	f10b 0b01 	add.w	fp, fp, #1
 800b818:	dd06      	ble.n	800b828 <__hexnan+0xfc>
 800b81a:	4544      	cmp	r4, r8
 800b81c:	d9c3      	bls.n	800b7a6 <__hexnan+0x7a>
 800b81e:	2300      	movs	r3, #0
 800b820:	f844 3c04 	str.w	r3, [r4, #-4]
 800b824:	2501      	movs	r5, #1
 800b826:	3c04      	subs	r4, #4
 800b828:	6822      	ldr	r2, [r4, #0]
 800b82a:	f000 000f 	and.w	r0, r0, #15
 800b82e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b832:	6022      	str	r2, [r4, #0]
 800b834:	e7b7      	b.n	800b7a6 <__hexnan+0x7a>
 800b836:	2508      	movs	r5, #8
 800b838:	e7b5      	b.n	800b7a6 <__hexnan+0x7a>
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0df      	beq.n	800b800 <__hexnan+0xd4>
 800b840:	f04f 32ff 	mov.w	r2, #4294967295
 800b844:	f1c3 0320 	rsb	r3, r3, #32
 800b848:	fa22 f303 	lsr.w	r3, r2, r3
 800b84c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b850:	401a      	ands	r2, r3
 800b852:	f846 2c04 	str.w	r2, [r6, #-4]
 800b856:	e7d3      	b.n	800b800 <__hexnan+0xd4>
 800b858:	3f04      	subs	r7, #4
 800b85a:	e7d1      	b.n	800b800 <__hexnan+0xd4>
 800b85c:	2004      	movs	r0, #4
 800b85e:	b007      	add	sp, #28
 800b860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b864 <_localeconv_r>:
 800b864:	4800      	ldr	r0, [pc, #0]	; (800b868 <_localeconv_r+0x4>)
 800b866:	4770      	bx	lr
 800b868:	20000200 	.word	0x20000200

0800b86c <_lseek_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d07      	ldr	r5, [pc, #28]	; (800b88c <_lseek_r+0x20>)
 800b870:	4604      	mov	r4, r0
 800b872:	4608      	mov	r0, r1
 800b874:	4611      	mov	r1, r2
 800b876:	2200      	movs	r2, #0
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f7f7 fb9a 	bl	8002fb4 <_lseek>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_lseek_r+0x1e>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_lseek_r+0x1e>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20000544 	.word	0x20000544

0800b890 <malloc>:
 800b890:	4b02      	ldr	r3, [pc, #8]	; (800b89c <malloc+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f000 bd67 	b.w	800c368 <_malloc_r>
 800b89a:	bf00      	nop
 800b89c:	200000a8 	.word	0x200000a8

0800b8a0 <__ascii_mbtowc>:
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	b901      	cbnz	r1, 800b8a6 <__ascii_mbtowc+0x6>
 800b8a4:	a901      	add	r1, sp, #4
 800b8a6:	b142      	cbz	r2, 800b8ba <__ascii_mbtowc+0x1a>
 800b8a8:	b14b      	cbz	r3, 800b8be <__ascii_mbtowc+0x1e>
 800b8aa:	7813      	ldrb	r3, [r2, #0]
 800b8ac:	600b      	str	r3, [r1, #0]
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	1e10      	subs	r0, r2, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	2001      	movne	r0, #1
 800b8b6:	b002      	add	sp, #8
 800b8b8:	4770      	bx	lr
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	e7fb      	b.n	800b8b6 <__ascii_mbtowc+0x16>
 800b8be:	f06f 0001 	mvn.w	r0, #1
 800b8c2:	e7f8      	b.n	800b8b6 <__ascii_mbtowc+0x16>

0800b8c4 <memcpy>:
 800b8c4:	440a      	add	r2, r1
 800b8c6:	4291      	cmp	r1, r2
 800b8c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8cc:	d100      	bne.n	800b8d0 <memcpy+0xc>
 800b8ce:	4770      	bx	lr
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	d1f9      	bne.n	800b8d2 <memcpy+0xe>
 800b8de:	bd10      	pop	{r4, pc}

0800b8e0 <_Balloc>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	b976      	cbnz	r6, 800b908 <_Balloc+0x28>
 800b8ea:	2010      	movs	r0, #16
 800b8ec:	f7ff ffd0 	bl	800b890 <malloc>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b8f4:	b920      	cbnz	r0, 800b900 <_Balloc+0x20>
 800b8f6:	4b18      	ldr	r3, [pc, #96]	; (800b958 <_Balloc+0x78>)
 800b8f8:	4818      	ldr	r0, [pc, #96]	; (800b95c <_Balloc+0x7c>)
 800b8fa:	2166      	movs	r1, #102	; 0x66
 800b8fc:	f001 fb48 	bl	800cf90 <__assert_func>
 800b900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b904:	6006      	str	r6, [r0, #0]
 800b906:	60c6      	str	r6, [r0, #12]
 800b908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b90a:	68f3      	ldr	r3, [r6, #12]
 800b90c:	b183      	cbz	r3, 800b930 <_Balloc+0x50>
 800b90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b916:	b9b8      	cbnz	r0, 800b948 <_Balloc+0x68>
 800b918:	2101      	movs	r1, #1
 800b91a:	fa01 f605 	lsl.w	r6, r1, r5
 800b91e:	1d72      	adds	r2, r6, #5
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fc9d 	bl	800c262 <_calloc_r>
 800b928:	b160      	cbz	r0, 800b944 <_Balloc+0x64>
 800b92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b92e:	e00e      	b.n	800b94e <_Balloc+0x6e>
 800b930:	2221      	movs	r2, #33	; 0x21
 800b932:	2104      	movs	r1, #4
 800b934:	4620      	mov	r0, r4
 800b936:	f000 fc94 	bl	800c262 <_calloc_r>
 800b93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b93c:	60f0      	str	r0, [r6, #12]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e4      	bne.n	800b90e <_Balloc+0x2e>
 800b944:	2000      	movs	r0, #0
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	6802      	ldr	r2, [r0, #0]
 800b94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b94e:	2300      	movs	r3, #0
 800b950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b954:	e7f7      	b.n	800b946 <_Balloc+0x66>
 800b956:	bf00      	nop
 800b958:	0800dc56 	.word	0x0800dc56
 800b95c:	0800dd54 	.word	0x0800dd54

0800b960 <_Bfree>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b964:	4605      	mov	r5, r0
 800b966:	460c      	mov	r4, r1
 800b968:	b976      	cbnz	r6, 800b988 <_Bfree+0x28>
 800b96a:	2010      	movs	r0, #16
 800b96c:	f7ff ff90 	bl	800b890 <malloc>
 800b970:	4602      	mov	r2, r0
 800b972:	6268      	str	r0, [r5, #36]	; 0x24
 800b974:	b920      	cbnz	r0, 800b980 <_Bfree+0x20>
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <_Bfree+0x3c>)
 800b978:	4809      	ldr	r0, [pc, #36]	; (800b9a0 <_Bfree+0x40>)
 800b97a:	218a      	movs	r1, #138	; 0x8a
 800b97c:	f001 fb08 	bl	800cf90 <__assert_func>
 800b980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b984:	6006      	str	r6, [r0, #0]
 800b986:	60c6      	str	r6, [r0, #12]
 800b988:	b13c      	cbz	r4, 800b99a <_Bfree+0x3a>
 800b98a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b98c:	6862      	ldr	r2, [r4, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b994:	6021      	str	r1, [r4, #0]
 800b996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	0800dc56 	.word	0x0800dc56
 800b9a0:	0800dd54 	.word	0x0800dd54

0800b9a4 <__multadd>:
 800b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a8:	690d      	ldr	r5, [r1, #16]
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	461e      	mov	r6, r3
 800b9b0:	f101 0c14 	add.w	ip, r1, #20
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ba:	b299      	uxth	r1, r3
 800b9bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b9c0:	0c1e      	lsrs	r6, r3, #16
 800b9c2:	0c0b      	lsrs	r3, r1, #16
 800b9c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b9c8:	b289      	uxth	r1, r1
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9d0:	4285      	cmp	r5, r0
 800b9d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9da:	dcec      	bgt.n	800b9b6 <__multadd+0x12>
 800b9dc:	b30e      	cbz	r6, 800ba22 <__multadd+0x7e>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	42ab      	cmp	r3, r5
 800b9e2:	dc19      	bgt.n	800ba18 <__multadd+0x74>
 800b9e4:	6861      	ldr	r1, [r4, #4]
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	3101      	adds	r1, #1
 800b9ea:	f7ff ff79 	bl	800b8e0 <_Balloc>
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	b928      	cbnz	r0, 800b9fe <__multadd+0x5a>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <__multadd+0x84>)
 800b9f6:	480d      	ldr	r0, [pc, #52]	; (800ba2c <__multadd+0x88>)
 800b9f8:	21b5      	movs	r1, #181	; 0xb5
 800b9fa:	f001 fac9 	bl	800cf90 <__assert_func>
 800b9fe:	6922      	ldr	r2, [r4, #16]
 800ba00:	3202      	adds	r2, #2
 800ba02:	f104 010c 	add.w	r1, r4, #12
 800ba06:	0092      	lsls	r2, r2, #2
 800ba08:	300c      	adds	r0, #12
 800ba0a:	f7ff ff5b 	bl	800b8c4 <memcpy>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ffa5 	bl	800b960 <_Bfree>
 800ba16:	4644      	mov	r4, r8
 800ba18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	615e      	str	r6, [r3, #20]
 800ba20:	6125      	str	r5, [r4, #16]
 800ba22:	4620      	mov	r0, r4
 800ba24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba28:	0800dcc8 	.word	0x0800dcc8
 800ba2c:	0800dd54 	.word	0x0800dd54

0800ba30 <__s2b>:
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	4615      	mov	r5, r2
 800ba38:	461f      	mov	r7, r3
 800ba3a:	2209      	movs	r2, #9
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	4606      	mov	r6, r0
 800ba40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba44:	2100      	movs	r1, #0
 800ba46:	2201      	movs	r2, #1
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	db09      	blt.n	800ba60 <__s2b+0x30>
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff ff47 	bl	800b8e0 <_Balloc>
 800ba52:	b940      	cbnz	r0, 800ba66 <__s2b+0x36>
 800ba54:	4602      	mov	r2, r0
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <__s2b+0x8c>)
 800ba58:	4819      	ldr	r0, [pc, #100]	; (800bac0 <__s2b+0x90>)
 800ba5a:	21ce      	movs	r1, #206	; 0xce
 800ba5c:	f001 fa98 	bl	800cf90 <__assert_func>
 800ba60:	0052      	lsls	r2, r2, #1
 800ba62:	3101      	adds	r1, #1
 800ba64:	e7f0      	b.n	800ba48 <__s2b+0x18>
 800ba66:	9b08      	ldr	r3, [sp, #32]
 800ba68:	6143      	str	r3, [r0, #20]
 800ba6a:	2d09      	cmp	r5, #9
 800ba6c:	f04f 0301 	mov.w	r3, #1
 800ba70:	6103      	str	r3, [r0, #16]
 800ba72:	dd16      	ble.n	800baa2 <__s2b+0x72>
 800ba74:	f104 0909 	add.w	r9, r4, #9
 800ba78:	46c8      	mov	r8, r9
 800ba7a:	442c      	add	r4, r5
 800ba7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba80:	4601      	mov	r1, r0
 800ba82:	3b30      	subs	r3, #48	; 0x30
 800ba84:	220a      	movs	r2, #10
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7ff ff8c 	bl	800b9a4 <__multadd>
 800ba8c:	45a0      	cmp	r8, r4
 800ba8e:	d1f5      	bne.n	800ba7c <__s2b+0x4c>
 800ba90:	f1a5 0408 	sub.w	r4, r5, #8
 800ba94:	444c      	add	r4, r9
 800ba96:	1b2d      	subs	r5, r5, r4
 800ba98:	1963      	adds	r3, r4, r5
 800ba9a:	42bb      	cmp	r3, r7
 800ba9c:	db04      	blt.n	800baa8 <__s2b+0x78>
 800ba9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa2:	340a      	adds	r4, #10
 800baa4:	2509      	movs	r5, #9
 800baa6:	e7f6      	b.n	800ba96 <__s2b+0x66>
 800baa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800baac:	4601      	mov	r1, r0
 800baae:	3b30      	subs	r3, #48	; 0x30
 800bab0:	220a      	movs	r2, #10
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7ff ff76 	bl	800b9a4 <__multadd>
 800bab8:	e7ee      	b.n	800ba98 <__s2b+0x68>
 800baba:	bf00      	nop
 800babc:	0800dcc8 	.word	0x0800dcc8
 800bac0:	0800dd54 	.word	0x0800dd54

0800bac4 <__hi0bits>:
 800bac4:	0c03      	lsrs	r3, r0, #16
 800bac6:	041b      	lsls	r3, r3, #16
 800bac8:	b9d3      	cbnz	r3, 800bb00 <__hi0bits+0x3c>
 800baca:	0400      	lsls	r0, r0, #16
 800bacc:	2310      	movs	r3, #16
 800bace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bad2:	bf04      	itt	eq
 800bad4:	0200      	lsleq	r0, r0, #8
 800bad6:	3308      	addeq	r3, #8
 800bad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800badc:	bf04      	itt	eq
 800bade:	0100      	lsleq	r0, r0, #4
 800bae0:	3304      	addeq	r3, #4
 800bae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bae6:	bf04      	itt	eq
 800bae8:	0080      	lsleq	r0, r0, #2
 800baea:	3302      	addeq	r3, #2
 800baec:	2800      	cmp	r0, #0
 800baee:	db05      	blt.n	800bafc <__hi0bits+0x38>
 800baf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800baf4:	f103 0301 	add.w	r3, r3, #1
 800baf8:	bf08      	it	eq
 800bafa:	2320      	moveq	r3, #32
 800bafc:	4618      	mov	r0, r3
 800bafe:	4770      	bx	lr
 800bb00:	2300      	movs	r3, #0
 800bb02:	e7e4      	b.n	800bace <__hi0bits+0xa>

0800bb04 <__lo0bits>:
 800bb04:	6803      	ldr	r3, [r0, #0]
 800bb06:	f013 0207 	ands.w	r2, r3, #7
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	d00b      	beq.n	800bb26 <__lo0bits+0x22>
 800bb0e:	07da      	lsls	r2, r3, #31
 800bb10:	d423      	bmi.n	800bb5a <__lo0bits+0x56>
 800bb12:	0798      	lsls	r0, r3, #30
 800bb14:	bf49      	itett	mi
 800bb16:	085b      	lsrmi	r3, r3, #1
 800bb18:	089b      	lsrpl	r3, r3, #2
 800bb1a:	2001      	movmi	r0, #1
 800bb1c:	600b      	strmi	r3, [r1, #0]
 800bb1e:	bf5c      	itt	pl
 800bb20:	600b      	strpl	r3, [r1, #0]
 800bb22:	2002      	movpl	r0, #2
 800bb24:	4770      	bx	lr
 800bb26:	b298      	uxth	r0, r3
 800bb28:	b9a8      	cbnz	r0, 800bb56 <__lo0bits+0x52>
 800bb2a:	0c1b      	lsrs	r3, r3, #16
 800bb2c:	2010      	movs	r0, #16
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	b90a      	cbnz	r2, 800bb36 <__lo0bits+0x32>
 800bb32:	3008      	adds	r0, #8
 800bb34:	0a1b      	lsrs	r3, r3, #8
 800bb36:	071a      	lsls	r2, r3, #28
 800bb38:	bf04      	itt	eq
 800bb3a:	091b      	lsreq	r3, r3, #4
 800bb3c:	3004      	addeq	r0, #4
 800bb3e:	079a      	lsls	r2, r3, #30
 800bb40:	bf04      	itt	eq
 800bb42:	089b      	lsreq	r3, r3, #2
 800bb44:	3002      	addeq	r0, #2
 800bb46:	07da      	lsls	r2, r3, #31
 800bb48:	d403      	bmi.n	800bb52 <__lo0bits+0x4e>
 800bb4a:	085b      	lsrs	r3, r3, #1
 800bb4c:	f100 0001 	add.w	r0, r0, #1
 800bb50:	d005      	beq.n	800bb5e <__lo0bits+0x5a>
 800bb52:	600b      	str	r3, [r1, #0]
 800bb54:	4770      	bx	lr
 800bb56:	4610      	mov	r0, r2
 800bb58:	e7e9      	b.n	800bb2e <__lo0bits+0x2a>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	4770      	bx	lr
 800bb5e:	2020      	movs	r0, #32
 800bb60:	4770      	bx	lr
	...

0800bb64 <__i2b>:
 800bb64:	b510      	push	{r4, lr}
 800bb66:	460c      	mov	r4, r1
 800bb68:	2101      	movs	r1, #1
 800bb6a:	f7ff feb9 	bl	800b8e0 <_Balloc>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	b928      	cbnz	r0, 800bb7e <__i2b+0x1a>
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <__i2b+0x24>)
 800bb74:	4805      	ldr	r0, [pc, #20]	; (800bb8c <__i2b+0x28>)
 800bb76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb7a:	f001 fa09 	bl	800cf90 <__assert_func>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	6144      	str	r4, [r0, #20]
 800bb82:	6103      	str	r3, [r0, #16]
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	bf00      	nop
 800bb88:	0800dcc8 	.word	0x0800dcc8
 800bb8c:	0800dd54 	.word	0x0800dd54

0800bb90 <__multiply>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4691      	mov	r9, r2
 800bb96:	690a      	ldr	r2, [r1, #16]
 800bb98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	bfb8      	it	lt
 800bba0:	460b      	movlt	r3, r1
 800bba2:	460c      	mov	r4, r1
 800bba4:	bfbc      	itt	lt
 800bba6:	464c      	movlt	r4, r9
 800bba8:	4699      	movlt	r9, r3
 800bbaa:	6927      	ldr	r7, [r4, #16]
 800bbac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbb0:	68a3      	ldr	r3, [r4, #8]
 800bbb2:	6861      	ldr	r1, [r4, #4]
 800bbb4:	eb07 060a 	add.w	r6, r7, sl
 800bbb8:	42b3      	cmp	r3, r6
 800bbba:	b085      	sub	sp, #20
 800bbbc:	bfb8      	it	lt
 800bbbe:	3101      	addlt	r1, #1
 800bbc0:	f7ff fe8e 	bl	800b8e0 <_Balloc>
 800bbc4:	b930      	cbnz	r0, 800bbd4 <__multiply+0x44>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	4b44      	ldr	r3, [pc, #272]	; (800bcdc <__multiply+0x14c>)
 800bbca:	4845      	ldr	r0, [pc, #276]	; (800bce0 <__multiply+0x150>)
 800bbcc:	f240 115d 	movw	r1, #349	; 0x15d
 800bbd0:	f001 f9de 	bl	800cf90 <__assert_func>
 800bbd4:	f100 0514 	add.w	r5, r0, #20
 800bbd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbdc:	462b      	mov	r3, r5
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4543      	cmp	r3, r8
 800bbe2:	d321      	bcc.n	800bc28 <__multiply+0x98>
 800bbe4:	f104 0314 	add.w	r3, r4, #20
 800bbe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbec:	f109 0314 	add.w	r3, r9, #20
 800bbf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbf4:	9202      	str	r2, [sp, #8]
 800bbf6:	1b3a      	subs	r2, r7, r4
 800bbf8:	3a15      	subs	r2, #21
 800bbfa:	f022 0203 	bic.w	r2, r2, #3
 800bbfe:	3204      	adds	r2, #4
 800bc00:	f104 0115 	add.w	r1, r4, #21
 800bc04:	428f      	cmp	r7, r1
 800bc06:	bf38      	it	cc
 800bc08:	2204      	movcc	r2, #4
 800bc0a:	9201      	str	r2, [sp, #4]
 800bc0c:	9a02      	ldr	r2, [sp, #8]
 800bc0e:	9303      	str	r3, [sp, #12]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d80c      	bhi.n	800bc2e <__multiply+0x9e>
 800bc14:	2e00      	cmp	r6, #0
 800bc16:	dd03      	ble.n	800bc20 <__multiply+0x90>
 800bc18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d05a      	beq.n	800bcd6 <__multiply+0x146>
 800bc20:	6106      	str	r6, [r0, #16]
 800bc22:	b005      	add	sp, #20
 800bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc28:	f843 2b04 	str.w	r2, [r3], #4
 800bc2c:	e7d8      	b.n	800bbe0 <__multiply+0x50>
 800bc2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc32:	f1ba 0f00 	cmp.w	sl, #0
 800bc36:	d024      	beq.n	800bc82 <__multiply+0xf2>
 800bc38:	f104 0e14 	add.w	lr, r4, #20
 800bc3c:	46a9      	mov	r9, r5
 800bc3e:	f04f 0c00 	mov.w	ip, #0
 800bc42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc46:	f8d9 1000 	ldr.w	r1, [r9]
 800bc4a:	fa1f fb82 	uxth.w	fp, r2
 800bc4e:	b289      	uxth	r1, r1
 800bc50:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc58:	f8d9 2000 	ldr.w	r2, [r9]
 800bc5c:	4461      	add	r1, ip
 800bc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc62:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc6a:	b289      	uxth	r1, r1
 800bc6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc70:	4577      	cmp	r7, lr
 800bc72:	f849 1b04 	str.w	r1, [r9], #4
 800bc76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc7a:	d8e2      	bhi.n	800bc42 <__multiply+0xb2>
 800bc7c:	9a01      	ldr	r2, [sp, #4]
 800bc7e:	f845 c002 	str.w	ip, [r5, r2]
 800bc82:	9a03      	ldr	r2, [sp, #12]
 800bc84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	f1b9 0f00 	cmp.w	r9, #0
 800bc8e:	d020      	beq.n	800bcd2 <__multiply+0x142>
 800bc90:	6829      	ldr	r1, [r5, #0]
 800bc92:	f104 0c14 	add.w	ip, r4, #20
 800bc96:	46ae      	mov	lr, r5
 800bc98:	f04f 0a00 	mov.w	sl, #0
 800bc9c:	f8bc b000 	ldrh.w	fp, [ip]
 800bca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bca4:	fb09 220b 	mla	r2, r9, fp, r2
 800bca8:	4492      	add	sl, r2
 800bcaa:	b289      	uxth	r1, r1
 800bcac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcb0:	f84e 1b04 	str.w	r1, [lr], #4
 800bcb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcb8:	f8be 1000 	ldrh.w	r1, [lr]
 800bcbc:	0c12      	lsrs	r2, r2, #16
 800bcbe:	fb09 1102 	mla	r1, r9, r2, r1
 800bcc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcc6:	4567      	cmp	r7, ip
 800bcc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bccc:	d8e6      	bhi.n	800bc9c <__multiply+0x10c>
 800bcce:	9a01      	ldr	r2, [sp, #4]
 800bcd0:	50a9      	str	r1, [r5, r2]
 800bcd2:	3504      	adds	r5, #4
 800bcd4:	e79a      	b.n	800bc0c <__multiply+0x7c>
 800bcd6:	3e01      	subs	r6, #1
 800bcd8:	e79c      	b.n	800bc14 <__multiply+0x84>
 800bcda:	bf00      	nop
 800bcdc:	0800dcc8 	.word	0x0800dcc8
 800bce0:	0800dd54 	.word	0x0800dd54

0800bce4 <__pow5mult>:
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce8:	4615      	mov	r5, r2
 800bcea:	f012 0203 	ands.w	r2, r2, #3
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460f      	mov	r7, r1
 800bcf2:	d007      	beq.n	800bd04 <__pow5mult+0x20>
 800bcf4:	4c25      	ldr	r4, [pc, #148]	; (800bd8c <__pow5mult+0xa8>)
 800bcf6:	3a01      	subs	r2, #1
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcfe:	f7ff fe51 	bl	800b9a4 <__multadd>
 800bd02:	4607      	mov	r7, r0
 800bd04:	10ad      	asrs	r5, r5, #2
 800bd06:	d03d      	beq.n	800bd84 <__pow5mult+0xa0>
 800bd08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd0a:	b97c      	cbnz	r4, 800bd2c <__pow5mult+0x48>
 800bd0c:	2010      	movs	r0, #16
 800bd0e:	f7ff fdbf 	bl	800b890 <malloc>
 800bd12:	4602      	mov	r2, r0
 800bd14:	6270      	str	r0, [r6, #36]	; 0x24
 800bd16:	b928      	cbnz	r0, 800bd24 <__pow5mult+0x40>
 800bd18:	4b1d      	ldr	r3, [pc, #116]	; (800bd90 <__pow5mult+0xac>)
 800bd1a:	481e      	ldr	r0, [pc, #120]	; (800bd94 <__pow5mult+0xb0>)
 800bd1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd20:	f001 f936 	bl	800cf90 <__assert_func>
 800bd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd28:	6004      	str	r4, [r0, #0]
 800bd2a:	60c4      	str	r4, [r0, #12]
 800bd2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd34:	b94c      	cbnz	r4, 800bd4a <__pow5mult+0x66>
 800bd36:	f240 2171 	movw	r1, #625	; 0x271
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff ff12 	bl	800bb64 <__i2b>
 800bd40:	2300      	movs	r3, #0
 800bd42:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd46:	4604      	mov	r4, r0
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	f04f 0900 	mov.w	r9, #0
 800bd4e:	07eb      	lsls	r3, r5, #31
 800bd50:	d50a      	bpl.n	800bd68 <__pow5mult+0x84>
 800bd52:	4639      	mov	r1, r7
 800bd54:	4622      	mov	r2, r4
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7ff ff1a 	bl	800bb90 <__multiply>
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4680      	mov	r8, r0
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7ff fdfd 	bl	800b960 <_Bfree>
 800bd66:	4647      	mov	r7, r8
 800bd68:	106d      	asrs	r5, r5, #1
 800bd6a:	d00b      	beq.n	800bd84 <__pow5mult+0xa0>
 800bd6c:	6820      	ldr	r0, [r4, #0]
 800bd6e:	b938      	cbnz	r0, 800bd80 <__pow5mult+0x9c>
 800bd70:	4622      	mov	r2, r4
 800bd72:	4621      	mov	r1, r4
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff ff0b 	bl	800bb90 <__multiply>
 800bd7a:	6020      	str	r0, [r4, #0]
 800bd7c:	f8c0 9000 	str.w	r9, [r0]
 800bd80:	4604      	mov	r4, r0
 800bd82:	e7e4      	b.n	800bd4e <__pow5mult+0x6a>
 800bd84:	4638      	mov	r0, r7
 800bd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd8a:	bf00      	nop
 800bd8c:	0800dea0 	.word	0x0800dea0
 800bd90:	0800dc56 	.word	0x0800dc56
 800bd94:	0800dd54 	.word	0x0800dd54

0800bd98 <__lshift>:
 800bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	6849      	ldr	r1, [r1, #4]
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	4607      	mov	r7, r0
 800bdaa:	4691      	mov	r9, r2
 800bdac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdb0:	f108 0601 	add.w	r6, r8, #1
 800bdb4:	42b3      	cmp	r3, r6
 800bdb6:	db0b      	blt.n	800bdd0 <__lshift+0x38>
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f7ff fd91 	bl	800b8e0 <_Balloc>
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	b948      	cbnz	r0, 800bdd6 <__lshift+0x3e>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	4b2a      	ldr	r3, [pc, #168]	; (800be70 <__lshift+0xd8>)
 800bdc6:	482b      	ldr	r0, [pc, #172]	; (800be74 <__lshift+0xdc>)
 800bdc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdcc:	f001 f8e0 	bl	800cf90 <__assert_func>
 800bdd0:	3101      	adds	r1, #1
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	e7ee      	b.n	800bdb4 <__lshift+0x1c>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f100 0114 	add.w	r1, r0, #20
 800bddc:	f100 0210 	add.w	r2, r0, #16
 800bde0:	4618      	mov	r0, r3
 800bde2:	4553      	cmp	r3, sl
 800bde4:	db37      	blt.n	800be56 <__lshift+0xbe>
 800bde6:	6920      	ldr	r0, [r4, #16]
 800bde8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdec:	f104 0314 	add.w	r3, r4, #20
 800bdf0:	f019 091f 	ands.w	r9, r9, #31
 800bdf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdfc:	d02f      	beq.n	800be5e <__lshift+0xc6>
 800bdfe:	f1c9 0e20 	rsb	lr, r9, #32
 800be02:	468a      	mov	sl, r1
 800be04:	f04f 0c00 	mov.w	ip, #0
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	fa02 f209 	lsl.w	r2, r2, r9
 800be0e:	ea42 020c 	orr.w	r2, r2, ip
 800be12:	f84a 2b04 	str.w	r2, [sl], #4
 800be16:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1a:	4298      	cmp	r0, r3
 800be1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be20:	d8f2      	bhi.n	800be08 <__lshift+0x70>
 800be22:	1b03      	subs	r3, r0, r4
 800be24:	3b15      	subs	r3, #21
 800be26:	f023 0303 	bic.w	r3, r3, #3
 800be2a:	3304      	adds	r3, #4
 800be2c:	f104 0215 	add.w	r2, r4, #21
 800be30:	4290      	cmp	r0, r2
 800be32:	bf38      	it	cc
 800be34:	2304      	movcc	r3, #4
 800be36:	f841 c003 	str.w	ip, [r1, r3]
 800be3a:	f1bc 0f00 	cmp.w	ip, #0
 800be3e:	d001      	beq.n	800be44 <__lshift+0xac>
 800be40:	f108 0602 	add.w	r6, r8, #2
 800be44:	3e01      	subs	r6, #1
 800be46:	4638      	mov	r0, r7
 800be48:	612e      	str	r6, [r5, #16]
 800be4a:	4621      	mov	r1, r4
 800be4c:	f7ff fd88 	bl	800b960 <_Bfree>
 800be50:	4628      	mov	r0, r5
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	f842 0f04 	str.w	r0, [r2, #4]!
 800be5a:	3301      	adds	r3, #1
 800be5c:	e7c1      	b.n	800bde2 <__lshift+0x4a>
 800be5e:	3904      	subs	r1, #4
 800be60:	f853 2b04 	ldr.w	r2, [r3], #4
 800be64:	f841 2f04 	str.w	r2, [r1, #4]!
 800be68:	4298      	cmp	r0, r3
 800be6a:	d8f9      	bhi.n	800be60 <__lshift+0xc8>
 800be6c:	e7ea      	b.n	800be44 <__lshift+0xac>
 800be6e:	bf00      	nop
 800be70:	0800dcc8 	.word	0x0800dcc8
 800be74:	0800dd54 	.word	0x0800dd54

0800be78 <__mcmp>:
 800be78:	b530      	push	{r4, r5, lr}
 800be7a:	6902      	ldr	r2, [r0, #16]
 800be7c:	690c      	ldr	r4, [r1, #16]
 800be7e:	1b12      	subs	r2, r2, r4
 800be80:	d10e      	bne.n	800bea0 <__mcmp+0x28>
 800be82:	f100 0314 	add.w	r3, r0, #20
 800be86:	3114      	adds	r1, #20
 800be88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be98:	42a5      	cmp	r5, r4
 800be9a:	d003      	beq.n	800bea4 <__mcmp+0x2c>
 800be9c:	d305      	bcc.n	800beaa <__mcmp+0x32>
 800be9e:	2201      	movs	r2, #1
 800bea0:	4610      	mov	r0, r2
 800bea2:	bd30      	pop	{r4, r5, pc}
 800bea4:	4283      	cmp	r3, r0
 800bea6:	d3f3      	bcc.n	800be90 <__mcmp+0x18>
 800bea8:	e7fa      	b.n	800bea0 <__mcmp+0x28>
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	e7f7      	b.n	800bea0 <__mcmp+0x28>

0800beb0 <__mdiff>:
 800beb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	460c      	mov	r4, r1
 800beb6:	4606      	mov	r6, r0
 800beb8:	4611      	mov	r1, r2
 800beba:	4620      	mov	r0, r4
 800bebc:	4690      	mov	r8, r2
 800bebe:	f7ff ffdb 	bl	800be78 <__mcmp>
 800bec2:	1e05      	subs	r5, r0, #0
 800bec4:	d110      	bne.n	800bee8 <__mdiff+0x38>
 800bec6:	4629      	mov	r1, r5
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff fd09 	bl	800b8e0 <_Balloc>
 800bece:	b930      	cbnz	r0, 800bede <__mdiff+0x2e>
 800bed0:	4b3a      	ldr	r3, [pc, #232]	; (800bfbc <__mdiff+0x10c>)
 800bed2:	4602      	mov	r2, r0
 800bed4:	f240 2132 	movw	r1, #562	; 0x232
 800bed8:	4839      	ldr	r0, [pc, #228]	; (800bfc0 <__mdiff+0x110>)
 800beda:	f001 f859 	bl	800cf90 <__assert_func>
 800bede:	2301      	movs	r3, #1
 800bee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee8:	bfa4      	itt	ge
 800beea:	4643      	movge	r3, r8
 800beec:	46a0      	movge	r8, r4
 800beee:	4630      	mov	r0, r6
 800bef0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bef4:	bfa6      	itte	ge
 800bef6:	461c      	movge	r4, r3
 800bef8:	2500      	movge	r5, #0
 800befa:	2501      	movlt	r5, #1
 800befc:	f7ff fcf0 	bl	800b8e0 <_Balloc>
 800bf00:	b920      	cbnz	r0, 800bf0c <__mdiff+0x5c>
 800bf02:	4b2e      	ldr	r3, [pc, #184]	; (800bfbc <__mdiff+0x10c>)
 800bf04:	4602      	mov	r2, r0
 800bf06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf0a:	e7e5      	b.n	800bed8 <__mdiff+0x28>
 800bf0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf10:	6926      	ldr	r6, [r4, #16]
 800bf12:	60c5      	str	r5, [r0, #12]
 800bf14:	f104 0914 	add.w	r9, r4, #20
 800bf18:	f108 0514 	add.w	r5, r8, #20
 800bf1c:	f100 0e14 	add.w	lr, r0, #20
 800bf20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf28:	f108 0210 	add.w	r2, r8, #16
 800bf2c:	46f2      	mov	sl, lr
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf38:	fa1f f883 	uxth.w	r8, r3
 800bf3c:	fa11 f18b 	uxtah	r1, r1, fp
 800bf40:	0c1b      	lsrs	r3, r3, #16
 800bf42:	eba1 0808 	sub.w	r8, r1, r8
 800bf46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf4e:	fa1f f888 	uxth.w	r8, r8
 800bf52:	1419      	asrs	r1, r3, #16
 800bf54:	454e      	cmp	r6, r9
 800bf56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf5a:	f84a 3b04 	str.w	r3, [sl], #4
 800bf5e:	d8e7      	bhi.n	800bf30 <__mdiff+0x80>
 800bf60:	1b33      	subs	r3, r6, r4
 800bf62:	3b15      	subs	r3, #21
 800bf64:	f023 0303 	bic.w	r3, r3, #3
 800bf68:	3304      	adds	r3, #4
 800bf6a:	3415      	adds	r4, #21
 800bf6c:	42a6      	cmp	r6, r4
 800bf6e:	bf38      	it	cc
 800bf70:	2304      	movcc	r3, #4
 800bf72:	441d      	add	r5, r3
 800bf74:	4473      	add	r3, lr
 800bf76:	469e      	mov	lr, r3
 800bf78:	462e      	mov	r6, r5
 800bf7a:	4566      	cmp	r6, ip
 800bf7c:	d30e      	bcc.n	800bf9c <__mdiff+0xec>
 800bf7e:	f10c 0203 	add.w	r2, ip, #3
 800bf82:	1b52      	subs	r2, r2, r5
 800bf84:	f022 0203 	bic.w	r2, r2, #3
 800bf88:	3d03      	subs	r5, #3
 800bf8a:	45ac      	cmp	ip, r5
 800bf8c:	bf38      	it	cc
 800bf8e:	2200      	movcc	r2, #0
 800bf90:	441a      	add	r2, r3
 800bf92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf96:	b17b      	cbz	r3, 800bfb8 <__mdiff+0x108>
 800bf98:	6107      	str	r7, [r0, #16]
 800bf9a:	e7a3      	b.n	800bee4 <__mdiff+0x34>
 800bf9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfa0:	fa11 f288 	uxtah	r2, r1, r8
 800bfa4:	1414      	asrs	r4, r2, #16
 800bfa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfaa:	b292      	uxth	r2, r2
 800bfac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfb0:	f84e 2b04 	str.w	r2, [lr], #4
 800bfb4:	1421      	asrs	r1, r4, #16
 800bfb6:	e7e0      	b.n	800bf7a <__mdiff+0xca>
 800bfb8:	3f01      	subs	r7, #1
 800bfba:	e7ea      	b.n	800bf92 <__mdiff+0xe2>
 800bfbc:	0800dcc8 	.word	0x0800dcc8
 800bfc0:	0800dd54 	.word	0x0800dd54

0800bfc4 <__ulp>:
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	ed8d 0b00 	vstr	d0, [sp]
 800bfca:	9b01      	ldr	r3, [sp, #4]
 800bfcc:	4912      	ldr	r1, [pc, #72]	; (800c018 <__ulp+0x54>)
 800bfce:	4019      	ands	r1, r3
 800bfd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	dd05      	ble.n	800bfe4 <__ulp+0x20>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	ec43 2b10 	vmov	d0, r2, r3
 800bfe0:	b002      	add	sp, #8
 800bfe2:	4770      	bx	lr
 800bfe4:	4249      	negs	r1, r1
 800bfe6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	da04      	bge.n	800c002 <__ulp+0x3e>
 800bff8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bffc:	fa41 f300 	asr.w	r3, r1, r0
 800c000:	e7ec      	b.n	800bfdc <__ulp+0x18>
 800c002:	f1a0 0114 	sub.w	r1, r0, #20
 800c006:	291e      	cmp	r1, #30
 800c008:	bfda      	itte	le
 800c00a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c00e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c012:	2101      	movgt	r1, #1
 800c014:	460a      	mov	r2, r1
 800c016:	e7e1      	b.n	800bfdc <__ulp+0x18>
 800c018:	7ff00000 	.word	0x7ff00000

0800c01c <__b2d>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	6905      	ldr	r5, [r0, #16]
 800c020:	f100 0714 	add.w	r7, r0, #20
 800c024:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c028:	1f2e      	subs	r6, r5, #4
 800c02a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff fd48 	bl	800bac4 <__hi0bits>
 800c034:	f1c0 0320 	rsb	r3, r0, #32
 800c038:	280a      	cmp	r0, #10
 800c03a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0b8 <__b2d+0x9c>
 800c03e:	600b      	str	r3, [r1, #0]
 800c040:	dc14      	bgt.n	800c06c <__b2d+0x50>
 800c042:	f1c0 0e0b 	rsb	lr, r0, #11
 800c046:	fa24 f10e 	lsr.w	r1, r4, lr
 800c04a:	42b7      	cmp	r7, r6
 800c04c:	ea41 030c 	orr.w	r3, r1, ip
 800c050:	bf34      	ite	cc
 800c052:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c056:	2100      	movcs	r1, #0
 800c058:	3015      	adds	r0, #21
 800c05a:	fa04 f000 	lsl.w	r0, r4, r0
 800c05e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c062:	ea40 0201 	orr.w	r2, r0, r1
 800c066:	ec43 2b10 	vmov	d0, r2, r3
 800c06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c06c:	42b7      	cmp	r7, r6
 800c06e:	bf3a      	itte	cc
 800c070:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c074:	f1a5 0608 	subcc.w	r6, r5, #8
 800c078:	2100      	movcs	r1, #0
 800c07a:	380b      	subs	r0, #11
 800c07c:	d017      	beq.n	800c0ae <__b2d+0x92>
 800c07e:	f1c0 0c20 	rsb	ip, r0, #32
 800c082:	fa04 f500 	lsl.w	r5, r4, r0
 800c086:	42be      	cmp	r6, r7
 800c088:	fa21 f40c 	lsr.w	r4, r1, ip
 800c08c:	ea45 0504 	orr.w	r5, r5, r4
 800c090:	bf8c      	ite	hi
 800c092:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c096:	2400      	movls	r4, #0
 800c098:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c09c:	fa01 f000 	lsl.w	r0, r1, r0
 800c0a0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0a8:	ea40 0204 	orr.w	r2, r0, r4
 800c0ac:	e7db      	b.n	800c066 <__b2d+0x4a>
 800c0ae:	ea44 030c 	orr.w	r3, r4, ip
 800c0b2:	460a      	mov	r2, r1
 800c0b4:	e7d7      	b.n	800c066 <__b2d+0x4a>
 800c0b6:	bf00      	nop
 800c0b8:	3ff00000 	.word	0x3ff00000

0800c0bc <__d2b>:
 800c0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	ec57 6b10 	vmov	r6, r7, d0
 800c0c8:	4690      	mov	r8, r2
 800c0ca:	f7ff fc09 	bl	800b8e0 <_Balloc>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	b930      	cbnz	r0, 800c0e0 <__d2b+0x24>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	4b25      	ldr	r3, [pc, #148]	; (800c16c <__d2b+0xb0>)
 800c0d6:	4826      	ldr	r0, [pc, #152]	; (800c170 <__d2b+0xb4>)
 800c0d8:	f240 310a 	movw	r1, #778	; 0x30a
 800c0dc:	f000 ff58 	bl	800cf90 <__assert_func>
 800c0e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e8:	bb35      	cbnz	r5, 800c138 <__d2b+0x7c>
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	d028      	beq.n	800c142 <__d2b+0x86>
 800c0f0:	4668      	mov	r0, sp
 800c0f2:	9600      	str	r6, [sp, #0]
 800c0f4:	f7ff fd06 	bl	800bb04 <__lo0bits>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	b300      	cbz	r0, 800c13e <__d2b+0x82>
 800c0fc:	9a01      	ldr	r2, [sp, #4]
 800c0fe:	f1c0 0320 	rsb	r3, r0, #32
 800c102:	fa02 f303 	lsl.w	r3, r2, r3
 800c106:	430b      	orrs	r3, r1
 800c108:	40c2      	lsrs	r2, r0
 800c10a:	6163      	str	r3, [r4, #20]
 800c10c:	9201      	str	r2, [sp, #4]
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	61a3      	str	r3, [r4, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	bf14      	ite	ne
 800c116:	2202      	movne	r2, #2
 800c118:	2201      	moveq	r2, #1
 800c11a:	6122      	str	r2, [r4, #16]
 800c11c:	b1d5      	cbz	r5, 800c154 <__d2b+0x98>
 800c11e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c122:	4405      	add	r5, r0
 800c124:	f8c9 5000 	str.w	r5, [r9]
 800c128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c12c:	f8c8 0000 	str.w	r0, [r8]
 800c130:	4620      	mov	r0, r4
 800c132:	b003      	add	sp, #12
 800c134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13c:	e7d5      	b.n	800c0ea <__d2b+0x2e>
 800c13e:	6161      	str	r1, [r4, #20]
 800c140:	e7e5      	b.n	800c10e <__d2b+0x52>
 800c142:	a801      	add	r0, sp, #4
 800c144:	f7ff fcde 	bl	800bb04 <__lo0bits>
 800c148:	9b01      	ldr	r3, [sp, #4]
 800c14a:	6163      	str	r3, [r4, #20]
 800c14c:	2201      	movs	r2, #1
 800c14e:	6122      	str	r2, [r4, #16]
 800c150:	3020      	adds	r0, #32
 800c152:	e7e3      	b.n	800c11c <__d2b+0x60>
 800c154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c15c:	f8c9 0000 	str.w	r0, [r9]
 800c160:	6918      	ldr	r0, [r3, #16]
 800c162:	f7ff fcaf 	bl	800bac4 <__hi0bits>
 800c166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c16a:	e7df      	b.n	800c12c <__d2b+0x70>
 800c16c:	0800dcc8 	.word	0x0800dcc8
 800c170:	0800dd54 	.word	0x0800dd54

0800c174 <__ratio>:
 800c174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c178:	4688      	mov	r8, r1
 800c17a:	4669      	mov	r1, sp
 800c17c:	4681      	mov	r9, r0
 800c17e:	f7ff ff4d 	bl	800c01c <__b2d>
 800c182:	a901      	add	r1, sp, #4
 800c184:	4640      	mov	r0, r8
 800c186:	ec55 4b10 	vmov	r4, r5, d0
 800c18a:	f7ff ff47 	bl	800c01c <__b2d>
 800c18e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c192:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c196:	eba3 0c02 	sub.w	ip, r3, r2
 800c19a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1a4:	ec51 0b10 	vmov	r0, r1, d0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfd6      	itet	le
 800c1ac:	460a      	movle	r2, r1
 800c1ae:	462a      	movgt	r2, r5
 800c1b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1b4:	468b      	mov	fp, r1
 800c1b6:	462f      	mov	r7, r5
 800c1b8:	bfd4      	ite	le
 800c1ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	ee10 2a10 	vmov	r2, s0
 800c1c8:	465b      	mov	r3, fp
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fb5e 	bl	800088c <__aeabi_ddiv>
 800c1d0:	ec41 0b10 	vmov	d0, r0, r1
 800c1d4:	b003      	add	sp, #12
 800c1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1da <__copybits>:
 800c1da:	3901      	subs	r1, #1
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	1149      	asrs	r1, r1, #5
 800c1e0:	6914      	ldr	r4, [r2, #16]
 800c1e2:	3101      	adds	r1, #1
 800c1e4:	f102 0314 	add.w	r3, r2, #20
 800c1e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1f0:	1f05      	subs	r5, r0, #4
 800c1f2:	42a3      	cmp	r3, r4
 800c1f4:	d30c      	bcc.n	800c210 <__copybits+0x36>
 800c1f6:	1aa3      	subs	r3, r4, r2
 800c1f8:	3b11      	subs	r3, #17
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	3211      	adds	r2, #17
 800c200:	42a2      	cmp	r2, r4
 800c202:	bf88      	it	hi
 800c204:	2300      	movhi	r3, #0
 800c206:	4418      	add	r0, r3
 800c208:	2300      	movs	r3, #0
 800c20a:	4288      	cmp	r0, r1
 800c20c:	d305      	bcc.n	800c21a <__copybits+0x40>
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	f853 6b04 	ldr.w	r6, [r3], #4
 800c214:	f845 6f04 	str.w	r6, [r5, #4]!
 800c218:	e7eb      	b.n	800c1f2 <__copybits+0x18>
 800c21a:	f840 3b04 	str.w	r3, [r0], #4
 800c21e:	e7f4      	b.n	800c20a <__copybits+0x30>

0800c220 <__any_on>:
 800c220:	f100 0214 	add.w	r2, r0, #20
 800c224:	6900      	ldr	r0, [r0, #16]
 800c226:	114b      	asrs	r3, r1, #5
 800c228:	4298      	cmp	r0, r3
 800c22a:	b510      	push	{r4, lr}
 800c22c:	db11      	blt.n	800c252 <__any_on+0x32>
 800c22e:	dd0a      	ble.n	800c246 <__any_on+0x26>
 800c230:	f011 011f 	ands.w	r1, r1, #31
 800c234:	d007      	beq.n	800c246 <__any_on+0x26>
 800c236:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c23a:	fa24 f001 	lsr.w	r0, r4, r1
 800c23e:	fa00 f101 	lsl.w	r1, r0, r1
 800c242:	428c      	cmp	r4, r1
 800c244:	d10b      	bne.n	800c25e <__any_on+0x3e>
 800c246:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d803      	bhi.n	800c256 <__any_on+0x36>
 800c24e:	2000      	movs	r0, #0
 800c250:	bd10      	pop	{r4, pc}
 800c252:	4603      	mov	r3, r0
 800c254:	e7f7      	b.n	800c246 <__any_on+0x26>
 800c256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25a:	2900      	cmp	r1, #0
 800c25c:	d0f5      	beq.n	800c24a <__any_on+0x2a>
 800c25e:	2001      	movs	r0, #1
 800c260:	e7f6      	b.n	800c250 <__any_on+0x30>

0800c262 <_calloc_r>:
 800c262:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c264:	fba1 2402 	umull	r2, r4, r1, r2
 800c268:	b94c      	cbnz	r4, 800c27e <_calloc_r+0x1c>
 800c26a:	4611      	mov	r1, r2
 800c26c:	9201      	str	r2, [sp, #4]
 800c26e:	f000 f87b 	bl	800c368 <_malloc_r>
 800c272:	9a01      	ldr	r2, [sp, #4]
 800c274:	4605      	mov	r5, r0
 800c276:	b930      	cbnz	r0, 800c286 <_calloc_r+0x24>
 800c278:	4628      	mov	r0, r5
 800c27a:	b003      	add	sp, #12
 800c27c:	bd30      	pop	{r4, r5, pc}
 800c27e:	220c      	movs	r2, #12
 800c280:	6002      	str	r2, [r0, #0]
 800c282:	2500      	movs	r5, #0
 800c284:	e7f8      	b.n	800c278 <_calloc_r+0x16>
 800c286:	4621      	mov	r1, r4
 800c288:	f7fc fb02 	bl	8008890 <memset>
 800c28c:	e7f4      	b.n	800c278 <_calloc_r+0x16>
	...

0800c290 <_free_r>:
 800c290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c292:	2900      	cmp	r1, #0
 800c294:	d044      	beq.n	800c320 <_free_r+0x90>
 800c296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c29a:	9001      	str	r0, [sp, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f1a1 0404 	sub.w	r4, r1, #4
 800c2a2:	bfb8      	it	lt
 800c2a4:	18e4      	addlt	r4, r4, r3
 800c2a6:	f001 f877 	bl	800d398 <__malloc_lock>
 800c2aa:	4a1e      	ldr	r2, [pc, #120]	; (800c324 <_free_r+0x94>)
 800c2ac:	9801      	ldr	r0, [sp, #4]
 800c2ae:	6813      	ldr	r3, [r2, #0]
 800c2b0:	b933      	cbnz	r3, 800c2c0 <_free_r+0x30>
 800c2b2:	6063      	str	r3, [r4, #4]
 800c2b4:	6014      	str	r4, [r2, #0]
 800c2b6:	b003      	add	sp, #12
 800c2b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2bc:	f001 b872 	b.w	800d3a4 <__malloc_unlock>
 800c2c0:	42a3      	cmp	r3, r4
 800c2c2:	d908      	bls.n	800c2d6 <_free_r+0x46>
 800c2c4:	6825      	ldr	r5, [r4, #0]
 800c2c6:	1961      	adds	r1, r4, r5
 800c2c8:	428b      	cmp	r3, r1
 800c2ca:	bf01      	itttt	eq
 800c2cc:	6819      	ldreq	r1, [r3, #0]
 800c2ce:	685b      	ldreq	r3, [r3, #4]
 800c2d0:	1949      	addeq	r1, r1, r5
 800c2d2:	6021      	streq	r1, [r4, #0]
 800c2d4:	e7ed      	b.n	800c2b2 <_free_r+0x22>
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	b10b      	cbz	r3, 800c2e0 <_free_r+0x50>
 800c2dc:	42a3      	cmp	r3, r4
 800c2de:	d9fa      	bls.n	800c2d6 <_free_r+0x46>
 800c2e0:	6811      	ldr	r1, [r2, #0]
 800c2e2:	1855      	adds	r5, r2, r1
 800c2e4:	42a5      	cmp	r5, r4
 800c2e6:	d10b      	bne.n	800c300 <_free_r+0x70>
 800c2e8:	6824      	ldr	r4, [r4, #0]
 800c2ea:	4421      	add	r1, r4
 800c2ec:	1854      	adds	r4, r2, r1
 800c2ee:	42a3      	cmp	r3, r4
 800c2f0:	6011      	str	r1, [r2, #0]
 800c2f2:	d1e0      	bne.n	800c2b6 <_free_r+0x26>
 800c2f4:	681c      	ldr	r4, [r3, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	6053      	str	r3, [r2, #4]
 800c2fa:	4421      	add	r1, r4
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	e7da      	b.n	800c2b6 <_free_r+0x26>
 800c300:	d902      	bls.n	800c308 <_free_r+0x78>
 800c302:	230c      	movs	r3, #12
 800c304:	6003      	str	r3, [r0, #0]
 800c306:	e7d6      	b.n	800c2b6 <_free_r+0x26>
 800c308:	6825      	ldr	r5, [r4, #0]
 800c30a:	1961      	adds	r1, r4, r5
 800c30c:	428b      	cmp	r3, r1
 800c30e:	bf04      	itt	eq
 800c310:	6819      	ldreq	r1, [r3, #0]
 800c312:	685b      	ldreq	r3, [r3, #4]
 800c314:	6063      	str	r3, [r4, #4]
 800c316:	bf04      	itt	eq
 800c318:	1949      	addeq	r1, r1, r5
 800c31a:	6021      	streq	r1, [r4, #0]
 800c31c:	6054      	str	r4, [r2, #4]
 800c31e:	e7ca      	b.n	800c2b6 <_free_r+0x26>
 800c320:	b003      	add	sp, #12
 800c322:	bd30      	pop	{r4, r5, pc}
 800c324:	2000053c 	.word	0x2000053c

0800c328 <sbrk_aligned>:
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	4e0e      	ldr	r6, [pc, #56]	; (800c364 <sbrk_aligned+0x3c>)
 800c32c:	460c      	mov	r4, r1
 800c32e:	6831      	ldr	r1, [r6, #0]
 800c330:	4605      	mov	r5, r0
 800c332:	b911      	cbnz	r1, 800c33a <sbrk_aligned+0x12>
 800c334:	f000 fd28 	bl	800cd88 <_sbrk_r>
 800c338:	6030      	str	r0, [r6, #0]
 800c33a:	4621      	mov	r1, r4
 800c33c:	4628      	mov	r0, r5
 800c33e:	f000 fd23 	bl	800cd88 <_sbrk_r>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d00a      	beq.n	800c35c <sbrk_aligned+0x34>
 800c346:	1cc4      	adds	r4, r0, #3
 800c348:	f024 0403 	bic.w	r4, r4, #3
 800c34c:	42a0      	cmp	r0, r4
 800c34e:	d007      	beq.n	800c360 <sbrk_aligned+0x38>
 800c350:	1a21      	subs	r1, r4, r0
 800c352:	4628      	mov	r0, r5
 800c354:	f000 fd18 	bl	800cd88 <_sbrk_r>
 800c358:	3001      	adds	r0, #1
 800c35a:	d101      	bne.n	800c360 <sbrk_aligned+0x38>
 800c35c:	f04f 34ff 	mov.w	r4, #4294967295
 800c360:	4620      	mov	r0, r4
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	20000540 	.word	0x20000540

0800c368 <_malloc_r>:
 800c368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36c:	1ccd      	adds	r5, r1, #3
 800c36e:	f025 0503 	bic.w	r5, r5, #3
 800c372:	3508      	adds	r5, #8
 800c374:	2d0c      	cmp	r5, #12
 800c376:	bf38      	it	cc
 800c378:	250c      	movcc	r5, #12
 800c37a:	2d00      	cmp	r5, #0
 800c37c:	4607      	mov	r7, r0
 800c37e:	db01      	blt.n	800c384 <_malloc_r+0x1c>
 800c380:	42a9      	cmp	r1, r5
 800c382:	d905      	bls.n	800c390 <_malloc_r+0x28>
 800c384:	230c      	movs	r3, #12
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	2600      	movs	r6, #0
 800c38a:	4630      	mov	r0, r6
 800c38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c390:	4e2e      	ldr	r6, [pc, #184]	; (800c44c <_malloc_r+0xe4>)
 800c392:	f001 f801 	bl	800d398 <__malloc_lock>
 800c396:	6833      	ldr	r3, [r6, #0]
 800c398:	461c      	mov	r4, r3
 800c39a:	bb34      	cbnz	r4, 800c3ea <_malloc_r+0x82>
 800c39c:	4629      	mov	r1, r5
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7ff ffc2 	bl	800c328 <sbrk_aligned>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	d14d      	bne.n	800c446 <_malloc_r+0xde>
 800c3aa:	6834      	ldr	r4, [r6, #0]
 800c3ac:	4626      	mov	r6, r4
 800c3ae:	2e00      	cmp	r6, #0
 800c3b0:	d140      	bne.n	800c434 <_malloc_r+0xcc>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	eb04 0803 	add.w	r8, r4, r3
 800c3bc:	f000 fce4 	bl	800cd88 <_sbrk_r>
 800c3c0:	4580      	cmp	r8, r0
 800c3c2:	d13a      	bne.n	800c43a <_malloc_r+0xd2>
 800c3c4:	6821      	ldr	r1, [r4, #0]
 800c3c6:	3503      	adds	r5, #3
 800c3c8:	1a6d      	subs	r5, r5, r1
 800c3ca:	f025 0503 	bic.w	r5, r5, #3
 800c3ce:	3508      	adds	r5, #8
 800c3d0:	2d0c      	cmp	r5, #12
 800c3d2:	bf38      	it	cc
 800c3d4:	250c      	movcc	r5, #12
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7ff ffa5 	bl	800c328 <sbrk_aligned>
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d02b      	beq.n	800c43a <_malloc_r+0xd2>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	442b      	add	r3, r5
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	e00e      	b.n	800c408 <_malloc_r+0xa0>
 800c3ea:	6822      	ldr	r2, [r4, #0]
 800c3ec:	1b52      	subs	r2, r2, r5
 800c3ee:	d41e      	bmi.n	800c42e <_malloc_r+0xc6>
 800c3f0:	2a0b      	cmp	r2, #11
 800c3f2:	d916      	bls.n	800c422 <_malloc_r+0xba>
 800c3f4:	1961      	adds	r1, r4, r5
 800c3f6:	42a3      	cmp	r3, r4
 800c3f8:	6025      	str	r5, [r4, #0]
 800c3fa:	bf18      	it	ne
 800c3fc:	6059      	strne	r1, [r3, #4]
 800c3fe:	6863      	ldr	r3, [r4, #4]
 800c400:	bf08      	it	eq
 800c402:	6031      	streq	r1, [r6, #0]
 800c404:	5162      	str	r2, [r4, r5]
 800c406:	604b      	str	r3, [r1, #4]
 800c408:	4638      	mov	r0, r7
 800c40a:	f104 060b 	add.w	r6, r4, #11
 800c40e:	f000 ffc9 	bl	800d3a4 <__malloc_unlock>
 800c412:	f026 0607 	bic.w	r6, r6, #7
 800c416:	1d23      	adds	r3, r4, #4
 800c418:	1af2      	subs	r2, r6, r3
 800c41a:	d0b6      	beq.n	800c38a <_malloc_r+0x22>
 800c41c:	1b9b      	subs	r3, r3, r6
 800c41e:	50a3      	str	r3, [r4, r2]
 800c420:	e7b3      	b.n	800c38a <_malloc_r+0x22>
 800c422:	6862      	ldr	r2, [r4, #4]
 800c424:	42a3      	cmp	r3, r4
 800c426:	bf0c      	ite	eq
 800c428:	6032      	streq	r2, [r6, #0]
 800c42a:	605a      	strne	r2, [r3, #4]
 800c42c:	e7ec      	b.n	800c408 <_malloc_r+0xa0>
 800c42e:	4623      	mov	r3, r4
 800c430:	6864      	ldr	r4, [r4, #4]
 800c432:	e7b2      	b.n	800c39a <_malloc_r+0x32>
 800c434:	4634      	mov	r4, r6
 800c436:	6876      	ldr	r6, [r6, #4]
 800c438:	e7b9      	b.n	800c3ae <_malloc_r+0x46>
 800c43a:	230c      	movs	r3, #12
 800c43c:	603b      	str	r3, [r7, #0]
 800c43e:	4638      	mov	r0, r7
 800c440:	f000 ffb0 	bl	800d3a4 <__malloc_unlock>
 800c444:	e7a1      	b.n	800c38a <_malloc_r+0x22>
 800c446:	6025      	str	r5, [r4, #0]
 800c448:	e7de      	b.n	800c408 <_malloc_r+0xa0>
 800c44a:	bf00      	nop
 800c44c:	2000053c 	.word	0x2000053c

0800c450 <__ssputs_r>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	688e      	ldr	r6, [r1, #8]
 800c456:	429e      	cmp	r6, r3
 800c458:	4682      	mov	sl, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4690      	mov	r8, r2
 800c45e:	461f      	mov	r7, r3
 800c460:	d838      	bhi.n	800c4d4 <__ssputs_r+0x84>
 800c462:	898a      	ldrh	r2, [r1, #12]
 800c464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c468:	d032      	beq.n	800c4d0 <__ssputs_r+0x80>
 800c46a:	6825      	ldr	r5, [r4, #0]
 800c46c:	6909      	ldr	r1, [r1, #16]
 800c46e:	eba5 0901 	sub.w	r9, r5, r1
 800c472:	6965      	ldr	r5, [r4, #20]
 800c474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c47c:	3301      	adds	r3, #1
 800c47e:	444b      	add	r3, r9
 800c480:	106d      	asrs	r5, r5, #1
 800c482:	429d      	cmp	r5, r3
 800c484:	bf38      	it	cc
 800c486:	461d      	movcc	r5, r3
 800c488:	0553      	lsls	r3, r2, #21
 800c48a:	d531      	bpl.n	800c4f0 <__ssputs_r+0xa0>
 800c48c:	4629      	mov	r1, r5
 800c48e:	f7ff ff6b 	bl	800c368 <_malloc_r>
 800c492:	4606      	mov	r6, r0
 800c494:	b950      	cbnz	r0, 800c4ac <__ssputs_r+0x5c>
 800c496:	230c      	movs	r3, #12
 800c498:	f8ca 3000 	str.w	r3, [sl]
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ac:	6921      	ldr	r1, [r4, #16]
 800c4ae:	464a      	mov	r2, r9
 800c4b0:	f7ff fa08 	bl	800b8c4 <memcpy>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	6126      	str	r6, [r4, #16]
 800c4c2:	6165      	str	r5, [r4, #20]
 800c4c4:	444e      	add	r6, r9
 800c4c6:	eba5 0509 	sub.w	r5, r5, r9
 800c4ca:	6026      	str	r6, [r4, #0]
 800c4cc:	60a5      	str	r5, [r4, #8]
 800c4ce:	463e      	mov	r6, r7
 800c4d0:	42be      	cmp	r6, r7
 800c4d2:	d900      	bls.n	800c4d6 <__ssputs_r+0x86>
 800c4d4:	463e      	mov	r6, r7
 800c4d6:	6820      	ldr	r0, [r4, #0]
 800c4d8:	4632      	mov	r2, r6
 800c4da:	4641      	mov	r1, r8
 800c4dc:	f000 ff42 	bl	800d364 <memmove>
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	1b9b      	subs	r3, r3, r6
 800c4e4:	60a3      	str	r3, [r4, #8]
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	4433      	add	r3, r6
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e7db      	b.n	800c4a8 <__ssputs_r+0x58>
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	f000 ff5d 	bl	800d3b0 <_realloc_r>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d1e1      	bne.n	800c4c0 <__ssputs_r+0x70>
 800c4fc:	6921      	ldr	r1, [r4, #16]
 800c4fe:	4650      	mov	r0, sl
 800c500:	f7ff fec6 	bl	800c290 <_free_r>
 800c504:	e7c7      	b.n	800c496 <__ssputs_r+0x46>
	...

0800c508 <_svfiprintf_r>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	4698      	mov	r8, r3
 800c50e:	898b      	ldrh	r3, [r1, #12]
 800c510:	061b      	lsls	r3, r3, #24
 800c512:	b09d      	sub	sp, #116	; 0x74
 800c514:	4607      	mov	r7, r0
 800c516:	460d      	mov	r5, r1
 800c518:	4614      	mov	r4, r2
 800c51a:	d50e      	bpl.n	800c53a <_svfiprintf_r+0x32>
 800c51c:	690b      	ldr	r3, [r1, #16]
 800c51e:	b963      	cbnz	r3, 800c53a <_svfiprintf_r+0x32>
 800c520:	2140      	movs	r1, #64	; 0x40
 800c522:	f7ff ff21 	bl	800c368 <_malloc_r>
 800c526:	6028      	str	r0, [r5, #0]
 800c528:	6128      	str	r0, [r5, #16]
 800c52a:	b920      	cbnz	r0, 800c536 <_svfiprintf_r+0x2e>
 800c52c:	230c      	movs	r3, #12
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	e0d1      	b.n	800c6da <_svfiprintf_r+0x1d2>
 800c536:	2340      	movs	r3, #64	; 0x40
 800c538:	616b      	str	r3, [r5, #20]
 800c53a:	2300      	movs	r3, #0
 800c53c:	9309      	str	r3, [sp, #36]	; 0x24
 800c53e:	2320      	movs	r3, #32
 800c540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c544:	f8cd 800c 	str.w	r8, [sp, #12]
 800c548:	2330      	movs	r3, #48	; 0x30
 800c54a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6f4 <_svfiprintf_r+0x1ec>
 800c54e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c552:	f04f 0901 	mov.w	r9, #1
 800c556:	4623      	mov	r3, r4
 800c558:	469a      	mov	sl, r3
 800c55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c55e:	b10a      	cbz	r2, 800c564 <_svfiprintf_r+0x5c>
 800c560:	2a25      	cmp	r2, #37	; 0x25
 800c562:	d1f9      	bne.n	800c558 <_svfiprintf_r+0x50>
 800c564:	ebba 0b04 	subs.w	fp, sl, r4
 800c568:	d00b      	beq.n	800c582 <_svfiprintf_r+0x7a>
 800c56a:	465b      	mov	r3, fp
 800c56c:	4622      	mov	r2, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff ff6d 	bl	800c450 <__ssputs_r>
 800c576:	3001      	adds	r0, #1
 800c578:	f000 80aa 	beq.w	800c6d0 <_svfiprintf_r+0x1c8>
 800c57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57e:	445a      	add	r2, fp
 800c580:	9209      	str	r2, [sp, #36]	; 0x24
 800c582:	f89a 3000 	ldrb.w	r3, [sl]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 80a2 	beq.w	800c6d0 <_svfiprintf_r+0x1c8>
 800c58c:	2300      	movs	r3, #0
 800c58e:	f04f 32ff 	mov.w	r2, #4294967295
 800c592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c596:	f10a 0a01 	add.w	sl, sl, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	9307      	str	r3, [sp, #28]
 800c59e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5a4:	4654      	mov	r4, sl
 800c5a6:	2205      	movs	r2, #5
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	4851      	ldr	r0, [pc, #324]	; (800c6f4 <_svfiprintf_r+0x1ec>)
 800c5ae:	f7f3 fe37 	bl	8000220 <memchr>
 800c5b2:	9a04      	ldr	r2, [sp, #16]
 800c5b4:	b9d8      	cbnz	r0, 800c5ee <_svfiprintf_r+0xe6>
 800c5b6:	06d0      	lsls	r0, r2, #27
 800c5b8:	bf44      	itt	mi
 800c5ba:	2320      	movmi	r3, #32
 800c5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c0:	0711      	lsls	r1, r2, #28
 800c5c2:	bf44      	itt	mi
 800c5c4:	232b      	movmi	r3, #43	; 0x2b
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d0:	d015      	beq.n	800c5fe <_svfiprintf_r+0xf6>
 800c5d2:	9a07      	ldr	r2, [sp, #28]
 800c5d4:	4654      	mov	r4, sl
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f04f 0c0a 	mov.w	ip, #10
 800c5dc:	4621      	mov	r1, r4
 800c5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e2:	3b30      	subs	r3, #48	; 0x30
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d94e      	bls.n	800c686 <_svfiprintf_r+0x17e>
 800c5e8:	b1b0      	cbz	r0, 800c618 <_svfiprintf_r+0x110>
 800c5ea:	9207      	str	r2, [sp, #28]
 800c5ec:	e014      	b.n	800c618 <_svfiprintf_r+0x110>
 800c5ee:	eba0 0308 	sub.w	r3, r0, r8
 800c5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	46a2      	mov	sl, r4
 800c5fc:	e7d2      	b.n	800c5a4 <_svfiprintf_r+0x9c>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	1d19      	adds	r1, r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	9103      	str	r1, [sp, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	bfbb      	ittet	lt
 800c60a:	425b      	neglt	r3, r3
 800c60c:	f042 0202 	orrlt.w	r2, r2, #2
 800c610:	9307      	strge	r3, [sp, #28]
 800c612:	9307      	strlt	r3, [sp, #28]
 800c614:	bfb8      	it	lt
 800c616:	9204      	strlt	r2, [sp, #16]
 800c618:	7823      	ldrb	r3, [r4, #0]
 800c61a:	2b2e      	cmp	r3, #46	; 0x2e
 800c61c:	d10c      	bne.n	800c638 <_svfiprintf_r+0x130>
 800c61e:	7863      	ldrb	r3, [r4, #1]
 800c620:	2b2a      	cmp	r3, #42	; 0x2a
 800c622:	d135      	bne.n	800c690 <_svfiprintf_r+0x188>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	1d1a      	adds	r2, r3, #4
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	9203      	str	r2, [sp, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bfb8      	it	lt
 800c630:	f04f 33ff 	movlt.w	r3, #4294967295
 800c634:	3402      	adds	r4, #2
 800c636:	9305      	str	r3, [sp, #20]
 800c638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c704 <_svfiprintf_r+0x1fc>
 800c63c:	7821      	ldrb	r1, [r4, #0]
 800c63e:	2203      	movs	r2, #3
 800c640:	4650      	mov	r0, sl
 800c642:	f7f3 fded 	bl	8000220 <memchr>
 800c646:	b140      	cbz	r0, 800c65a <_svfiprintf_r+0x152>
 800c648:	2340      	movs	r3, #64	; 0x40
 800c64a:	eba0 000a 	sub.w	r0, r0, sl
 800c64e:	fa03 f000 	lsl.w	r0, r3, r0
 800c652:	9b04      	ldr	r3, [sp, #16]
 800c654:	4303      	orrs	r3, r0
 800c656:	3401      	adds	r4, #1
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65e:	4826      	ldr	r0, [pc, #152]	; (800c6f8 <_svfiprintf_r+0x1f0>)
 800c660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c664:	2206      	movs	r2, #6
 800c666:	f7f3 fddb 	bl	8000220 <memchr>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d038      	beq.n	800c6e0 <_svfiprintf_r+0x1d8>
 800c66e:	4b23      	ldr	r3, [pc, #140]	; (800c6fc <_svfiprintf_r+0x1f4>)
 800c670:	bb1b      	cbnz	r3, 800c6ba <_svfiprintf_r+0x1b2>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	3307      	adds	r3, #7
 800c676:	f023 0307 	bic.w	r3, r3, #7
 800c67a:	3308      	adds	r3, #8
 800c67c:	9303      	str	r3, [sp, #12]
 800c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c680:	4433      	add	r3, r6
 800c682:	9309      	str	r3, [sp, #36]	; 0x24
 800c684:	e767      	b.n	800c556 <_svfiprintf_r+0x4e>
 800c686:	fb0c 3202 	mla	r2, ip, r2, r3
 800c68a:	460c      	mov	r4, r1
 800c68c:	2001      	movs	r0, #1
 800c68e:	e7a5      	b.n	800c5dc <_svfiprintf_r+0xd4>
 800c690:	2300      	movs	r3, #0
 800c692:	3401      	adds	r4, #1
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	4619      	mov	r1, r3
 800c698:	f04f 0c0a 	mov.w	ip, #10
 800c69c:	4620      	mov	r0, r4
 800c69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a2:	3a30      	subs	r2, #48	; 0x30
 800c6a4:	2a09      	cmp	r2, #9
 800c6a6:	d903      	bls.n	800c6b0 <_svfiprintf_r+0x1a8>
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d0c5      	beq.n	800c638 <_svfiprintf_r+0x130>
 800c6ac:	9105      	str	r1, [sp, #20]
 800c6ae:	e7c3      	b.n	800c638 <_svfiprintf_r+0x130>
 800c6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e7f0      	b.n	800c69c <_svfiprintf_r+0x194>
 800c6ba:	ab03      	add	r3, sp, #12
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <_svfiprintf_r+0x1f8>)
 800c6c2:	a904      	add	r1, sp, #16
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f7fc f98b 	bl	80089e0 <_printf_float>
 800c6ca:	1c42      	adds	r2, r0, #1
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	d1d6      	bne.n	800c67e <_svfiprintf_r+0x176>
 800c6d0:	89ab      	ldrh	r3, [r5, #12]
 800c6d2:	065b      	lsls	r3, r3, #25
 800c6d4:	f53f af2c 	bmi.w	800c530 <_svfiprintf_r+0x28>
 800c6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6da:	b01d      	add	sp, #116	; 0x74
 800c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e0:	ab03      	add	r3, sp, #12
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <_svfiprintf_r+0x1f8>)
 800c6e8:	a904      	add	r1, sp, #16
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	f7fc fc1c 	bl	8008f28 <_printf_i>
 800c6f0:	e7eb      	b.n	800c6ca <_svfiprintf_r+0x1c2>
 800c6f2:	bf00      	nop
 800c6f4:	0800deac 	.word	0x0800deac
 800c6f8:	0800deb6 	.word	0x0800deb6
 800c6fc:	080089e1 	.word	0x080089e1
 800c700:	0800c451 	.word	0x0800c451
 800c704:	0800deb2 	.word	0x0800deb2

0800c708 <_sungetc_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	1c4b      	adds	r3, r1, #1
 800c70c:	4614      	mov	r4, r2
 800c70e:	d103      	bne.n	800c718 <_sungetc_r+0x10>
 800c710:	f04f 35ff 	mov.w	r5, #4294967295
 800c714:	4628      	mov	r0, r5
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	8993      	ldrh	r3, [r2, #12]
 800c71a:	f023 0320 	bic.w	r3, r3, #32
 800c71e:	8193      	strh	r3, [r2, #12]
 800c720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c722:	6852      	ldr	r2, [r2, #4]
 800c724:	b2cd      	uxtb	r5, r1
 800c726:	b18b      	cbz	r3, 800c74c <_sungetc_r+0x44>
 800c728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c72a:	4293      	cmp	r3, r2
 800c72c:	dd08      	ble.n	800c740 <_sungetc_r+0x38>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	1e5a      	subs	r2, r3, #1
 800c732:	6022      	str	r2, [r4, #0]
 800c734:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	3301      	adds	r3, #1
 800c73c:	6063      	str	r3, [r4, #4]
 800c73e:	e7e9      	b.n	800c714 <_sungetc_r+0xc>
 800c740:	4621      	mov	r1, r4
 800c742:	f000 fbdd 	bl	800cf00 <__submore>
 800c746:	2800      	cmp	r0, #0
 800c748:	d0f1      	beq.n	800c72e <_sungetc_r+0x26>
 800c74a:	e7e1      	b.n	800c710 <_sungetc_r+0x8>
 800c74c:	6921      	ldr	r1, [r4, #16]
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	b151      	cbz	r1, 800c768 <_sungetc_r+0x60>
 800c752:	4299      	cmp	r1, r3
 800c754:	d208      	bcs.n	800c768 <_sungetc_r+0x60>
 800c756:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c75a:	42a9      	cmp	r1, r5
 800c75c:	d104      	bne.n	800c768 <_sungetc_r+0x60>
 800c75e:	3b01      	subs	r3, #1
 800c760:	3201      	adds	r2, #1
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	6062      	str	r2, [r4, #4]
 800c766:	e7d5      	b.n	800c714 <_sungetc_r+0xc>
 800c768:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c76c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c770:	6363      	str	r3, [r4, #52]	; 0x34
 800c772:	2303      	movs	r3, #3
 800c774:	63a3      	str	r3, [r4, #56]	; 0x38
 800c776:	4623      	mov	r3, r4
 800c778:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	2301      	movs	r3, #1
 800c780:	e7dc      	b.n	800c73c <_sungetc_r+0x34>

0800c782 <__ssrefill_r>:
 800c782:	b510      	push	{r4, lr}
 800c784:	460c      	mov	r4, r1
 800c786:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c788:	b169      	cbz	r1, 800c7a6 <__ssrefill_r+0x24>
 800c78a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c78e:	4299      	cmp	r1, r3
 800c790:	d001      	beq.n	800c796 <__ssrefill_r+0x14>
 800c792:	f7ff fd7d 	bl	800c290 <_free_r>
 800c796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c798:	6063      	str	r3, [r4, #4]
 800c79a:	2000      	movs	r0, #0
 800c79c:	6360      	str	r0, [r4, #52]	; 0x34
 800c79e:	b113      	cbz	r3, 800c7a6 <__ssrefill_r+0x24>
 800c7a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	f043 0320 	orr.w	r3, r3, #32
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	e7f3      	b.n	800c7a4 <__ssrefill_r+0x22>

0800c7bc <__ssvfiscanf_r>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c7cc:	49a6      	ldr	r1, [pc, #664]	; (800ca68 <__ssvfiscanf_r+0x2ac>)
 800c7ce:	91a0      	str	r1, [sp, #640]	; 0x280
 800c7d0:	f10d 0804 	add.w	r8, sp, #4
 800c7d4:	49a5      	ldr	r1, [pc, #660]	; (800ca6c <__ssvfiscanf_r+0x2b0>)
 800c7d6:	4fa6      	ldr	r7, [pc, #664]	; (800ca70 <__ssvfiscanf_r+0x2b4>)
 800c7d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ca74 <__ssvfiscanf_r+0x2b8>
 800c7dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	91a1      	str	r1, [sp, #644]	; 0x284
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	7813      	ldrb	r3, [r2, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 815a 	beq.w	800caa2 <__ssvfiscanf_r+0x2e6>
 800c7ee:	5dd9      	ldrb	r1, [r3, r7]
 800c7f0:	f011 0108 	ands.w	r1, r1, #8
 800c7f4:	f102 0501 	add.w	r5, r2, #1
 800c7f8:	d019      	beq.n	800c82e <__ssvfiscanf_r+0x72>
 800c7fa:	6863      	ldr	r3, [r4, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dd0f      	ble.n	800c820 <__ssvfiscanf_r+0x64>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	5cba      	ldrb	r2, [r7, r2]
 800c806:	0712      	lsls	r2, r2, #28
 800c808:	d401      	bmi.n	800c80e <__ssvfiscanf_r+0x52>
 800c80a:	462a      	mov	r2, r5
 800c80c:	e7eb      	b.n	800c7e6 <__ssvfiscanf_r+0x2a>
 800c80e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c810:	3201      	adds	r2, #1
 800c812:	9245      	str	r2, [sp, #276]	; 0x114
 800c814:	6862      	ldr	r2, [r4, #4]
 800c816:	3301      	adds	r3, #1
 800c818:	3a01      	subs	r2, #1
 800c81a:	6062      	str	r2, [r4, #4]
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7ec      	b.n	800c7fa <__ssvfiscanf_r+0x3e>
 800c820:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c822:	4621      	mov	r1, r4
 800c824:	4630      	mov	r0, r6
 800c826:	4798      	blx	r3
 800c828:	2800      	cmp	r0, #0
 800c82a:	d0e9      	beq.n	800c800 <__ssvfiscanf_r+0x44>
 800c82c:	e7ed      	b.n	800c80a <__ssvfiscanf_r+0x4e>
 800c82e:	2b25      	cmp	r3, #37	; 0x25
 800c830:	d012      	beq.n	800c858 <__ssvfiscanf_r+0x9c>
 800c832:	469a      	mov	sl, r3
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f340 8091 	ble.w	800c95e <__ssvfiscanf_r+0x1a2>
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	7813      	ldrb	r3, [r2, #0]
 800c840:	4553      	cmp	r3, sl
 800c842:	f040 812e 	bne.w	800caa2 <__ssvfiscanf_r+0x2e6>
 800c846:	6863      	ldr	r3, [r4, #4]
 800c848:	3b01      	subs	r3, #1
 800c84a:	6063      	str	r3, [r4, #4]
 800c84c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c84e:	3201      	adds	r2, #1
 800c850:	3301      	adds	r3, #1
 800c852:	6022      	str	r2, [r4, #0]
 800c854:	9345      	str	r3, [sp, #276]	; 0x114
 800c856:	e7d8      	b.n	800c80a <__ssvfiscanf_r+0x4e>
 800c858:	9141      	str	r1, [sp, #260]	; 0x104
 800c85a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c85c:	7853      	ldrb	r3, [r2, #1]
 800c85e:	2b2a      	cmp	r3, #42	; 0x2a
 800c860:	bf02      	ittt	eq
 800c862:	2310      	moveq	r3, #16
 800c864:	1c95      	addeq	r5, r2, #2
 800c866:	9341      	streq	r3, [sp, #260]	; 0x104
 800c868:	220a      	movs	r2, #10
 800c86a:	46aa      	mov	sl, r5
 800c86c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c870:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c874:	2b09      	cmp	r3, #9
 800c876:	d91d      	bls.n	800c8b4 <__ssvfiscanf_r+0xf8>
 800c878:	487e      	ldr	r0, [pc, #504]	; (800ca74 <__ssvfiscanf_r+0x2b8>)
 800c87a:	2203      	movs	r2, #3
 800c87c:	f7f3 fcd0 	bl	8000220 <memchr>
 800c880:	b140      	cbz	r0, 800c894 <__ssvfiscanf_r+0xd8>
 800c882:	2301      	movs	r3, #1
 800c884:	eba0 0009 	sub.w	r0, r0, r9
 800c888:	fa03 f000 	lsl.w	r0, r3, r0
 800c88c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c88e:	4318      	orrs	r0, r3
 800c890:	9041      	str	r0, [sp, #260]	; 0x104
 800c892:	4655      	mov	r5, sl
 800c894:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c898:	2b78      	cmp	r3, #120	; 0x78
 800c89a:	d806      	bhi.n	800c8aa <__ssvfiscanf_r+0xee>
 800c89c:	2b57      	cmp	r3, #87	; 0x57
 800c89e:	d810      	bhi.n	800c8c2 <__ssvfiscanf_r+0x106>
 800c8a0:	2b25      	cmp	r3, #37	; 0x25
 800c8a2:	d0c6      	beq.n	800c832 <__ssvfiscanf_r+0x76>
 800c8a4:	d856      	bhi.n	800c954 <__ssvfiscanf_r+0x198>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d064      	beq.n	800c974 <__ssvfiscanf_r+0x1b8>
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	9347      	str	r3, [sp, #284]	; 0x11c
 800c8ae:	230a      	movs	r3, #10
 800c8b0:	9342      	str	r3, [sp, #264]	; 0x108
 800c8b2:	e071      	b.n	800c998 <__ssvfiscanf_r+0x1dc>
 800c8b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c8b6:	fb02 1103 	mla	r1, r2, r3, r1
 800c8ba:	3930      	subs	r1, #48	; 0x30
 800c8bc:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8be:	4655      	mov	r5, sl
 800c8c0:	e7d3      	b.n	800c86a <__ssvfiscanf_r+0xae>
 800c8c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c8c6:	2a20      	cmp	r2, #32
 800c8c8:	d8ef      	bhi.n	800c8aa <__ssvfiscanf_r+0xee>
 800c8ca:	a101      	add	r1, pc, #4	; (adr r1, 800c8d0 <__ssvfiscanf_r+0x114>)
 800c8cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c8d0:	0800c983 	.word	0x0800c983
 800c8d4:	0800c8ab 	.word	0x0800c8ab
 800c8d8:	0800c8ab 	.word	0x0800c8ab
 800c8dc:	0800c9e1 	.word	0x0800c9e1
 800c8e0:	0800c8ab 	.word	0x0800c8ab
 800c8e4:	0800c8ab 	.word	0x0800c8ab
 800c8e8:	0800c8ab 	.word	0x0800c8ab
 800c8ec:	0800c8ab 	.word	0x0800c8ab
 800c8f0:	0800c8ab 	.word	0x0800c8ab
 800c8f4:	0800c8ab 	.word	0x0800c8ab
 800c8f8:	0800c8ab 	.word	0x0800c8ab
 800c8fc:	0800c9f7 	.word	0x0800c9f7
 800c900:	0800c9cd 	.word	0x0800c9cd
 800c904:	0800c95b 	.word	0x0800c95b
 800c908:	0800c95b 	.word	0x0800c95b
 800c90c:	0800c95b 	.word	0x0800c95b
 800c910:	0800c8ab 	.word	0x0800c8ab
 800c914:	0800c9d1 	.word	0x0800c9d1
 800c918:	0800c8ab 	.word	0x0800c8ab
 800c91c:	0800c8ab 	.word	0x0800c8ab
 800c920:	0800c8ab 	.word	0x0800c8ab
 800c924:	0800c8ab 	.word	0x0800c8ab
 800c928:	0800ca07 	.word	0x0800ca07
 800c92c:	0800c9d9 	.word	0x0800c9d9
 800c930:	0800c97b 	.word	0x0800c97b
 800c934:	0800c8ab 	.word	0x0800c8ab
 800c938:	0800c8ab 	.word	0x0800c8ab
 800c93c:	0800ca03 	.word	0x0800ca03
 800c940:	0800c8ab 	.word	0x0800c8ab
 800c944:	0800c9cd 	.word	0x0800c9cd
 800c948:	0800c8ab 	.word	0x0800c8ab
 800c94c:	0800c8ab 	.word	0x0800c8ab
 800c950:	0800c983 	.word	0x0800c983
 800c954:	3b45      	subs	r3, #69	; 0x45
 800c956:	2b02      	cmp	r3, #2
 800c958:	d8a7      	bhi.n	800c8aa <__ssvfiscanf_r+0xee>
 800c95a:	2305      	movs	r3, #5
 800c95c:	e01b      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800c95e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c960:	4621      	mov	r1, r4
 800c962:	4630      	mov	r0, r6
 800c964:	4798      	blx	r3
 800c966:	2800      	cmp	r0, #0
 800c968:	f43f af68 	beq.w	800c83c <__ssvfiscanf_r+0x80>
 800c96c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c96e:	2800      	cmp	r0, #0
 800c970:	f040 808d 	bne.w	800ca8e <__ssvfiscanf_r+0x2d2>
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	e08f      	b.n	800ca9a <__ssvfiscanf_r+0x2de>
 800c97a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c97c:	f042 0220 	orr.w	r2, r2, #32
 800c980:	9241      	str	r2, [sp, #260]	; 0x104
 800c982:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c988:	9241      	str	r2, [sp, #260]	; 0x104
 800c98a:	2210      	movs	r2, #16
 800c98c:	2b6f      	cmp	r3, #111	; 0x6f
 800c98e:	9242      	str	r2, [sp, #264]	; 0x108
 800c990:	bf34      	ite	cc
 800c992:	2303      	movcc	r3, #3
 800c994:	2304      	movcs	r3, #4
 800c996:	9347      	str	r3, [sp, #284]	; 0x11c
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dd42      	ble.n	800ca24 <__ssvfiscanf_r+0x268>
 800c99e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9a0:	0659      	lsls	r1, r3, #25
 800c9a2:	d404      	bmi.n	800c9ae <__ssvfiscanf_r+0x1f2>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	5cba      	ldrb	r2, [r7, r2]
 800c9aa:	0712      	lsls	r2, r2, #28
 800c9ac:	d441      	bmi.n	800ca32 <__ssvfiscanf_r+0x276>
 800c9ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	dc50      	bgt.n	800ca56 <__ssvfiscanf_r+0x29a>
 800c9b4:	466b      	mov	r3, sp
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	a941      	add	r1, sp, #260	; 0x104
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 f876 	bl	800caac <_scanf_chars>
 800c9c0:	2801      	cmp	r0, #1
 800c9c2:	d06e      	beq.n	800caa2 <__ssvfiscanf_r+0x2e6>
 800c9c4:	2802      	cmp	r0, #2
 800c9c6:	f47f af20 	bne.w	800c80a <__ssvfiscanf_r+0x4e>
 800c9ca:	e7cf      	b.n	800c96c <__ssvfiscanf_r+0x1b0>
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	e7dd      	b.n	800c98c <__ssvfiscanf_r+0x1d0>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9342      	str	r3, [sp, #264]	; 0x108
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e7de      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800c9d8:	2308      	movs	r3, #8
 800c9da:	9342      	str	r3, [sp, #264]	; 0x108
 800c9dc:	2304      	movs	r3, #4
 800c9de:	e7da      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	f000 f9e0 	bl	800cda8 <__sccl>
 800c9e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ee:	9341      	str	r3, [sp, #260]	; 0x104
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e7cf      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800c9f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fc:	9341      	str	r3, [sp, #260]	; 0x104
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e7c9      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800ca02:	2302      	movs	r3, #2
 800ca04:	e7c7      	b.n	800c996 <__ssvfiscanf_r+0x1da>
 800ca06:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca08:	06c3      	lsls	r3, r0, #27
 800ca0a:	f53f aefe 	bmi.w	800c80a <__ssvfiscanf_r+0x4e>
 800ca0e:	9b00      	ldr	r3, [sp, #0]
 800ca10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca12:	1d19      	adds	r1, r3, #4
 800ca14:	9100      	str	r1, [sp, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f010 0f01 	tst.w	r0, #1
 800ca1c:	bf14      	ite	ne
 800ca1e:	801a      	strhne	r2, [r3, #0]
 800ca20:	601a      	streq	r2, [r3, #0]
 800ca22:	e6f2      	b.n	800c80a <__ssvfiscanf_r+0x4e>
 800ca24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca26:	4621      	mov	r1, r4
 800ca28:	4630      	mov	r0, r6
 800ca2a:	4798      	blx	r3
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0b6      	beq.n	800c99e <__ssvfiscanf_r+0x1e2>
 800ca30:	e79c      	b.n	800c96c <__ssvfiscanf_r+0x1b0>
 800ca32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca34:	3201      	adds	r2, #1
 800ca36:	9245      	str	r2, [sp, #276]	; 0x114
 800ca38:	6862      	ldr	r2, [r4, #4]
 800ca3a:	3a01      	subs	r2, #1
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	6062      	str	r2, [r4, #4]
 800ca40:	dd02      	ble.n	800ca48 <__ssvfiscanf_r+0x28c>
 800ca42:	3301      	adds	r3, #1
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	e7ad      	b.n	800c9a4 <__ssvfiscanf_r+0x1e8>
 800ca48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4798      	blx	r3
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0a7      	beq.n	800c9a4 <__ssvfiscanf_r+0x1e8>
 800ca54:	e78a      	b.n	800c96c <__ssvfiscanf_r+0x1b0>
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	dc0e      	bgt.n	800ca78 <__ssvfiscanf_r+0x2bc>
 800ca5a:	466b      	mov	r3, sp
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	a941      	add	r1, sp, #260	; 0x104
 800ca60:	4630      	mov	r0, r6
 800ca62:	f000 f87d 	bl	800cb60 <_scanf_i>
 800ca66:	e7ab      	b.n	800c9c0 <__ssvfiscanf_r+0x204>
 800ca68:	0800c709 	.word	0x0800c709
 800ca6c:	0800c783 	.word	0x0800c783
 800ca70:	0800db49 	.word	0x0800db49
 800ca74:	0800deb2 	.word	0x0800deb2
 800ca78:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <__ssvfiscanf_r+0x2ec>)
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f43f aec5 	beq.w	800c80a <__ssvfiscanf_r+0x4e>
 800ca80:	466b      	mov	r3, sp
 800ca82:	4622      	mov	r2, r4
 800ca84:	a941      	add	r1, sp, #260	; 0x104
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7fc fb74 	bl	8009174 <_scanf_float>
 800ca8c:	e798      	b.n	800c9c0 <__ssvfiscanf_r+0x204>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ca94:	bf18      	it	ne
 800ca96:	f04f 30ff 	movne.w	r0, #4294967295
 800ca9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ca9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800caa4:	e7f9      	b.n	800ca9a <__ssvfiscanf_r+0x2de>
 800caa6:	bf00      	nop
 800caa8:	08009175 	.word	0x08009175

0800caac <_scanf_chars>:
 800caac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab0:	4615      	mov	r5, r2
 800cab2:	688a      	ldr	r2, [r1, #8]
 800cab4:	4680      	mov	r8, r0
 800cab6:	460c      	mov	r4, r1
 800cab8:	b932      	cbnz	r2, 800cac8 <_scanf_chars+0x1c>
 800caba:	698a      	ldr	r2, [r1, #24]
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	bf0c      	ite	eq
 800cac0:	2201      	moveq	r2, #1
 800cac2:	f04f 32ff 	movne.w	r2, #4294967295
 800cac6:	608a      	str	r2, [r1, #8]
 800cac8:	6822      	ldr	r2, [r4, #0]
 800caca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cb5c <_scanf_chars+0xb0>
 800cace:	06d1      	lsls	r1, r2, #27
 800cad0:	bf5f      	itttt	pl
 800cad2:	681a      	ldrpl	r2, [r3, #0]
 800cad4:	1d11      	addpl	r1, r2, #4
 800cad6:	6019      	strpl	r1, [r3, #0]
 800cad8:	6816      	ldrpl	r6, [r2, #0]
 800cada:	2700      	movs	r7, #0
 800cadc:	69a0      	ldr	r0, [r4, #24]
 800cade:	b188      	cbz	r0, 800cb04 <_scanf_chars+0x58>
 800cae0:	2801      	cmp	r0, #1
 800cae2:	d107      	bne.n	800caf4 <_scanf_chars+0x48>
 800cae4:	682a      	ldr	r2, [r5, #0]
 800cae6:	7811      	ldrb	r1, [r2, #0]
 800cae8:	6962      	ldr	r2, [r4, #20]
 800caea:	5c52      	ldrb	r2, [r2, r1]
 800caec:	b952      	cbnz	r2, 800cb04 <_scanf_chars+0x58>
 800caee:	2f00      	cmp	r7, #0
 800caf0:	d031      	beq.n	800cb56 <_scanf_chars+0xaa>
 800caf2:	e022      	b.n	800cb3a <_scanf_chars+0x8e>
 800caf4:	2802      	cmp	r0, #2
 800caf6:	d120      	bne.n	800cb3a <_scanf_chars+0x8e>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cb00:	071b      	lsls	r3, r3, #28
 800cb02:	d41a      	bmi.n	800cb3a <_scanf_chars+0x8e>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	06da      	lsls	r2, r3, #27
 800cb08:	bf5e      	ittt	pl
 800cb0a:	682b      	ldrpl	r3, [r5, #0]
 800cb0c:	781b      	ldrbpl	r3, [r3, #0]
 800cb0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cb12:	682a      	ldr	r2, [r5, #0]
 800cb14:	686b      	ldr	r3, [r5, #4]
 800cb16:	3201      	adds	r2, #1
 800cb18:	602a      	str	r2, [r5, #0]
 800cb1a:	68a2      	ldr	r2, [r4, #8]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	3a01      	subs	r2, #1
 800cb20:	606b      	str	r3, [r5, #4]
 800cb22:	3701      	adds	r7, #1
 800cb24:	60a2      	str	r2, [r4, #8]
 800cb26:	b142      	cbz	r2, 800cb3a <_scanf_chars+0x8e>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dcd7      	bgt.n	800cadc <_scanf_chars+0x30>
 800cb2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb30:	4629      	mov	r1, r5
 800cb32:	4640      	mov	r0, r8
 800cb34:	4798      	blx	r3
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0d0      	beq.n	800cadc <_scanf_chars+0x30>
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	f013 0310 	ands.w	r3, r3, #16
 800cb40:	d105      	bne.n	800cb4e <_scanf_chars+0xa2>
 800cb42:	68e2      	ldr	r2, [r4, #12]
 800cb44:	3201      	adds	r2, #1
 800cb46:	60e2      	str	r2, [r4, #12]
 800cb48:	69a2      	ldr	r2, [r4, #24]
 800cb4a:	b102      	cbz	r2, 800cb4e <_scanf_chars+0xa2>
 800cb4c:	7033      	strb	r3, [r6, #0]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	443b      	add	r3, r7
 800cb52:	6123      	str	r3, [r4, #16]
 800cb54:	2000      	movs	r0, #0
 800cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0800db49 	.word	0x0800db49

0800cb60 <_scanf_i>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	4698      	mov	r8, r3
 800cb66:	4b76      	ldr	r3, [pc, #472]	; (800cd40 <_scanf_i+0x1e0>)
 800cb68:	460c      	mov	r4, r1
 800cb6a:	4682      	mov	sl, r0
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb72:	b087      	sub	sp, #28
 800cb74:	ab03      	add	r3, sp, #12
 800cb76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb7a:	4b72      	ldr	r3, [pc, #456]	; (800cd44 <_scanf_i+0x1e4>)
 800cb7c:	69a1      	ldr	r1, [r4, #24]
 800cb7e:	4a72      	ldr	r2, [pc, #456]	; (800cd48 <_scanf_i+0x1e8>)
 800cb80:	2903      	cmp	r1, #3
 800cb82:	bf18      	it	ne
 800cb84:	461a      	movne	r2, r3
 800cb86:	68a3      	ldr	r3, [r4, #8]
 800cb88:	9201      	str	r2, [sp, #4]
 800cb8a:	1e5a      	subs	r2, r3, #1
 800cb8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb90:	bf88      	it	hi
 800cb92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cb96:	4627      	mov	r7, r4
 800cb98:	bf82      	ittt	hi
 800cb9a:	eb03 0905 	addhi.w	r9, r3, r5
 800cb9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cba2:	60a3      	strhi	r3, [r4, #8]
 800cba4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cba8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cbac:	bf98      	it	ls
 800cbae:	f04f 0900 	movls.w	r9, #0
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	463d      	mov	r5, r7
 800cbb6:	f04f 0b00 	mov.w	fp, #0
 800cbba:	6831      	ldr	r1, [r6, #0]
 800cbbc:	ab03      	add	r3, sp, #12
 800cbbe:	7809      	ldrb	r1, [r1, #0]
 800cbc0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	f7f3 fb2b 	bl	8000220 <memchr>
 800cbca:	b328      	cbz	r0, 800cc18 <_scanf_i+0xb8>
 800cbcc:	f1bb 0f01 	cmp.w	fp, #1
 800cbd0:	d159      	bne.n	800cc86 <_scanf_i+0x126>
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	b92a      	cbnz	r2, 800cbe2 <_scanf_i+0x82>
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	2308      	movs	r3, #8
 800cbda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbde:	6063      	str	r3, [r4, #4]
 800cbe0:	6022      	str	r2, [r4, #0]
 800cbe2:	6822      	ldr	r2, [r4, #0]
 800cbe4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cbe8:	6022      	str	r2, [r4, #0]
 800cbea:	68a2      	ldr	r2, [r4, #8]
 800cbec:	1e51      	subs	r1, r2, #1
 800cbee:	60a1      	str	r1, [r4, #8]
 800cbf0:	b192      	cbz	r2, 800cc18 <_scanf_i+0xb8>
 800cbf2:	6832      	ldr	r2, [r6, #0]
 800cbf4:	1c51      	adds	r1, r2, #1
 800cbf6:	6031      	str	r1, [r6, #0]
 800cbf8:	7812      	ldrb	r2, [r2, #0]
 800cbfa:	f805 2b01 	strb.w	r2, [r5], #1
 800cbfe:	6872      	ldr	r2, [r6, #4]
 800cc00:	3a01      	subs	r2, #1
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	6072      	str	r2, [r6, #4]
 800cc06:	dc07      	bgt.n	800cc18 <_scanf_i+0xb8>
 800cc08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4650      	mov	r0, sl
 800cc10:	4790      	blx	r2
 800cc12:	2800      	cmp	r0, #0
 800cc14:	f040 8085 	bne.w	800cd22 <_scanf_i+0x1c2>
 800cc18:	f10b 0b01 	add.w	fp, fp, #1
 800cc1c:	f1bb 0f03 	cmp.w	fp, #3
 800cc20:	d1cb      	bne.n	800cbba <_scanf_i+0x5a>
 800cc22:	6863      	ldr	r3, [r4, #4]
 800cc24:	b90b      	cbnz	r3, 800cc2a <_scanf_i+0xca>
 800cc26:	230a      	movs	r3, #10
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6863      	ldr	r3, [r4, #4]
 800cc2c:	4947      	ldr	r1, [pc, #284]	; (800cd4c <_scanf_i+0x1ec>)
 800cc2e:	6960      	ldr	r0, [r4, #20]
 800cc30:	1ac9      	subs	r1, r1, r3
 800cc32:	f000 f8b9 	bl	800cda8 <__sccl>
 800cc36:	f04f 0b00 	mov.w	fp, #0
 800cc3a:	68a3      	ldr	r3, [r4, #8]
 800cc3c:	6822      	ldr	r2, [r4, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d03d      	beq.n	800ccbe <_scanf_i+0x15e>
 800cc42:	6831      	ldr	r1, [r6, #0]
 800cc44:	6960      	ldr	r0, [r4, #20]
 800cc46:	f891 c000 	ldrb.w	ip, [r1]
 800cc4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d035      	beq.n	800ccbe <_scanf_i+0x15e>
 800cc52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cc56:	d124      	bne.n	800cca2 <_scanf_i+0x142>
 800cc58:	0510      	lsls	r0, r2, #20
 800cc5a:	d522      	bpl.n	800cca2 <_scanf_i+0x142>
 800cc5c:	f10b 0b01 	add.w	fp, fp, #1
 800cc60:	f1b9 0f00 	cmp.w	r9, #0
 800cc64:	d003      	beq.n	800cc6e <_scanf_i+0x10e>
 800cc66:	3301      	adds	r3, #1
 800cc68:	f109 39ff 	add.w	r9, r9, #4294967295
 800cc6c:	60a3      	str	r3, [r4, #8]
 800cc6e:	6873      	ldr	r3, [r6, #4]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	6073      	str	r3, [r6, #4]
 800cc76:	dd1b      	ble.n	800ccb0 <_scanf_i+0x150>
 800cc78:	6833      	ldr	r3, [r6, #0]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	e7d9      	b.n	800cc3a <_scanf_i+0xda>
 800cc86:	f1bb 0f02 	cmp.w	fp, #2
 800cc8a:	d1ae      	bne.n	800cbea <_scanf_i+0x8a>
 800cc8c:	6822      	ldr	r2, [r4, #0]
 800cc8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cc92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cc96:	d1bf      	bne.n	800cc18 <_scanf_i+0xb8>
 800cc98:	2310      	movs	r3, #16
 800cc9a:	6063      	str	r3, [r4, #4]
 800cc9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cca0:	e7a2      	b.n	800cbe8 <_scanf_i+0x88>
 800cca2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cca6:	6022      	str	r2, [r4, #0]
 800cca8:	780b      	ldrb	r3, [r1, #0]
 800ccaa:	f805 3b01 	strb.w	r3, [r5], #1
 800ccae:	e7de      	b.n	800cc6e <_scanf_i+0x10e>
 800ccb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4650      	mov	r0, sl
 800ccb8:	4798      	blx	r3
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d0df      	beq.n	800cc7e <_scanf_i+0x11e>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	05db      	lsls	r3, r3, #23
 800ccc2:	d50d      	bpl.n	800cce0 <_scanf_i+0x180>
 800ccc4:	42bd      	cmp	r5, r7
 800ccc6:	d909      	bls.n	800ccdc <_scanf_i+0x17c>
 800ccc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4798      	blx	r3
 800ccd6:	f105 39ff 	add.w	r9, r5, #4294967295
 800ccda:	464d      	mov	r5, r9
 800ccdc:	42bd      	cmp	r5, r7
 800ccde:	d02d      	beq.n	800cd3c <_scanf_i+0x1dc>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	f012 0210 	ands.w	r2, r2, #16
 800cce6:	d113      	bne.n	800cd10 <_scanf_i+0x1b0>
 800cce8:	702a      	strb	r2, [r5, #0]
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	9e01      	ldr	r6, [sp, #4]
 800ccee:	4639      	mov	r1, r7
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	47b0      	blx	r6
 800ccf4:	6821      	ldr	r1, [r4, #0]
 800ccf6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfa:	f011 0f20 	tst.w	r1, #32
 800ccfe:	d013      	beq.n	800cd28 <_scanf_i+0x1c8>
 800cd00:	1d1a      	adds	r2, r3, #4
 800cd02:	f8c8 2000 	str.w	r2, [r8]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6018      	str	r0, [r3, #0]
 800cd0a:	68e3      	ldr	r3, [r4, #12]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	60e3      	str	r3, [r4, #12]
 800cd10:	1bed      	subs	r5, r5, r7
 800cd12:	44ab      	add	fp, r5
 800cd14:	6925      	ldr	r5, [r4, #16]
 800cd16:	445d      	add	r5, fp
 800cd18:	6125      	str	r5, [r4, #16]
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	b007      	add	sp, #28
 800cd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd22:	f04f 0b00 	mov.w	fp, #0
 800cd26:	e7ca      	b.n	800ccbe <_scanf_i+0x15e>
 800cd28:	1d1a      	adds	r2, r3, #4
 800cd2a:	f8c8 2000 	str.w	r2, [r8]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f011 0f01 	tst.w	r1, #1
 800cd34:	bf14      	ite	ne
 800cd36:	8018      	strhne	r0, [r3, #0]
 800cd38:	6018      	streq	r0, [r3, #0]
 800cd3a:	e7e6      	b.n	800cd0a <_scanf_i+0x1aa>
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	e7ed      	b.n	800cd1c <_scanf_i+0x1bc>
 800cd40:	0800da8c 	.word	0x0800da8c
 800cd44:	0800cefd 	.word	0x0800cefd
 800cd48:	0800a445 	.word	0x0800a445
 800cd4c:	0800ded6 	.word	0x0800ded6

0800cd50 <_read_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d07      	ldr	r5, [pc, #28]	; (800cd70 <_read_r+0x20>)
 800cd54:	4604      	mov	r4, r0
 800cd56:	4608      	mov	r0, r1
 800cd58:	4611      	mov	r1, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f7f6 f8c8 	bl	8002ef4 <_read>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_read_r+0x1e>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_read_r+0x1e>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	20000544 	.word	0x20000544
 800cd74:	00000000 	.word	0x00000000

0800cd78 <nan>:
 800cd78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd80 <nan+0x8>
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	00000000 	.word	0x00000000
 800cd84:	7ff80000 	.word	0x7ff80000

0800cd88 <_sbrk_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d06      	ldr	r5, [pc, #24]	; (800cda4 <_sbrk_r+0x1c>)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	4604      	mov	r4, r0
 800cd90:	4608      	mov	r0, r1
 800cd92:	602b      	str	r3, [r5, #0]
 800cd94:	f7f6 f91c 	bl	8002fd0 <_sbrk>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_sbrk_r+0x1a>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_sbrk_r+0x1a>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	20000544 	.word	0x20000544

0800cda8 <__sccl>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	780b      	ldrb	r3, [r1, #0]
 800cdac:	4604      	mov	r4, r0
 800cdae:	2b5e      	cmp	r3, #94	; 0x5e
 800cdb0:	bf0b      	itete	eq
 800cdb2:	784b      	ldrbeq	r3, [r1, #1]
 800cdb4:	1c48      	addne	r0, r1, #1
 800cdb6:	1c88      	addeq	r0, r1, #2
 800cdb8:	2200      	movne	r2, #0
 800cdba:	bf08      	it	eq
 800cdbc:	2201      	moveq	r2, #1
 800cdbe:	1e61      	subs	r1, r4, #1
 800cdc0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cdc4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cdc8:	42a9      	cmp	r1, r5
 800cdca:	d1fb      	bne.n	800cdc4 <__sccl+0x1c>
 800cdcc:	b90b      	cbnz	r3, 800cdd2 <__sccl+0x2a>
 800cdce:	3801      	subs	r0, #1
 800cdd0:	bd70      	pop	{r4, r5, r6, pc}
 800cdd2:	f082 0201 	eor.w	r2, r2, #1
 800cdd6:	54e2      	strb	r2, [r4, r3]
 800cdd8:	4605      	mov	r5, r0
 800cdda:	4628      	mov	r0, r5
 800cddc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cde0:	292d      	cmp	r1, #45	; 0x2d
 800cde2:	d006      	beq.n	800cdf2 <__sccl+0x4a>
 800cde4:	295d      	cmp	r1, #93	; 0x5d
 800cde6:	d0f3      	beq.n	800cdd0 <__sccl+0x28>
 800cde8:	b909      	cbnz	r1, 800cdee <__sccl+0x46>
 800cdea:	4628      	mov	r0, r5
 800cdec:	e7f0      	b.n	800cdd0 <__sccl+0x28>
 800cdee:	460b      	mov	r3, r1
 800cdf0:	e7f1      	b.n	800cdd6 <__sccl+0x2e>
 800cdf2:	786e      	ldrb	r6, [r5, #1]
 800cdf4:	2e5d      	cmp	r6, #93	; 0x5d
 800cdf6:	d0fa      	beq.n	800cdee <__sccl+0x46>
 800cdf8:	42b3      	cmp	r3, r6
 800cdfa:	dcf8      	bgt.n	800cdee <__sccl+0x46>
 800cdfc:	3502      	adds	r5, #2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	3101      	adds	r1, #1
 800ce02:	428e      	cmp	r6, r1
 800ce04:	5462      	strb	r2, [r4, r1]
 800ce06:	dcfb      	bgt.n	800ce00 <__sccl+0x58>
 800ce08:	1af1      	subs	r1, r6, r3
 800ce0a:	3901      	subs	r1, #1
 800ce0c:	1c58      	adds	r0, r3, #1
 800ce0e:	42b3      	cmp	r3, r6
 800ce10:	bfa8      	it	ge
 800ce12:	2100      	movge	r1, #0
 800ce14:	1843      	adds	r3, r0, r1
 800ce16:	e7e0      	b.n	800cdda <__sccl+0x32>

0800ce18 <_strtoul_l.constprop.0>:
 800ce18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce1c:	4f36      	ldr	r7, [pc, #216]	; (800cef8 <_strtoul_l.constprop.0+0xe0>)
 800ce1e:	4686      	mov	lr, r0
 800ce20:	460d      	mov	r5, r1
 800ce22:	4628      	mov	r0, r5
 800ce24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce28:	5de6      	ldrb	r6, [r4, r7]
 800ce2a:	f016 0608 	ands.w	r6, r6, #8
 800ce2e:	d1f8      	bne.n	800ce22 <_strtoul_l.constprop.0+0xa>
 800ce30:	2c2d      	cmp	r4, #45	; 0x2d
 800ce32:	d12f      	bne.n	800ce94 <_strtoul_l.constprop.0+0x7c>
 800ce34:	782c      	ldrb	r4, [r5, #0]
 800ce36:	2601      	movs	r6, #1
 800ce38:	1c85      	adds	r5, r0, #2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d057      	beq.n	800ceee <_strtoul_l.constprop.0+0xd6>
 800ce3e:	2b10      	cmp	r3, #16
 800ce40:	d109      	bne.n	800ce56 <_strtoul_l.constprop.0+0x3e>
 800ce42:	2c30      	cmp	r4, #48	; 0x30
 800ce44:	d107      	bne.n	800ce56 <_strtoul_l.constprop.0+0x3e>
 800ce46:	7828      	ldrb	r0, [r5, #0]
 800ce48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ce4c:	2858      	cmp	r0, #88	; 0x58
 800ce4e:	d149      	bne.n	800cee4 <_strtoul_l.constprop.0+0xcc>
 800ce50:	786c      	ldrb	r4, [r5, #1]
 800ce52:	2310      	movs	r3, #16
 800ce54:	3502      	adds	r5, #2
 800ce56:	f04f 38ff 	mov.w	r8, #4294967295
 800ce5a:	2700      	movs	r7, #0
 800ce5c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ce60:	fb03 f908 	mul.w	r9, r3, r8
 800ce64:	ea6f 0909 	mvn.w	r9, r9
 800ce68:	4638      	mov	r0, r7
 800ce6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ce6e:	f1bc 0f09 	cmp.w	ip, #9
 800ce72:	d814      	bhi.n	800ce9e <_strtoul_l.constprop.0+0x86>
 800ce74:	4664      	mov	r4, ip
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	dd22      	ble.n	800cec0 <_strtoul_l.constprop.0+0xa8>
 800ce7a:	2f00      	cmp	r7, #0
 800ce7c:	db1d      	blt.n	800ceba <_strtoul_l.constprop.0+0xa2>
 800ce7e:	4580      	cmp	r8, r0
 800ce80:	d31b      	bcc.n	800ceba <_strtoul_l.constprop.0+0xa2>
 800ce82:	d101      	bne.n	800ce88 <_strtoul_l.constprop.0+0x70>
 800ce84:	45a1      	cmp	r9, r4
 800ce86:	db18      	blt.n	800ceba <_strtoul_l.constprop.0+0xa2>
 800ce88:	fb00 4003 	mla	r0, r0, r3, r4
 800ce8c:	2701      	movs	r7, #1
 800ce8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce92:	e7ea      	b.n	800ce6a <_strtoul_l.constprop.0+0x52>
 800ce94:	2c2b      	cmp	r4, #43	; 0x2b
 800ce96:	bf04      	itt	eq
 800ce98:	782c      	ldrbeq	r4, [r5, #0]
 800ce9a:	1c85      	addeq	r5, r0, #2
 800ce9c:	e7cd      	b.n	800ce3a <_strtoul_l.constprop.0+0x22>
 800ce9e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cea2:	f1bc 0f19 	cmp.w	ip, #25
 800cea6:	d801      	bhi.n	800ceac <_strtoul_l.constprop.0+0x94>
 800cea8:	3c37      	subs	r4, #55	; 0x37
 800ceaa:	e7e4      	b.n	800ce76 <_strtoul_l.constprop.0+0x5e>
 800ceac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ceb0:	f1bc 0f19 	cmp.w	ip, #25
 800ceb4:	d804      	bhi.n	800cec0 <_strtoul_l.constprop.0+0xa8>
 800ceb6:	3c57      	subs	r4, #87	; 0x57
 800ceb8:	e7dd      	b.n	800ce76 <_strtoul_l.constprop.0+0x5e>
 800ceba:	f04f 37ff 	mov.w	r7, #4294967295
 800cebe:	e7e6      	b.n	800ce8e <_strtoul_l.constprop.0+0x76>
 800cec0:	2f00      	cmp	r7, #0
 800cec2:	da07      	bge.n	800ced4 <_strtoul_l.constprop.0+0xbc>
 800cec4:	2322      	movs	r3, #34	; 0x22
 800cec6:	f8ce 3000 	str.w	r3, [lr]
 800ceca:	f04f 30ff 	mov.w	r0, #4294967295
 800cece:	b932      	cbnz	r2, 800cede <_strtoul_l.constprop.0+0xc6>
 800ced0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ced4:	b106      	cbz	r6, 800ced8 <_strtoul_l.constprop.0+0xc0>
 800ced6:	4240      	negs	r0, r0
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	d0f9      	beq.n	800ced0 <_strtoul_l.constprop.0+0xb8>
 800cedc:	b107      	cbz	r7, 800cee0 <_strtoul_l.constprop.0+0xc8>
 800cede:	1e69      	subs	r1, r5, #1
 800cee0:	6011      	str	r1, [r2, #0]
 800cee2:	e7f5      	b.n	800ced0 <_strtoul_l.constprop.0+0xb8>
 800cee4:	2430      	movs	r4, #48	; 0x30
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1b5      	bne.n	800ce56 <_strtoul_l.constprop.0+0x3e>
 800ceea:	2308      	movs	r3, #8
 800ceec:	e7b3      	b.n	800ce56 <_strtoul_l.constprop.0+0x3e>
 800ceee:	2c30      	cmp	r4, #48	; 0x30
 800cef0:	d0a9      	beq.n	800ce46 <_strtoul_l.constprop.0+0x2e>
 800cef2:	230a      	movs	r3, #10
 800cef4:	e7af      	b.n	800ce56 <_strtoul_l.constprop.0+0x3e>
 800cef6:	bf00      	nop
 800cef8:	0800db49 	.word	0x0800db49

0800cefc <_strtoul_r>:
 800cefc:	f7ff bf8c 	b.w	800ce18 <_strtoul_l.constprop.0>

0800cf00 <__submore>:
 800cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cf08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	d11d      	bne.n	800cf4c <__submore+0x4c>
 800cf10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cf14:	f7ff fa28 	bl	800c368 <_malloc_r>
 800cf18:	b918      	cbnz	r0, 800cf22 <__submore+0x22>
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf26:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cf2c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cf32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cf36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cf3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cf3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cf42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	2000      	movs	r0, #0
 800cf4a:	e7e8      	b.n	800cf1e <__submore+0x1e>
 800cf4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cf4e:	0077      	lsls	r7, r6, #1
 800cf50:	463a      	mov	r2, r7
 800cf52:	f000 fa2d 	bl	800d3b0 <_realloc_r>
 800cf56:	4605      	mov	r5, r0
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d0de      	beq.n	800cf1a <__submore+0x1a>
 800cf5c:	eb00 0806 	add.w	r8, r0, r6
 800cf60:	4601      	mov	r1, r0
 800cf62:	4632      	mov	r2, r6
 800cf64:	4640      	mov	r0, r8
 800cf66:	f7fe fcad 	bl	800b8c4 <memcpy>
 800cf6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cf6e:	f8c4 8000 	str.w	r8, [r4]
 800cf72:	e7e9      	b.n	800cf48 <__submore+0x48>

0800cf74 <__ascii_wctomb>:
 800cf74:	b149      	cbz	r1, 800cf8a <__ascii_wctomb+0x16>
 800cf76:	2aff      	cmp	r2, #255	; 0xff
 800cf78:	bf85      	ittet	hi
 800cf7a:	238a      	movhi	r3, #138	; 0x8a
 800cf7c:	6003      	strhi	r3, [r0, #0]
 800cf7e:	700a      	strbls	r2, [r1, #0]
 800cf80:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf84:	bf98      	it	ls
 800cf86:	2001      	movls	r0, #1
 800cf88:	4770      	bx	lr
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4770      	bx	lr
	...

0800cf90 <__assert_func>:
 800cf90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf92:	4614      	mov	r4, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <__assert_func+0x2c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	68d8      	ldr	r0, [r3, #12]
 800cf9e:	b14c      	cbz	r4, 800cfb4 <__assert_func+0x24>
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <__assert_func+0x30>)
 800cfa2:	9100      	str	r1, [sp, #0]
 800cfa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfa8:	4906      	ldr	r1, [pc, #24]	; (800cfc4 <__assert_func+0x34>)
 800cfaa:	462b      	mov	r3, r5
 800cfac:	f000 f9a6 	bl	800d2fc <fiprintf>
 800cfb0:	f000 fc46 	bl	800d840 <abort>
 800cfb4:	4b04      	ldr	r3, [pc, #16]	; (800cfc8 <__assert_func+0x38>)
 800cfb6:	461c      	mov	r4, r3
 800cfb8:	e7f3      	b.n	800cfa2 <__assert_func+0x12>
 800cfba:	bf00      	nop
 800cfbc:	200000a8 	.word	0x200000a8
 800cfc0:	0800ded8 	.word	0x0800ded8
 800cfc4:	0800dee5 	.word	0x0800dee5
 800cfc8:	0800df13 	.word	0x0800df13

0800cfcc <__sflush_r>:
 800cfcc:	898a      	ldrh	r2, [r1, #12]
 800cfce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	0710      	lsls	r0, r2, #28
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	d458      	bmi.n	800d08c <__sflush_r+0xc0>
 800cfda:	684b      	ldr	r3, [r1, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dc05      	bgt.n	800cfec <__sflush_r+0x20>
 800cfe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dc02      	bgt.n	800cfec <__sflush_r+0x20>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfee:	2e00      	cmp	r6, #0
 800cff0:	d0f9      	beq.n	800cfe6 <__sflush_r+0x1a>
 800cff2:	2300      	movs	r3, #0
 800cff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cff8:	682f      	ldr	r7, [r5, #0]
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	d032      	beq.n	800d064 <__sflush_r+0x98>
 800cffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	075a      	lsls	r2, r3, #29
 800d004:	d505      	bpl.n	800d012 <__sflush_r+0x46>
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	1ac0      	subs	r0, r0, r3
 800d00a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d00c:	b10b      	cbz	r3, 800d012 <__sflush_r+0x46>
 800d00e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d010:	1ac0      	subs	r0, r0, r3
 800d012:	2300      	movs	r3, #0
 800d014:	4602      	mov	r2, r0
 800d016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d018:	6a21      	ldr	r1, [r4, #32]
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b0      	blx	r6
 800d01e:	1c43      	adds	r3, r0, #1
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	d106      	bne.n	800d032 <__sflush_r+0x66>
 800d024:	6829      	ldr	r1, [r5, #0]
 800d026:	291d      	cmp	r1, #29
 800d028:	d82c      	bhi.n	800d084 <__sflush_r+0xb8>
 800d02a:	4a2a      	ldr	r2, [pc, #168]	; (800d0d4 <__sflush_r+0x108>)
 800d02c:	40ca      	lsrs	r2, r1
 800d02e:	07d6      	lsls	r6, r2, #31
 800d030:	d528      	bpl.n	800d084 <__sflush_r+0xb8>
 800d032:	2200      	movs	r2, #0
 800d034:	6062      	str	r2, [r4, #4]
 800d036:	04d9      	lsls	r1, r3, #19
 800d038:	6922      	ldr	r2, [r4, #16]
 800d03a:	6022      	str	r2, [r4, #0]
 800d03c:	d504      	bpl.n	800d048 <__sflush_r+0x7c>
 800d03e:	1c42      	adds	r2, r0, #1
 800d040:	d101      	bne.n	800d046 <__sflush_r+0x7a>
 800d042:	682b      	ldr	r3, [r5, #0]
 800d044:	b903      	cbnz	r3, 800d048 <__sflush_r+0x7c>
 800d046:	6560      	str	r0, [r4, #84]	; 0x54
 800d048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d04a:	602f      	str	r7, [r5, #0]
 800d04c:	2900      	cmp	r1, #0
 800d04e:	d0ca      	beq.n	800cfe6 <__sflush_r+0x1a>
 800d050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d054:	4299      	cmp	r1, r3
 800d056:	d002      	beq.n	800d05e <__sflush_r+0x92>
 800d058:	4628      	mov	r0, r5
 800d05a:	f7ff f919 	bl	800c290 <_free_r>
 800d05e:	2000      	movs	r0, #0
 800d060:	6360      	str	r0, [r4, #52]	; 0x34
 800d062:	e7c1      	b.n	800cfe8 <__sflush_r+0x1c>
 800d064:	6a21      	ldr	r1, [r4, #32]
 800d066:	2301      	movs	r3, #1
 800d068:	4628      	mov	r0, r5
 800d06a:	47b0      	blx	r6
 800d06c:	1c41      	adds	r1, r0, #1
 800d06e:	d1c7      	bne.n	800d000 <__sflush_r+0x34>
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0c4      	beq.n	800d000 <__sflush_r+0x34>
 800d076:	2b1d      	cmp	r3, #29
 800d078:	d001      	beq.n	800d07e <__sflush_r+0xb2>
 800d07a:	2b16      	cmp	r3, #22
 800d07c:	d101      	bne.n	800d082 <__sflush_r+0xb6>
 800d07e:	602f      	str	r7, [r5, #0]
 800d080:	e7b1      	b.n	800cfe6 <__sflush_r+0x1a>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	e7ad      	b.n	800cfe8 <__sflush_r+0x1c>
 800d08c:	690f      	ldr	r7, [r1, #16]
 800d08e:	2f00      	cmp	r7, #0
 800d090:	d0a9      	beq.n	800cfe6 <__sflush_r+0x1a>
 800d092:	0793      	lsls	r3, r2, #30
 800d094:	680e      	ldr	r6, [r1, #0]
 800d096:	bf08      	it	eq
 800d098:	694b      	ldreq	r3, [r1, #20]
 800d09a:	600f      	str	r7, [r1, #0]
 800d09c:	bf18      	it	ne
 800d09e:	2300      	movne	r3, #0
 800d0a0:	eba6 0807 	sub.w	r8, r6, r7
 800d0a4:	608b      	str	r3, [r1, #8]
 800d0a6:	f1b8 0f00 	cmp.w	r8, #0
 800d0aa:	dd9c      	ble.n	800cfe6 <__sflush_r+0x1a>
 800d0ac:	6a21      	ldr	r1, [r4, #32]
 800d0ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0b0:	4643      	mov	r3, r8
 800d0b2:	463a      	mov	r2, r7
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	47b0      	blx	r6
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	dc06      	bgt.n	800d0ca <__sflush_r+0xfe>
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c8:	e78e      	b.n	800cfe8 <__sflush_r+0x1c>
 800d0ca:	4407      	add	r7, r0
 800d0cc:	eba8 0800 	sub.w	r8, r8, r0
 800d0d0:	e7e9      	b.n	800d0a6 <__sflush_r+0xda>
 800d0d2:	bf00      	nop
 800d0d4:	20400001 	.word	0x20400001

0800d0d8 <_fflush_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	690b      	ldr	r3, [r1, #16]
 800d0dc:	4605      	mov	r5, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	b913      	cbnz	r3, 800d0e8 <_fflush_r+0x10>
 800d0e2:	2500      	movs	r5, #0
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	b118      	cbz	r0, 800d0f2 <_fflush_r+0x1a>
 800d0ea:	6983      	ldr	r3, [r0, #24]
 800d0ec:	b90b      	cbnz	r3, 800d0f2 <_fflush_r+0x1a>
 800d0ee:	f000 f887 	bl	800d200 <__sinit>
 800d0f2:	4b14      	ldr	r3, [pc, #80]	; (800d144 <_fflush_r+0x6c>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	d11b      	bne.n	800d130 <_fflush_r+0x58>
 800d0f8:	686c      	ldr	r4, [r5, #4]
 800d0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d0ef      	beq.n	800d0e2 <_fflush_r+0xa>
 800d102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d104:	07d0      	lsls	r0, r2, #31
 800d106:	d404      	bmi.n	800d112 <_fflush_r+0x3a>
 800d108:	0599      	lsls	r1, r3, #22
 800d10a:	d402      	bmi.n	800d112 <_fflush_r+0x3a>
 800d10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d10e:	f000 f927 	bl	800d360 <__retarget_lock_acquire_recursive>
 800d112:	4628      	mov	r0, r5
 800d114:	4621      	mov	r1, r4
 800d116:	f7ff ff59 	bl	800cfcc <__sflush_r>
 800d11a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d11c:	07da      	lsls	r2, r3, #31
 800d11e:	4605      	mov	r5, r0
 800d120:	d4e0      	bmi.n	800d0e4 <_fflush_r+0xc>
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	059b      	lsls	r3, r3, #22
 800d126:	d4dd      	bmi.n	800d0e4 <_fflush_r+0xc>
 800d128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d12a:	f000 f91a 	bl	800d362 <__retarget_lock_release_recursive>
 800d12e:	e7d9      	b.n	800d0e4 <_fflush_r+0xc>
 800d130:	4b05      	ldr	r3, [pc, #20]	; (800d148 <_fflush_r+0x70>)
 800d132:	429c      	cmp	r4, r3
 800d134:	d101      	bne.n	800d13a <_fflush_r+0x62>
 800d136:	68ac      	ldr	r4, [r5, #8]
 800d138:	e7df      	b.n	800d0fa <_fflush_r+0x22>
 800d13a:	4b04      	ldr	r3, [pc, #16]	; (800d14c <_fflush_r+0x74>)
 800d13c:	429c      	cmp	r4, r3
 800d13e:	bf08      	it	eq
 800d140:	68ec      	ldreq	r4, [r5, #12]
 800d142:	e7da      	b.n	800d0fa <_fflush_r+0x22>
 800d144:	0800df34 	.word	0x0800df34
 800d148:	0800df54 	.word	0x0800df54
 800d14c:	0800df14 	.word	0x0800df14

0800d150 <std>:
 800d150:	2300      	movs	r3, #0
 800d152:	b510      	push	{r4, lr}
 800d154:	4604      	mov	r4, r0
 800d156:	e9c0 3300 	strd	r3, r3, [r0]
 800d15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d15e:	6083      	str	r3, [r0, #8]
 800d160:	8181      	strh	r1, [r0, #12]
 800d162:	6643      	str	r3, [r0, #100]	; 0x64
 800d164:	81c2      	strh	r2, [r0, #14]
 800d166:	6183      	str	r3, [r0, #24]
 800d168:	4619      	mov	r1, r3
 800d16a:	2208      	movs	r2, #8
 800d16c:	305c      	adds	r0, #92	; 0x5c
 800d16e:	f7fb fb8f 	bl	8008890 <memset>
 800d172:	4b05      	ldr	r3, [pc, #20]	; (800d188 <std+0x38>)
 800d174:	6263      	str	r3, [r4, #36]	; 0x24
 800d176:	4b05      	ldr	r3, [pc, #20]	; (800d18c <std+0x3c>)
 800d178:	62a3      	str	r3, [r4, #40]	; 0x28
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <std+0x40>)
 800d17c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <std+0x44>)
 800d180:	6224      	str	r4, [r4, #32]
 800d182:	6323      	str	r3, [r4, #48]	; 0x30
 800d184:	bd10      	pop	{r4, pc}
 800d186:	bf00      	nop
 800d188:	08009639 	.word	0x08009639
 800d18c:	0800965f 	.word	0x0800965f
 800d190:	08009697 	.word	0x08009697
 800d194:	080096bb 	.word	0x080096bb

0800d198 <_cleanup_r>:
 800d198:	4901      	ldr	r1, [pc, #4]	; (800d1a0 <_cleanup_r+0x8>)
 800d19a:	f000 b8c1 	b.w	800d320 <_fwalk_reent>
 800d19e:	bf00      	nop
 800d1a0:	0800d0d9 	.word	0x0800d0d9

0800d1a4 <__sfmoreglue>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	2268      	movs	r2, #104	; 0x68
 800d1a8:	1e4d      	subs	r5, r1, #1
 800d1aa:	4355      	muls	r5, r2
 800d1ac:	460e      	mov	r6, r1
 800d1ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1b2:	f7ff f8d9 	bl	800c368 <_malloc_r>
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	b140      	cbz	r0, 800d1cc <__sfmoreglue+0x28>
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d1c0:	300c      	adds	r0, #12
 800d1c2:	60a0      	str	r0, [r4, #8]
 800d1c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1c8:	f7fb fb62 	bl	8008890 <memset>
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}

0800d1d0 <__sfp_lock_acquire>:
 800d1d0:	4801      	ldr	r0, [pc, #4]	; (800d1d8 <__sfp_lock_acquire+0x8>)
 800d1d2:	f000 b8c5 	b.w	800d360 <__retarget_lock_acquire_recursive>
 800d1d6:	bf00      	nop
 800d1d8:	20000549 	.word	0x20000549

0800d1dc <__sfp_lock_release>:
 800d1dc:	4801      	ldr	r0, [pc, #4]	; (800d1e4 <__sfp_lock_release+0x8>)
 800d1de:	f000 b8c0 	b.w	800d362 <__retarget_lock_release_recursive>
 800d1e2:	bf00      	nop
 800d1e4:	20000549 	.word	0x20000549

0800d1e8 <__sinit_lock_acquire>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	; (800d1f0 <__sinit_lock_acquire+0x8>)
 800d1ea:	f000 b8b9 	b.w	800d360 <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	2000054a 	.word	0x2000054a

0800d1f4 <__sinit_lock_release>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__sinit_lock_release+0x8>)
 800d1f6:	f000 b8b4 	b.w	800d362 <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	2000054a 	.word	0x2000054a

0800d200 <__sinit>:
 800d200:	b510      	push	{r4, lr}
 800d202:	4604      	mov	r4, r0
 800d204:	f7ff fff0 	bl	800d1e8 <__sinit_lock_acquire>
 800d208:	69a3      	ldr	r3, [r4, #24]
 800d20a:	b11b      	cbz	r3, 800d214 <__sinit+0x14>
 800d20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d210:	f7ff bff0 	b.w	800d1f4 <__sinit_lock_release>
 800d214:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d218:	6523      	str	r3, [r4, #80]	; 0x50
 800d21a:	4b13      	ldr	r3, [pc, #76]	; (800d268 <__sinit+0x68>)
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <__sinit+0x6c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	62a2      	str	r2, [r4, #40]	; 0x28
 800d222:	42a3      	cmp	r3, r4
 800d224:	bf04      	itt	eq
 800d226:	2301      	moveq	r3, #1
 800d228:	61a3      	streq	r3, [r4, #24]
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 f820 	bl	800d270 <__sfp>
 800d230:	6060      	str	r0, [r4, #4]
 800d232:	4620      	mov	r0, r4
 800d234:	f000 f81c 	bl	800d270 <__sfp>
 800d238:	60a0      	str	r0, [r4, #8]
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 f818 	bl	800d270 <__sfp>
 800d240:	2200      	movs	r2, #0
 800d242:	60e0      	str	r0, [r4, #12]
 800d244:	2104      	movs	r1, #4
 800d246:	6860      	ldr	r0, [r4, #4]
 800d248:	f7ff ff82 	bl	800d150 <std>
 800d24c:	68a0      	ldr	r0, [r4, #8]
 800d24e:	2201      	movs	r2, #1
 800d250:	2109      	movs	r1, #9
 800d252:	f7ff ff7d 	bl	800d150 <std>
 800d256:	68e0      	ldr	r0, [r4, #12]
 800d258:	2202      	movs	r2, #2
 800d25a:	2112      	movs	r1, #18
 800d25c:	f7ff ff78 	bl	800d150 <std>
 800d260:	2301      	movs	r3, #1
 800d262:	61a3      	str	r3, [r4, #24]
 800d264:	e7d2      	b.n	800d20c <__sinit+0xc>
 800d266:	bf00      	nop
 800d268:	0800dab8 	.word	0x0800dab8
 800d26c:	0800d199 	.word	0x0800d199

0800d270 <__sfp>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	4607      	mov	r7, r0
 800d274:	f7ff ffac 	bl	800d1d0 <__sfp_lock_acquire>
 800d278:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <__sfp+0x84>)
 800d27a:	681e      	ldr	r6, [r3, #0]
 800d27c:	69b3      	ldr	r3, [r6, #24]
 800d27e:	b913      	cbnz	r3, 800d286 <__sfp+0x16>
 800d280:	4630      	mov	r0, r6
 800d282:	f7ff ffbd 	bl	800d200 <__sinit>
 800d286:	3648      	adds	r6, #72	; 0x48
 800d288:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d28c:	3b01      	subs	r3, #1
 800d28e:	d503      	bpl.n	800d298 <__sfp+0x28>
 800d290:	6833      	ldr	r3, [r6, #0]
 800d292:	b30b      	cbz	r3, 800d2d8 <__sfp+0x68>
 800d294:	6836      	ldr	r6, [r6, #0]
 800d296:	e7f7      	b.n	800d288 <__sfp+0x18>
 800d298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d29c:	b9d5      	cbnz	r5, 800d2d4 <__sfp+0x64>
 800d29e:	4b16      	ldr	r3, [pc, #88]	; (800d2f8 <__sfp+0x88>)
 800d2a0:	60e3      	str	r3, [r4, #12]
 800d2a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2a6:	6665      	str	r5, [r4, #100]	; 0x64
 800d2a8:	f000 f859 	bl	800d35e <__retarget_lock_init_recursive>
 800d2ac:	f7ff ff96 	bl	800d1dc <__sfp_lock_release>
 800d2b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2b8:	6025      	str	r5, [r4, #0]
 800d2ba:	61a5      	str	r5, [r4, #24]
 800d2bc:	2208      	movs	r2, #8
 800d2be:	4629      	mov	r1, r5
 800d2c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2c4:	f7fb fae4 	bl	8008890 <memset>
 800d2c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d4:	3468      	adds	r4, #104	; 0x68
 800d2d6:	e7d9      	b.n	800d28c <__sfp+0x1c>
 800d2d8:	2104      	movs	r1, #4
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7ff ff62 	bl	800d1a4 <__sfmoreglue>
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	6030      	str	r0, [r6, #0]
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d1d5      	bne.n	800d294 <__sfp+0x24>
 800d2e8:	f7ff ff78 	bl	800d1dc <__sfp_lock_release>
 800d2ec:	230c      	movs	r3, #12
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	e7ee      	b.n	800d2d0 <__sfp+0x60>
 800d2f2:	bf00      	nop
 800d2f4:	0800dab8 	.word	0x0800dab8
 800d2f8:	ffff0001 	.word	0xffff0001

0800d2fc <fiprintf>:
 800d2fc:	b40e      	push	{r1, r2, r3}
 800d2fe:	b503      	push	{r0, r1, lr}
 800d300:	4601      	mov	r1, r0
 800d302:	ab03      	add	r3, sp, #12
 800d304:	4805      	ldr	r0, [pc, #20]	; (800d31c <fiprintf+0x20>)
 800d306:	f853 2b04 	ldr.w	r2, [r3], #4
 800d30a:	6800      	ldr	r0, [r0, #0]
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	f000 f8a7 	bl	800d460 <_vfiprintf_r>
 800d312:	b002      	add	sp, #8
 800d314:	f85d eb04 	ldr.w	lr, [sp], #4
 800d318:	b003      	add	sp, #12
 800d31a:	4770      	bx	lr
 800d31c:	200000a8 	.word	0x200000a8

0800d320 <_fwalk_reent>:
 800d320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d324:	4606      	mov	r6, r0
 800d326:	4688      	mov	r8, r1
 800d328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d32c:	2700      	movs	r7, #0
 800d32e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d332:	f1b9 0901 	subs.w	r9, r9, #1
 800d336:	d505      	bpl.n	800d344 <_fwalk_reent+0x24>
 800d338:	6824      	ldr	r4, [r4, #0]
 800d33a:	2c00      	cmp	r4, #0
 800d33c:	d1f7      	bne.n	800d32e <_fwalk_reent+0xe>
 800d33e:	4638      	mov	r0, r7
 800d340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d344:	89ab      	ldrh	r3, [r5, #12]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d907      	bls.n	800d35a <_fwalk_reent+0x3a>
 800d34a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d34e:	3301      	adds	r3, #1
 800d350:	d003      	beq.n	800d35a <_fwalk_reent+0x3a>
 800d352:	4629      	mov	r1, r5
 800d354:	4630      	mov	r0, r6
 800d356:	47c0      	blx	r8
 800d358:	4307      	orrs	r7, r0
 800d35a:	3568      	adds	r5, #104	; 0x68
 800d35c:	e7e9      	b.n	800d332 <_fwalk_reent+0x12>

0800d35e <__retarget_lock_init_recursive>:
 800d35e:	4770      	bx	lr

0800d360 <__retarget_lock_acquire_recursive>:
 800d360:	4770      	bx	lr

0800d362 <__retarget_lock_release_recursive>:
 800d362:	4770      	bx	lr

0800d364 <memmove>:
 800d364:	4288      	cmp	r0, r1
 800d366:	b510      	push	{r4, lr}
 800d368:	eb01 0402 	add.w	r4, r1, r2
 800d36c:	d902      	bls.n	800d374 <memmove+0x10>
 800d36e:	4284      	cmp	r4, r0
 800d370:	4623      	mov	r3, r4
 800d372:	d807      	bhi.n	800d384 <memmove+0x20>
 800d374:	1e43      	subs	r3, r0, #1
 800d376:	42a1      	cmp	r1, r4
 800d378:	d008      	beq.n	800d38c <memmove+0x28>
 800d37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d382:	e7f8      	b.n	800d376 <memmove+0x12>
 800d384:	4402      	add	r2, r0
 800d386:	4601      	mov	r1, r0
 800d388:	428a      	cmp	r2, r1
 800d38a:	d100      	bne.n	800d38e <memmove+0x2a>
 800d38c:	bd10      	pop	{r4, pc}
 800d38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d396:	e7f7      	b.n	800d388 <memmove+0x24>

0800d398 <__malloc_lock>:
 800d398:	4801      	ldr	r0, [pc, #4]	; (800d3a0 <__malloc_lock+0x8>)
 800d39a:	f7ff bfe1 	b.w	800d360 <__retarget_lock_acquire_recursive>
 800d39e:	bf00      	nop
 800d3a0:	20000548 	.word	0x20000548

0800d3a4 <__malloc_unlock>:
 800d3a4:	4801      	ldr	r0, [pc, #4]	; (800d3ac <__malloc_unlock+0x8>)
 800d3a6:	f7ff bfdc 	b.w	800d362 <__retarget_lock_release_recursive>
 800d3aa:	bf00      	nop
 800d3ac:	20000548 	.word	0x20000548

0800d3b0 <_realloc_r>:
 800d3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b4:	4680      	mov	r8, r0
 800d3b6:	4614      	mov	r4, r2
 800d3b8:	460e      	mov	r6, r1
 800d3ba:	b921      	cbnz	r1, 800d3c6 <_realloc_r+0x16>
 800d3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	f7fe bfd1 	b.w	800c368 <_malloc_r>
 800d3c6:	b92a      	cbnz	r2, 800d3d4 <_realloc_r+0x24>
 800d3c8:	f7fe ff62 	bl	800c290 <_free_r>
 800d3cc:	4625      	mov	r5, r4
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	f000 faa0 	bl	800d918 <_malloc_usable_size_r>
 800d3d8:	4284      	cmp	r4, r0
 800d3da:	4607      	mov	r7, r0
 800d3dc:	d802      	bhi.n	800d3e4 <_realloc_r+0x34>
 800d3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3e2:	d812      	bhi.n	800d40a <_realloc_r+0x5a>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	f7fe ffbe 	bl	800c368 <_malloc_r>
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d0ed      	beq.n	800d3ce <_realloc_r+0x1e>
 800d3f2:	42bc      	cmp	r4, r7
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	bf28      	it	cs
 800d3fa:	463a      	movcs	r2, r7
 800d3fc:	f7fe fa62 	bl	800b8c4 <memcpy>
 800d400:	4631      	mov	r1, r6
 800d402:	4640      	mov	r0, r8
 800d404:	f7fe ff44 	bl	800c290 <_free_r>
 800d408:	e7e1      	b.n	800d3ce <_realloc_r+0x1e>
 800d40a:	4635      	mov	r5, r6
 800d40c:	e7df      	b.n	800d3ce <_realloc_r+0x1e>

0800d40e <__sfputc_r>:
 800d40e:	6893      	ldr	r3, [r2, #8]
 800d410:	3b01      	subs	r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	b410      	push	{r4}
 800d416:	6093      	str	r3, [r2, #8]
 800d418:	da08      	bge.n	800d42c <__sfputc_r+0x1e>
 800d41a:	6994      	ldr	r4, [r2, #24]
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	db01      	blt.n	800d424 <__sfputc_r+0x16>
 800d420:	290a      	cmp	r1, #10
 800d422:	d103      	bne.n	800d42c <__sfputc_r+0x1e>
 800d424:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d428:	f000 b94a 	b.w	800d6c0 <__swbuf_r>
 800d42c:	6813      	ldr	r3, [r2, #0]
 800d42e:	1c58      	adds	r0, r3, #1
 800d430:	6010      	str	r0, [r2, #0]
 800d432:	7019      	strb	r1, [r3, #0]
 800d434:	4608      	mov	r0, r1
 800d436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <__sfputs_r>:
 800d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43e:	4606      	mov	r6, r0
 800d440:	460f      	mov	r7, r1
 800d442:	4614      	mov	r4, r2
 800d444:	18d5      	adds	r5, r2, r3
 800d446:	42ac      	cmp	r4, r5
 800d448:	d101      	bne.n	800d44e <__sfputs_r+0x12>
 800d44a:	2000      	movs	r0, #0
 800d44c:	e007      	b.n	800d45e <__sfputs_r+0x22>
 800d44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d452:	463a      	mov	r2, r7
 800d454:	4630      	mov	r0, r6
 800d456:	f7ff ffda 	bl	800d40e <__sfputc_r>
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	d1f3      	bne.n	800d446 <__sfputs_r+0xa>
 800d45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d460 <_vfiprintf_r>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	460d      	mov	r5, r1
 800d466:	b09d      	sub	sp, #116	; 0x74
 800d468:	4614      	mov	r4, r2
 800d46a:	4698      	mov	r8, r3
 800d46c:	4606      	mov	r6, r0
 800d46e:	b118      	cbz	r0, 800d478 <_vfiprintf_r+0x18>
 800d470:	6983      	ldr	r3, [r0, #24]
 800d472:	b90b      	cbnz	r3, 800d478 <_vfiprintf_r+0x18>
 800d474:	f7ff fec4 	bl	800d200 <__sinit>
 800d478:	4b89      	ldr	r3, [pc, #548]	; (800d6a0 <_vfiprintf_r+0x240>)
 800d47a:	429d      	cmp	r5, r3
 800d47c:	d11b      	bne.n	800d4b6 <_vfiprintf_r+0x56>
 800d47e:	6875      	ldr	r5, [r6, #4]
 800d480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d405      	bmi.n	800d492 <_vfiprintf_r+0x32>
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	059a      	lsls	r2, r3, #22
 800d48a:	d402      	bmi.n	800d492 <_vfiprintf_r+0x32>
 800d48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d48e:	f7ff ff67 	bl	800d360 <__retarget_lock_acquire_recursive>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	071b      	lsls	r3, r3, #28
 800d496:	d501      	bpl.n	800d49c <_vfiprintf_r+0x3c>
 800d498:	692b      	ldr	r3, [r5, #16]
 800d49a:	b9eb      	cbnz	r3, 800d4d8 <_vfiprintf_r+0x78>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f960 	bl	800d764 <__swsetup_r>
 800d4a4:	b1c0      	cbz	r0, 800d4d8 <_vfiprintf_r+0x78>
 800d4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a8:	07dc      	lsls	r4, r3, #31
 800d4aa:	d50e      	bpl.n	800d4ca <_vfiprintf_r+0x6a>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	b01d      	add	sp, #116	; 0x74
 800d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b6:	4b7b      	ldr	r3, [pc, #492]	; (800d6a4 <_vfiprintf_r+0x244>)
 800d4b8:	429d      	cmp	r5, r3
 800d4ba:	d101      	bne.n	800d4c0 <_vfiprintf_r+0x60>
 800d4bc:	68b5      	ldr	r5, [r6, #8]
 800d4be:	e7df      	b.n	800d480 <_vfiprintf_r+0x20>
 800d4c0:	4b79      	ldr	r3, [pc, #484]	; (800d6a8 <_vfiprintf_r+0x248>)
 800d4c2:	429d      	cmp	r5, r3
 800d4c4:	bf08      	it	eq
 800d4c6:	68f5      	ldreq	r5, [r6, #12]
 800d4c8:	e7da      	b.n	800d480 <_vfiprintf_r+0x20>
 800d4ca:	89ab      	ldrh	r3, [r5, #12]
 800d4cc:	0598      	lsls	r0, r3, #22
 800d4ce:	d4ed      	bmi.n	800d4ac <_vfiprintf_r+0x4c>
 800d4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4d2:	f7ff ff46 	bl	800d362 <__retarget_lock_release_recursive>
 800d4d6:	e7e9      	b.n	800d4ac <_vfiprintf_r+0x4c>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9309      	str	r3, [sp, #36]	; 0x24
 800d4dc:	2320      	movs	r3, #32
 800d4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4e6:	2330      	movs	r3, #48	; 0x30
 800d4e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6ac <_vfiprintf_r+0x24c>
 800d4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4f0:	f04f 0901 	mov.w	r9, #1
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	469a      	mov	sl, r3
 800d4f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4fc:	b10a      	cbz	r2, 800d502 <_vfiprintf_r+0xa2>
 800d4fe:	2a25      	cmp	r2, #37	; 0x25
 800d500:	d1f9      	bne.n	800d4f6 <_vfiprintf_r+0x96>
 800d502:	ebba 0b04 	subs.w	fp, sl, r4
 800d506:	d00b      	beq.n	800d520 <_vfiprintf_r+0xc0>
 800d508:	465b      	mov	r3, fp
 800d50a:	4622      	mov	r2, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ff94 	bl	800d43c <__sfputs_r>
 800d514:	3001      	adds	r0, #1
 800d516:	f000 80aa 	beq.w	800d66e <_vfiprintf_r+0x20e>
 800d51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d51c:	445a      	add	r2, fp
 800d51e:	9209      	str	r2, [sp, #36]	; 0x24
 800d520:	f89a 3000 	ldrb.w	r3, [sl]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f000 80a2 	beq.w	800d66e <_vfiprintf_r+0x20e>
 800d52a:	2300      	movs	r3, #0
 800d52c:	f04f 32ff 	mov.w	r2, #4294967295
 800d530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d534:	f10a 0a01 	add.w	sl, sl, #1
 800d538:	9304      	str	r3, [sp, #16]
 800d53a:	9307      	str	r3, [sp, #28]
 800d53c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d540:	931a      	str	r3, [sp, #104]	; 0x68
 800d542:	4654      	mov	r4, sl
 800d544:	2205      	movs	r2, #5
 800d546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54a:	4858      	ldr	r0, [pc, #352]	; (800d6ac <_vfiprintf_r+0x24c>)
 800d54c:	f7f2 fe68 	bl	8000220 <memchr>
 800d550:	9a04      	ldr	r2, [sp, #16]
 800d552:	b9d8      	cbnz	r0, 800d58c <_vfiprintf_r+0x12c>
 800d554:	06d1      	lsls	r1, r2, #27
 800d556:	bf44      	itt	mi
 800d558:	2320      	movmi	r3, #32
 800d55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d55e:	0713      	lsls	r3, r2, #28
 800d560:	bf44      	itt	mi
 800d562:	232b      	movmi	r3, #43	; 0x2b
 800d564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d568:	f89a 3000 	ldrb.w	r3, [sl]
 800d56c:	2b2a      	cmp	r3, #42	; 0x2a
 800d56e:	d015      	beq.n	800d59c <_vfiprintf_r+0x13c>
 800d570:	9a07      	ldr	r2, [sp, #28]
 800d572:	4654      	mov	r4, sl
 800d574:	2000      	movs	r0, #0
 800d576:	f04f 0c0a 	mov.w	ip, #10
 800d57a:	4621      	mov	r1, r4
 800d57c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d580:	3b30      	subs	r3, #48	; 0x30
 800d582:	2b09      	cmp	r3, #9
 800d584:	d94e      	bls.n	800d624 <_vfiprintf_r+0x1c4>
 800d586:	b1b0      	cbz	r0, 800d5b6 <_vfiprintf_r+0x156>
 800d588:	9207      	str	r2, [sp, #28]
 800d58a:	e014      	b.n	800d5b6 <_vfiprintf_r+0x156>
 800d58c:	eba0 0308 	sub.w	r3, r0, r8
 800d590:	fa09 f303 	lsl.w	r3, r9, r3
 800d594:	4313      	orrs	r3, r2
 800d596:	9304      	str	r3, [sp, #16]
 800d598:	46a2      	mov	sl, r4
 800d59a:	e7d2      	b.n	800d542 <_vfiprintf_r+0xe2>
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	1d19      	adds	r1, r3, #4
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	9103      	str	r1, [sp, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	bfbb      	ittet	lt
 800d5a8:	425b      	neglt	r3, r3
 800d5aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d5ae:	9307      	strge	r3, [sp, #28]
 800d5b0:	9307      	strlt	r3, [sp, #28]
 800d5b2:	bfb8      	it	lt
 800d5b4:	9204      	strlt	r2, [sp, #16]
 800d5b6:	7823      	ldrb	r3, [r4, #0]
 800d5b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d5ba:	d10c      	bne.n	800d5d6 <_vfiprintf_r+0x176>
 800d5bc:	7863      	ldrb	r3, [r4, #1]
 800d5be:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c0:	d135      	bne.n	800d62e <_vfiprintf_r+0x1ce>
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	9203      	str	r2, [sp, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bfb8      	it	lt
 800d5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5d2:	3402      	adds	r4, #2
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d6bc <_vfiprintf_r+0x25c>
 800d5da:	7821      	ldrb	r1, [r4, #0]
 800d5dc:	2203      	movs	r2, #3
 800d5de:	4650      	mov	r0, sl
 800d5e0:	f7f2 fe1e 	bl	8000220 <memchr>
 800d5e4:	b140      	cbz	r0, 800d5f8 <_vfiprintf_r+0x198>
 800d5e6:	2340      	movs	r3, #64	; 0x40
 800d5e8:	eba0 000a 	sub.w	r0, r0, sl
 800d5ec:	fa03 f000 	lsl.w	r0, r3, r0
 800d5f0:	9b04      	ldr	r3, [sp, #16]
 800d5f2:	4303      	orrs	r3, r0
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fc:	482c      	ldr	r0, [pc, #176]	; (800d6b0 <_vfiprintf_r+0x250>)
 800d5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d602:	2206      	movs	r2, #6
 800d604:	f7f2 fe0c 	bl	8000220 <memchr>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d03f      	beq.n	800d68c <_vfiprintf_r+0x22c>
 800d60c:	4b29      	ldr	r3, [pc, #164]	; (800d6b4 <_vfiprintf_r+0x254>)
 800d60e:	bb1b      	cbnz	r3, 800d658 <_vfiprintf_r+0x1f8>
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	3307      	adds	r3, #7
 800d614:	f023 0307 	bic.w	r3, r3, #7
 800d618:	3308      	adds	r3, #8
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61e:	443b      	add	r3, r7
 800d620:	9309      	str	r3, [sp, #36]	; 0x24
 800d622:	e767      	b.n	800d4f4 <_vfiprintf_r+0x94>
 800d624:	fb0c 3202 	mla	r2, ip, r2, r3
 800d628:	460c      	mov	r4, r1
 800d62a:	2001      	movs	r0, #1
 800d62c:	e7a5      	b.n	800d57a <_vfiprintf_r+0x11a>
 800d62e:	2300      	movs	r3, #0
 800d630:	3401      	adds	r4, #1
 800d632:	9305      	str	r3, [sp, #20]
 800d634:	4619      	mov	r1, r3
 800d636:	f04f 0c0a 	mov.w	ip, #10
 800d63a:	4620      	mov	r0, r4
 800d63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d640:	3a30      	subs	r2, #48	; 0x30
 800d642:	2a09      	cmp	r2, #9
 800d644:	d903      	bls.n	800d64e <_vfiprintf_r+0x1ee>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0c5      	beq.n	800d5d6 <_vfiprintf_r+0x176>
 800d64a:	9105      	str	r1, [sp, #20]
 800d64c:	e7c3      	b.n	800d5d6 <_vfiprintf_r+0x176>
 800d64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d652:	4604      	mov	r4, r0
 800d654:	2301      	movs	r3, #1
 800d656:	e7f0      	b.n	800d63a <_vfiprintf_r+0x1da>
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462a      	mov	r2, r5
 800d65e:	4b16      	ldr	r3, [pc, #88]	; (800d6b8 <_vfiprintf_r+0x258>)
 800d660:	a904      	add	r1, sp, #16
 800d662:	4630      	mov	r0, r6
 800d664:	f7fb f9bc 	bl	80089e0 <_printf_float>
 800d668:	4607      	mov	r7, r0
 800d66a:	1c78      	adds	r0, r7, #1
 800d66c:	d1d6      	bne.n	800d61c <_vfiprintf_r+0x1bc>
 800d66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d670:	07d9      	lsls	r1, r3, #31
 800d672:	d405      	bmi.n	800d680 <_vfiprintf_r+0x220>
 800d674:	89ab      	ldrh	r3, [r5, #12]
 800d676:	059a      	lsls	r2, r3, #22
 800d678:	d402      	bmi.n	800d680 <_vfiprintf_r+0x220>
 800d67a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d67c:	f7ff fe71 	bl	800d362 <__retarget_lock_release_recursive>
 800d680:	89ab      	ldrh	r3, [r5, #12]
 800d682:	065b      	lsls	r3, r3, #25
 800d684:	f53f af12 	bmi.w	800d4ac <_vfiprintf_r+0x4c>
 800d688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d68a:	e711      	b.n	800d4b0 <_vfiprintf_r+0x50>
 800d68c:	ab03      	add	r3, sp, #12
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	462a      	mov	r2, r5
 800d692:	4b09      	ldr	r3, [pc, #36]	; (800d6b8 <_vfiprintf_r+0x258>)
 800d694:	a904      	add	r1, sp, #16
 800d696:	4630      	mov	r0, r6
 800d698:	f7fb fc46 	bl	8008f28 <_printf_i>
 800d69c:	e7e4      	b.n	800d668 <_vfiprintf_r+0x208>
 800d69e:	bf00      	nop
 800d6a0:	0800df34 	.word	0x0800df34
 800d6a4:	0800df54 	.word	0x0800df54
 800d6a8:	0800df14 	.word	0x0800df14
 800d6ac:	0800deac 	.word	0x0800deac
 800d6b0:	0800deb6 	.word	0x0800deb6
 800d6b4:	080089e1 	.word	0x080089e1
 800d6b8:	0800d43d 	.word	0x0800d43d
 800d6bc:	0800deb2 	.word	0x0800deb2

0800d6c0 <__swbuf_r>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	b118      	cbz	r0, 800d6d2 <__swbuf_r+0x12>
 800d6ca:	6983      	ldr	r3, [r0, #24]
 800d6cc:	b90b      	cbnz	r3, 800d6d2 <__swbuf_r+0x12>
 800d6ce:	f7ff fd97 	bl	800d200 <__sinit>
 800d6d2:	4b21      	ldr	r3, [pc, #132]	; (800d758 <__swbuf_r+0x98>)
 800d6d4:	429c      	cmp	r4, r3
 800d6d6:	d12b      	bne.n	800d730 <__swbuf_r+0x70>
 800d6d8:	686c      	ldr	r4, [r5, #4]
 800d6da:	69a3      	ldr	r3, [r4, #24]
 800d6dc:	60a3      	str	r3, [r4, #8]
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	071a      	lsls	r2, r3, #28
 800d6e2:	d52f      	bpl.n	800d744 <__swbuf_r+0x84>
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	b36b      	cbz	r3, 800d744 <__swbuf_r+0x84>
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	6820      	ldr	r0, [r4, #0]
 800d6ec:	1ac0      	subs	r0, r0, r3
 800d6ee:	6963      	ldr	r3, [r4, #20]
 800d6f0:	b2f6      	uxtb	r6, r6
 800d6f2:	4283      	cmp	r3, r0
 800d6f4:	4637      	mov	r7, r6
 800d6f6:	dc04      	bgt.n	800d702 <__swbuf_r+0x42>
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f7ff fcec 	bl	800d0d8 <_fflush_r>
 800d700:	bb30      	cbnz	r0, 800d750 <__swbuf_r+0x90>
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	3b01      	subs	r3, #1
 800d706:	60a3      	str	r3, [r4, #8]
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	6022      	str	r2, [r4, #0]
 800d70e:	701e      	strb	r6, [r3, #0]
 800d710:	6963      	ldr	r3, [r4, #20]
 800d712:	3001      	adds	r0, #1
 800d714:	4283      	cmp	r3, r0
 800d716:	d004      	beq.n	800d722 <__swbuf_r+0x62>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	07db      	lsls	r3, r3, #31
 800d71c:	d506      	bpl.n	800d72c <__swbuf_r+0x6c>
 800d71e:	2e0a      	cmp	r6, #10
 800d720:	d104      	bne.n	800d72c <__swbuf_r+0x6c>
 800d722:	4621      	mov	r1, r4
 800d724:	4628      	mov	r0, r5
 800d726:	f7ff fcd7 	bl	800d0d8 <_fflush_r>
 800d72a:	b988      	cbnz	r0, 800d750 <__swbuf_r+0x90>
 800d72c:	4638      	mov	r0, r7
 800d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <__swbuf_r+0x9c>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d101      	bne.n	800d73a <__swbuf_r+0x7a>
 800d736:	68ac      	ldr	r4, [r5, #8]
 800d738:	e7cf      	b.n	800d6da <__swbuf_r+0x1a>
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <__swbuf_r+0xa0>)
 800d73c:	429c      	cmp	r4, r3
 800d73e:	bf08      	it	eq
 800d740:	68ec      	ldreq	r4, [r5, #12]
 800d742:	e7ca      	b.n	800d6da <__swbuf_r+0x1a>
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f80c 	bl	800d764 <__swsetup_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d0cb      	beq.n	800d6e8 <__swbuf_r+0x28>
 800d750:	f04f 37ff 	mov.w	r7, #4294967295
 800d754:	e7ea      	b.n	800d72c <__swbuf_r+0x6c>
 800d756:	bf00      	nop
 800d758:	0800df34 	.word	0x0800df34
 800d75c:	0800df54 	.word	0x0800df54
 800d760:	0800df14 	.word	0x0800df14

0800d764 <__swsetup_r>:
 800d764:	4b32      	ldr	r3, [pc, #200]	; (800d830 <__swsetup_r+0xcc>)
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	681d      	ldr	r5, [r3, #0]
 800d76a:	4606      	mov	r6, r0
 800d76c:	460c      	mov	r4, r1
 800d76e:	b125      	cbz	r5, 800d77a <__swsetup_r+0x16>
 800d770:	69ab      	ldr	r3, [r5, #24]
 800d772:	b913      	cbnz	r3, 800d77a <__swsetup_r+0x16>
 800d774:	4628      	mov	r0, r5
 800d776:	f7ff fd43 	bl	800d200 <__sinit>
 800d77a:	4b2e      	ldr	r3, [pc, #184]	; (800d834 <__swsetup_r+0xd0>)
 800d77c:	429c      	cmp	r4, r3
 800d77e:	d10f      	bne.n	800d7a0 <__swsetup_r+0x3c>
 800d780:	686c      	ldr	r4, [r5, #4]
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d788:	0719      	lsls	r1, r3, #28
 800d78a:	d42c      	bmi.n	800d7e6 <__swsetup_r+0x82>
 800d78c:	06dd      	lsls	r5, r3, #27
 800d78e:	d411      	bmi.n	800d7b4 <__swsetup_r+0x50>
 800d790:	2309      	movs	r3, #9
 800d792:	6033      	str	r3, [r6, #0]
 800d794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	f04f 30ff 	mov.w	r0, #4294967295
 800d79e:	e03e      	b.n	800d81e <__swsetup_r+0xba>
 800d7a0:	4b25      	ldr	r3, [pc, #148]	; (800d838 <__swsetup_r+0xd4>)
 800d7a2:	429c      	cmp	r4, r3
 800d7a4:	d101      	bne.n	800d7aa <__swsetup_r+0x46>
 800d7a6:	68ac      	ldr	r4, [r5, #8]
 800d7a8:	e7eb      	b.n	800d782 <__swsetup_r+0x1e>
 800d7aa:	4b24      	ldr	r3, [pc, #144]	; (800d83c <__swsetup_r+0xd8>)
 800d7ac:	429c      	cmp	r4, r3
 800d7ae:	bf08      	it	eq
 800d7b0:	68ec      	ldreq	r4, [r5, #12]
 800d7b2:	e7e6      	b.n	800d782 <__swsetup_r+0x1e>
 800d7b4:	0758      	lsls	r0, r3, #29
 800d7b6:	d512      	bpl.n	800d7de <__swsetup_r+0x7a>
 800d7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ba:	b141      	cbz	r1, 800d7ce <__swsetup_r+0x6a>
 800d7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	d002      	beq.n	800d7ca <__swsetup_r+0x66>
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f7fe fd63 	bl	800c290 <_free_r>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	6363      	str	r3, [r4, #52]	; 0x34
 800d7ce:	89a3      	ldrh	r3, [r4, #12]
 800d7d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7d4:	81a3      	strh	r3, [r4, #12]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	6063      	str	r3, [r4, #4]
 800d7da:	6923      	ldr	r3, [r4, #16]
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	f043 0308 	orr.w	r3, r3, #8
 800d7e4:	81a3      	strh	r3, [r4, #12]
 800d7e6:	6923      	ldr	r3, [r4, #16]
 800d7e8:	b94b      	cbnz	r3, 800d7fe <__swsetup_r+0x9a>
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7f4:	d003      	beq.n	800d7fe <__swsetup_r+0x9a>
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f000 f84d 	bl	800d898 <__smakebuf_r>
 800d7fe:	89a0      	ldrh	r0, [r4, #12]
 800d800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d804:	f010 0301 	ands.w	r3, r0, #1
 800d808:	d00a      	beq.n	800d820 <__swsetup_r+0xbc>
 800d80a:	2300      	movs	r3, #0
 800d80c:	60a3      	str	r3, [r4, #8]
 800d80e:	6963      	ldr	r3, [r4, #20]
 800d810:	425b      	negs	r3, r3
 800d812:	61a3      	str	r3, [r4, #24]
 800d814:	6923      	ldr	r3, [r4, #16]
 800d816:	b943      	cbnz	r3, 800d82a <__swsetup_r+0xc6>
 800d818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d81c:	d1ba      	bne.n	800d794 <__swsetup_r+0x30>
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	0781      	lsls	r1, r0, #30
 800d822:	bf58      	it	pl
 800d824:	6963      	ldrpl	r3, [r4, #20]
 800d826:	60a3      	str	r3, [r4, #8]
 800d828:	e7f4      	b.n	800d814 <__swsetup_r+0xb0>
 800d82a:	2000      	movs	r0, #0
 800d82c:	e7f7      	b.n	800d81e <__swsetup_r+0xba>
 800d82e:	bf00      	nop
 800d830:	200000a8 	.word	0x200000a8
 800d834:	0800df34 	.word	0x0800df34
 800d838:	0800df54 	.word	0x0800df54
 800d83c:	0800df14 	.word	0x0800df14

0800d840 <abort>:
 800d840:	b508      	push	{r3, lr}
 800d842:	2006      	movs	r0, #6
 800d844:	f000 f898 	bl	800d978 <raise>
 800d848:	2001      	movs	r0, #1
 800d84a:	f7f5 fb49 	bl	8002ee0 <_exit>

0800d84e <__swhatbuf_r>:
 800d84e:	b570      	push	{r4, r5, r6, lr}
 800d850:	460e      	mov	r6, r1
 800d852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d856:	2900      	cmp	r1, #0
 800d858:	b096      	sub	sp, #88	; 0x58
 800d85a:	4614      	mov	r4, r2
 800d85c:	461d      	mov	r5, r3
 800d85e:	da08      	bge.n	800d872 <__swhatbuf_r+0x24>
 800d860:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	602a      	str	r2, [r5, #0]
 800d868:	061a      	lsls	r2, r3, #24
 800d86a:	d410      	bmi.n	800d88e <__swhatbuf_r+0x40>
 800d86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d870:	e00e      	b.n	800d890 <__swhatbuf_r+0x42>
 800d872:	466a      	mov	r2, sp
 800d874:	f000 f89c 	bl	800d9b0 <_fstat_r>
 800d878:	2800      	cmp	r0, #0
 800d87a:	dbf1      	blt.n	800d860 <__swhatbuf_r+0x12>
 800d87c:	9a01      	ldr	r2, [sp, #4]
 800d87e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d886:	425a      	negs	r2, r3
 800d888:	415a      	adcs	r2, r3
 800d88a:	602a      	str	r2, [r5, #0]
 800d88c:	e7ee      	b.n	800d86c <__swhatbuf_r+0x1e>
 800d88e:	2340      	movs	r3, #64	; 0x40
 800d890:	2000      	movs	r0, #0
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	b016      	add	sp, #88	; 0x58
 800d896:	bd70      	pop	{r4, r5, r6, pc}

0800d898 <__smakebuf_r>:
 800d898:	898b      	ldrh	r3, [r1, #12]
 800d89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d89c:	079d      	lsls	r5, r3, #30
 800d89e:	4606      	mov	r6, r0
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	d507      	bpl.n	800d8b4 <__smakebuf_r+0x1c>
 800d8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	6163      	str	r3, [r4, #20]
 800d8b0:	b002      	add	sp, #8
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	ab01      	add	r3, sp, #4
 800d8b6:	466a      	mov	r2, sp
 800d8b8:	f7ff ffc9 	bl	800d84e <__swhatbuf_r>
 800d8bc:	9900      	ldr	r1, [sp, #0]
 800d8be:	4605      	mov	r5, r0
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f7fe fd51 	bl	800c368 <_malloc_r>
 800d8c6:	b948      	cbnz	r0, 800d8dc <__smakebuf_r+0x44>
 800d8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8cc:	059a      	lsls	r2, r3, #22
 800d8ce:	d4ef      	bmi.n	800d8b0 <__smakebuf_r+0x18>
 800d8d0:	f023 0303 	bic.w	r3, r3, #3
 800d8d4:	f043 0302 	orr.w	r3, r3, #2
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	e7e3      	b.n	800d8a4 <__smakebuf_r+0xc>
 800d8dc:	4b0d      	ldr	r3, [pc, #52]	; (800d914 <__smakebuf_r+0x7c>)
 800d8de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	6020      	str	r0, [r4, #0]
 800d8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	9b00      	ldr	r3, [sp, #0]
 800d8ec:	6163      	str	r3, [r4, #20]
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	6120      	str	r0, [r4, #16]
 800d8f2:	b15b      	cbz	r3, 800d90c <__smakebuf_r+0x74>
 800d8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f000 f86b 	bl	800d9d4 <_isatty_r>
 800d8fe:	b128      	cbz	r0, 800d90c <__smakebuf_r+0x74>
 800d900:	89a3      	ldrh	r3, [r4, #12]
 800d902:	f023 0303 	bic.w	r3, r3, #3
 800d906:	f043 0301 	orr.w	r3, r3, #1
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	89a0      	ldrh	r0, [r4, #12]
 800d90e:	4305      	orrs	r5, r0
 800d910:	81a5      	strh	r5, [r4, #12]
 800d912:	e7cd      	b.n	800d8b0 <__smakebuf_r+0x18>
 800d914:	0800d199 	.word	0x0800d199

0800d918 <_malloc_usable_size_r>:
 800d918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d91c:	1f18      	subs	r0, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfbc      	itt	lt
 800d922:	580b      	ldrlt	r3, [r1, r0]
 800d924:	18c0      	addlt	r0, r0, r3
 800d926:	4770      	bx	lr

0800d928 <_raise_r>:
 800d928:	291f      	cmp	r1, #31
 800d92a:	b538      	push	{r3, r4, r5, lr}
 800d92c:	4604      	mov	r4, r0
 800d92e:	460d      	mov	r5, r1
 800d930:	d904      	bls.n	800d93c <_raise_r+0x14>
 800d932:	2316      	movs	r3, #22
 800d934:	6003      	str	r3, [r0, #0]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
 800d93c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d93e:	b112      	cbz	r2, 800d946 <_raise_r+0x1e>
 800d940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d944:	b94b      	cbnz	r3, 800d95a <_raise_r+0x32>
 800d946:	4620      	mov	r0, r4
 800d948:	f000 f830 	bl	800d9ac <_getpid_r>
 800d94c:	462a      	mov	r2, r5
 800d94e:	4601      	mov	r1, r0
 800d950:	4620      	mov	r0, r4
 800d952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d956:	f000 b817 	b.w	800d988 <_kill_r>
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d00a      	beq.n	800d974 <_raise_r+0x4c>
 800d95e:	1c59      	adds	r1, r3, #1
 800d960:	d103      	bne.n	800d96a <_raise_r+0x42>
 800d962:	2316      	movs	r3, #22
 800d964:	6003      	str	r3, [r0, #0]
 800d966:	2001      	movs	r0, #1
 800d968:	e7e7      	b.n	800d93a <_raise_r+0x12>
 800d96a:	2400      	movs	r4, #0
 800d96c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d970:	4628      	mov	r0, r5
 800d972:	4798      	blx	r3
 800d974:	2000      	movs	r0, #0
 800d976:	e7e0      	b.n	800d93a <_raise_r+0x12>

0800d978 <raise>:
 800d978:	4b02      	ldr	r3, [pc, #8]	; (800d984 <raise+0xc>)
 800d97a:	4601      	mov	r1, r0
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	f7ff bfd3 	b.w	800d928 <_raise_r>
 800d982:	bf00      	nop
 800d984:	200000a8 	.word	0x200000a8

0800d988 <_kill_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d07      	ldr	r5, [pc, #28]	; (800d9a8 <_kill_r+0x20>)
 800d98c:	2300      	movs	r3, #0
 800d98e:	4604      	mov	r4, r0
 800d990:	4608      	mov	r0, r1
 800d992:	4611      	mov	r1, r2
 800d994:	602b      	str	r3, [r5, #0]
 800d996:	f7f5 fa93 	bl	8002ec0 <_kill>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	d102      	bne.n	800d9a4 <_kill_r+0x1c>
 800d99e:	682b      	ldr	r3, [r5, #0]
 800d9a0:	b103      	cbz	r3, 800d9a4 <_kill_r+0x1c>
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	bd38      	pop	{r3, r4, r5, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20000544 	.word	0x20000544

0800d9ac <_getpid_r>:
 800d9ac:	f7f5 ba80 	b.w	8002eb0 <_getpid>

0800d9b0 <_fstat_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4d07      	ldr	r5, [pc, #28]	; (800d9d0 <_fstat_r+0x20>)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	602b      	str	r3, [r5, #0]
 800d9be:	f7f5 fade 	bl	8002f7e <_fstat>
 800d9c2:	1c43      	adds	r3, r0, #1
 800d9c4:	d102      	bne.n	800d9cc <_fstat_r+0x1c>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	b103      	cbz	r3, 800d9cc <_fstat_r+0x1c>
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	bd38      	pop	{r3, r4, r5, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000544 	.word	0x20000544

0800d9d4 <_isatty_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d06      	ldr	r5, [pc, #24]	; (800d9f0 <_isatty_r+0x1c>)
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f5 fadd 	bl	8002f9e <_isatty>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_isatty_r+0x1a>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_isatty_r+0x1a>
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	20000544 	.word	0x20000544

0800d9f4 <_init>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr

0800da00 <_fini>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr
